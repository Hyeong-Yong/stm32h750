
art_pi_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2dc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000571c  0800f580  0800f580  0001f580  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c9c  08014c9c  00040424  2**0
                  CONTENTS
  4 .ARM          00000008  08014c9c  08014c9c  00024c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014ca4  08014ca4  00040424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014ca4  08014ca4  00024ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014ca8  08014ca8  00024ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  24000000  08014cac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ac0  24000204  08014eb0  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000cc4  08014eb0  00030cc4  2**0
                  ALLOC
 11 .non_cache    00000424  38000000  08014eb0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .lcd_buf      00232800  c0000000  c0000000  00050000  2**2
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00040424  2**0
                  CONTENTS, READONLY
 14 .debug_info   000368c6  00000000  00000000  00040452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000822b  00000000  00000000  00076d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bb8  00000000  00000000  0007ef48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002ef8  00000000  00000000  00080b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004369b  00000000  00000000  000839f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00038b52  00000000  00000000  000c7093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0016e30a  00000000  00000000  000ffbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0026deef  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000064e8  00000000  00000000  0026df40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0001de8b  00000000  00000000  00274428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000204 	.word	0x24000204
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f564 	.word	0x0800f564

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000208 	.word	0x24000208
 80002dc:	0800f564 	.word	0x0800f564

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9ac 	b.w	8000a98 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468e      	mov	lr, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d14d      	bne.n	8000872 <__udivmoddi4+0xaa>
 80007d6:	428a      	cmp	r2, r1
 80007d8:	4694      	mov	ip, r2
 80007da:	d969      	bls.n	80008b0 <__udivmoddi4+0xe8>
 80007dc:	fab2 f282 	clz	r2, r2
 80007e0:	b152      	cbz	r2, 80007f8 <__udivmoddi4+0x30>
 80007e2:	fa01 f302 	lsl.w	r3, r1, r2
 80007e6:	f1c2 0120 	rsb	r1, r2, #32
 80007ea:	fa20 f101 	lsr.w	r1, r0, r1
 80007ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f2:	ea41 0e03 	orr.w	lr, r1, r3
 80007f6:	4094      	lsls	r4, r2
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	0c21      	lsrs	r1, r4, #16
 80007fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000802:	fa1f f78c 	uxth.w	r7, ip
 8000806:	fb08 e316 	mls	r3, r8, r6, lr
 800080a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800080e:	fb06 f107 	mul.w	r1, r6, r7
 8000812:	4299      	cmp	r1, r3
 8000814:	d90a      	bls.n	800082c <__udivmoddi4+0x64>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f106 30ff 	add.w	r0, r6, #4294967295
 800081e:	f080 811f 	bcs.w	8000a60 <__udivmoddi4+0x298>
 8000822:	4299      	cmp	r1, r3
 8000824:	f240 811c 	bls.w	8000a60 <__udivmoddi4+0x298>
 8000828:	3e02      	subs	r6, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f0f8 	udiv	r0, r3, r8
 8000834:	fb08 3310 	mls	r3, r8, r0, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb00 f707 	mul.w	r7, r0, r7
 8000840:	42a7      	cmp	r7, r4
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x92>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 33ff 	add.w	r3, r0, #4294967295
 800084c:	f080 810a 	bcs.w	8000a64 <__udivmoddi4+0x29c>
 8000850:	42a7      	cmp	r7, r4
 8000852:	f240 8107 	bls.w	8000a64 <__udivmoddi4+0x29c>
 8000856:	4464      	add	r4, ip
 8000858:	3802      	subs	r0, #2
 800085a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800085e:	1be4      	subs	r4, r4, r7
 8000860:	2600      	movs	r6, #0
 8000862:	b11d      	cbz	r5, 800086c <__udivmoddi4+0xa4>
 8000864:	40d4      	lsrs	r4, r2
 8000866:	2300      	movs	r3, #0
 8000868:	e9c5 4300 	strd	r4, r3, [r5]
 800086c:	4631      	mov	r1, r6
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	428b      	cmp	r3, r1
 8000874:	d909      	bls.n	800088a <__udivmoddi4+0xc2>
 8000876:	2d00      	cmp	r5, #0
 8000878:	f000 80ef 	beq.w	8000a5a <__udivmoddi4+0x292>
 800087c:	2600      	movs	r6, #0
 800087e:	e9c5 0100 	strd	r0, r1, [r5]
 8000882:	4630      	mov	r0, r6
 8000884:	4631      	mov	r1, r6
 8000886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088a:	fab3 f683 	clz	r6, r3
 800088e:	2e00      	cmp	r6, #0
 8000890:	d14a      	bne.n	8000928 <__udivmoddi4+0x160>
 8000892:	428b      	cmp	r3, r1
 8000894:	d302      	bcc.n	800089c <__udivmoddi4+0xd4>
 8000896:	4282      	cmp	r2, r0
 8000898:	f200 80f9 	bhi.w	8000a8e <__udivmoddi4+0x2c6>
 800089c:	1a84      	subs	r4, r0, r2
 800089e:	eb61 0303 	sbc.w	r3, r1, r3
 80008a2:	2001      	movs	r0, #1
 80008a4:	469e      	mov	lr, r3
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d0e0      	beq.n	800086c <__udivmoddi4+0xa4>
 80008aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80008ae:	e7dd      	b.n	800086c <__udivmoddi4+0xa4>
 80008b0:	b902      	cbnz	r2, 80008b4 <__udivmoddi4+0xec>
 80008b2:	deff      	udf	#255	; 0xff
 80008b4:	fab2 f282 	clz	r2, r2
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	f040 8092 	bne.w	80009e2 <__udivmoddi4+0x21a>
 80008be:	eba1 010c 	sub.w	r1, r1, ip
 80008c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c6:	fa1f fe8c 	uxth.w	lr, ip
 80008ca:	2601      	movs	r6, #1
 80008cc:	0c20      	lsrs	r0, r4, #16
 80008ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80008d2:	fb07 1113 	mls	r1, r7, r3, r1
 80008d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008da:	fb0e f003 	mul.w	r0, lr, r3
 80008de:	4288      	cmp	r0, r1
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x12c>
 80008e2:	eb1c 0101 	adds.w	r1, ip, r1
 80008e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x12a>
 80008ec:	4288      	cmp	r0, r1
 80008ee:	f200 80cb 	bhi.w	8000a88 <__udivmoddi4+0x2c0>
 80008f2:	4643      	mov	r3, r8
 80008f4:	1a09      	subs	r1, r1, r0
 80008f6:	b2a4      	uxth	r4, r4
 80008f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000900:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000904:	fb0e fe00 	mul.w	lr, lr, r0
 8000908:	45a6      	cmp	lr, r4
 800090a:	d908      	bls.n	800091e <__udivmoddi4+0x156>
 800090c:	eb1c 0404 	adds.w	r4, ip, r4
 8000910:	f100 31ff 	add.w	r1, r0, #4294967295
 8000914:	d202      	bcs.n	800091c <__udivmoddi4+0x154>
 8000916:	45a6      	cmp	lr, r4
 8000918:	f200 80bb 	bhi.w	8000a92 <__udivmoddi4+0x2ca>
 800091c:	4608      	mov	r0, r1
 800091e:	eba4 040e 	sub.w	r4, r4, lr
 8000922:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000926:	e79c      	b.n	8000862 <__udivmoddi4+0x9a>
 8000928:	f1c6 0720 	rsb	r7, r6, #32
 800092c:	40b3      	lsls	r3, r6
 800092e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000932:	ea4c 0c03 	orr.w	ip, ip, r3
 8000936:	fa20 f407 	lsr.w	r4, r0, r7
 800093a:	fa01 f306 	lsl.w	r3, r1, r6
 800093e:	431c      	orrs	r4, r3
 8000940:	40f9      	lsrs	r1, r7
 8000942:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000946:	fa00 f306 	lsl.w	r3, r0, r6
 800094a:	fbb1 f8f9 	udiv	r8, r1, r9
 800094e:	0c20      	lsrs	r0, r4, #16
 8000950:	fa1f fe8c 	uxth.w	lr, ip
 8000954:	fb09 1118 	mls	r1, r9, r8, r1
 8000958:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800095c:	fb08 f00e 	mul.w	r0, r8, lr
 8000960:	4288      	cmp	r0, r1
 8000962:	fa02 f206 	lsl.w	r2, r2, r6
 8000966:	d90b      	bls.n	8000980 <__udivmoddi4+0x1b8>
 8000968:	eb1c 0101 	adds.w	r1, ip, r1
 800096c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000970:	f080 8088 	bcs.w	8000a84 <__udivmoddi4+0x2bc>
 8000974:	4288      	cmp	r0, r1
 8000976:	f240 8085 	bls.w	8000a84 <__udivmoddi4+0x2bc>
 800097a:	f1a8 0802 	sub.w	r8, r8, #2
 800097e:	4461      	add	r1, ip
 8000980:	1a09      	subs	r1, r1, r0
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb1 f0f9 	udiv	r0, r1, r9
 8000988:	fb09 1110 	mls	r1, r9, r0, r1
 800098c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000990:	fb00 fe0e 	mul.w	lr, r0, lr
 8000994:	458e      	cmp	lr, r1
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x1e2>
 8000998:	eb1c 0101 	adds.w	r1, ip, r1
 800099c:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a0:	d26c      	bcs.n	8000a7c <__udivmoddi4+0x2b4>
 80009a2:	458e      	cmp	lr, r1
 80009a4:	d96a      	bls.n	8000a7c <__udivmoddi4+0x2b4>
 80009a6:	3802      	subs	r0, #2
 80009a8:	4461      	add	r1, ip
 80009aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ae:	fba0 9402 	umull	r9, r4, r0, r2
 80009b2:	eba1 010e 	sub.w	r1, r1, lr
 80009b6:	42a1      	cmp	r1, r4
 80009b8:	46c8      	mov	r8, r9
 80009ba:	46a6      	mov	lr, r4
 80009bc:	d356      	bcc.n	8000a6c <__udivmoddi4+0x2a4>
 80009be:	d053      	beq.n	8000a68 <__udivmoddi4+0x2a0>
 80009c0:	b15d      	cbz	r5, 80009da <__udivmoddi4+0x212>
 80009c2:	ebb3 0208 	subs.w	r2, r3, r8
 80009c6:	eb61 010e 	sbc.w	r1, r1, lr
 80009ca:	fa01 f707 	lsl.w	r7, r1, r7
 80009ce:	fa22 f306 	lsr.w	r3, r2, r6
 80009d2:	40f1      	lsrs	r1, r6
 80009d4:	431f      	orrs	r7, r3
 80009d6:	e9c5 7100 	strd	r7, r1, [r5]
 80009da:	2600      	movs	r6, #0
 80009dc:	4631      	mov	r1, r6
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	f1c2 0320 	rsb	r3, r2, #32
 80009e6:	40d8      	lsrs	r0, r3
 80009e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ec:	fa21 f303 	lsr.w	r3, r1, r3
 80009f0:	4091      	lsls	r1, r2
 80009f2:	4301      	orrs	r1, r0
 80009f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f8:	fa1f fe8c 	uxth.w	lr, ip
 80009fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a00:	fb07 3610 	mls	r6, r7, r0, r3
 8000a04:	0c0b      	lsrs	r3, r1, #16
 8000a06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a0e:	429e      	cmp	r6, r3
 8000a10:	fa04 f402 	lsl.w	r4, r4, r2
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x260>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a1e:	d22f      	bcs.n	8000a80 <__udivmoddi4+0x2b8>
 8000a20:	429e      	cmp	r6, r3
 8000a22:	d92d      	bls.n	8000a80 <__udivmoddi4+0x2b8>
 8000a24:	3802      	subs	r0, #2
 8000a26:	4463      	add	r3, ip
 8000a28:	1b9b      	subs	r3, r3, r6
 8000a2a:	b289      	uxth	r1, r1
 8000a2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a30:	fb07 3316 	mls	r3, r7, r6, r3
 8000a34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a38:	fb06 f30e 	mul.w	r3, r6, lr
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x28a>
 8000a40:	eb1c 0101 	adds.w	r1, ip, r1
 8000a44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a48:	d216      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	d914      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4e:	3e02      	subs	r6, #2
 8000a50:	4461      	add	r1, ip
 8000a52:	1ac9      	subs	r1, r1, r3
 8000a54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a58:	e738      	b.n	80008cc <__udivmoddi4+0x104>
 8000a5a:	462e      	mov	r6, r5
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	e705      	b.n	800086c <__udivmoddi4+0xa4>
 8000a60:	4606      	mov	r6, r0
 8000a62:	e6e3      	b.n	800082c <__udivmoddi4+0x64>
 8000a64:	4618      	mov	r0, r3
 8000a66:	e6f8      	b.n	800085a <__udivmoddi4+0x92>
 8000a68:	454b      	cmp	r3, r9
 8000a6a:	d2a9      	bcs.n	80009c0 <__udivmoddi4+0x1f8>
 8000a6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a74:	3801      	subs	r0, #1
 8000a76:	e7a3      	b.n	80009c0 <__udivmoddi4+0x1f8>
 8000a78:	4646      	mov	r6, r8
 8000a7a:	e7ea      	b.n	8000a52 <__udivmoddi4+0x28a>
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	e794      	b.n	80009aa <__udivmoddi4+0x1e2>
 8000a80:	4640      	mov	r0, r8
 8000a82:	e7d1      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a84:	46d0      	mov	r8, sl
 8000a86:	e77b      	b.n	8000980 <__udivmoddi4+0x1b8>
 8000a88:	3b02      	subs	r3, #2
 8000a8a:	4461      	add	r1, ip
 8000a8c:	e732      	b.n	80008f4 <__udivmoddi4+0x12c>
 8000a8e:	4630      	mov	r0, r6
 8000a90:	e709      	b.n	80008a6 <__udivmoddi4+0xde>
 8000a92:	4464      	add	r4, ip
 8000a94:	3802      	subs	r0, #2
 8000a96:	e742      	b.n	800091e <__udivmoddi4+0x156>

08000a98 <__aeabi_idiv0>:
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <_Z6apInitv>:




void apInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  cliOpen(_DEF_UART1, 57600);
 8000aa0:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 fd0f 	bl	80014c8 <cliOpen>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <_Z6apMainv>:

void apMain(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	ed2d 8b02 	vpush	{d8}
 8000ab6:	b090      	sub	sp, #64	; 0x40
 8000ab8:	af04      	add	r7, sp, #16
  uint32_t pre_time;
  uint16_t x = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t y = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t show_data[3] = {0, };
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
  uint32_t pre_time_draw;
  uint32_t draw_time = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  float char_size = 1.0;
 8000ad0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ad4:	623b      	str	r3, [r7, #32]


  pre_time = millis();
 8000ad6:	f000 f957 	bl	8000d88 <millis>
 8000ada:	62f8      	str	r0, [r7, #44]	; 0x2c
  while(1)
  {
    if (millis()-pre_time >= 500)
 8000adc:	f000 f954 	bl	8000d88 <millis>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000aea:	4293      	cmp	r3, r2
 8000aec:	bf8c      	ite	hi
 8000aee:	2301      	movhi	r3, #1
 8000af0:	2300      	movls	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d00f      	beq.n	8000b18 <_Z6apMainv+0x68>
    {
      pre_time = millis();
 8000af8:	f000 f946 	bl	8000d88 <millis>
 8000afc:	62f8      	str	r0, [r7, #44]	; 0x2c
      ledToggle(_DEF_LED1);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f001 ffc4 	bl	8002a8c <ledToggle>
      show_data[0] = lcdGetFpsTime();
 8000b04:	f001 fcea 	bl	80024dc <lcdGetFpsTime>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	607b      	str	r3, [r7, #4]
      show_data[1] = lcdGetFps();
 8000b0c:	f001 fce0 	bl	80024d0 <lcdGetFps>
 8000b10:	4603      	mov	r3, r0
 8000b12:	60bb      	str	r3, [r7, #8]
      show_data[2] = draw_time;
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	60fb      	str	r3, [r7, #12]
    }

    if (lcdDrawAvailable())
 8000b18:	f001 fce6 	bl	80024e8 <lcdDrawAvailable>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 8101 	beq.w	8000d26 <_Z6apMainv+0x276>
    {
      pre_time_draw = millis();
 8000b24:	f000 f930 	bl	8000d88 <millis>
 8000b28:	6178      	str	r0, [r7, #20]
      lcdClearBuffer(black);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f001 fcb2 	bl	8002494 <lcdClearBuffer>


      lcdPrintfResize(0, 16*0, white, 2, "LCD : %d ms, %d fps, %d ms", show_data[0], show_data[1], show_data[2]);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	68f9      	ldr	r1, [r7, #12]
 8000b36:	9103      	str	r1, [sp, #12]
 8000b38:	9202      	str	r2, [sp, #8]
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	4b88      	ldr	r3, [pc, #544]	; (8000d60 <_Z6apMainv+0x2b0>)
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f001 fda2 	bl	8002694 <lcdPrintfResize>


      lcdPrintfResize(0, 16*4, white, 1.5, "BTN : ");
 8000b50:	4b84      	ldr	r3, [pc, #528]	; (8000d64 <_Z6apMainv+0x2b4>)
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b5c:	2140      	movs	r1, #64	; 0x40
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f001 fd98 	bl	8002694 <lcdPrintfResize>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	dc21      	bgt.n	8000bb2 <_Z6apMainv+0x102>
      {
        lcdPrintfResize(i*8+(8*6)*1.5, 16*4, white, 1.5, "%d", buttonGetPressed(i));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	ee07 3a90 	vmov	s15, r3
 8000b76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b7a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8000d50 <_Z6apMainv+0x2a0>
 8000b7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b82:	eebd 8bc7 	vcvt.s32.f64	s16, d7
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fbf4 	bl	8001378 <buttonGetPressed>
 8000b90:	4603      	mov	r3, r0
 8000b92:	9301      	str	r3, [sp, #4]
 8000b94:	4b74      	ldr	r3, [pc, #464]	; (8000d68 <_Z6apMainv+0x2b8>)
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000b9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba0:	2140      	movs	r1, #64	; 0x40
 8000ba2:	ee18 0a10 	vmov	r0, s16
 8000ba6:	f001 fd75 	bl	8002694 <lcdPrintfResize>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3301      	adds	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	e7da      	b.n	8000b68 <_Z6apMainv+0xb8>
      }

      lcdPrintfResize(0, 16*6, white, 1.5, "PIN : ");
 8000bb2:	4b6e      	ldr	r3, [pc, #440]	; (8000d6c <_Z6apMainv+0x2bc>)
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bbe:	2160      	movs	r1, #96	; 0x60
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f001 fd67 	bl	8002694 <lcdPrintfResize>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	dc21      	bgt.n	8000c14 <_Z6apMainv+0x164>
      {
        lcdPrintfResize(i*8+(8*6)*1.5, 16*6, white, 1.5, "%d", gpioPinRead(i));
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	ee07 3a90 	vmov	s15, r3
 8000bd8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bdc:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8000d50 <_Z6apMainv+0x2a0>
 8000be0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000be4:	eebd 8bc7 	vcvt.s32.f64	s16, d7
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f001 fb27 	bl	8002240 <gpioPinRead>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	4b5c      	ldr	r3, [pc, #368]	; (8000d68 <_Z6apMainv+0x2b8>)
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c02:	2160      	movs	r1, #96	; 0x60
 8000c04:	ee18 0a10 	vmov	r0, s16
 8000c08:	f001 fd44 	bl	8002694 <lcdPrintfResize>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	e7da      	b.n	8000bca <_Z6apMainv+0x11a>
      }

      lcdPrintfRect(0, 0, LCD_WIDTH, LCD_HEIGHT, green, 3, LCD_ALIGN_H_CENTER | LCD_ALIGN_V_BOTTOM,  "ART-PI LCD 시험");
 8000c14:	4b56      	ldr	r3, [pc, #344]	; (8000d70 <_Z6apMainv+0x2c0>)
 8000c16:	9303      	str	r3, [sp, #12]
 8000c18:	2322      	movs	r3, #34	; 0x22
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <_Z6apMainv+0x2c4>)
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c2a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2000      	movs	r0, #0
 8000c32:	f001 fded 	bl	8002810 <lcdPrintfRect>

      lcdPrintfRect(0, 0, LCD_WIDTH, LCD_HEIGHT, green, char_size, LCD_ALIGN_H_CENTER | LCD_ALIGN_V_CENTER,  "폰트 크기");
 8000c36:	4b50      	ldr	r3, [pc, #320]	; (8000d78 <_Z6apMainv+0x2c8>)
 8000c38:	9303      	str	r3, [sp, #12]
 8000c3a:	2312      	movs	r3, #18
 8000c3c:	9302      	str	r3, [sp, #8]
 8000c3e:	6a3b      	ldr	r3, [r7, #32]
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c4c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000c50:	2100      	movs	r1, #0
 8000c52:	2000      	movs	r0, #0
 8000c54:	f001 fddc 	bl	8002810 <lcdPrintfRect>
      char_size += 0.1/2;
 8000c58:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c60:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8000d58 <_Z6apMainv+0x2a8>
 8000c64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c6c:	edc7 7a08 	vstr	s15, [r7, #32]
      if (char_size >= 8)
 8000c70:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c74:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c80:	db02      	blt.n	8000c88 <_Z6apMainv+0x1d8>
      {
        char_size = 1.0;
 8000c82:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000c86:	623b      	str	r3, [r7, #32]
      }

      lcdDrawFillRect(x, 90, 30*2, 30*2, red);
 8000c88:	f9b7 002a 	ldrsh.w	r0, [r7, #42]	; 0x2a
 8000c8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	233c      	movs	r3, #60	; 0x3c
 8000c94:	223c      	movs	r2, #60	; 0x3c
 8000c96:	215a      	movs	r1, #90	; 0x5a
 8000c98:	f001 fc9d 	bl	80025d6 <lcdDrawFillRect>
      lcdDrawFillRect(lcdGetWidth()-x, 90+30*2, 30*2, 30*2, green);
 8000c9c:	f001 fc2b 	bl	80024f6 <lcdGetWidth>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	b218      	sxth	r0, r3
 8000cac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	233c      	movs	r3, #60	; 0x3c
 8000cb4:	223c      	movs	r2, #60	; 0x3c
 8000cb6:	2196      	movs	r1, #150	; 0x96
 8000cb8:	f001 fc8d 	bl	80025d6 <lcdDrawFillRect>
      lcdDrawFillRect(x + 30, 90+30*4, 30*2, 30*2, blue);
 8000cbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000cbe:	331e      	adds	r3, #30
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	b218      	sxth	r0, r3
 8000cc4:	231f      	movs	r3, #31
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	233c      	movs	r3, #60	; 0x3c
 8000cca:	223c      	movs	r2, #60	; 0x3c
 8000ccc:	21d2      	movs	r1, #210	; 0xd2
 8000cce:	f001 fc82 	bl	80025d6 <lcdDrawFillRect>

      lcdDrawFillRect(x, 480-30, 30, 30, red);
 8000cd2:	f9b7 002a 	ldrsh.w	r0, [r7, #42]	; 0x2a
 8000cd6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	231e      	movs	r3, #30
 8000cde:	221e      	movs	r2, #30
 8000ce0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8000ce4:	f001 fc77 	bl	80025d6 <lcdDrawFillRect>

      draw_time = millis()-pre_time_draw;
 8000ce8:	f000 f84e 	bl	8000d88 <millis>
 8000cec:	4602      	mov	r2, r0
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24

      x += 2;
 8000cf4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000cf6:	3302      	adds	r3, #2
 8000cf8:	857b      	strh	r3, [r7, #42]	; 0x2a

      x %= lcdGetWidth();
 8000cfa:	f001 fbfc 	bl	80024f6 <lcdGetWidth>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d02:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d06:	fb01 f202 	mul.w	r2, r1, r2
 8000d0a:	1a9b      	subs	r3, r3, r2
 8000d0c:	857b      	strh	r3, [r7, #42]	; 0x2a
      y %= lcdGetHeight();
 8000d0e:	f001 fbf5 	bl	80024fc <lcdGetHeight>
 8000d12:	4602      	mov	r2, r0
 8000d14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d16:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d1a:	fb01 f202 	mul.w	r2, r1, r2
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	853b      	strh	r3, [r7, #40]	; 0x28

      lcdRequestDraw();
 8000d22:	f001 fbe3 	bl	80024ec <lcdRequestDraw>
    }


    cliMain();
 8000d26:	f000 fceb 	bl	8001700 <cliMain>



    sd_state_t sd_state;

    sd_state = sdUpdate();
 8000d2a:	f002 fd5b 	bl	80037e4 <sdUpdate>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	74fb      	strb	r3, [r7, #19]
    if (sd_state == SDCARD_CONNECTED)
 8000d32:	7cfb      	ldrb	r3, [r7, #19]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d102      	bne.n	8000d3e <_Z6apMainv+0x28e>
    {
      logPrintf("\nSDCARD_CONNECTED\n");
 8000d38:	4810      	ldr	r0, [pc, #64]	; (8000d7c <_Z6apMainv+0x2cc>)
 8000d3a:	f00b fbe1 	bl	800c500 <puts>
    }
    if (sd_state == SDCARD_DISCONNECTED)
 8000d3e:	7cfb      	ldrb	r3, [r7, #19]
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	f47f aecb 	bne.w	8000adc <_Z6apMainv+0x2c>
    {
      logPrintf("\nSDCARD_DISCONNECTED\n");
 8000d46:	480e      	ldr	r0, [pc, #56]	; (8000d80 <_Z6apMainv+0x2d0>)
 8000d48:	f00b fbda 	bl	800c500 <puts>
    }
  }
 8000d4c:	e6c6      	b.n	8000adc <_Z6apMainv+0x2c>
 8000d4e:	bf00      	nop
 8000d50:	00000000 	.word	0x00000000
 8000d54:	40520000 	.word	0x40520000
 8000d58:	9999999a 	.word	0x9999999a
 8000d5c:	3fa99999 	.word	0x3fa99999
 8000d60:	0800f580 	.word	0x0800f580
 8000d64:	0800f59c 	.word	0x0800f59c
 8000d68:	0800f5a4 	.word	0x0800f5a4
 8000d6c:	0800f5a8 	.word	0x0800f5a8
 8000d70:	0800f5b0 	.word	0x0800f5b0
 8000d74:	40400000 	.word	0x40400000
 8000d78:	0800f5c4 	.word	0x0800f5c4
 8000d7c:	0800f5d4 	.word	0x0800f5d4
 8000d80:	0800f5e8 	.word	0x0800f5e8

08000d84 <delay>:
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 8000d84:	f005 bd3a 	b.w	80067fc <HAL_Delay>

08000d88 <millis>:
#endif
}

uint32_t millis(void)
{
  return HAL_GetTick();
 8000d88:	f005 bd32 	b.w	80067f0 <HAL_GetTick>

08000d8c <__io_putchar>:


extern uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length);

int __io_putchar(int ch)
{
 8000d8c:	b507      	push	{r0, r1, r2, lr}
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8000d8e:	2201      	movs	r2, #1
{
 8000d90:	9001      	str	r0, [sp, #4]
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8000d92:	a901      	add	r1, sp, #4
 8000d94:	2000      	movs	r0, #0
 8000d96:	f003 f995 	bl	80040c4 <uartWrite>
  return 1;
}
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	b003      	add	sp, #12
 8000d9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000da4 <SystemClock_Config>:



void SystemClock_Config(void)
{
 8000da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000da8:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	224c      	movs	r2, #76	; 0x4c
 8000dac:	2100      	movs	r1, #0
 8000dae:	a80a      	add	r0, sp, #40	; 0x28
 8000db0:	f00b fa38 	bl	800c224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	2220      	movs	r2, #32
 8000db6:	2100      	movs	r1, #0
 8000db8:	a802      	add	r0, sp, #8
 8000dba:	f00b fa33 	bl	800c224 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbe:	22bc      	movs	r2, #188	; 0xbc
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	a81d      	add	r0, sp, #116	; 0x74
 8000dc4:	f00b fa2e 	bl	800c224 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f007 fa41 	bl	8008250 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dce:	2300      	movs	r3, #0
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <SystemClock_Config+0x100>)
 8000dd4:	699a      	ldr	r2, [r3, #24]
 8000dd6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000dda:	619a      	str	r2, [r3, #24]
 8000ddc:	699a      	ldr	r2, [r3, #24]
 8000dde:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000de2:	9201      	str	r2, [sp, #4]
 8000de4:	4a30      	ldr	r2, [pc, #192]	; (8000ea8 <SystemClock_Config+0x104>)
 8000de6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000de8:	f041 0101 	orr.w	r1, r1, #1
 8000dec:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000dee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000df0:	f002 0201 	and.w	r2, r2, #1
 8000df4:	9201      	str	r2, [sp, #4]
 8000df6:	9a01      	ldr	r2, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000df8:	699a      	ldr	r2, [r3, #24]
 8000dfa:	0496      	lsls	r6, r2, #18
 8000dfc:	d5fc      	bpl.n	8000df8 <SystemClock_Config+0x54>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000dfe:	4a2b      	ldr	r2, [pc, #172]	; (8000eac <SystemClock_Config+0x108>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e00:	f44f 3880 	mov.w	r8, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e04:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e06:	2502      	movs	r5, #2
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000e08:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e0a:	2708      	movs	r7, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0c:	a80a      	add	r0, sp, #40	; 0x28
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e0e:	2640      	movs	r6, #64	; 0x40
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000e10:	f023 0303 	bic.w	r3, r3, #3
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1a:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e1c:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e1e:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e20:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e22:	e9cd 380a 	strd	r3, r8, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e26:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e28:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e2c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e30:	e9cd 5517 	strd	r5, r5, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e34:	e9cd 741a 	strd	r7, r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f007 fcb0 	bl	800879c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3c:	213f      	movs	r1, #63	; 0x3f
 8000e3e:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e40:	eb0d 0007 	add.w	r0, sp, r7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e44:	e9cd 1302 	strd	r1, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e4c:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e4e:	e9cd 3608 	strd	r3, r6, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e52:	e9cd 4704 	strd	r4, r7, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e56:	e9cd 6606 	strd	r6, r6, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e5a:	f007 ffd7 	bl	8008e0c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_UART4
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <SystemClock_Config+0x10c>)
  PeriphClkInitStruct.PLL2.PLL2R = 2;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.PLL3.PLL3M = 32;
  PeriphClkInitStruct.PLL3.PLL3N = 156;
 8000e60:	2020      	movs	r0, #32
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e62:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000e64:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e68:	943a      	str	r4, [sp, #232]	; 0xe8
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8000e6a:	e9cd 371d 	strd	r3, r7, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8000e6e:	2380      	movs	r3, #128	; 0x80
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e70:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
  PeriphClkInitStruct.PLL3.PLL3N = 156;
 8000e74:	239c      	movs	r3, #156	; 0x9c
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e76:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
  PeriphClkInitStruct.PLL3.PLL3N = 156;
 8000e7a:	e9cd 0326 	strd	r0, r3, [sp, #152]	; 0x98
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000e7e:	e9cd 5528 	strd	r5, r5, [sp, #160]	; 0xa0
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000e82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e86:	2504      	movs	r5, #4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e88:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e8a:	e9cd 6423 	strd	r6, r4, [sp, #140]	; 0x8c
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000e8e:	e9cd 532a 	strd	r5, r3, [sp, #168]	; 0xa8
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000e92:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000e96:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9a:	f008 fa13 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000e9e:	b04c      	add	sp, #304	; 0x130
 8000ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ea4:	58024800 	.word	0x58024800
 8000ea8:	58000400 	.word	0x58000400
 8000eac:	58024400 	.word	0x58024400
 8000eb0:	23010002 	.word	0x23010002

08000eb4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eb4:	4770      	bx	lr
	...

08000eb8 <mpuConfig>:

void mpuConfig(void)
{
 8000eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   *  1 1 1 Normal            , Write-back, write and read allocate
   *  2 0 0 Device            , Non-shareable device
   *  2 0 1 Reserved
   */

  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2210      	movs	r2, #16
 8000ebe:	4668      	mov	r0, sp


  /* Write-back, no write allocate */
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress      = 0xC0000000;
  MPU_InitStruct.Size             = MPU_REGION_SIZE_32MB;
 8000ec0:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ec4:	f00b f9ae 	bl	800c224 <memset>
  HAL_MPU_Disable();
 8000ec8:	f005 fd2a 	bl	8006920 <HAL_MPU_Disable>
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000ecc:	2301      	movs	r3, #1
  MPU_InitStruct.Size             = MPU_REGION_SIZE_64KB;
 8000ece:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ed2:	4668      	mov	r0, sp
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000ed4:	f8ad 3000 	strh.w	r3, [sp]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_64KB;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <mpuConfig+0x6c>)
 8000eda:	e9cd 2301 	strd	r2, r3, [sp, #4]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee2:	9303      	str	r3, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ee4:	f005 fd3a 	bl	800695c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000ee8:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eec:	4668      	mov	r0, sp
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000eee:	f8ad 3000 	strh.w	r3, [sp]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_32MB;
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <mpuConfig+0x70>)
 8000ef4:	e9cd 4301 	strd	r4, r3, [sp, #4]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <mpuConfig+0x74>)
 8000efa:	9303      	str	r3, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000efc:	f005 fd2e 	bl	800695c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size             = MPU_REGION_SIZE_4MB;
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000f00:	f240 2301 	movw	r3, #513	; 0x201
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f04:	490a      	ldr	r1, [pc, #40]	; (8000f30 <mpuConfig+0x78>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f06:	4668      	mov	r0, sp
  MPU_InitStruct.BaseAddress      = 0xC0000000;
 8000f08:	9401      	str	r4, [sp, #4]
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000f0a:	f8ad 3000 	strh.w	r3, [sp]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f12:	e9cd 1302 	strd	r1, r3, [sp, #8]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f16:	f005 fd21 	bl	800695c <HAL_MPU_ConfigRegion>



  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f1a:	2004      	movs	r0, #4
 8000f1c:	f005 fd0e 	bl	800693c <HAL_MPU_Enable>
}
 8000f20:	b004      	add	sp, #16
 8000f22:	bd10      	pop	{r4, pc}
 8000f24:	0300000f 	.word	0x0300000f
 8000f28:	03000018 	.word	0x03000018
 8000f2c:	01010000 	.word	0x01010000
 8000f30:	03000015 	.word	0x03000015

08000f34 <bspInit>:
{
 8000f34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 8000f36:	f005 fc21 	bl	800677c <HAL_Init>
  SystemClock_Config();
 8000f3a:	f7ff ff33 	bl	8000da4 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b37      	ldr	r3, [pc, #220]	; (800101c <bspInit+0xe8>)
 8000f40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f44:	f042 0201 	orr.w	r2, r2, #1
 8000f48:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f50:	f002 0201 	and.w	r2, r2, #1
 8000f54:	9200      	str	r2, [sp, #0]
 8000f56:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f5c:	f042 0204 	orr.w	r2, r2, #4
 8000f60:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f68:	f002 0204 	and.w	r2, r2, #4
 8000f6c:	9201      	str	r2, [sp, #4]
 8000f6e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f78:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f80:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000f84:	9202      	str	r2, [sp, #8]
 8000f86:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f90:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9c:	9303      	str	r3, [sp, #12]
 8000f9e:	9b03      	ldr	r3, [sp, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fa4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <bspInit+0xec>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fb4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fb8:	6953      	ldr	r3, [r2, #20]
 8000fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fc4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000fc8:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000fcc:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000fd0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fd4:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000fd8:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000fdc:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000fe0:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fe2:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000fe6:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fe8:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000fec:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fee:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000ff2:	d2f9      	bcs.n	8000fe8 <bspInit+0xb4>
    } while(sets-- != 0U);
 8000ff4:	3b20      	subs	r3, #32
 8000ff6:	f113 0f20 	cmn.w	r3, #32
 8000ffa:	d1f2      	bne.n	8000fe2 <bspInit+0xae>
 8000ffc:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001000:	6953      	ldr	r3, [r2, #20]
 8001002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001006:	6153      	str	r3, [r2, #20]
 8001008:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800100c:	f3bf 8f6f 	isb	sy
}
 8001010:	b004      	add	sp, #16
 8001012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  mpuConfig();
 8001016:	f7ff bf4f 	b.w	8000eb8 <mpuConfig>
 800101a:	bf00      	nop
 800101c:	58024400 	.word	0x58024400
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <HAL_MspInit+0x20>)
{
 8001026:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001028:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800102c:	f042 0202 	orr.w	r2, r2, #2
 8001030:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001040:	b002      	add	sp, #8
 8001042:	4770      	bx	lr
 8001044:	58024400 	.word	0x58024400

08001048 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001048:	4770      	bx	lr

0800104a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <HardFault_Handler>

0800104c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <MemManage_Handler>

0800104e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <BusFault_Handler>

08001050 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler>

08001052 <SVC_Handler>:
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:
 8001054:	4770      	bx	lr

08001056 <PendSV_Handler>:
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001058:	f005 bbbe 	b.w	80067d8 <HAL_IncTick>

0800105c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800105c:	4801      	ldr	r0, [pc, #4]	; (8001064 <DMA1_Stream0_IRQHandler+0x8>)
 800105e:	f006 b9f1 	b.w	8007444 <HAL_DMA_IRQHandler>
 8001062:	bf00      	nop
 8001064:	24000b54 	.word	0x24000b54

08001068 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001068:	4801      	ldr	r0, [pc, #4]	; (8001070 <SDMMC1_IRQHandler+0x8>)
 800106a:	f009 bed3 	b.w	800ae14 <HAL_SD_IRQHandler>
 800106e:	bf00      	nop
 8001070:	24000a5c 	.word	0x24000a5c

08001074 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001074:	2001      	movs	r0, #1
 8001076:	4770      	bx	lr

08001078 <_kill>:

int _kill(int pid, int sig)
{
 8001078:	b508      	push	{r3, lr}
	errno = EINVAL;
 800107a:	f00b f871 	bl	800c160 <__errno>
 800107e:	2316      	movs	r3, #22
 8001080:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001082:	f04f 30ff 	mov.w	r0, #4294967295
 8001086:	bd08      	pop	{r3, pc}

08001088 <_exit>:

void _exit (int status)
{
 8001088:	b508      	push	{r3, lr}
	errno = EINVAL;
 800108a:	f00b f869 	bl	800c160 <__errno>
 800108e:	2316      	movs	r3, #22
 8001090:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001092:	e7fe      	b.n	8001092 <_exit+0xa>

08001094 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	460d      	mov	r5, r1
 8001098:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109a:	460e      	mov	r6, r1
 800109c:	1b73      	subs	r3, r6, r5
 800109e:	429c      	cmp	r4, r3
 80010a0:	dc01      	bgt.n	80010a6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80010a2:	4620      	mov	r0, r4
 80010a4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80010a6:	f3af 8000 	nop.w
 80010aa:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	e7f5      	b.n	800109c <_read+0x8>

080010b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010b0:	b570      	push	{r4, r5, r6, lr}
 80010b2:	460d      	mov	r5, r1
 80010b4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	460e      	mov	r6, r1
 80010b8:	1b73      	subs	r3, r6, r5
 80010ba:	429c      	cmp	r4, r3
 80010bc:	dc01      	bgt.n	80010c2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80010be:	4620      	mov	r0, r4
 80010c0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80010c2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80010c6:	f7ff fe61 	bl	8000d8c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	e7f5      	b.n	80010b8 <_write+0x8>

080010cc <_close>:

int _close(int file)
{
	return -1;
}
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	4770      	bx	lr

080010d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80010d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80010d6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80010d8:	604b      	str	r3, [r1, #4]
}
 80010da:	4770      	bx	lr

080010dc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80010dc:	2001      	movs	r0, #1
 80010de:	4770      	bx	lr

080010e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80010e0:	2000      	movs	r0, #0
 80010e2:	4770      	bx	lr

080010e4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <_sbrk+0x30>)
{
 80010e6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80010e8:	6811      	ldr	r1, [r2, #0]
{
 80010ea:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80010ec:	b909      	cbnz	r1, 80010f2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80010ee:	490a      	ldr	r1, [pc, #40]	; (8001118 <_sbrk+0x34>)
 80010f0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	6810      	ldr	r0, [r2, #0]
 80010f4:	4909      	ldr	r1, [pc, #36]	; (800111c <_sbrk+0x38>)
 80010f6:	4c0a      	ldr	r4, [pc, #40]	; (8001120 <_sbrk+0x3c>)
 80010f8:	4403      	add	r3, r0
 80010fa:	1b09      	subs	r1, r1, r4
 80010fc:	428b      	cmp	r3, r1
 80010fe:	d906      	bls.n	800110e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001100:	f00b f82e 	bl	800c160 <__errno>
 8001104:	230c      	movs	r3, #12
 8001106:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001108:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800110c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800110e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001110:	e7fc      	b.n	800110c <_sbrk+0x28>
 8001112:	bf00      	nop
 8001114:	24000220 	.word	0x24000220
 8001118:	24000cc8 	.word	0x24000cc8
 800111c:	24080000 	.word	0x24080000
 8001120:	00000400 	.word	0x00000400

08001124 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001124:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <SystemInit+0xa0>)
 8001126:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800112a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001132:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <SystemInit+0xa4>)
 8001134:	6813      	ldr	r3, [r2, #0]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	2b06      	cmp	r3, #6
 800113c:	d805      	bhi.n	800114a <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800113e:	6813      	ldr	r3, [r2, #0]
 8001140:	f023 030f 	bic.w	r3, r3, #15
 8001144:	f043 0307 	orr.w	r3, r3, #7
 8001148:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <SystemInit+0xa8>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	f042 0201 	orr.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001158:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <SystemInit+0xac>)
 800115a:	6819      	ldr	r1, [r3, #0]
 800115c:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800115e:	491a      	ldr	r1, [pc, #104]	; (80011c8 <SystemInit+0xa4>)
  RCC->CR &= 0xEAF6ED7FU;
 8001160:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001162:	680a      	ldr	r2, [r1, #0]
 8001164:	0712      	lsls	r2, r2, #28
 8001166:	d505      	bpl.n	8001174 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001168:	680a      	ldr	r2, [r1, #0]
 800116a:	f022 020f 	bic.w	r2, r2, #15
 800116e:	f042 0207 	orr.w	r2, r2, #7
 8001172:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001174:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001176:	4917      	ldr	r1, [pc, #92]	; (80011d4 <SystemInit+0xb0>)
  RCC->D1CFGR = 0x00000000;
 8001178:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800117a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800117c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800117e:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001180:	4915      	ldr	r1, [pc, #84]	; (80011d8 <SystemInit+0xb4>)
 8001182:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001184:	4915      	ldr	r1, [pc, #84]	; (80011dc <SystemInit+0xb8>)
 8001186:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800118a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800118c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800118e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001190:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001192:	6819      	ldr	r1, [r3, #0]
 8001194:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001198:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800119a:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <SystemInit+0xbc>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	0c1b      	lsrs	r3, r3, #16
 80011a2:	041b      	lsls	r3, r3, #16
 80011a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011a8:	d203      	bcs.n	80011b2 <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <SystemInit+0xc0>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <SystemInit+0xc4>)
 80011b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011b8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011be:	4b01      	ldr	r3, [pc, #4]	; (80011c4 <SystemInit+0xa0>)
 80011c0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	52002000 	.word	0x52002000
 80011cc:	58024400 	.word	0x58024400
 80011d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80011d4:	02020200 	.word	0x02020200
 80011d8:	01ff0000 	.word	0x01ff0000
 80011dc:	01010280 	.word	0x01010280
 80011e0:	5c001000 	.word	0x5c001000
 80011e4:	51008000 	.word	0x51008000
 80011e8:	52004000 	.word	0x52004000

080011ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001224 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011f0:	f7ff ff98 	bl	8001124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011f6:	e003      	b.n	8001200 <LoopCopyDataInit>

080011f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80011fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011fe:	3104      	adds	r1, #4

08001200 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001200:	480a      	ldr	r0, [pc, #40]	; (800122c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001204:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001206:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001208:	d3f6      	bcc.n	80011f8 <CopyDataInit>
  ldr  r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800120c:	e002      	b.n	8001214 <LoopFillZerobss>

0800120e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800120e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001210:	f842 3b04 	str.w	r3, [r2], #4

08001214 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001216:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001218:	d3f9      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f00a ffa7 	bl	800c16c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f00a ff94 	bl	800c14a <main>
  bx  lr    
 8001222:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001224:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001228:	08014cac 	.word	0x08014cac
  ldr  r0, =_sdata
 800122c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001230:	24000204 	.word	0x24000204
  ldr  r2, =_sbss
 8001234:	24000204 	.word	0x24000204
  ldr  r3, = _ebss
 8001238:	24000cc4 	.word	0x24000cc4

0800123c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC3_IRQHandler>

0800123e <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
  bool ret = true;

  p_node->in    = 0;
 800123e:	2300      	movs	r3, #0
  p_node->out   = 0;
  p_node->len   = length;
 8001240:	6082      	str	r2, [r0, #8]
  p_node->out   = 0;
 8001242:	e9c0 3300 	strd	r3, r3, [r0]
  p_node->size  = 1;
 8001246:	2301      	movs	r3, #1
  p_node->p_buf = p_buf;
 8001248:	e9c0 3103 	strd	r3, r1, [r0, #12]

  return ret;
}
 800124c:	4618      	mov	r0, r3
 800124e:	4770      	bx	lr

08001250 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001250:	b570      	push	{r4, r5, r6, lr}
  bool ret = true;


  for (int i=0; i<length; i++)
 8001252:	2500      	movs	r5, #0
 8001254:	4295      	cmp	r5, r2
 8001256:	d101      	bne.n	800125c <qbufferRead+0xc>
  bool ret = true;
 8001258:	2001      	movs	r0, #1
 800125a:	e006      	b.n	800126a <qbufferRead+0x1a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 800125c:	6903      	ldr	r3, [r0, #16]
 800125e:	b92b      	cbnz	r3, 800126c <qbufferRead+0x1c>
      {
        p_data[i] = p_buf[i];
      }
    }

    if (p_node->out != p_node->in)
 8001260:	e9d0 4300 	ldrd	r4, r3, [r0]
 8001264:	42a3      	cmp	r3, r4
 8001266:	d110      	bne.n	800128a <qbufferRead+0x3a>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
    }
    else
    {
      ret = false;
 8001268:	2000      	movs	r0, #0
      break;
    }
  }

  return ret;
}
 800126a:	bd70      	pop	{r4, r5, r6, pc}
    if (p_node->p_buf != NULL && p_data != NULL)
 800126c:	2900      	cmp	r1, #0
 800126e:	d0f7      	beq.n	8001260 <qbufferRead+0x10>
      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 8001270:	68c4      	ldr	r4, [r0, #12]
 8001272:	6846      	ldr	r6, [r0, #4]
 8001274:	fb06 3304 	mla	r3, r6, r4, r3
      for (int i=0; i<p_node->size; i++)
 8001278:	2400      	movs	r4, #0
 800127a:	68c6      	ldr	r6, [r0, #12]
 800127c:	42a6      	cmp	r6, r4
 800127e:	d9ef      	bls.n	8001260 <qbufferRead+0x10>
        p_data[i] = p_buf[i];
 8001280:	f813 6b01 	ldrb.w	r6, [r3], #1
 8001284:	550e      	strb	r6, [r1, r4]
      for (int i=0; i<p_node->size; i++)
 8001286:	3401      	adds	r4, #1
 8001288:	e7f7      	b.n	800127a <qbufferRead+0x2a>
      p_node->out = (p_node->out + 1) % p_node->len;
 800128a:	3301      	adds	r3, #1
 800128c:	6884      	ldr	r4, [r0, #8]
  for (int i=0; i<length; i++)
 800128e:	3501      	adds	r5, #1
      p_node->out = (p_node->out + 1) % p_node->len;
 8001290:	fbb3 f6f4 	udiv	r6, r3, r4
 8001294:	fb04 3316 	mls	r3, r4, r6, r3
 8001298:	6043      	str	r3, [r0, #4]
  for (int i=0; i<length; i++)
 800129a:	e7db      	b.n	8001254 <qbufferRead+0x4>

0800129c <qbufferAvailable>:
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 800129c:	e9d0 3200 	ldrd	r3, r2, [r0]
 80012a0:	1a9b      	subs	r3, r3, r2
 80012a2:	6882      	ldr	r2, [r0, #8]
 80012a4:	fbb3 f0f2 	udiv	r0, r3, r2

  return ret;
}
 80012a8:	fb02 3010 	mls	r0, r2, r0, r3
 80012ac:	4770      	bx	lr
	...

080012b0 <buttonGetPressed.part.0>:
#endif

  return ret;
}

bool buttonGetPressed(uint8_t ch)
 80012b0:	b510      	push	{r4, lr}
  if (ch >= BUTTON_MAX_CH)
  {
    return false;
  }

  if (HAL_GPIO_ReadPin(button_tbl[ch].port, button_tbl[ch].pin) == button_tbl[ch].on_state)
 80012b2:	4c05      	ldr	r4, [pc, #20]	; (80012c8 <buttonGetPressed.part.0+0x18>)
 80012b4:	88a1      	ldrh	r1, [r4, #4]
 80012b6:	6820      	ldr	r0, [r4, #0]
 80012b8:	f006 fe10 	bl	8007edc <HAL_GPIO_ReadPin>
 80012bc:	7a23      	ldrb	r3, [r4, #8]
  {
    ret = true;
  }

  return ret;
}
 80012be:	1a1b      	subs	r3, r3, r0
 80012c0:	4258      	negs	r0, r3
 80012c2:	4158      	adcs	r0, r3
 80012c4:	bd10      	pop	{r4, pc}
 80012c6:	bf00      	nop
 80012c8:	24000008 	.word	0x24000008

080012cc <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 80012cc:	b538      	push	{r3, r4, r5, lr}
  bool ret = false;


  if (args->argc == 1 && args->isStr(0, "show"))
 80012ce:	8803      	ldrh	r3, [r0, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d116      	bne.n	8001302 <cliButton+0x36>
 80012d4:	6943      	ldr	r3, [r0, #20]
 80012d6:	2000      	movs	r0, #0
 80012d8:	490d      	ldr	r1, [pc, #52]	; (8001310 <cliButton+0x44>)
 80012da:	4798      	blx	r3
 80012dc:	b188      	cbz	r0, 8001302 <cliButton+0x36>
  {
    while(cliKeepLoop())
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
      {
        cliPrintf("%d", buttonGetPressed(i));
 80012de:	4c0d      	ldr	r4, [pc, #52]	; (8001314 <cliButton+0x48>)
      }
      cliPrintf("\n");
 80012e0:	4d0d      	ldr	r5, [pc, #52]	; (8001318 <cliButton+0x4c>)
    while(cliKeepLoop())
 80012e2:	f000 fbeb 	bl	8001abc <cliKeepLoop>
 80012e6:	b188      	cbz	r0, 800130c <cliButton+0x40>
  if (ch >= BUTTON_MAX_CH)
 80012e8:	f7ff ffe2 	bl	80012b0 <buttonGetPressed.part.0>
 80012ec:	4601      	mov	r1, r0
        cliPrintf("%d", buttonGetPressed(i));
 80012ee:	4620      	mov	r0, r4
 80012f0:	f000 f956 	bl	80015a0 <cliPrintf>
      cliPrintf("\n");
 80012f4:	4628      	mov	r0, r5
 80012f6:	f000 f953 	bl	80015a0 <cliPrintf>

      delay(100);
 80012fa:	2064      	movs	r0, #100	; 0x64
 80012fc:	f7ff fd42 	bl	8000d84 <delay>
 8001300:	e7ef      	b.n	80012e2 <cliButton+0x16>
  }


  if (ret != true)
  {
    cliPrintf("button show\n");
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <cliButton+0x50>)
  }
}
 8001304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cliPrintf("button show\n");
 8001308:	f000 b94a 	b.w	80015a0 <cliPrintf>
}
 800130c:	bd38      	pop	{r3, r4, r5, pc}
 800130e:	bf00      	nop
 8001310:	0800f60d 	.word	0x0800f60d
 8001314:	0800f612 	.word	0x0800f612
 8001318:	0800fcad 	.word	0x0800fcad
 800131c:	0800f615 	.word	0x0800f615

08001320 <buttonInit>:
{
 8001320:	b510      	push	{r4, lr}
 8001322:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	2210      	movs	r2, #16
 8001326:	2100      	movs	r1, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001328:	2401      	movs	r4, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	a802      	add	r0, sp, #8
 800132c:	f00a ff7a 	bl	800c224 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <buttonInit+0x48>)
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8001332:	a901      	add	r1, sp, #4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001334:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800133c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001344:	9403      	str	r4, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <buttonInit+0x4c>)
 8001350:	685a      	ldr	r2, [r3, #4]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8001352:	6818      	ldr	r0, [r3, #0]
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8001354:	9201      	str	r2, [sp, #4]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8001356:	f006 fc35 	bl	8007bc4 <HAL_GPIO_Init>
  cliAdd("button", cliButton);
 800135a:	4905      	ldr	r1, [pc, #20]	; (8001370 <buttonInit+0x50>)
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <buttonInit+0x54>)
 800135e:	f000 fbb9 	bl	8001ad4 <cliAdd>
}
 8001362:	4620      	mov	r0, r4
 8001364:	b006      	add	sp, #24
 8001366:	bd10      	pop	{r4, pc}
 8001368:	58024400 	.word	0x58024400
 800136c:	24000008 	.word	0x24000008
 8001370:	080012cd 	.word	0x080012cd
 8001374:	0800f622 	.word	0x0800f622

08001378 <buttonGetPressed>:
  if (ch >= BUTTON_MAX_CH)
 8001378:	b908      	cbnz	r0, 800137e <buttonGetPressed+0x6>
 800137a:	f7ff bf99 	b.w	80012b0 <buttonGetPressed.part.0>
}
 800137e:	2000      	movs	r0, #0
 8001380:	4770      	bx	lr

08001382 <cliToUpper>:
void cliToUpper(char *str)
{
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001382:	1e42      	subs	r2, r0, #1
 8001384:	f100 010f 	add.w	r1, r0, #15
{
 8001388:	b510      	push	{r4, lr}
  {
    str_ch = str[i];
 800138a:	f812 3f01 	ldrb.w	r3, [r2, #1]!

    if (str_ch == 0)
 800138e:	b153      	cbz	r3, 80013a6 <cliToUpper+0x24>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001390:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 8001394:	2c19      	cmp	r4, #25
    {
      str_ch = str_ch - 'a' + 'A';
 8001396:	bf9c      	itt	ls
 8001398:	3b20      	subls	r3, #32
 800139a:	b2db      	uxtbls	r3, r3
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800139c:	428a      	cmp	r2, r1
    }
    str[i] = str_ch;
 800139e:	7013      	strb	r3, [r2, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80013a0:	d1f3      	bne.n	800138a <cliToUpper+0x8>
  }

  if (i == CLI_CMD_NAME_MAX)
  {
    str[i-1] = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73c3      	strb	r3, [r0, #15]
  }
}
 80013a6:	bd10      	pop	{r4, pc}

080013a8 <cliArgsGetStr>:
{
  char *ret = NULL;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <cliArgsGetStr+0x18>)
 80013aa:	f8b3 24cc 	ldrh.w	r2, [r3, #1228]	; 0x4cc
 80013ae:	4282      	cmp	r2, r0
  {
    return 0;
  }

  ret = p_cli->cmd_args.argv[index];
 80013b0:	bf86      	itte	hi
 80013b2:	f8d3 34d0 	ldrhi.w	r3, [r3, #1232]	; 0x4d0
 80013b6:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
    return 0;
 80013ba:	2000      	movls	r0, #0

  return ret;
}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	24000224 	.word	0x24000224

080013c4 <cliArgsIsStr>:
{
  bool ret = false;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 80013c4:	4a09      	ldr	r2, [pc, #36]	; (80013ec <cliArgsIsStr+0x28>)
{
 80013c6:	b508      	push	{r3, lr}
 80013c8:	4603      	mov	r3, r0
 80013ca:	4608      	mov	r0, r1
  if (index >= p_cli->cmd_args.argc)
 80013cc:	f8b2 14cc 	ldrh.w	r1, [r2, #1228]	; 0x4cc
 80013d0:	4299      	cmp	r1, r3
 80013d2:	d909      	bls.n	80013e8 <cliArgsIsStr+0x24>
  {
    return 0;
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80013d4:	f8d2 24d0 	ldr.w	r2, [r2, #1232]	; 0x4d0
 80013d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80013dc:	f7fe ff80 	bl	80002e0 <strcmp>
 80013e0:	fab0 f080 	clz	r0, r0
 80013e4:	0940      	lsrs	r0, r0, #5
  {
    ret = true;
  }

  return ret;
}
 80013e6:	bd08      	pop	{r3, pc}
    return 0;
 80013e8:	2000      	movs	r0, #0
 80013ea:	e7fc      	b.n	80013e6 <cliArgsIsStr+0x22>
 80013ec:	24000224 	.word	0x24000224

080013f0 <cliArgsGetFloat>:
  if (index >= p_cli->cmd_args.argc)
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <cliArgsGetFloat+0x20>)
 80013f2:	f8b3 24cc 	ldrh.w	r2, [r3, #1228]	; 0x4cc
 80013f6:	4282      	cmp	r2, r0
 80013f8:	d906      	bls.n	8001408 <cliArgsGetFloat+0x18>
  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80013fa:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 80013fe:	2100      	movs	r1, #0
 8001400:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001404:	f00b be70 	b.w	800d0e8 <strtof>
}
 8001408:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8001414 <cliArgsGetFloat+0x24>
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	24000224 	.word	0x24000224
 8001414:	00000000 	.word	0x00000000

08001418 <cliArgsGetData>:
  if (index >= p_cli->cmd_args.argc)
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <cliArgsGetData+0x20>)
 800141a:	f8b3 24cc 	ldrh.w	r2, [r3, #1228]	; 0x4cc
 800141e:	4282      	cmp	r2, r0
 8001420:	d907      	bls.n	8001432 <cliArgsGetData+0x1a>
  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001422:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8001426:	2200      	movs	r2, #0
 8001428:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800142c:	4611      	mov	r1, r2
 800142e:	f00b bf3d 	b.w	800d2ac <strtoul>
}
 8001432:	2000      	movs	r0, #0
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	24000224 	.word	0x24000224

0800143c <cliLineChange.constprop.0>:
void cliLineChange(cli_t *p_cli, int8_t key_up)
 800143c:	b538      	push	{r3, r4, r5, lr}
  if (p_cli->hist_line_count == 0)
 800143e:	4c1e      	ldr	r4, [pc, #120]	; (80014b8 <cliLineChange.constprop.0+0x7c>)
void cliLineChange(cli_t *p_cli, int8_t key_up)
 8001440:	4605      	mov	r5, r0
  if (p_cli->hist_line_count == 0)
 8001442:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
 8001446:	b393      	cbz	r3, 80014ae <cliLineChange.constprop.0+0x72>
  if (p_cli->line.cursor > 0)
 8001448:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 800144c:	b11a      	cbz	r2, 8001456 <cliLineChange.constprop.0+0x1a>
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800144e:	491b      	ldr	r1, [pc, #108]	; (80014bc <cliLineChange.constprop.0+0x80>)
 8001450:	7820      	ldrb	r0, [r4, #0]
 8001452:	f002 fe49 	bl	80040e8 <uartPrintf>
  if (p_cli->line.count > 0)
 8001456:	f894 22e6 	ldrb.w	r2, [r4, #742]	; 0x2e6
 800145a:	b11a      	cbz	r2, 8001464 <cliLineChange.constprop.0+0x28>
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 800145c:	4918      	ldr	r1, [pc, #96]	; (80014c0 <cliLineChange.constprop.0+0x84>)
 800145e:	7820      	ldrb	r0, [r4, #0]
 8001460:	f002 fe42 	bl	80040e8 <uartPrintf>
  if (key_up == true)
 8001464:	2d01      	cmp	r5, #1
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001466:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
  if (key_up == true)
 800146a:	d121      	bne.n	80014b0 <cliLineChange.constprop.0+0x74>
    if (p_cli->hist_line_new == true)
 800146c:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
 8001470:	b11a      	cbz	r2, 800147a <cliLineChange.constprop.0+0x3e>
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001472:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
 8001476:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800147a:	f994 1195 	ldrsb.w	r1, [r4, #405]	; 0x195
 800147e:	4419      	add	r1, r3
 8001480:	3901      	subs	r1, #1
  p_cli->line = p_cli->line_buf[change_i];
 8001482:	4810      	ldr	r0, [pc, #64]	; (80014c4 <cliLineChange.constprop.0+0x88>)
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001484:	fb91 f2f3 	sdiv	r2, r1, r3
 8001488:	fb03 1112 	mls	r1, r3, r2, r1
  p_cli->line = p_cli->line_buf[change_i];
 800148c:	2243      	movs	r2, #67	; 0x43
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800148e:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8001492:	b2c9      	uxtb	r1, r1
  p_cli->line = p_cli->line_buf[change_i];
 8001494:	fb02 4101 	mla	r1, r2, r1, r4
 8001498:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 800149c:	f00a fe9a 	bl	800c1d4 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 80014a0:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 80014a4:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
  p_cli->hist_line_new = false;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
}
 80014ae:	bd38      	pop	{r3, r4, r5, pc}
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80014b0:	f994 1195 	ldrsb.w	r1, [r4, #405]	; 0x195
 80014b4:	3101      	adds	r1, #1
 80014b6:	e7e4      	b.n	8001482 <cliLineChange.constprop.0+0x46>
 80014b8:	24000224 	.word	0x24000224
 80014bc:	0800f629 	.word	0x0800f629
 80014c0:	0800f62f 	.word	0x0800f62f
 80014c4:	240004c8 	.word	0x240004c8

080014c8 <cliOpen>:
{
 80014c8:	b510      	push	{r4, lr}
  cli_node.ch = ch;
 80014ca:	4c03      	ldr	r4, [pc, #12]	; (80014d8 <cliOpen+0x10>)
 80014cc:	7020      	strb	r0, [r4, #0]
  cli_node.baud = baud;
 80014ce:	6061      	str	r1, [r4, #4]
  cli_node.is_open = uartOpen(ch, baud);
 80014d0:	f002 fd78 	bl	8003fc4 <uartOpen>
 80014d4:	7220      	strb	r0, [r4, #8]
}
 80014d6:	bd10      	pop	{r4, pc}
 80014d8:	24000224 	.word	0x24000224

080014dc <cliShowLog>:
{
 80014dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cli_node.is_log == true)
 80014de:	4b23      	ldr	r3, [pc, #140]	; (800156c <cliShowLog+0x90>)
{
 80014e0:	4604      	mov	r4, r0
  if (cli_node.is_log == true)
 80014e2:	7a5b      	ldrb	r3, [r3, #9]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d03f      	beq.n	8001568 <cliShowLog+0x8c>
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80014e8:	f890 22e5 	ldrb.w	r2, [r0, #741]	; 0x2e5
 80014ec:	f504 76cc 	add.w	r6, r4, #408	; 0x198
 80014f0:	491f      	ldr	r1, [pc, #124]	; (8001570 <cliShowLog+0x94>)
    for (int i=0; i<p_cli->hist_line_count; i++)
 80014f2:	2500      	movs	r5, #0
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80014f4:	7a80      	ldrb	r0, [r0, #10]
 80014f6:	f002 fdf7 	bl	80040e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80014fa:	f894 22e6 	ldrb.w	r2, [r4, #742]	; 0x2e6
 80014fe:	491d      	ldr	r1, [pc, #116]	; (8001574 <cliShowLog+0x98>)
 8001500:	7aa0      	ldrb	r0, [r4, #10]
 8001502:	f002 fdf1 	bl	80040e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001506:	f894 22e4 	ldrb.w	r2, [r4, #740]	; 0x2e4
 800150a:	491b      	ldr	r1, [pc, #108]	; (8001578 <cliShowLog+0x9c>)
 800150c:	7aa0      	ldrb	r0, [r4, #10]
 800150e:	f002 fdeb 	bl	80040e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001512:	f504 7229 	add.w	r2, r4, #676	; 0x2a4
 8001516:	4919      	ldr	r1, [pc, #100]	; (800157c <cliShowLog+0xa0>)
 8001518:	7aa0      	ldrb	r0, [r4, #10]
 800151a:	f002 fde5 	bl	80040e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800151e:	f994 2195 	ldrsb.w	r2, [r4, #405]	; 0x195
 8001522:	4917      	ldr	r1, [pc, #92]	; (8001580 <cliShowLog+0xa4>)
 8001524:	7aa0      	ldrb	r0, [r4, #10]
 8001526:	f002 fddf 	bl	80040e8 <uartPrintf>
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 800152a:	4f16      	ldr	r7, [pc, #88]	; (8001584 <cliShowLog+0xa8>)
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800152c:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
 8001530:	4915      	ldr	r1, [pc, #84]	; (8001588 <cliShowLog+0xac>)
 8001532:	7aa0      	ldrb	r0, [r4, #10]
 8001534:	f002 fdd8 	bl	80040e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001538:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
 800153c:	4913      	ldr	r1, [pc, #76]	; (800158c <cliShowLog+0xb0>)
 800153e:	7aa0      	ldrb	r0, [r4, #10]
 8001540:	f002 fdd2 	bl	80040e8 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001544:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001548:	7aa0      	ldrb	r0, [r4, #10]
    for (int i=0; i<p_cli->hist_line_count; i++)
 800154a:	429d      	cmp	r5, r3
 800154c:	db04      	blt.n	8001558 <cliShowLog+0x7c>
    uartPrintf(p_cli->log_ch, "\n");
 800154e:	4910      	ldr	r1, [pc, #64]	; (8001590 <cliShowLog+0xb4>)
}
 8001550:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    uartPrintf(p_cli->log_ch, "\n");
 8001554:	f002 bdc8 	b.w	80040e8 <uartPrintf>
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001558:	4633      	mov	r3, r6
 800155a:	462a      	mov	r2, r5
 800155c:	4639      	mov	r1, r7
    for (int i=0; i<p_cli->hist_line_count; i++)
 800155e:	3501      	adds	r5, #1
 8001560:	3643      	adds	r6, #67	; 0x43
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001562:	f002 fdc1 	bl	80040e8 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001566:	e7ed      	b.n	8001544 <cliShowLog+0x68>
}
 8001568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800156a:	bf00      	nop
 800156c:	24000224 	.word	0x24000224
 8001570:	0800f635 	.word	0x0800f635
 8001574:	0800f643 	.word	0x0800f643
 8001578:	0800f651 	.word	0x0800f651
 800157c:	0800f65f 	.word	0x0800f65f
 8001580:	0800f66d 	.word	0x0800f66d
 8001584:	0800f697 	.word	0x0800f697
 8001588:	0800f67b 	.word	0x0800f67b
 800158c:	0800f689 	.word	0x0800f689
 8001590:	0800fcad 	.word	0x0800fcad

08001594 <cliAvailable>:
  return uartAvailable(cli_node.ch);
 8001594:	4b01      	ldr	r3, [pc, #4]	; (800159c <cliAvailable+0x8>)
 8001596:	7818      	ldrb	r0, [r3, #0]
 8001598:	f002 bd70 	b.w	800407c <uartAvailable>
 800159c:	24000224 	.word	0x24000224

080015a0 <cliPrintf>:
{
 80015a0:	b40f      	push	{r0, r1, r2, r3}
 80015a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80015a4:	4c0a      	ldr	r4, [pc, #40]	; (80015d0 <cliPrintf+0x30>)
{
 80015a6:	ab06      	add	r3, sp, #24
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80015a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ac:	f104 0511 	add.w	r5, r4, #17
{
 80015b0:	f853 2b04 	ldr.w	r2, [r3], #4
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80015b4:	4628      	mov	r0, r5
  va_start (arg, fmt);
 80015b6:	9301      	str	r3, [sp, #4]
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80015b8:	f00b feae 	bl	800d318 <vsniprintf>
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80015bc:	4629      	mov	r1, r5
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80015be:	4602      	mov	r2, r0
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80015c0:	7820      	ldrb	r0, [r4, #0]
 80015c2:	f002 fd7f 	bl	80040c4 <uartWrite>
}
 80015c6:	b003      	add	sp, #12
 80015c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80015cc:	b004      	add	sp, #16
 80015ce:	4770      	bx	lr
 80015d0:	24000224 	.word	0x24000224

080015d4 <cliShowList>:

  return ret;
}

void cliShowList(cli_args_t *args)
{
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d6:	4c0e      	ldr	r4, [pc, #56]	; (8001610 <cliShowList+0x3c>)


  cliPrintf("\r\n");
  cliPrintf("---------- cmd list ---------\r\n");

  for (int i=0; i<p_cli->cmd_count; i++)
 80015d8:	2500      	movs	r5, #0
  cliPrintf("\r\n");
 80015da:	480e      	ldr	r0, [pc, #56]	; (8001614 <cliShowList+0x40>)
  for (int i=0; i<p_cli->cmd_count; i++)
 80015dc:	f5a4 763b 	sub.w	r6, r4, #748	; 0x2ec
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
    cliPrintf("\r\n");
 80015e0:	4f0c      	ldr	r7, [pc, #48]	; (8001614 <cliShowList+0x40>)
  cliPrintf("\r\n");
 80015e2:	f7ff ffdd 	bl	80015a0 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80015e6:	480c      	ldr	r0, [pc, #48]	; (8001618 <cliShowList+0x44>)
 80015e8:	f7ff ffda 	bl	80015a0 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80015ec:	f8b6 32e8 	ldrh.w	r3, [r6, #744]	; 0x2e8
 80015f0:	42ab      	cmp	r3, r5
 80015f2:	dc04      	bgt.n	80015fe <cliShowList+0x2a>
  }

  cliPrintf("-----------------------------\r\n");
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <cliShowList+0x48>)
}
 80015f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  cliPrintf("-----------------------------\r\n");
 80015fa:	f7ff bfd1 	b.w	80015a0 <cliPrintf>
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80015fe:	4620      	mov	r0, r4
  for (int i=0; i<p_cli->cmd_count; i++)
 8001600:	3501      	adds	r5, #1
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8001602:	f7ff ffcd 	bl	80015a0 <cliPrintf>
    cliPrintf("\r\n");
 8001606:	4638      	mov	r0, r7
 8001608:	3414      	adds	r4, #20
 800160a:	f7ff ffc9 	bl	80015a0 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800160e:	e7ed      	b.n	80015ec <cliShowList+0x18>
 8001610:	24000510 	.word	0x24000510
 8001614:	0800f6c3 	.word	0x0800f6c3
 8001618:	0800f6a6 	.word	0x0800f6a6
 800161c:	0800f6c6 	.word	0x0800f6c6

08001620 <cliMemoryDump>:
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8001620:	8803      	ldrh	r3, [r0, #0]
{
 8001622:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001626:	b085      	sub	sp, #20
  char **argv = args->argv;


  if(args->argc < 1)
 8001628:	b92b      	cbnz	r3, 8001636 <cliMemoryDump+0x16>
  {
    cliPrintf(">> md addr [size] \n");
 800162a:	482d      	ldr	r0, [pc, #180]	; (80016e0 <cliMemoryDump+0xc0>)
      }
      cliPrintf("|\n   ");
    }
    addr++;
  }
}
 800162c:	b005      	add	sp, #20
 800162e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cliPrintf(">> md addr [size] \n");
 8001632:	f7ff bfb5 	b.w	80015a0 <cliPrintf>
  if(argc > 1)
 8001636:	2b01      	cmp	r3, #1
  char **argv = args->argv;
 8001638:	6844      	ldr	r4, [r0, #4]
  if(argc > 1)
 800163a:	d015      	beq.n	8001668 <cliMemoryDump+0x48>
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800163c:	2200      	movs	r2, #0
 800163e:	6860      	ldr	r0, [r4, #4]
 8001640:	4611      	mov	r1, r2
 8001642:	f00b fe33 	bl	800d2ac <strtoul>
 8001646:	4606      	mov	r6, r0
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8001648:	2200      	movs	r2, #0
 800164a:	6820      	ldr	r0, [r4, #0]
  for (idx = 0; idx<size; idx++)
 800164c:	2500      	movs	r5, #0
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800164e:	4611      	mov	r1, r2
 8001650:	f00b fe2c 	bl	800d2ac <strtoul>
 8001654:	4604      	mov	r4, r0
  cliPrintf("\n   ");
 8001656:	4823      	ldr	r0, [pc, #140]	; (80016e4 <cliMemoryDump+0xc4>)
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8001658:	4627      	mov	r7, r4
  cliPrintf("\n   ");
 800165a:	f7ff ffa1 	bl	80015a0 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800165e:	42b5      	cmp	r5, r6
 8001660:	db04      	blt.n	800166c <cliMemoryDump+0x4c>
}
 8001662:	b005      	add	sp, #20
 8001664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int idx, size = 16;
 8001668:	2610      	movs	r6, #16
 800166a:	e7ed      	b.n	8001648 <cliMemoryDump+0x28>
    if((idx%4) == 0)
 800166c:	f015 0803 	ands.w	r8, r5, #3
 8001670:	d103      	bne.n	800167a <cliMemoryDump+0x5a>
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8001672:	4639      	mov	r1, r7
 8001674:	481c      	ldr	r0, [pc, #112]	; (80016e8 <cliMemoryDump+0xc8>)
 8001676:	f7ff ff93 	bl	80015a0 <cliPrintf>
    cliPrintf(" 0x%08X", *(addr));
 800167a:	6839      	ldr	r1, [r7, #0]
 800167c:	481b      	ldr	r0, [pc, #108]	; (80016ec <cliMemoryDump+0xcc>)
 800167e:	f7ff ff8f 	bl	80015a0 <cliPrintf>
    if ((idx%4) == 3)
 8001682:	f1b8 0f03 	cmp.w	r8, #3
 8001686:	d124      	bne.n	80016d2 <cliMemoryDump+0xb2>
      cliPrintf ("  |");
 8001688:	4819      	ldr	r0, [pc, #100]	; (80016f0 <cliMemoryDump+0xd0>)
 800168a:	f7ff ff89 	bl	80015a0 <cliPrintf>
            cliPrintf(".");
 800168e:	f8df a068 	ldr.w	sl, [pc, #104]	; 80016f8 <cliMemoryDump+0xd8>
 8001692:	f104 0310 	add.w	r3, r4, #16
            cliPrintf("%c", asc[i]);
 8001696:	f8df b064 	ldr.w	fp, [pc, #100]	; 80016fc <cliMemoryDump+0xdc>
 800169a:	9301      	str	r3, [sp, #4]
        memcpy((char *)asc, (char *)ascptr, 4);
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	f10d 080c 	add.w	r8, sp, #12
        for (i=0;i<4;i++)
 80016a2:	f04f 0900 	mov.w	r9, #0
        memcpy((char *)asc, (char *)ascptr, 4);
 80016a6:	9303      	str	r3, [sp, #12]
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80016a8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80016ac:	f1a1 0220 	sub.w	r2, r1, #32
 80016b0:	2a5e      	cmp	r2, #94	; 0x5e
 80016b2:	d811      	bhi.n	80016d8 <cliMemoryDump+0xb8>
            cliPrintf("%c", asc[i]);
 80016b4:	4658      	mov	r0, fp
 80016b6:	f7ff ff73 	bl	80015a0 <cliPrintf>
        for (i=0;i<4;i++)
 80016ba:	f109 0901 	add.w	r9, r9, #1
 80016be:	f1b9 0f04 	cmp.w	r9, #4
 80016c2:	d1f1      	bne.n	80016a8 <cliMemoryDump+0x88>
        ascptr+=1;
 80016c4:	3404      	adds	r4, #4
      for (idx1= 0; idx1< 4; idx1++)
 80016c6:	9b01      	ldr	r3, [sp, #4]
 80016c8:	429c      	cmp	r4, r3
 80016ca:	d1e7      	bne.n	800169c <cliMemoryDump+0x7c>
      cliPrintf("|\n   ");
 80016cc:	4809      	ldr	r0, [pc, #36]	; (80016f4 <cliMemoryDump+0xd4>)
 80016ce:	f7ff ff67 	bl	80015a0 <cliPrintf>
    addr++;
 80016d2:	3704      	adds	r7, #4
  for (idx = 0; idx<size; idx++)
 80016d4:	3501      	adds	r5, #1
 80016d6:	e7c2      	b.n	800165e <cliMemoryDump+0x3e>
            cliPrintf(".");
 80016d8:	4650      	mov	r0, sl
 80016da:	f7ff ff61 	bl	80015a0 <cliPrintf>
 80016de:	e7ec      	b.n	80016ba <cliMemoryDump+0x9a>
 80016e0:	0800f6e6 	.word	0x0800f6e6
 80016e4:	0800f716 	.word	0x0800f716
 80016e8:	0800f6fa 	.word	0x0800f6fa
 80016ec:	0800f704 	.word	0x0800f704
 80016f0:	0800f70c 	.word	0x0800f70c
 80016f4:	0800f715 	.word	0x0800f715
 80016f8:	0800f713 	.word	0x0800f713
 80016fc:	0800f710 	.word	0x0800f710

08001700 <cliMain>:
{
 8001700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (cli_node.is_open != true)
 8001704:	4ca1      	ldr	r4, [pc, #644]	; (800198c <cliMain+0x28c>)
{
 8001706:	b085      	sub	sp, #20
  if (cli_node.is_open != true)
 8001708:	7a27      	ldrb	r7, [r4, #8]
 800170a:	2f00      	cmp	r7, #0
 800170c:	f000 8137 	beq.w	800197e <cliMain+0x27e>
  if (uartAvailable(cli_node.ch) > 0)
 8001710:	7820      	ldrb	r0, [r4, #0]
 8001712:	f002 fcb3 	bl	800407c <uartAvailable>
 8001716:	2800      	cmp	r0, #0
 8001718:	f000 8131 	beq.w	800197e <cliMain+0x27e>
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800171c:	7820      	ldrb	r0, [r4, #0]
 800171e:	f002 fcbf 	bl	80040a0 <uartRead>
  if (p_cli->state == CLI_RX_IDLE)
 8001722:	f894 8010 	ldrb.w	r8, [r4, #16]
 8001726:	f88d 0007 	strb.w	r0, [sp, #7]
 800172a:	f1b8 0f00 	cmp.w	r8, #0
 800172e:	f040 80de 	bne.w	80018ee <cliMain+0x1ee>
    switch(rx_data)
 8001732:	281b      	cmp	r0, #27
 8001734:	f000 811e 	beq.w	8001974 <cliMain+0x274>
 8001738:	d852      	bhi.n	80017e0 <cliMain+0xe0>
 800173a:	2808      	cmp	r0, #8
 800173c:	f000 80ee 	beq.w	800191c <cliMain+0x21c>
 8001740:	280d      	cmp	r0, #13
 8001742:	d06a      	beq.n	800181a <cliMain+0x11a>
        if ((line->count + 1) < line->buf_len)
 8001744:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8001748:	f894 22e4 	ldrb.w	r2, [r4, #740]	; 0x2e4
 800174c:	1c59      	adds	r1, r3, #1
 800174e:	4291      	cmp	r1, r2
 8001750:	f280 8112 	bge.w	8001978 <cliMain+0x278>
          if (line->cursor == line->count)
 8001754:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 8001758:	429a      	cmp	r2, r3
 800175a:	d119      	bne.n	8001790 <cliMain+0x90>
            uartWrite(p_cli->ch, &rx_data, 1);
 800175c:	2201      	movs	r2, #1
 800175e:	f10d 0107 	add.w	r1, sp, #7
 8001762:	7820      	ldrb	r0, [r4, #0]
 8001764:	f002 fcae 	bl	80040c4 <uartWrite>
            line->buf[line->cursor] = rx_data;
 8001768:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 800176c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001770:	18a3      	adds	r3, r4, r2
            line->cursor++;
 8001772:	3201      	adds	r2, #1
            line->buf[line->cursor] = rx_data;
 8001774:	f883 12a4 	strb.w	r1, [r3, #676]	; 0x2a4
            line->count++;
 8001778:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
            line->cursor++;
 800177c:	f884 22e5 	strb.w	r2, [r4, #741]	; 0x2e5
            line->buf[line->count] = 0;
 8001780:	2200      	movs	r2, #0
            line->count++;
 8001782:	3301      	adds	r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
            line->buf[line->count] = 0;
 800178a:	4423      	add	r3, r4
 800178c:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
          if (line->cursor < line->count)
 8001790:	f894 62e5 	ldrb.w	r6, [r4, #741]	; 0x2e5
 8001794:	f894 52e6 	ldrb.w	r5, [r4, #742]	; 0x2e6
 8001798:	42ae      	cmp	r6, r5
 800179a:	f080 80a8 	bcs.w	80018ee <cliMain+0x1ee>
            mov_len = line->count - line->cursor;
 800179e:	1baa      	subs	r2, r5, r6
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 80017a0:	f505 7129 	add.w	r1, r5, #676	; 0x2a4
 80017a4:	f205 20a5 	addw	r0, r5, #677	; 0x2a5
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	1a89      	subs	r1, r1, r2
 80017ac:	1a80      	subs	r0, r0, r2
 80017ae:	4421      	add	r1, r4
 80017b0:	4420      	add	r0, r4
 80017b2:	f00a fd1d 	bl	800c1f0 <memmove>
            line->buf[line->cursor] = rx_data;
 80017b6:	19a3      	adds	r3, r4, r6
 80017b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
            line->buf[line->count] = 0;
 80017bc:	2100      	movs	r1, #0
            line->cursor++;
 80017be:	3601      	adds	r6, #1
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80017c0:	7820      	ldrb	r0, [r4, #0]
            line->buf[line->cursor] = rx_data;
 80017c2:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
            line->count++;
 80017c6:	1c6b      	adds	r3, r5, #1
            line->cursor++;
 80017c8:	f884 62e5 	strb.w	r6, [r4, #741]	; 0x2e5
            line->count++;
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
            line->buf[line->count] = 0;
 80017d2:	4423      	add	r3, r4
 80017d4:	f883 12a4 	strb.w	r1, [r3, #676]	; 0x2a4
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80017d8:	496d      	ldr	r1, [pc, #436]	; (8001990 <cliMain+0x290>)
 80017da:	f002 fc85 	bl	80040e8 <uartPrintf>
 80017de:	e086      	b.n	80018ee <cliMain+0x1ee>
    switch(rx_data)
 80017e0:	287f      	cmp	r0, #127	; 0x7f
 80017e2:	d1af      	bne.n	8001744 <cliMain+0x44>
        if (line->cursor < line->count)
 80017e4:	f894 02e5 	ldrb.w	r0, [r4, #741]	; 0x2e5
 80017e8:	f894 52e6 	ldrb.w	r5, [r4, #742]	; 0x2e6
 80017ec:	42a8      	cmp	r0, r5
 80017ee:	f080 80c3 	bcs.w	8001978 <cliMain+0x278>
          mov_len = line->count - line->cursor;
 80017f2:	1a2a      	subs	r2, r5, r0
          line->count--;
 80017f4:	3d01      	subs	r5, #1
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80017f6:	f200 21a5 	addw	r1, r0, #677	; 0x2a5
 80017fa:	f500 7029 	add.w	r0, r0, #676	; 0x2a4
 80017fe:	b2d2      	uxtb	r2, r2
          line->count--;
 8001800:	b2ed      	uxtb	r5, r5
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001802:	4421      	add	r1, r4
 8001804:	3a01      	subs	r2, #1
 8001806:	4420      	add	r0, r4
 8001808:	f00a fcf2 	bl	800c1f0 <memmove>
          line->count--;
 800180c:	f884 52e6 	strb.w	r5, [r4, #742]	; 0x2e6
          line->buf[line->count] = 0;
 8001810:	4425      	add	r5, r4
          uartPrintf(p_cli->ch, "\x1B[1P");
 8001812:	4960      	ldr	r1, [pc, #384]	; (8001994 <cliMain+0x294>)
          line->buf[line->count] = 0;
 8001814:	f885 82a4 	strb.w	r8, [r5, #676]	; 0x2a4
          uartPrintf(p_cli->ch, "\x1B[1P");
 8001818:	e066      	b.n	80018e8 <cliMain+0x1e8>
        if (line->count > 0)
 800181a:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 800181e:	2b00      	cmp	r3, #0
 8001820:	d056      	beq.n	80018d0 <cliMain+0x1d0>
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001822:	f894 5196 	ldrb.w	r5, [r4, #406]	; 0x196
 8001826:	2243      	movs	r2, #67	; 0x43
 8001828:	f504 7129 	add.w	r1, r4, #676	; 0x2a4
  p_cli->argc = 0;
 800182c:	2600      	movs	r6, #0
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800182e:	fb02 4005 	mla	r0, r2, r5, r4
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001832:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8001998 <cliMain+0x298>
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001836:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 800183a:	f00a fccb 	bl	800c1d4 <memcpy>
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800183e:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001842:	f884 5195 	strb.w	r5, [r4, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001846:	3501      	adds	r5, #1
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001848:	2b03      	cmp	r3, #3
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800184a:	aa02      	add	r2, sp, #8
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800184c:	f005 0503 	and.w	r5, r5, #3
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001850:	4951      	ldr	r1, [pc, #324]	; (8001998 <cliMain+0x298>)
    p_cli->hist_line_count++;
 8001852:	bf98      	it	ls
 8001854:	3301      	addls	r3, #1
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001856:	4851      	ldr	r0, [pc, #324]	; (800199c <cliMain+0x29c>)
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001858:	f884 5196 	strb.w	r5, [r4, #406]	; 0x196
    p_cli->hist_line_count++;
 800185c:	bf98      	it	ls
 800185e:	f884 3197 	strbls.w	r3, [r4, #407]	; 0x197
  p_cli->hist_line_new  = true;
 8001862:	2301      	movs	r3, #1
  p_cli->argc = 0;
 8001864:	f8a4 6112 	strh.w	r6, [r4, #274]	; 0x112
  p_cli->hist_line_new  = true;
 8001868:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
  argv[argc] = NULL;
 800186c:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001870:	f00b fca6 	bl	800d1c0 <strtok_r>
 8001874:	4633      	mov	r3, r6
 8001876:	4605      	mov	r5, r0
 8001878:	b29a      	uxth	r2, r3
 800187a:	1c5e      	adds	r6, r3, #1
 800187c:	2d00      	cmp	r5, #0
 800187e:	d13e      	bne.n	80018fe <cliMain+0x1fe>
  p_cli->argc = argc;
 8001880:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
  if (argc > 0)
 8001884:	b322      	cbz	r2, 80018d0 <cliMain+0x1d0>
    cliPrintf("\r\n");
 8001886:	4846      	ldr	r0, [pc, #280]	; (80019a0 <cliMain+0x2a0>)
 8001888:	f7ff fe8a 	bl	80015a0 <cliPrintf>
    cliToUpper(p_cli->argv[0]);
 800188c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8001890:	f7ff fd77 	bl	8001382 <cliToUpper>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001894:	4e43      	ldr	r6, [pc, #268]	; (80019a4 <cliMain+0x2a4>)
 8001896:	f8b4 82e8 	ldrh.w	r8, [r4, #744]	; 0x2e8
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800189a:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
    for (int i=0; i<p_cli->cmd_count; i++)
 800189e:	4545      	cmp	r5, r8
 80018a0:	da16      	bge.n	80018d0 <cliMain+0x1d0>
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80018a2:	4631      	mov	r1, r6
 80018a4:	4648      	mov	r0, r9
 80018a6:	3614      	adds	r6, #20
 80018a8:	f7fe fd1a 	bl	80002e0 <strcmp>
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d133      	bne.n	8001918 <cliMain+0x218>
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80018b0:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80018b4:	483c      	ldr	r0, [pc, #240]	; (80019a8 <cliMain+0x2a8>)
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80018b6:	3b01      	subs	r3, #1
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80018b8:	f8c4 04d0 	str.w	r0, [r4, #1232]	; 0x4d0
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80018bc:	f500 706d 	add.w	r0, r0, #948	; 0x3b4
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80018c0:	f8a4 34cc 	strh.w	r3, [r4, #1228]	; 0x4cc
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80018c4:	2314      	movs	r3, #20
 80018c6:	fb03 4505 	mla	r5, r3, r5, r4
 80018ca:	f8d5 32fc 	ldr.w	r3, [r5, #764]	; 0x2fc
 80018ce:	4798      	blx	r3
        line->count = 0;
 80018d0:	2300      	movs	r3, #0
  uartPrintf(p_cli->ch, "\n\r");
 80018d2:	4936      	ldr	r1, [pc, #216]	; (80019ac <cliMain+0x2ac>)
 80018d4:	7820      	ldrb	r0, [r4, #0]
        line->count = 0;
 80018d6:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
        line->cursor = 0;
 80018da:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
        line->buf[0] = 0;
 80018de:	f884 32a4 	strb.w	r3, [r4, #676]	; 0x2a4
  uartPrintf(p_cli->ch, "\n\r");
 80018e2:	f002 fc01 	bl	80040e8 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 80018e6:	4932      	ldr	r1, [pc, #200]	; (80019b0 <cliMain+0x2b0>)
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80018e8:	7820      	ldrb	r0, [r4, #0]
 80018ea:	f002 fbfd 	bl	80040e8 <uartPrintf>
  switch(p_cli->state)
 80018ee:	7c23      	ldrb	r3, [r4, #16]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d840      	bhi.n	8001978 <cliMain+0x278>
 80018f6:	e8df f003 	tbb	[pc, r3]
 80018fa:	463d      	.short	0x463d
 80018fc:	d95f      	.short	0xd95f
    argv[argc++] = tok;
 80018fe:	b29b      	uxth	r3, r3
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001900:	aa02      	add	r2, sp, #8
 8001902:	4641      	mov	r1, r8
 8001904:	2000      	movs	r0, #0
    argv[argc++] = tok;
 8001906:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800190a:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800190e:	f00b fc57 	bl	800d1c0 <strtok_r>
 8001912:	4633      	mov	r3, r6
 8001914:	4605      	mov	r5, r0
 8001916:	e7af      	b.n	8001878 <cliMain+0x178>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001918:	3501      	adds	r5, #1
 800191a:	e7c0      	b.n	800189e <cliMain+0x19e>
        if (line->count > 0 && line->cursor > 0)
 800191c:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
        if (line->cursor < line->count)
 8001920:	f894 62e5 	ldrb.w	r6, [r4, #741]	; 0x2e5
        if (line->count > 0 && line->cursor > 0)
 8001924:	b92b      	cbnz	r3, 8001932 <cliMain+0x232>
        if (line->cursor > 0)
 8001926:	b33e      	cbz	r6, 8001978 <cliMain+0x278>
          line->cursor--;
 8001928:	1e73      	subs	r3, r6, #1
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800192a:	4922      	ldr	r1, [pc, #136]	; (80019b4 <cliMain+0x2b4>)
          line->cursor--;
 800192c:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001930:	e7da      	b.n	80018e8 <cliMain+0x1e8>
        if (line->count > 0 && line->cursor > 0)
 8001932:	b30e      	cbz	r6, 8001978 <cliMain+0x278>
          if (line->cursor == line->count)
 8001934:	42b3      	cmp	r3, r6
 8001936:	d106      	bne.n	8001946 <cliMain+0x246>
            line->count--;
 8001938:	1e73      	subs	r3, r6, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
            line->buf[line->count] = 0;
 8001940:	4423      	add	r3, r4
 8001942:	f883 82a4 	strb.w	r8, [r3, #676]	; 0x2a4
          if (line->cursor < line->count)
 8001946:	f894 52e6 	ldrb.w	r5, [r4, #742]	; 0x2e6
 800194a:	42b5      	cmp	r5, r6
 800194c:	d9ec      	bls.n	8001928 <cliMain+0x228>
            mov_len = line->count - line->cursor;
 800194e:	1baa      	subs	r2, r5, r6
            line->count--;
 8001950:	3d01      	subs	r5, #1
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001952:	f506 7129 	add.w	r1, r6, #676	; 0x2a4
 8001956:	f206 20a3 	addw	r0, r6, #675	; 0x2a3
            line->count--;
 800195a:	b2ed      	uxtb	r5, r5
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	4421      	add	r1, r4
 8001960:	4420      	add	r0, r4
 8001962:	f00a fc45 	bl	800c1f0 <memmove>
            line->buf[line->count] = 0;
 8001966:	2300      	movs	r3, #0
            line->count--;
 8001968:	f884 52e6 	strb.w	r5, [r4, #742]	; 0x2e6
            line->buf[line->count] = 0;
 800196c:	4425      	add	r5, r4
 800196e:	f885 32a4 	strb.w	r3, [r5, #676]	; 0x2a4
        if (line->cursor > 0)
 8001972:	e7d9      	b.n	8001928 <cliMain+0x228>
      p_cli->state = CLI_RX_SP2;
 8001974:	2302      	movs	r3, #2
      p_cli->state = CLI_RX_IDLE;
 8001976:	7423      	strb	r3, [r4, #16]
  cliShowLog(p_cli);
 8001978:	4804      	ldr	r0, [pc, #16]	; (800198c <cliMain+0x28c>)
 800197a:	f7ff fdaf 	bl	80014dc <cliShowLog>
}
 800197e:	4638      	mov	r0, r7
 8001980:	b005      	add	sp, #20
 8001982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p_cli->state = CLI_RX_SP3;
 8001986:	2303      	movs	r3, #3
 8001988:	e7f5      	b.n	8001976 <cliMain+0x276>
 800198a:	bf00      	nop
 800198c:	24000224 	.word	0x24000224
 8001990:	0800f733 	.word	0x0800f733
 8001994:	0800f72e 	.word	0x0800f72e
 8001998:	0800f71b 	.word	0x0800f71b
 800199c:	240004c8 	.word	0x240004c8
 80019a0:	0800f6c3 	.word	0x0800f6c3
 80019a4:	24000510 	.word	0x24000510
 80019a8:	2400033c 	.word	0x2400033c
 80019ac:	0800f722 	.word	0x0800f722
 80019b0:	0800f725 	.word	0x0800f725
 80019b4:	0800f72b 	.word	0x0800f72b
      if (rx_data == CLI_KEY_LEFT)
 80019b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
      p_cli->state = CLI_RX_IDLE;
 80019bc:	2300      	movs	r3, #0
      if (rx_data == CLI_KEY_LEFT)
 80019be:	2a44      	cmp	r2, #68	; 0x44
      p_cli->state = CLI_RX_IDLE;
 80019c0:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_LEFT)
 80019c2:	d112      	bne.n	80019ea <cliMain+0x2ea>
        if (line->cursor > 0)
 80019c4:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 80019c8:	b3a3      	cbz	r3, 8001a34 <cliMain+0x334>
          line->cursor--;
 80019ca:	3b01      	subs	r3, #1
          tx_buf[2] = rx_data;
 80019cc:	f88d 200a 	strb.w	r2, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 80019d0:	a902      	add	r1, sp, #8
 80019d2:	2203      	movs	r2, #3
          line->cursor--;
 80019d4:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
          tx_buf[0] = 0x1B;
 80019d8:	231b      	movs	r3, #27
          uartWrite(p_cli->ch, tx_buf, 3);
 80019da:	7820      	ldrb	r0, [r4, #0]
          tx_buf[0] = 0x1B;
 80019dc:	f88d 3008 	strb.w	r3, [sp, #8]
          tx_buf[1] = 0x5B;
 80019e0:	235b      	movs	r3, #91	; 0x5b
 80019e2:	f88d 3009 	strb.w	r3, [sp, #9]
          uartWrite(p_cli->ch, tx_buf, 3);
 80019e6:	f002 fb6d 	bl	80040c4 <uartWrite>
      if (rx_data == CLI_KEY_RIGHT)
 80019ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80019ee:	2a43      	cmp	r2, #67	; 0x43
 80019f0:	d115      	bne.n	8001a1e <cliMain+0x31e>
        if (line->cursor < line->count)
 80019f2:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 80019f6:	f894 12e6 	ldrb.w	r1, [r4, #742]	; 0x2e6
 80019fa:	4299      	cmp	r1, r3
 80019fc:	d925      	bls.n	8001a4a <cliMain+0x34a>
          line->cursor++;
 80019fe:	3301      	adds	r3, #1
          tx_buf[2] = rx_data;
 8001a00:	f88d 200a 	strb.w	r2, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001a04:	a902      	add	r1, sp, #8
 8001a06:	2203      	movs	r2, #3
          line->cursor++;
 8001a08:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
          tx_buf[0] = 0x1B;
 8001a0c:	231b      	movs	r3, #27
          uartWrite(p_cli->ch, tx_buf, 3);
 8001a0e:	7820      	ldrb	r0, [r4, #0]
          tx_buf[0] = 0x1B;
 8001a10:	f88d 3008 	strb.w	r3, [sp, #8]
          tx_buf[1] = 0x5B;
 8001a14:	235b      	movs	r3, #91	; 0x5b
 8001a16:	f88d 3009 	strb.w	r3, [sp, #9]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001a1a:	f002 fb53 	bl	80040c4 <uartWrite>
      if (rx_data == CLI_KEY_UP)
 8001a1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a22:	2b41      	cmp	r3, #65	; 0x41
 8001a24:	d106      	bne.n	8001a34 <cliMain+0x334>
        cliLineChange(p_cli, true);
 8001a26:	2001      	movs	r0, #1
 8001a28:	f7ff fd08 	bl	800143c <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001a2c:	4920      	ldr	r1, [pc, #128]	; (8001ab0 <cliMain+0x3b0>)
 8001a2e:	7820      	ldrb	r0, [r4, #0]
 8001a30:	f002 fb5a 	bl	80040e8 <uartPrintf>
      if (rx_data == CLI_KEY_DOWN)
 8001a34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a38:	2b42      	cmp	r3, #66	; 0x42
 8001a3a:	d106      	bne.n	8001a4a <cliMain+0x34a>
        cliLineChange(p_cli, false);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fcfd 	bl	800143c <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001a42:	491b      	ldr	r1, [pc, #108]	; (8001ab0 <cliMain+0x3b0>)
 8001a44:	7820      	ldrb	r0, [r4, #0]
 8001a46:	f002 fb4f 	bl	80040e8 <uartPrintf>
      if (rx_data == CLI_KEY_HOME)
 8001a4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a4e:	2b31      	cmp	r3, #49	; 0x31
 8001a50:	d10a      	bne.n	8001a68 <cliMain+0x368>
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001a52:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 8001a56:	4917      	ldr	r1, [pc, #92]	; (8001ab4 <cliMain+0x3b4>)
 8001a58:	7820      	ldrb	r0, [r4, #0]
 8001a5a:	f002 fb45 	bl	80040e8 <uartPrintf>
        line->cursor = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
        p_cli->state = CLI_RX_SP4;
 8001a64:	2304      	movs	r3, #4
 8001a66:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_END)
 8001a68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a6c:	2b34      	cmp	r3, #52	; 0x34
 8001a6e:	d183      	bne.n	8001978 <cliMain+0x278>
        if (line->cursor < line->count)
 8001a70:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 8001a74:	f894 22e6 	ldrb.w	r2, [r4, #742]	; 0x2e6
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d205      	bcs.n	8001a88 <cliMain+0x388>
          mov_len = line->count - line->cursor;
 8001a7c:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001a7e:	490e      	ldr	r1, [pc, #56]	; (8001ab8 <cliMain+0x3b8>)
 8001a80:	7820      	ldrb	r0, [r4, #0]
 8001a82:	b292      	uxth	r2, r2
 8001a84:	f002 fb30 	bl	80040e8 <uartPrintf>
        if (line->cursor > line->count)
 8001a88:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 8001a8c:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d905      	bls.n	8001aa0 <cliMain+0x3a0>
          mov_len = line->cursor - line->count;
 8001a94:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001a96:	4907      	ldr	r1, [pc, #28]	; (8001ab4 <cliMain+0x3b4>)
 8001a98:	7820      	ldrb	r0, [r4, #0]
 8001a9a:	b292      	uxth	r2, r2
 8001a9c:	f002 fb24 	bl	80040e8 <uartPrintf>
        line->cursor = line->count;
 8001aa0:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8001aa4:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
        p_cli->state = CLI_RX_SP4;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	e764      	b.n	8001976 <cliMain+0x276>
      p_cli->state = CLI_RX_IDLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	e762      	b.n	8001976 <cliMain+0x276>
 8001ab0:	240004c8 	.word	0x240004c8
 8001ab4:	0800f629 	.word	0x0800f629
 8001ab8:	0800f73e 	.word	0x0800f73e

08001abc <cliKeepLoop>:
{
 8001abc:	b508      	push	{r3, lr}
  if (uartAvailable(p_cli->ch) == 0)
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <cliKeepLoop+0x14>)
 8001ac0:	7818      	ldrb	r0, [r3, #0]
 8001ac2:	f002 fadb 	bl	800407c <uartAvailable>
}
 8001ac6:	fab0 f080 	clz	r0, r0
 8001aca:	0940      	lsrs	r0, r0, #5
 8001acc:	bd08      	pop	{r3, pc}
 8001ace:	bf00      	nop
 8001ad0:	24000224 	.word	0x24000224

08001ad4 <cliAdd>:
{
 8001ad4:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001ad6:	4d0e      	ldr	r5, [pc, #56]	; (8001b10 <cliAdd+0x3c>)
{
 8001ad8:	460e      	mov	r6, r1
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001ada:	f8b5 42e8 	ldrh.w	r4, [r5, #744]	; 0x2e8
 8001ade:	2c17      	cmp	r4, #23
 8001ae0:	d814      	bhi.n	8001b0c <cliAdd+0x38>
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001ae2:	2314      	movs	r3, #20
 8001ae4:	4601      	mov	r1, r0
 8001ae6:	435c      	muls	r4, r3
 8001ae8:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  p_cli->cmd_list[index].cmd_func = p_func;
 8001aec:	442c      	add	r4, r5
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001aee:	442b      	add	r3, r5
 8001af0:	4618      	mov	r0, r3
 8001af2:	f00a fd1d 	bl	800c530 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8001af6:	f8c4 62fc 	str.w	r6, [r4, #764]	; 0x2fc
  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8001afa:	f7ff fc42 	bl	8001382 <cliToUpper>
  p_cli->cmd_count++;
 8001afe:	f8b5 32e8 	ldrh.w	r3, [r5, #744]	; 0x2e8
  return ret;
 8001b02:	2001      	movs	r0, #1
  p_cli->cmd_count++;
 8001b04:	3301      	adds	r3, #1
 8001b06:	f8a5 32e8 	strh.w	r3, [r5, #744]	; 0x2e8
}
 8001b0a:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	e7fc      	b.n	8001b0a <cliAdd+0x36>
 8001b10:	24000224 	.word	0x24000224

08001b14 <cliInit>:
{
 8001b14:	b508      	push	{r3, lr}
  cli_node.cmd_args.getData  = cliArgsGetData;
 8001b16:	4911      	ldr	r1, [pc, #68]	; (8001b5c <cliInit+0x48>)
  cli_node.is_open = false;
 8001b18:	2200      	movs	r2, #0
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <cliInit+0x4c>)
  cliAdd("help", cliShowList);
 8001b1c:	4811      	ldr	r0, [pc, #68]	; (8001b64 <cliInit+0x50>)
  cli_node.cmd_args.getData  = cliArgsGetData;
 8001b1e:	f8c3 14d4 	str.w	r1, [r3, #1236]	; 0x4d4
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001b22:	4911      	ldr	r1, [pc, #68]	; (8001b68 <cliInit+0x54>)
  cli_node.is_open = false;
 8001b24:	811a      	strh	r2, [r3, #8]
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001b26:	f8c3 14d8 	str.w	r1, [r3, #1240]	; 0x4d8
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001b2a:	4910      	ldr	r1, [pc, #64]	; (8001b6c <cliInit+0x58>)
  cli_node.hist_line_new   = false;
 8001b2c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001b30:	f8c3 14dc 	str.w	r1, [r3, #1244]	; 0x4dc
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001b34:	490e      	ldr	r1, [pc, #56]	; (8001b70 <cliInit+0x5c>)
  p_cli->line.buf[0]  = 0;
 8001b36:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001b3a:	f8c3 14e0 	str.w	r1, [r3, #1248]	; 0x4e0
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001b3e:	213f      	movs	r1, #63	; 0x3f
  cli_node.state   = CLI_RX_IDLE;
 8001b40:	741a      	strb	r2, [r3, #16]
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001b42:	f8a3 12e4 	strh.w	r1, [r3, #740]	; 0x2e4
  cliAdd("help", cliShowList);
 8001b46:	490b      	ldr	r1, [pc, #44]	; (8001b74 <cliInit+0x60>)
  p_cli->line.count   = 0;
 8001b48:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  cliAdd("help", cliShowList);
 8001b4c:	f7ff ffc2 	bl	8001ad4 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001b50:	4909      	ldr	r1, [pc, #36]	; (8001b78 <cliInit+0x64>)
 8001b52:	480a      	ldr	r0, [pc, #40]	; (8001b7c <cliInit+0x68>)
 8001b54:	f7ff ffbe 	bl	8001ad4 <cliAdd>
}
 8001b58:	2001      	movs	r0, #1
 8001b5a:	bd08      	pop	{r3, pc}
 8001b5c:	08001419 	.word	0x08001419
 8001b60:	24000224 	.word	0x24000224
 8001b64:	0800f744 	.word	0x0800f744
 8001b68:	080013f1 	.word	0x080013f1
 8001b6c:	080013a9 	.word	0x080013a9
 8001b70:	080013c5 	.word	0x080013c5
 8001b74:	080015d5 	.word	0x080015d5
 8001b78:	08001621 	.word	0x08001621
 8001b7c:	0800f749 	.word	0x0800f749

08001b80 <fatfsInit>:
bool fatfsInit(void)
{
  bool ret = true;


  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8001b80:	490a      	ldr	r1, [pc, #40]	; (8001bac <fatfsInit+0x2c>)
 8001b82:	480b      	ldr	r0, [pc, #44]	; (8001bb0 <fatfsInit+0x30>)
{
 8001b84:	b508      	push	{r3, lr}
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8001b86:	f004 fd6b 	bl	8006660 <FATFS_LinkDriver>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	b938      	cbnz	r0, 8001b9e <fatfsInit+0x1e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8001b8e:	4907      	ldr	r1, [pc, #28]	; (8001bac <fatfsInit+0x2c>)
 8001b90:	4808      	ldr	r0, [pc, #32]	; (8001bb4 <fatfsInit+0x34>)
 8001b92:	f003 fed3 	bl	800593c <f_mount>
 8001b96:	b910      	cbnz	r0, 8001b9e <fatfsInit+0x1e>
    {
      is_init = true;
 8001b98:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <fatfsInit+0x38>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
    }
  }

#ifdef _USE_HW_CLI
  cliAdd("fatfs", cliFatfs);
 8001b9e:	4907      	ldr	r1, [pc, #28]	; (8001bbc <fatfsInit+0x3c>)
 8001ba0:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <fatfsInit+0x40>)
 8001ba2:	f7ff ff97 	bl	8001ad4 <cliAdd>
#endif

  return ret;
}
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	bd08      	pop	{r3, pc}
 8001baa:	bf00      	nop
 8001bac:	2400093c 	.word	0x2400093c
 8001bb0:	0800fcdc 	.word	0x0800fcdc
 8001bb4:	24000708 	.word	0x24000708
 8001bb8:	24000940 	.word	0x24000940
 8001bbc:	08001c29 	.word	0x08001c29
 8001bc0:	0800f74c 	.word	0x0800f74c

08001bc4 <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char* path)
{
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	b0d5      	sub	sp, #340	; 0x154
  FRESULT res;
  DIR dir;
  FILINFO fno;


  res = f_opendir(&dir, path);                       /* Open the directory */
 8001bc8:	4601      	mov	r1, r0
{
 8001bca:	4605      	mov	r5, r0
  res = f_opendir(&dir, path);                       /* Open the directory */
 8001bcc:	a801      	add	r0, sp, #4
 8001bce:	f004 fb0f 	bl	80061f0 <f_opendir>
  if (res == FR_OK)
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	bb00      	cbnz	r0, 8001c18 <fatfsDir+0x54>
      {                    /* It is a directory */
        cliPrintf(" %s/%s \n", path, fno.fname);
      }
      else
      {                                       /* It is a file. */
        cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 8001bd6:	4e12      	ldr	r6, [pc, #72]	; (8001c20 <fatfsDir+0x5c>)
        cliPrintf(" %s/%s \n", path, fno.fname);
 8001bd8:	4f12      	ldr	r7, [pc, #72]	; (8001c24 <fatfsDir+0x60>)
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001bda:	a90e      	add	r1, sp, #56	; 0x38
 8001bdc:	a801      	add	r0, sp, #4
 8001bde:	f004 fb6e 	bl	80062be <f_readdir>
      if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001be2:	4604      	mov	r4, r0
 8001be4:	b9a8      	cbnz	r0, 8001c12 <fatfsDir+0x4e>
 8001be6:	f89d 404e 	ldrb.w	r4, [sp, #78]	; 0x4e
 8001bea:	b194      	cbz	r4, 8001c12 <fatfsDir+0x4e>
      if (fno.fattrib & AM_DIR)
 8001bec:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8001bf0:	06db      	lsls	r3, r3, #27
 8001bf2:	d506      	bpl.n	8001c02 <fatfsDir+0x3e>
        cliPrintf(" %s/%s \n", path, fno.fname);
 8001bf4:	f10d 024e 	add.w	r2, sp, #78	; 0x4e
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	4638      	mov	r0, r7
 8001bfc:	f7ff fcd0 	bl	80015a0 <cliPrintf>
 8001c00:	e7eb      	b.n	8001bda <fatfsDir+0x16>
        cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 8001c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c04:	f10d 024e 	add.w	r2, sp, #78	; 0x4e
 8001c08:	4629      	mov	r1, r5
 8001c0a:	4630      	mov	r0, r6
 8001c0c:	f7ff fcc8 	bl	80015a0 <cliPrintf>
 8001c10:	e7e3      	b.n	8001bda <fatfsDir+0x16>
      }
    }
    f_closedir(&dir);
 8001c12:	a801      	add	r0, sp, #4
 8001c14:	f004 fb3f 	bl	8006296 <f_closedir>
  }

  return res;
}
 8001c18:	4620      	mov	r0, r4
 8001c1a:	b055      	add	sp, #340	; 0x154
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	0800f75b 	.word	0x0800f75b
 8001c24:	0800f752 	.word	0x0800f752

08001c28 <cliFatfs>:
void cliFatfs(cli_args_t *args)
{
  bool ret = false;


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8001c28:	8803      	ldrh	r3, [r0, #0]
 8001c2a:	2b01      	cmp	r3, #1
{
 8001c2c:	b570      	push	{r4, r5, r6, lr}
 8001c2e:	4605      	mov	r5, r0
 8001c30:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  if (args->argc == 1 && args->isStr(0, "info") == true)
 8001c34:	d063      	beq.n	8001cfe <cliFatfs+0xd6>
  bool ret = false;
 8001c36:	2400      	movs	r4, #0
    }

    ret = true;
  }

  if (args->argc == 1 && args->isStr(0, "dir") == true)
 8001c38:	882b      	ldrh	r3, [r5, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d10e      	bne.n	8001c5c <cliFatfs+0x34>
 8001c3e:	696b      	ldr	r3, [r5, #20]
 8001c40:	2000      	movs	r0, #0
 8001c42:	4951      	ldr	r1, [pc, #324]	; (8001d88 <cliFatfs+0x160>)
 8001c44:	4798      	blx	r3
 8001c46:	4606      	mov	r6, r0
 8001c48:	b140      	cbz	r0, 8001c5c <cliFatfs+0x34>
  {
    FRESULT res;

    res = fatfsDir("/");
 8001c4a:	4850      	ldr	r0, [pc, #320]	; (8001d8c <cliFatfs+0x164>)
 8001c4c:	f7ff ffba 	bl	8001bc4 <fatfsDir>
    if (res != FR_OK)
 8001c50:	4601      	mov	r1, r0
 8001c52:	b110      	cbz	r0, 8001c5a <cliFatfs+0x32>
    {
      cliPrintf(" err : %d\n", res);
 8001c54:	484e      	ldr	r0, [pc, #312]	; (8001d90 <cliFatfs+0x168>)
 8001c56:	f7ff fca3 	bl	80015a0 <cliPrintf>
    }

    ret = true;
 8001c5a:	4634      	mov	r4, r6
  }

  if (args->argc == 1 && args->isStr(0, "test") == true)
 8001c5c:	882b      	ldrh	r3, [r5, #0]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	f040 8082 	bne.w	8001d68 <cliFatfs+0x140>
 8001c64:	696b      	ldr	r3, [r5, #20]
 8001c66:	2000      	movs	r0, #0
 8001c68:	494a      	ldr	r1, [pc, #296]	; (8001d94 <cliFatfs+0x16c>)
 8001c6a:	4798      	blx	r3
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	d07b      	beq.n	8001d68 <cliFatfs+0x140>
  {
    FRESULT fp_ret;
    FIL log_file;
    uint32_t pre_time;

    pre_time = millis();
 8001c70:	f7ff f88a 	bl	8000d88 <millis>
    fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8001c74:	220b      	movs	r2, #11
    pre_time = millis();
 8001c76:	4605      	mov	r5, r0
    fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8001c78:	4947      	ldr	r1, [pc, #284]	; (8001d98 <cliFatfs+0x170>)
 8001c7a:	a802      	add	r0, sp, #8
 8001c7c:	f003 fe88 	bl	8005990 <f_open>
    if (fp_ret == FR_OK)
 8001c80:	4604      	mov	r4, r0
 8001c82:	2800      	cmp	r0, #0
 8001c84:	d16c      	bne.n	8001d60 <cliFatfs+0x138>
    {
      f_printf(&log_file, "test1, ");
 8001c86:	4945      	ldr	r1, [pc, #276]	; (8001d9c <cliFatfs+0x174>)
 8001c88:	a802      	add	r0, sp, #8
 8001c8a:	f004 fbb1 	bl	80063f0 <f_printf>
      f_printf(&log_file, "test2, ");
 8001c8e:	4944      	ldr	r1, [pc, #272]	; (8001da0 <cliFatfs+0x178>)
 8001c90:	a802      	add	r0, sp, #8
      f_printf(&log_file, ", ");
      f_printf(&log_file, "\n");

      for (int i=0; i<8; i++)
      {
        f_printf(&log_file, "%d \n", i);
 8001c92:	4e44      	ldr	r6, [pc, #272]	; (8001da4 <cliFatfs+0x17c>)
      f_printf(&log_file, "test2, ");
 8001c94:	f004 fbac 	bl	80063f0 <f_printf>
      f_printf(&log_file, "test3, ");
 8001c98:	4943      	ldr	r1, [pc, #268]	; (8001da8 <cliFatfs+0x180>)
 8001c9a:	a802      	add	r0, sp, #8
 8001c9c:	f004 fba8 	bl	80063f0 <f_printf>
      f_printf(&log_file, ", ");
 8001ca0:	4942      	ldr	r1, [pc, #264]	; (8001dac <cliFatfs+0x184>)
 8001ca2:	a802      	add	r0, sp, #8
 8001ca4:	f004 fba4 	bl	80063f0 <f_printf>
      f_printf(&log_file, "\n");
 8001ca8:	4941      	ldr	r1, [pc, #260]	; (8001db0 <cliFatfs+0x188>)
 8001caa:	a802      	add	r0, sp, #8
 8001cac:	f004 fba0 	bl	80063f0 <f_printf>
        f_printf(&log_file, "%d \n", i);
 8001cb0:	4622      	mov	r2, r4
      for (int i=0; i<8; i++)
 8001cb2:	3401      	adds	r4, #1
        f_printf(&log_file, "%d \n", i);
 8001cb4:	4631      	mov	r1, r6
 8001cb6:	a802      	add	r0, sp, #8
 8001cb8:	f004 fb9a 	bl	80063f0 <f_printf>
      for (int i=0; i<8; i++)
 8001cbc:	2c08      	cmp	r4, #8
 8001cbe:	d1f7      	bne.n	8001cb0 <cliFatfs+0x88>
      UINT len;
      uint8_t data;

      while(cliKeepLoop())
      {
        len = 0;
 8001cc0:	2400      	movs	r4, #0
        if (len == 0)
        {
          break;
        }

        cliPrintf("%c", data);
 8001cc2:	4e3c      	ldr	r6, [pc, #240]	; (8001db4 <cliFatfs+0x18c>)
      f_rewind(&log_file);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	a802      	add	r0, sp, #8
 8001cc8:	f004 f985 	bl	8005fd6 <f_lseek>
      while(cliKeepLoop())
 8001ccc:	f7ff fef6 	bl	8001abc <cliKeepLoop>
 8001cd0:	b148      	cbz	r0, 8001ce6 <cliFatfs+0xbe>
        fp_ret = f_read (&log_file, &data, 1, &len);
 8001cd2:	ab01      	add	r3, sp, #4
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f10d 0103 	add.w	r1, sp, #3
 8001cda:	a802      	add	r0, sp, #8
        len = 0;
 8001cdc:	9401      	str	r4, [sp, #4]
        fp_ret = f_read (&log_file, &data, 1, &len);
 8001cde:	f003 ff6f 	bl	8005bc0 <f_read>
        if (fp_ret != FR_OK)
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d033      	beq.n	8001d4e <cliFatfs+0x126>
      }

      f_close(&log_file);
 8001ce6:	a802      	add	r0, sp, #8
 8001ce8:	f004 f964 	bl	8005fb4 <f_close>
    }
    else
    {
      cliPrintf("f_open fail\r\n");
    }
    cliPrintf("%d ms\r\n", millis()-pre_time);
 8001cec:	f7ff f84c 	bl	8000d88 <millis>
 8001cf0:	1b41      	subs	r1, r0, r5
 8001cf2:	4831      	ldr	r0, [pc, #196]	; (8001db8 <cliFatfs+0x190>)
 8001cf4:	f7ff fc54 	bl	80015a0 <cliPrintf>
  {
    cliPrintf("fatfs info\n");
    cliPrintf("fatfs dir\n");
    cliPrintf("fatfs test\n");
  }
}
 8001cf8:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8001cfc:	bd70      	pop	{r4, r5, r6, pc}
  if (args->argc == 1 && args->isStr(0, "info") == true)
 8001cfe:	6943      	ldr	r3, [r0, #20]
 8001d00:	2000      	movs	r0, #0
 8001d02:	492e      	ldr	r1, [pc, #184]	; (8001dbc <cliFatfs+0x194>)
 8001d04:	4798      	blx	r3
 8001d06:	4604      	mov	r4, r0
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	d094      	beq.n	8001c36 <cliFatfs+0xe>
    cliPrintf("fatfs init \t: %d\n", is_init);
 8001d0c:	4e2c      	ldr	r6, [pc, #176]	; (8001dc0 <cliFatfs+0x198>)
 8001d0e:	482d      	ldr	r0, [pc, #180]	; (8001dc4 <cliFatfs+0x19c>)
 8001d10:	7831      	ldrb	r1, [r6, #0]
 8001d12:	f7ff fc45 	bl	80015a0 <cliPrintf>
    if (is_init == true)
 8001d16:	7836      	ldrb	r6, [r6, #0]
 8001d18:	2e00      	cmp	r6, #0
 8001d1a:	d08d      	beq.n	8001c38 <cliFatfs+0x10>
       res = f_getfree("", &fre_clust, &fs);
 8001d1c:	a902      	add	r1, sp, #8
 8001d1e:	aa01      	add	r2, sp, #4
 8001d20:	4829      	ldr	r0, [pc, #164]	; (8001dc8 <cliFatfs+0x1a0>)
 8001d22:	f004 fb01 	bl	8006328 <f_getfree>
       if (res == FR_OK)
 8001d26:	4601      	mov	r1, r0
 8001d28:	b968      	cbnz	r0, 8001d46 <cliFatfs+0x11e>
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 8001d2a:	9901      	ldr	r1, [sp, #4]
         fre_sect = fre_clust * fs->csize;
 8001d2c:	9a02      	ldr	r2, [sp, #8]
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 8001d2e:	894b      	ldrh	r3, [r1, #10]
 8001d30:	6989      	ldr	r1, [r1, #24]
         fre_sect = fre_clust * fs->csize;
 8001d32:	435a      	muls	r2, r3
         cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 8001d34:	4825      	ldr	r0, [pc, #148]	; (8001dcc <cliFatfs+0x1a4>)
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 8001d36:	3902      	subs	r1, #2
         cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 8001d38:	0852      	lsrs	r2, r2, #1
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 8001d3a:	4359      	muls	r1, r3
         cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 8001d3c:	0849      	lsrs	r1, r1, #1
 8001d3e:	f7ff fc2f 	bl	80015a0 <cliPrintf>
    ret = true;
 8001d42:	4634      	mov	r4, r6
 8001d44:	e778      	b.n	8001c38 <cliFatfs+0x10>
         cliPrintf(" err : %d\n", res);
 8001d46:	4812      	ldr	r0, [pc, #72]	; (8001d90 <cliFatfs+0x168>)
 8001d48:	f7ff fc2a 	bl	80015a0 <cliPrintf>
 8001d4c:	e7f9      	b.n	8001d42 <cliFatfs+0x11a>
        if (len == 0)
 8001d4e:	9b01      	ldr	r3, [sp, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0c8      	beq.n	8001ce6 <cliFatfs+0xbe>
        cliPrintf("%c", data);
 8001d54:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8001d58:	4630      	mov	r0, r6
 8001d5a:	f7ff fc21 	bl	80015a0 <cliPrintf>
 8001d5e:	e7b5      	b.n	8001ccc <cliFatfs+0xa4>
      cliPrintf("f_open fail\r\n");
 8001d60:	481b      	ldr	r0, [pc, #108]	; (8001dd0 <cliFatfs+0x1a8>)
 8001d62:	f7ff fc1d 	bl	80015a0 <cliPrintf>
 8001d66:	e7c1      	b.n	8001cec <cliFatfs+0xc4>
  if (ret != true)
 8001d68:	2c00      	cmp	r4, #0
 8001d6a:	d1c5      	bne.n	8001cf8 <cliFatfs+0xd0>
    cliPrintf("fatfs info\n");
 8001d6c:	4819      	ldr	r0, [pc, #100]	; (8001dd4 <cliFatfs+0x1ac>)
 8001d6e:	f7ff fc17 	bl	80015a0 <cliPrintf>
    cliPrintf("fatfs dir\n");
 8001d72:	4819      	ldr	r0, [pc, #100]	; (8001dd8 <cliFatfs+0x1b0>)
 8001d74:	f7ff fc14 	bl	80015a0 <cliPrintf>
    cliPrintf("fatfs test\n");
 8001d78:	4818      	ldr	r0, [pc, #96]	; (8001ddc <cliFatfs+0x1b4>)
}
 8001d7a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8001d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cliPrintf("fatfs test\n");
 8001d82:	f7ff bc0d 	b.w	80015a0 <cliPrintf>
 8001d86:	bf00      	nop
 8001d88:	0800f7c4 	.word	0x0800f7c4
 8001d8c:	0800f7c8 	.word	0x0800f7c8
 8001d90:	0800f7b9 	.word	0x0800f7b9
 8001d94:	0800f7ca 	.word	0x0800f7ca
 8001d98:	0800f7cf 	.word	0x0800f7cf
 8001d9c:	0800f7d5 	.word	0x0800f7d5
 8001da0:	0800f7dd 	.word	0x0800f7dd
 8001da4:	0800f7ed 	.word	0x0800f7ed
 8001da8:	0800f7e5 	.word	0x0800f7e5
 8001dac:	0800f7da 	.word	0x0800f7da
 8001db0:	0800fcad 	.word	0x0800fcad
 8001db4:	0800f710 	.word	0x0800f710
 8001db8:	0800f800 	.word	0x0800f800
 8001dbc:	0800f76f 	.word	0x0800f76f
 8001dc0:	24000940 	.word	0x24000940
 8001dc4:	0800f774 	.word	0x0800f774
 8001dc8:	0800fcae 	.word	0x0800fcae
 8001dcc:	0800f786 	.word	0x0800f786
 8001dd0:	0800f7f2 	.word	0x0800f7f2
 8001dd4:	0800f808 	.word	0x0800f808
 8001dd8:	0800f814 	.word	0x0800f814
 8001ddc:	0800f81f 	.word	0x0800f81f

08001de0 <flashInit>:
bool flashInit(void)
{


#ifdef _USE_HW_CLI
  cliAdd("flash", cliFlash);
 8001de0:	4903      	ldr	r1, [pc, #12]	; (8001df0 <flashInit+0x10>)
 8001de2:	4804      	ldr	r0, [pc, #16]	; (8001df4 <flashInit+0x14>)
{
 8001de4:	b508      	push	{r3, lr}
  cliAdd("flash", cliFlash);
 8001de6:	f7ff fe75 	bl	8001ad4 <cliAdd>
#endif
  return true;
}
 8001dea:	2001      	movs	r0, #1
 8001dec:	bd08      	pop	{r3, pc}
 8001dee:	bf00      	nop
 8001df0:	08001fed 	.word	0x08001fed
 8001df4:	0800f82b 	.word	0x0800f82b

08001df8 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	4605      	mov	r5, r0
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	460c      	mov	r4, r1
  uint32_t banks;
  const flash_tbl_t *flash_tbl;


#ifdef _USE_HW_QSPI
  if (addr >= qspiGetAddr() && addr < (qspiGetAddr() + qspiGetLength()))
 8001e00:	f001 f908 	bl	8003014 <qspiGetAddr>
 8001e04:	42a8      	cmp	r0, r5
 8001e06:	d810      	bhi.n	8001e2a <flashErase+0x32>
 8001e08:	f001 f904 	bl	8003014 <qspiGetAddr>
 8001e0c:	4606      	mov	r6, r0
 8001e0e:	f001 f904 	bl	800301a <qspiGetLength>
 8001e12:	4430      	add	r0, r6
 8001e14:	42a8      	cmp	r0, r5
 8001e16:	d908      	bls.n	8001e2a <flashErase+0x32>
  {
    ret = qspiErase(addr - qspiGetAddr(), length);
 8001e18:	f001 f8fc 	bl	8003014 <qspiGetAddr>
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	1a28      	subs	r0, r5, r0
  }

  HAL_FLASH_Lock();

  return ret;
}
 8001e20:	b006      	add	sp, #24
 8001e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = qspiErase(addr - qspiGetAddr(), length);
 8001e26:	f001 ba74 	b.w	8003312 <qspiErase>
  HAL_FLASH_Unlock();
 8001e2a:	f005 fdb5 	bl	8007998 <HAL_FLASH_Unlock>
      if (start_addr >= addr && start_addr < (addr+length))
 8001e2e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 8001e32:	eb05 0104 	add.w	r1, r5, r4
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <flashErase+0x9c>)
 8001e38:	d80c      	bhi.n	8001e54 <flashErase+0x5c>
 8001e3a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001e3e:	bf94      	ite	ls
 8001e40:	2400      	movls	r4, #0
 8001e42:	2401      	movhi	r4, #1
        update = true;
 8001e44:	4299      	cmp	r1, r3
 8001e46:	bf88      	it	hi
 8001e48:	2401      	movhi	r4, #1
        update = true;
 8001e4a:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 8001e4e:	bf28      	it	cs
 8001e50:	2401      	movcs	r4, #1
 8001e52:	e003      	b.n	8001e5c <flashErase+0x64>
      if (end_addr >= addr && end_addr < (addr+length))
 8001e54:	429d      	cmp	r5, r3
      bool update = false;
 8001e56:	f04f 0400 	mov.w	r4, #0
      if (end_addr >= addr && end_addr < (addr+length))
 8001e5a:	d9f3      	bls.n	8001e44 <flashErase+0x4c>
      if ((addr+length-1) >= start_addr && (addr+length-1) <= end_addr)
 8001e5c:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 8001e60:	3901      	subs	r1, #1
 8001e62:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001e66:	d300      	bcc.n	8001e6a <flashErase+0x72>
      if (update == true)
 8001e68:	b174      	cbz	r4, 8001e88 <flashErase+0x90>
      EraseInit.NbSectors    = (end_sector - start_sector) + 1;
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2301      	movs	r3, #1
      status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 8001e6e:	4669      	mov	r1, sp
 8001e70:	a801      	add	r0, sp, #4
      EraseInit.TypeErase    = FLASH_TYPEERASE_SECTORS;
 8001e72:	9201      	str	r2, [sp, #4]
      EraseInit.Banks        = flash_tbl[start_sector].bank;
 8001e74:	9302      	str	r3, [sp, #8]
      EraseInit.NbSectors    = (end_sector - start_sector) + 1;
 8001e76:	e9cd 2303 	strd	r2, r3, [sp, #12]
      EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_4;
 8001e7a:	2230      	movs	r2, #48	; 0x30
 8001e7c:	9205      	str	r2, [sp, #20]
      status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 8001e7e:	f005 fe3f 	bl	8007b00 <HAL_FLASHEx_Erase>
      if (status == HAL_OK)
 8001e82:	fab0 f480 	clz	r4, r0
 8001e86:	0964      	lsrs	r4, r4, #5
  HAL_FLASH_Lock();
 8001e88:	f005 fd98 	bl	80079bc <HAL_FLASH_Lock>
}
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	b006      	add	sp, #24
 8001e90:	bd70      	pop	{r4, r5, r6, pc}
 8001e92:	bf00      	nop
 8001e94:	0801ffff 	.word	0x0801ffff

08001e98 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8001e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e9c:	4605      	mov	r5, r0
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	460f      	mov	r7, r1
 8001ea2:	4616      	mov	r6, r2
  uint32_t offset;
  HAL_StatusTypeDef status;


#ifdef _USE_HW_QSPI
  if (addr >= qspiGetAddr() && addr < (qspiGetAddr() + qspiGetLength()))
 8001ea4:	f001 f8b6 	bl	8003014 <qspiGetAddr>
 8001ea8:	42a8      	cmp	r0, r5
 8001eaa:	d811      	bhi.n	8001ed0 <flashWrite+0x38>
 8001eac:	f001 f8b2 	bl	8003014 <qspiGetAddr>
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	f001 f8b2 	bl	800301a <qspiGetLength>
 8001eb6:	4420      	add	r0, r4
 8001eb8:	42a8      	cmp	r0, r5
 8001eba:	d909      	bls.n	8001ed0 <flashWrite+0x38>
  {
    ret = qspiWrite(addr - qspiGetAddr(), p_data, length);
 8001ebc:	f001 f8aa 	bl	8003014 <qspiGetAddr>
 8001ec0:	4632      	mov	r2, r6
 8001ec2:	4639      	mov	r1, r7
 8001ec4:	1a28      	subs	r0, r5, r0
  }

  HAL_FLASH_Lock();

  return ret;
}
 8001ec6:	b009      	add	sp, #36	; 0x24
 8001ec8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ret = qspiWrite(addr - qspiGetAddr(), p_data, length);
 8001ecc:	f001 b9dc 	b.w	8003288 <qspiWrite>
  HAL_FLASH_Unlock();
 8001ed0:	f005 fd62 	bl	8007998 <HAL_FLASH_Unlock>
  if (offset != 0 || length < 32)
 8001ed4:	f015 041f 	ands.w	r4, r5, #31
 8001ed8:	d134      	bne.n	8001f44 <flashWrite+0xac>
 8001eda:	2e1f      	cmp	r6, #31
 8001edc:	d932      	bls.n	8001f44 <flashWrite+0xac>
  while(index < length)
 8001ede:	42b4      	cmp	r4, r6
 8001ee0:	d259      	bcs.n	8001f96 <flashWrite+0xfe>
    write_length = constrain(length - index, 0, 32);
 8001ee2:	eba6 0804 	sub.w	r8, r6, r4
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, addr + index, (uint32_t)&p_data[index]);
 8001ee6:	193a      	adds	r2, r7, r4
 8001ee8:	1961      	adds	r1, r4, r5
 8001eea:	2001      	movs	r0, #1
    write_length = constrain(length - index, 0, 32);
 8001eec:	f1b8 0f20 	cmp.w	r8, #32
 8001ef0:	bf28      	it	cs
 8001ef2:	f04f 0820 	movcs.w	r8, #32
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, addr + index, (uint32_t)&p_data[index]);
 8001ef6:	f005 fda3 	bl	8007a40 <HAL_FLASH_Program>
    if (status != HAL_OK)
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d14f      	bne.n	8001f9e <flashWrite+0x106>
    index += write_length;
 8001efe:	4444      	add	r4, r8
    if ((length - index) > 0 && (length - index) < 32)
 8001f00:	42a6      	cmp	r6, r4
 8001f02:	d0ec      	beq.n	8001ede <flashWrite+0x46>
 8001f04:	1b32      	subs	r2, r6, r4
 8001f06:	2a1f      	cmp	r2, #31
 8001f08:	d8e9      	bhi.n	8001ede <flashWrite+0x46>
      write_addr = addr + index;
 8001f0a:	4425      	add	r5, r4
      memcpy(&buf[0], (void *)write_addr, 32);
 8001f0c:	46ec      	mov	ip, sp
 8001f0e:	462b      	mov	r3, r5
 8001f10:	f105 0e20 	add.w	lr, r5, #32
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	3308      	adds	r3, #8
 8001f18:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8001f1c:	4666      	mov	r6, ip
 8001f1e:	4573      	cmp	r3, lr
 8001f20:	c603      	stmia	r6!, {r0, r1}
 8001f22:	46b4      	mov	ip, r6
 8001f24:	d1f6      	bne.n	8001f14 <flashWrite+0x7c>
      memcpy(&buf[0], &p_data[index], offset);
 8001f26:	1939      	adds	r1, r7, r4
 8001f28:	4668      	mov	r0, sp
 8001f2a:	f00a f953 	bl	800c1d4 <memcpy>
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, write_addr, (uint32_t)buf);
 8001f2e:	466a      	mov	r2, sp
 8001f30:	4629      	mov	r1, r5
 8001f32:	2001      	movs	r0, #1
 8001f34:	f005 fd84 	bl	8007a40 <HAL_FLASH_Program>
      if (status != HAL_OK)
 8001f38:	b368      	cbz	r0, 8001f96 <flashWrite+0xfe>
 8001f3a:	e023      	b.n	8001f84 <flashWrite+0xec>
      index += (32 - offset);
 8001f3c:	464c      	mov	r4, r9
 8001f3e:	e7ce      	b.n	8001ede <flashWrite+0x46>
 8001f40:	2420      	movs	r4, #32
 8001f42:	e7cc      	b.n	8001ede <flashWrite+0x46>
    write_addr = addr - offset;
 8001f44:	eba5 0804 	sub.w	r8, r5, r4
    memcpy(&buf[0], (void *)write_addr, 32);
 8001f48:	46ec      	mov	ip, sp
 8001f4a:	4643      	mov	r3, r8
 8001f4c:	f108 0e20 	add.w	lr, r8, #32
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	3308      	adds	r3, #8
 8001f54:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8001f58:	4662      	mov	r2, ip
 8001f5a:	4573      	cmp	r3, lr
 8001f5c:	c203      	stmia	r2!, {r0, r1}
 8001f5e:	4694      	mov	ip, r2
 8001f60:	d1f6      	bne.n	8001f50 <flashWrite+0xb8>
    memcpy(&buf[offset], &p_data[0], constrain(32-offset, 0, length));
 8001f62:	f1c4 0920 	rsb	r9, r4, #32
 8001f66:	4639      	mov	r1, r7
 8001f68:	eb0d 0004 	add.w	r0, sp, r4
 8001f6c:	45b1      	cmp	r9, r6
 8001f6e:	464a      	mov	r2, r9
 8001f70:	bf28      	it	cs
 8001f72:	4632      	movcs	r2, r6
 8001f74:	f00a f92e 	bl	800c1d4 <memcpy>
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, write_addr, (uint32_t)buf);
 8001f78:	466a      	mov	r2, sp
 8001f7a:	4641      	mov	r1, r8
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f005 fd5f 	bl	8007a40 <HAL_FLASH_Program>
    if (status != HAL_OK)
 8001f82:	b120      	cbz	r0, 8001f8e <flashWrite+0xf6>
      return false;
 8001f84:	2400      	movs	r4, #0
}
 8001f86:	4620      	mov	r0, r4
 8001f88:	b009      	add	sp, #36	; 0x24
 8001f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (offset == 0 && length < 32)
 8001f8e:	2c00      	cmp	r4, #0
 8001f90:	d1d4      	bne.n	8001f3c <flashWrite+0xa4>
 8001f92:	2e1f      	cmp	r6, #31
 8001f94:	d8d4      	bhi.n	8001f40 <flashWrite+0xa8>
  bool ret = true;
 8001f96:	2401      	movs	r4, #1
  HAL_FLASH_Lock();
 8001f98:	f005 fd10 	bl	80079bc <HAL_FLASH_Lock>
  return ret;
 8001f9c:	e7f3      	b.n	8001f86 <flashWrite+0xee>
      ret = false;
 8001f9e:	2400      	movs	r4, #0
 8001fa0:	e7fa      	b.n	8001f98 <flashWrite+0x100>

08001fa2 <flashRead>:

bool flashRead(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8001fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa4:	4605      	mov	r5, r0
 8001fa6:	460c      	mov	r4, r1
 8001fa8:	4616      	mov	r6, r2
  bool ret = true;
  uint8_t *p_byte = (uint8_t *)addr;


#ifdef _USE_HW_QSPI
  if (addr >= qspiGetAddr() && addr < (qspiGetAddr() + qspiGetLength()))
 8001faa:	f001 f833 	bl	8003014 <qspiGetAddr>
 8001fae:	42a8      	cmp	r0, r5
 8001fb0:	d906      	bls.n	8001fc0 <flashRead+0x1e>
 8001fb2:	4426      	add	r6, r4
{
 8001fb4:	4621      	mov	r1, r4
  }
#endif

  for (int i=0; i<length; i++)
  {
    p_data[i] = p_byte[i];
 8001fb6:	1b2d      	subs	r5, r5, r4
  for (int i=0; i<length; i++)
 8001fb8:	42b1      	cmp	r1, r6
 8001fba:	d112      	bne.n	8001fe2 <flashRead+0x40>
  }

  return ret;
}
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (addr >= qspiGetAddr() && addr < (qspiGetAddr() + qspiGetLength()))
 8001fc0:	f001 f828 	bl	8003014 <qspiGetAddr>
 8001fc4:	4607      	mov	r7, r0
 8001fc6:	f001 f828 	bl	800301a <qspiGetLength>
 8001fca:	4438      	add	r0, r7
 8001fcc:	42a8      	cmp	r0, r5
 8001fce:	d9f0      	bls.n	8001fb2 <flashRead+0x10>
    ret = qspiRead(addr - qspiGetAddr(), p_data, length);
 8001fd0:	f001 f820 	bl	8003014 <qspiGetAddr>
 8001fd4:	4632      	mov	r2, r6
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	1a28      	subs	r0, r5, r0
}
 8001fda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ret = qspiRead(addr - qspiGetAddr(), p_data, length);
 8001fde:	f001 b8f7 	b.w	80031d0 <qspiRead>
    p_data[i] = p_byte[i];
 8001fe2:	5c6b      	ldrb	r3, [r5, r1]
 8001fe4:	f801 3b01 	strb.w	r3, [r1], #1
  for (int i=0; i<length; i++)
 8001fe8:	e7e6      	b.n	8001fb8 <flashRead+0x16>
	...

08001fec <cliFlash>:
  uint8_t  data;
  uint32_t pre_time;
  bool flash_ret;


  if (args->argc == 1)
 8001fec:	8803      	ldrh	r3, [r0, #0]
 8001fee:	2b01      	cmp	r3, #1
{
 8001ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	b085      	sub	sp, #20
  if (args->argc == 1)
 8001ff8:	d113      	bne.n	8002022 <cliFlash+0x36>
  {
    if(args->isStr(0, "info") == true)
 8001ffa:	6943      	ldr	r3, [r0, #20]
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	494b      	ldr	r1, [pc, #300]	; (800212c <cliFlash+0x140>)
 8002000:	4798      	blx	r3
 8002002:	2800      	cmp	r0, #0
 8002004:	f000 8082 	beq.w	800210c <cliFlash+0x120>
    {
      cliPrintf("flash addr  : 0x%X\n", 0x8000000);
 8002008:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800200c:	4848      	ldr	r0, [pc, #288]	; (8002130 <cliFlash+0x144>)
 800200e:	f7ff fac7 	bl	80015a0 <cliPrintf>
      cliPrintf("qspi  addr  : 0x%X\n", 0x90000000);
 8002012:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 8002016:	4847      	ldr	r0, [pc, #284]	; (8002134 <cliFlash+0x148>)
    cliPrintf( "flash read  [addr] [length]\n");
    cliPrintf( "flash erase [addr] [length]\n");
    cliPrintf( "flash write [addr] [data]\n");
  }

}
 8002018:	b005      	add	sp, #20
 800201a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      cliPrintf("qspi  addr  : 0x%X\n", 0x90000000);
 800201e:	f7ff babf 	b.w	80015a0 <cliPrintf>
  else if (args->argc == 3)
 8002022:	2b03      	cmp	r3, #3
 8002024:	d172      	bne.n	800210c <cliFlash+0x120>
    if(args->isStr(0, "read") == true)
 8002026:	6943      	ldr	r3, [r0, #20]
 8002028:	2000      	movs	r0, #0
 800202a:	4943      	ldr	r1, [pc, #268]	; (8002138 <cliFlash+0x14c>)
 800202c:	4798      	blx	r3
 800202e:	b330      	cbz	r0, 800207e <cliFlash+0x92>
      addr   = (uint32_t)args->getData(1);
 8002030:	68a3      	ldr	r3, [r4, #8]
 8002032:	2001      	movs	r0, #1
 8002034:	4798      	blx	r3
      length = (uint32_t)args->getData(2);
 8002036:	68a3      	ldr	r3, [r4, #8]
      addr   = (uint32_t)args->getData(1);
 8002038:	4606      	mov	r6, r0
      length = (uint32_t)args->getData(2);
 800203a:	2002      	movs	r0, #2
 800203c:	4798      	blx	r3
      for (i=0; i<length; i++)
 800203e:	2400      	movs	r4, #0
      length = (uint32_t)args->getData(2);
 8002040:	4605      	mov	r5, r0
          cliPrintf( "addr : 0x%X\t Fail\n", addr+i);
 8002042:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8002164 <cliFlash+0x178>
          cliPrintf( "addr : 0x%X\t 0x%02X\n", addr+i, data);
 8002046:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8002168 <cliFlash+0x17c>
      for (i=0; i<length; i++)
 800204a:	42ac      	cmp	r4, r5
 800204c:	d102      	bne.n	8002054 <cliFlash+0x68>
}
 800204e:	b005      	add	sp, #20
 8002050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        flash_ret = flashRead(addr+i, &data, 1);
 8002054:	19a7      	adds	r7, r4, r6
 8002056:	2201      	movs	r2, #1
 8002058:	f10d 010f 	add.w	r1, sp, #15
 800205c:	4638      	mov	r0, r7
 800205e:	f7ff ffa0 	bl	8001fa2 <flashRead>
        if (flash_ret == true)
 8002062:	b138      	cbz	r0, 8002074 <cliFlash+0x88>
          cliPrintf( "addr : 0x%X\t 0x%02X\n", addr+i, data);
 8002064:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002068:	4639      	mov	r1, r7
 800206a:	4648      	mov	r0, r9
 800206c:	f7ff fa98 	bl	80015a0 <cliPrintf>
      for (i=0; i<length; i++)
 8002070:	3401      	adds	r4, #1
 8002072:	e7ea      	b.n	800204a <cliFlash+0x5e>
          cliPrintf( "addr : 0x%X\t Fail\n", addr+i);
 8002074:	4639      	mov	r1, r7
 8002076:	4640      	mov	r0, r8
 8002078:	f7ff fa92 	bl	80015a0 <cliPrintf>
 800207c:	e7f8      	b.n	8002070 <cliFlash+0x84>
    else if(args->isStr(0, "erase") == true)
 800207e:	6963      	ldr	r3, [r4, #20]
 8002080:	492e      	ldr	r1, [pc, #184]	; (800213c <cliFlash+0x150>)
 8002082:	4798      	blx	r3
 8002084:	b1e0      	cbz	r0, 80020c0 <cliFlash+0xd4>
      addr   = (uint32_t)args->getData(1);
 8002086:	68a3      	ldr	r3, [r4, #8]
 8002088:	2001      	movs	r0, #1
 800208a:	4798      	blx	r3
      length = (uint32_t)args->getData(2);
 800208c:	68a3      	ldr	r3, [r4, #8]
      addr   = (uint32_t)args->getData(1);
 800208e:	4605      	mov	r5, r0
      length = (uint32_t)args->getData(2);
 8002090:	2002      	movs	r0, #2
 8002092:	4798      	blx	r3
 8002094:	4604      	mov	r4, r0
      pre_time = millis();
 8002096:	f7fe fe77 	bl	8000d88 <millis>
 800209a:	4607      	mov	r7, r0
      flash_ret = flashErase(addr, length);
 800209c:	4621      	mov	r1, r4
 800209e:	4628      	mov	r0, r5
 80020a0:	f7ff feaa 	bl	8001df8 <flashErase>
 80020a4:	4606      	mov	r6, r0
      cliPrintf( "addr : 0x%X\t len : %d %d ms\n", addr, length, (millis()-pre_time));
 80020a6:	f7fe fe6f 	bl	8000d88 <millis>
 80020aa:	4622      	mov	r2, r4
 80020ac:	1bc3      	subs	r3, r0, r7
 80020ae:	4629      	mov	r1, r5
 80020b0:	4823      	ldr	r0, [pc, #140]	; (8002140 <cliFlash+0x154>)
 80020b2:	f7ff fa75 	bl	80015a0 <cliPrintf>
      if (flash_ret)
 80020b6:	b33e      	cbz	r6, 8002108 <cliFlash+0x11c>
        cliPrintf("OK\n");
 80020b8:	4822      	ldr	r0, [pc, #136]	; (8002144 <cliFlash+0x158>)
        cliPrintf("FAIL\n");
 80020ba:	f7ff fa71 	bl	80015a0 <cliPrintf>
  if (ret == false)
 80020be:	e7c6      	b.n	800204e <cliFlash+0x62>
    else if(args->isStr(0, "write") == true)
 80020c0:	6963      	ldr	r3, [r4, #20]
 80020c2:	4921      	ldr	r1, [pc, #132]	; (8002148 <cliFlash+0x15c>)
 80020c4:	4798      	blx	r3
 80020c6:	b308      	cbz	r0, 800210c <cliFlash+0x120>
      addr = (uint32_t)args->getData(1);
 80020c8:	68a3      	ldr	r3, [r4, #8]
 80020ca:	2001      	movs	r0, #1
 80020cc:	4798      	blx	r3
 80020ce:	4605      	mov	r5, r0
      data = (uint8_t )args->getData(2);
 80020d0:	68a3      	ldr	r3, [r4, #8]
 80020d2:	2002      	movs	r0, #2
 80020d4:	4798      	blx	r3
 80020d6:	f88d 000f 	strb.w	r0, [sp, #15]
      pre_time = millis();
 80020da:	f7fe fe55 	bl	8000d88 <millis>
      flash_ret = flashWrite(addr, &data, 1);
 80020de:	f10d 010f 	add.w	r1, sp, #15
      pre_time = millis();
 80020e2:	4606      	mov	r6, r0
      flash_ret = flashWrite(addr, &data, 1);
 80020e4:	2201      	movs	r2, #1
 80020e6:	4628      	mov	r0, r5
 80020e8:	f7ff fed6 	bl	8001e98 <flashWrite>
      cliPrintf( "addr : 0x%X\t 0x%02X %dms\n", addr, data, millis()-pre_time);
 80020ec:	f89d 200f 	ldrb.w	r2, [sp, #15]
      flash_ret = flashWrite(addr, &data, 1);
 80020f0:	4604      	mov	r4, r0
      cliPrintf( "addr : 0x%X\t 0x%02X %dms\n", addr, data, millis()-pre_time);
 80020f2:	9201      	str	r2, [sp, #4]
 80020f4:	f7fe fe48 	bl	8000d88 <millis>
 80020f8:	9a01      	ldr	r2, [sp, #4]
 80020fa:	1b83      	subs	r3, r0, r6
 80020fc:	4629      	mov	r1, r5
 80020fe:	4813      	ldr	r0, [pc, #76]	; (800214c <cliFlash+0x160>)
 8002100:	f7ff fa4e 	bl	80015a0 <cliPrintf>
      if (flash_ret)
 8002104:	2c00      	cmp	r4, #0
 8002106:	d1d7      	bne.n	80020b8 <cliFlash+0xcc>
        cliPrintf("FAIL\n");
 8002108:	4811      	ldr	r0, [pc, #68]	; (8002150 <cliFlash+0x164>)
 800210a:	e7d6      	b.n	80020ba <cliFlash+0xce>
    cliPrintf( "flash info\n");
 800210c:	4811      	ldr	r0, [pc, #68]	; (8002154 <cliFlash+0x168>)
 800210e:	f7ff fa47 	bl	80015a0 <cliPrintf>
    cliPrintf( "flash read  [addr] [length]\n");
 8002112:	4811      	ldr	r0, [pc, #68]	; (8002158 <cliFlash+0x16c>)
 8002114:	f7ff fa44 	bl	80015a0 <cliPrintf>
    cliPrintf( "flash erase [addr] [length]\n");
 8002118:	4810      	ldr	r0, [pc, #64]	; (800215c <cliFlash+0x170>)
 800211a:	f7ff fa41 	bl	80015a0 <cliPrintf>
    cliPrintf( "flash write [addr] [data]\n");
 800211e:	4810      	ldr	r0, [pc, #64]	; (8002160 <cliFlash+0x174>)
}
 8002120:	b005      	add	sp, #20
 8002122:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cliPrintf( "flash write [addr] [data]\n");
 8002126:	f7ff ba3b 	b.w	80015a0 <cliPrintf>
 800212a:	bf00      	nop
 800212c:	0800f76f 	.word	0x0800f76f
 8002130:	0800f831 	.word	0x0800f831
 8002134:	0800f845 	.word	0x0800f845
 8002138:	0800f859 	.word	0x0800f859
 800213c:	0800f886 	.word	0x0800f886
 8002140:	0800f88c 	.word	0x0800f88c
 8002144:	0800f8a9 	.word	0x0800f8a9
 8002148:	0800f8b3 	.word	0x0800f8b3
 800214c:	0800f8b9 	.word	0x0800f8b9
 8002150:	0800f8ad 	.word	0x0800f8ad
 8002154:	0800f8d3 	.word	0x0800f8d3
 8002158:	0800f8df 	.word	0x0800f8df
 800215c:	0800f8fc 	.word	0x0800f8fc
 8002160:	0800f919 	.word	0x0800f919
 8002164:	0800f873 	.word	0x0800f873
 8002168:	0800f85e 	.word	0x0800f85e

0800216c <gpioPinMode>:

  return ret;
}

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 800216c:	b530      	push	{r4, r5, lr}
 800216e:	b087      	sub	sp, #28
 8002170:	4604      	mov	r4, r0
 8002172:	460d      	mov	r5, r1
  bool ret = true;
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	2214      	movs	r2, #20
 8002176:	2100      	movs	r1, #0
 8002178:	a801      	add	r0, sp, #4
 800217a:	f00a f853 	bl	800c224 <memset>


  if (ch >= GPIO_MAX_CH)
 800217e:	2c01      	cmp	r4, #1
 8002180:	d81c      	bhi.n	80021bc <gpioPinMode+0x50>
  {
    return false;
  }

  switch(mode)
 8002182:	1e69      	subs	r1, r5, #1
 8002184:	2301      	movs	r3, #1
 8002186:	2904      	cmp	r1, #4
 8002188:	d805      	bhi.n	8002196 <gpioPinMode+0x2a>
 800218a:	e8df f001 	tbb	[pc, r1]
 800218e:	1512      	.short	0x1512
 8002190:	1103      	.short	0x1103
 8002192:	14          	.byte	0x14
 8002193:	00          	.byte	0x00
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
      break;

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
      break;
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8002196:	200c      	movs	r0, #12
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <gpioPinMode+0x54>)
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 800219a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 800219c:	4344      	muls	r4, r0
 800219e:	191a      	adds	r2, r3, r4
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 80021a0:	5918      	ldr	r0, [r3, r4]
  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 80021a2:	6852      	ldr	r2, [r2, #4]
 80021a4:	9201      	str	r2, [sp, #4]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 80021a6:	f005 fd0d 	bl	8007bc4 <HAL_GPIO_Init>

  return ret;
 80021aa:	2001      	movs	r0, #1
}
 80021ac:	b007      	add	sp, #28
 80021ae:	bd30      	pop	{r4, r5, pc}
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b0:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021b2:	9303      	str	r3, [sp, #12]
      break;
 80021b4:	e7ef      	b.n	8002196 <gpioPinMode+0x2a>
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b6:	9302      	str	r3, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021b8:	2302      	movs	r3, #2
 80021ba:	e7fa      	b.n	80021b2 <gpioPinMode+0x46>
    return false;
 80021bc:	2000      	movs	r0, #0
 80021be:	e7f5      	b.n	80021ac <gpioPinMode+0x40>
 80021c0:	0800f998 	.word	0x0800f998

080021c4 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
  if (ch >= GPIO_MAX_CH)
 80021c4:	2801      	cmp	r0, #1
{
 80021c6:	460a      	mov	r2, r1
  if (ch >= GPIO_MAX_CH)
 80021c8:	d80b      	bhi.n	80021e2 <gpioPinWrite+0x1e>
    return;
  }

  if (value)
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 80021ca:	230c      	movs	r3, #12
 80021cc:	4905      	ldr	r1, [pc, #20]	; (80021e4 <gpioPinWrite+0x20>)
 80021ce:	4358      	muls	r0, r3
 80021d0:	180b      	adds	r3, r1, r0
 80021d2:	5808      	ldr	r0, [r1, r0]
 80021d4:	8899      	ldrh	r1, [r3, #4]
  if (value)
 80021d6:	b112      	cbz	r2, 80021de <gpioPinWrite+0x1a>
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 80021d8:	7a5a      	ldrb	r2, [r3, #9]
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 80021da:	f005 be85 	b.w	8007ee8 <HAL_GPIO_WritePin>
 80021de:	7a9a      	ldrb	r2, [r3, #10]
 80021e0:	e7fb      	b.n	80021da <gpioPinWrite+0x16>
  }
}
 80021e2:	4770      	bx	lr
 80021e4:	0800f998 	.word	0x0800f998

080021e8 <gpioInit>:
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <gpioInit+0x4c>)
{
 80021ea:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    gpioPinMode(i, gpio_tbl[i].mode);
 80021f0:	2101      	movs	r1, #1
 80021f2:	2000      	movs	r0, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f4:	f042 0208 	orr.w	r2, r2, #8
 80021f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80021fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	9b01      	ldr	r3, [sp, #4]
    gpioPinMode(i, gpio_tbl[i].mode);
 8002208:	f7ff ffb0 	bl	800216c <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 800220c:	2101      	movs	r1, #1
 800220e:	2000      	movs	r0, #0
 8002210:	f7ff ffd8 	bl	80021c4 <gpioPinWrite>
    gpioPinMode(i, gpio_tbl[i].mode);
 8002214:	2103      	movs	r1, #3
 8002216:	2001      	movs	r0, #1
 8002218:	f7ff ffa8 	bl	800216c <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 800221c:	2100      	movs	r1, #0
 800221e:	2001      	movs	r0, #1
 8002220:	f7ff ffd0 	bl	80021c4 <gpioPinWrite>
  cliAdd("gpio", cliGpio);
 8002224:	4904      	ldr	r1, [pc, #16]	; (8002238 <gpioInit+0x50>)
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <gpioInit+0x54>)
 8002228:	f7ff fc54 	bl	8001ad4 <cliAdd>
}
 800222c:	2001      	movs	r0, #1
 800222e:	b003      	add	sp, #12
 8002230:	f85d fb04 	ldr.w	pc, [sp], #4
 8002234:	58024400 	.word	0x58024400
 8002238:	08002269 	.word	0x08002269
 800223c:	0800f934 	.word	0x0800f934

08002240 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
  bool ret = false;

  if (ch >= GPIO_MAX_CH)
 8002240:	2801      	cmp	r0, #1
{
 8002242:	b510      	push	{r4, lr}
  if (ch >= GPIO_MAX_CH)
 8002244:	d80c      	bhi.n	8002260 <gpioPinRead+0x20>
  {
    return false;
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8002246:	220c      	movs	r2, #12
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <gpioPinRead+0x24>)
 800224a:	4350      	muls	r0, r2
 800224c:	181c      	adds	r4, r3, r0
 800224e:	5818      	ldr	r0, [r3, r0]
 8002250:	88a1      	ldrh	r1, [r4, #4]
 8002252:	f005 fe43 	bl	8007edc <HAL_GPIO_ReadPin>
 8002256:	7a63      	ldrb	r3, [r4, #9]
 8002258:	1a1b      	subs	r3, r3, r0
 800225a:	4258      	negs	r0, r3
 800225c:	4158      	adcs	r0, r3
  {
    ret = true;
  }

  return ret;
}
 800225e:	bd10      	pop	{r4, pc}
    return false;
 8002260:	2000      	movs	r0, #0
 8002262:	e7fc      	b.n	800225e <gpioPinRead+0x1e>
 8002264:	0800f998 	.word	0x0800f998

08002268 <cliGpio>:
void cliGpio(cli_args_t *args)
{
  bool ret = false;


  if (args->argc == 1 && args->isStr(0, "show") == true)
 8002268:	8803      	ldrh	r3, [r0, #0]
 800226a:	2b01      	cmp	r3, #1
{
 800226c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800226e:	4604      	mov	r4, r0
  if (args->argc == 1 && args->isStr(0, "show") == true)
 8002270:	d11f      	bne.n	80022b2 <cliGpio+0x4a>
 8002272:	6943      	ldr	r3, [r0, #20]
 8002274:	2000      	movs	r0, #0
 8002276:	4937      	ldr	r1, [pc, #220]	; (8002354 <cliGpio+0xec>)
 8002278:	4798      	blx	r3
 800227a:	4605      	mov	r5, r0
 800227c:	b1c8      	cbz	r0, 80022b2 <cliGpio+0x4a>
  {
    while(cliKeepLoop())
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
      {
        cliPrintf("%d", gpioPinRead(i));
 800227e:	4e36      	ldr	r6, [pc, #216]	; (8002358 <cliGpio+0xf0>)
      }
      cliPrintf("\n");
 8002280:	4f36      	ldr	r7, [pc, #216]	; (800235c <cliGpio+0xf4>)
    while(cliKeepLoop())
 8002282:	f7ff fc1b 	bl	8001abc <cliKeepLoop>
 8002286:	b1a8      	cbz	r0, 80022b4 <cliGpio+0x4c>
        cliPrintf("%d", gpioPinRead(i));
 8002288:	2000      	movs	r0, #0
 800228a:	f7ff ffd9 	bl	8002240 <gpioPinRead>
 800228e:	4601      	mov	r1, r0
 8002290:	4630      	mov	r0, r6
 8002292:	f7ff f985 	bl	80015a0 <cliPrintf>
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff ffd2 	bl	8002240 <gpioPinRead>
 800229c:	4601      	mov	r1, r0
 800229e:	4630      	mov	r0, r6
 80022a0:	f7ff f97e 	bl	80015a0 <cliPrintf>
      cliPrintf("\n");
 80022a4:	4638      	mov	r0, r7
 80022a6:	f7ff f97b 	bl	80015a0 <cliPrintf>
      delay(100);
 80022aa:	2064      	movs	r0, #100	; 0x64
 80022ac:	f7fe fd6a 	bl	8000d84 <delay>
 80022b0:	e7e7      	b.n	8002282 <cliGpio+0x1a>
  bool ret = false;
 80022b2:	2500      	movs	r5, #0
    }
    ret = true;
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 80022b4:	8823      	ldrh	r3, [r4, #0]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d10e      	bne.n	80022d8 <cliGpio+0x70>
 80022ba:	6963      	ldr	r3, [r4, #20]
 80022bc:	2000      	movs	r0, #0
 80022be:	4928      	ldr	r1, [pc, #160]	; (8002360 <cliGpio+0xf8>)
 80022c0:	4798      	blx	r3
 80022c2:	4606      	mov	r6, r0
 80022c4:	b140      	cbz	r0, 80022d8 <cliGpio+0x70>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 80022c6:	68a3      	ldr	r3, [r4, #8]
 80022c8:	2001      	movs	r0, #1
 80022ca:	4798      	blx	r3

    while(cliKeepLoop())
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 80022cc:	4f25      	ldr	r7, [pc, #148]	; (8002364 <cliGpio+0xfc>)
    ch = (uint8_t)args->getData(1);
 80022ce:	b2c5      	uxtb	r5, r0
    while(cliKeepLoop())
 80022d0:	f7ff fbf4 	bl	8001abc <cliKeepLoop>
 80022d4:	bb08      	cbnz	r0, 800231a <cliGpio+0xb2>
      delay(100);
    }

    ret = true;
 80022d6:	4635      	mov	r5, r6
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 80022d8:	8823      	ldrh	r3, [r4, #0]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d129      	bne.n	8002332 <cliGpio+0xca>
 80022de:	6963      	ldr	r3, [r4, #20]
 80022e0:	2000      	movs	r0, #0
 80022e2:	4921      	ldr	r1, [pc, #132]	; (8002368 <cliGpio+0x100>)
 80022e4:	4798      	blx	r3
 80022e6:	b320      	cbz	r0, 8002332 <cliGpio+0xca>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 80022e8:	68a3      	ldr	r3, [r4, #8]
 80022ea:	2001      	movs	r0, #1
 80022ec:	4798      	blx	r3
 80022ee:	4605      	mov	r5, r0
    data = (uint8_t)args->getData(2);
 80022f0:	68a3      	ldr	r3, [r4, #8]
 80022f2:	2002      	movs	r0, #2
 80022f4:	4798      	blx	r3

    gpioPinWrite(ch, data);
 80022f6:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 80022fa:	b2ed      	uxtb	r5, r5
 80022fc:	bf14      	ite	ne
 80022fe:	2101      	movne	r1, #1
 8002300:	2100      	moveq	r1, #0
 8002302:	4628      	mov	r0, r5
 8002304:	9201      	str	r2, [sp, #4]
 8002306:	f7ff ff5d 	bl	80021c4 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 800230a:	9a01      	ldr	r2, [sp, #4]
 800230c:	4629      	mov	r1, r5
 800230e:	4817      	ldr	r0, [pc, #92]	; (800236c <cliGpio+0x104>)
  {
    cliPrintf("gpio show\n");
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
  }
}
 8002310:	b003      	add	sp, #12
 8002312:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    cliPrintf("gpio write %d : %d\n", ch, data);
 8002316:	f7ff b943 	b.w	80015a0 <cliPrintf>
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 800231a:	4628      	mov	r0, r5
 800231c:	f7ff ff90 	bl	8002240 <gpioPinRead>
 8002320:	4629      	mov	r1, r5
 8002322:	4602      	mov	r2, r0
 8002324:	4638      	mov	r0, r7
 8002326:	f7ff f93b 	bl	80015a0 <cliPrintf>
      delay(100);
 800232a:	2064      	movs	r0, #100	; 0x64
 800232c:	f7fe fd2a 	bl	8000d84 <delay>
 8002330:	e7ce      	b.n	80022d0 <cliGpio+0x68>
  if (ret != true)
 8002332:	b96d      	cbnz	r5, 8002350 <cliGpio+0xe8>
    cliPrintf("gpio show\n");
 8002334:	480e      	ldr	r0, [pc, #56]	; (8002370 <cliGpio+0x108>)
 8002336:	f7ff f933 	bl	80015a0 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 800233a:	2101      	movs	r1, #1
 800233c:	480d      	ldr	r0, [pc, #52]	; (8002374 <cliGpio+0x10c>)
 800233e:	f7ff f92f 	bl	80015a0 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8002342:	2101      	movs	r1, #1
 8002344:	480c      	ldr	r0, [pc, #48]	; (8002378 <cliGpio+0x110>)
}
 8002346:	b003      	add	sp, #12
 8002348:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 800234c:	f7ff b928 	b.w	80015a0 <cliPrintf>
}
 8002350:	b003      	add	sp, #12
 8002352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002354:	0800f60d 	.word	0x0800f60d
 8002358:	0800f612 	.word	0x0800f612
 800235c:	0800fcad 	.word	0x0800fcad
 8002360:	0800f859 	.word	0x0800f859
 8002364:	0800f939 	.word	0x0800f939
 8002368:	0800f8b3 	.word	0x0800f8b3
 800236c:	0800f94c 	.word	0x0800f94c
 8002370:	0800f960 	.word	0x0800f960
 8002374:	0800f96b 	.word	0x0800f96b
 8002378:	0800f97f 	.word	0x0800f97f

0800237c <lcdDrawPixelBuffer>:
  ltdc_draw_buffer[y_pos * LCD_WIDTH + x_pos] = lcdGetColorMix(color1, color2, 255-mix);
}

LCD_OPT_DEF void lcdDrawPixelBuffer(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  lcd_buffer[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 800237c:	f44f 7c48 	mov.w	ip, #800	; 0x320
 8002380:	4b02      	ldr	r3, [pc, #8]	; (800238c <lcdDrawPixelBuffer+0x10>)
 8002382:	fb0c 0101 	mla	r1, ip, r1, r0
 8002386:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 800238a:	4770      	bx	lr
 800238c:	c0000000 	.word	0xc0000000

08002390 <lcdTransferDoneISR>:
{
 8002390:	b538      	push	{r3, r4, r5, lr}
  fps_time = millis() - fps_pre_time;
 8002392:	4d0a      	ldr	r5, [pc, #40]	; (80023bc <lcdTransferDoneISR+0x2c>)
 8002394:	f7fe fcf8 	bl	8000d88 <millis>
 8002398:	4c09      	ldr	r4, [pc, #36]	; (80023c0 <lcdTransferDoneISR+0x30>)
 800239a:	682b      	ldr	r3, [r5, #0]
 800239c:	1ac0      	subs	r0, r0, r3
 800239e:	6020      	str	r0, [r4, #0]
  fps_pre_time = millis();
 80023a0:	f7fe fcf2 	bl	8000d88 <millis>
 80023a4:	6028      	str	r0, [r5, #0]
  if (fps_time > 0)
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	b133      	cbz	r3, 80023b8 <lcdTransferDoneISR+0x28>
    fps_count = 1000 / fps_time;
 80023aa:	6822      	ldr	r2, [r4, #0]
 80023ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80023b4:	4a03      	ldr	r2, [pc, #12]	; (80023c4 <lcdTransferDoneISR+0x34>)
 80023b6:	6013      	str	r3, [r2, #0]
}
 80023b8:	bd38      	pop	{r3, r4, r5, pc}
 80023ba:	bf00      	nop
 80023bc:	24000948 	.word	0x24000948
 80023c0:	2400094c 	.word	0x2400094c
 80023c4:	24000944 	.word	0x24000944

080023c8 <lcdSetBackLight>:
  value = constrain(value, 0, 100);
 80023c8:	2864      	cmp	r0, #100	; 0x64
  if (value != backlight_value)
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <lcdSetBackLight+0x20>)
  value = constrain(value, 0, 100);
 80023cc:	4602      	mov	r2, r0
  if (value != backlight_value)
 80023ce:	7819      	ldrb	r1, [r3, #0]
  value = constrain(value, 0, 100);
 80023d0:	bf28      	it	cs
 80023d2:	2264      	movcs	r2, #100	; 0x64
  if (value != backlight_value)
 80023d4:	4291      	cmp	r1, r2
    backlight_value = value;
 80023d6:	bf18      	it	ne
 80023d8:	701a      	strbne	r2, [r3, #0]
  if (value > 0)
 80023da:	b118      	cbz	r0, 80023e4 <lcdSetBackLight+0x1c>
    gpioPinWrite(1, _DEF_HIGH);
 80023dc:	2101      	movs	r1, #1
    gpioPinWrite(1, _DEF_LOW);
 80023de:	2001      	movs	r0, #1
 80023e0:	f7ff bef0 	b.w	80021c4 <gpioPinWrite>
 80023e4:	4601      	mov	r1, r0
 80023e6:	e7fa      	b.n	80023de <lcdSetBackLight+0x16>
 80023e8:	24000014 	.word	0x24000014

080023ec <lcdInit>:
  gpioPinWrite(1, _DEF_LOW);
 80023ec:	2100      	movs	r1, #0
 80023ee:	2001      	movs	r0, #1
{
 80023f0:	b508      	push	{r3, lr}
  gpioPinWrite(1, _DEF_LOW);
 80023f2:	f7ff fee7 	bl	80021c4 <gpioPinWrite>
  ltdcInit();
 80023f6:	f000 fbc3 	bl	8002b80 <ltdcInit>
  delay(200);
 80023fa:	20c8      	movs	r0, #200	; 0xc8
 80023fc:	f7fe fcc2 	bl	8000d84 <delay>
  lcdSetBackLight(100);
 8002400:	2064      	movs	r0, #100	; 0x64
 8002402:	f7ff ffe1 	bl	80023c8 <lcdSetBackLight>
}
 8002406:	2001      	movs	r0, #1
 8002408:	bd08      	pop	{r3, pc}
	...

0800240c <lcdDrawPixel>:
  ltdc_draw_buffer[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 800240c:	f44f 7c48 	mov.w	ip, #800	; 0x320
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <lcdDrawPixel+0x14>)
 8002412:	fb0c 0101 	mla	r1, ip, r1, r0
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	24000a04 	.word	0x24000a04

08002424 <lcdDrawPixelMix>:
{
 8002424:	b570      	push	{r4, r5, r6, lr}
  ltdc_draw_buffer[y_pos * LCD_WIDTH + x_pos] = lcdGetColorMix(color1, color2, 255-mix);
 8002426:	ea6f 0e03 	mvn.w	lr, r3
  color1 = ltdc_draw_buffer[y_pos * LCD_WIDTH + x_pos];
 800242a:	4c19      	ldr	r4, [pc, #100]	; (8002490 <lcdDrawPixelMix+0x6c>)
 800242c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002430:	6824      	ldr	r4, [r4, #0]
  c2 = ((c2_>>8) & 0x00FF) | ((c2_<<8) & 0xFF00);
#else
  c1 = c1_;
  c2 = c2_;
#endif
  r = ((uint16_t)((uint16_t) GETR(c1) * mix + GETR(c2) * (255 - mix)) >> 8);
 8002432:	ea6f 050e 	mvn.w	r5, lr
  color1 = ltdc_draw_buffer[y_pos * LCD_WIDTH + x_pos];
 8002436:	fb03 0101 	mla	r1, r3, r1, r0
  r = ((uint16_t)((uint16_t) GETR(c1) * mix + GETR(c2) * (255 - mix)) >> 8);
 800243a:	f3c2 20c4 	ubfx	r0, r2, #11, #5
 800243e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8002442:	fa5f fe8e 	uxtb.w	lr, lr
  color1 = ltdc_draw_buffer[y_pos * LCD_WIDTH + x_pos];
 8002446:	f834 c011 	ldrh.w	ip, [r4, r1, lsl #1]
  g = ((uint16_t)((uint16_t) GETG(c1) * mix + GETG(c2) * (255 - mix)) >> 8);
  b = ((uint16_t)((uint16_t) GETB(c1) * mix + GETB(c2) * (255 - mix)) >> 8);
 800244a:	f002 031f 	and.w	r3, r2, #31
  r = ((uint16_t)((uint16_t) GETR(c1) * mix + GETR(c2) * (255 - mix)) >> 8);
 800244e:	fb10 f005 	smulbb	r0, r0, r5
  g = ((uint16_t)((uint16_t) GETG(c1) * mix + GETG(c2) * (255 - mix)) >> 8);
 8002452:	f3c2 1245 	ubfx	r2, r2, #5, #6
  b = ((uint16_t)((uint16_t) GETB(c1) * mix + GETB(c2) * (255 - mix)) >> 8);
 8002456:	fb13 f305 	smulbb	r3, r3, r5
  r = ((uint16_t)((uint16_t) GETR(c1) * mix + GETR(c2) * (255 - mix)) >> 8);
 800245a:	ea4f 26dc 	mov.w	r6, ip, lsr #11
 800245e:	fb06 000e 	mla	r0, r6, lr, r0
  b = ((uint16_t)((uint16_t) GETB(c1) * mix + GETB(c2) * (255 - mix)) >> 8);
 8002462:	f00c 061f 	and.w	r6, ip, #31
  g = ((uint16_t)((uint16_t) GETG(c1) * mix + GETG(c2) * (255 - mix)) >> 8);
 8002466:	f3cc 1c45 	ubfx	ip, ip, #5, #6
  b = ((uint16_t)((uint16_t) GETB(c1) * mix + GETB(c2) * (255 - mix)) >> 8);
 800246a:	fb06 330e 	mla	r3, r6, lr, r3

  ret = MAKECOL(r, g, b);
 800246e:	f3c0 200f 	ubfx	r0, r0, #8, #16
  g = ((uint16_t)((uint16_t) GETG(c1) * mix + GETG(c2) * (255 - mix)) >> 8);
 8002472:	fb1c fc0e 	smulbb	ip, ip, lr
  b = ((uint16_t)((uint16_t) GETB(c1) * mix + GETB(c2) * (255 - mix)) >> 8);
 8002476:	0a1b      	lsrs	r3, r3, #8
  g = ((uint16_t)((uint16_t) GETG(c1) * mix + GETG(c2) * (255 - mix)) >> 8);
 8002478:	fb02 cc05 	mla	ip, r2, r5, ip
  ret = MAKECOL(r, g, b);
 800247c:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
 8002480:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8002484:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
  ltdc_draw_buffer[y_pos * LCD_WIDTH + x_pos] = lcdGetColorMix(color1, color2, 255-mix);
 8002488:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
}
 800248c:	bd70      	pop	{r4, r5, r6, pc}
 800248e:	bf00      	nop
 8002490:	24000a04 	.word	0x24000a04

08002494 <lcdClearBuffer>:
{
 8002494:	b538      	push	{r3, r4, r5, lr}
 8002496:	4604      	mov	r4, r0
  return (uint16_t *)ltdcGetFrameBuffer();
 8002498:	f000 fc0e 	bl	8002cb8 <ltdcGetFrameBuffer>
  DMA2D->CR      = 0x00030000UL | (1 << 9);
 800249c:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <lcdClearBuffer+0x30>)
  DMA2D->OOR     = OffLine;
 800249e:	2500      	movs	r5, #0
  DMA2D->CR      = 0x00030000UL | (1 << 9);
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <lcdClearBuffer+0x34>)
  DMA2D->OPFCCR  = PIXEL_FORMAT_RGB565;
 80024a2:	2102      	movs	r1, #2
  DMA2D->CR      = 0x00030000UL | (1 << 9);
 80024a4:	6013      	str	r3, [r2, #0]
  DMA2D->NLR     = (uint32_t)(xSize << 16) | (uint32_t)ySize;
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <lcdClearBuffer+0x38>)
  DMA2D->OCOLR   = ColorIndex;
 80024a8:	6394      	str	r4, [r2, #56]	; 0x38
  DMA2D->OMAR    = (uint32_t)pDst;
 80024aa:	63d0      	str	r0, [r2, #60]	; 0x3c
  DMA2D->OOR     = OffLine;
 80024ac:	6415      	str	r5, [r2, #64]	; 0x40
  DMA2D->OPFCCR  = PIXEL_FORMAT_RGB565;
 80024ae:	6351      	str	r1, [r2, #52]	; 0x34
  DMA2D->NLR     = (uint32_t)(xSize << 16) | (uint32_t)ySize;
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START;
 80024b2:	6813      	ldr	r3, [r2, #0]
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6013      	str	r3, [r2, #0]
  while (DMA2D->CR & DMA2D_CR_START)
 80024ba:	6813      	ldr	r3, [r2, #0]
 80024bc:	07db      	lsls	r3, r3, #31
 80024be:	d4fc      	bmi.n	80024ba <lcdClearBuffer+0x26>
}
 80024c0:	bd38      	pop	{r3, r4, r5, pc}
 80024c2:	bf00      	nop
 80024c4:	52001000 	.word	0x52001000
 80024c8:	00030200 	.word	0x00030200
 80024cc:	032001e0 	.word	0x032001e0

080024d0 <lcdGetFps>:
  return fps_count;
 80024d0:	4b01      	ldr	r3, [pc, #4]	; (80024d8 <lcdGetFps+0x8>)
 80024d2:	6818      	ldr	r0, [r3, #0]
}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	24000944 	.word	0x24000944

080024dc <lcdGetFpsTime>:
  return fps_time;
 80024dc:	4b01      	ldr	r3, [pc, #4]	; (80024e4 <lcdGetFpsTime+0x8>)
 80024de:	6818      	ldr	r0, [r3, #0]
}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	2400094c 	.word	0x2400094c

080024e8 <lcdDrawAvailable>:
  return ltdcDrawAvailable();
 80024e8:	f000 bbd8 	b.w	8002c9c <ltdcDrawAvailable>

080024ec <lcdRequestDraw>:
{
 80024ec:	b508      	push	{r3, lr}
  ltdcRequestDraw();
 80024ee:	f000 fbdd 	bl	8002cac <ltdcRequestDraw>
}
 80024f2:	2001      	movs	r0, #1
 80024f4:	bd08      	pop	{r3, pc}

080024f6 <lcdGetWidth>:
}
 80024f6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80024fa:	4770      	bx	lr

080024fc <lcdGetHeight>:
}
 80024fc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002500:	4770      	bx	lr

08002502 <lcdDrawLine>:
{
 8002502:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002506:	4690      	mov	r8, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8002508:	eba3 0901 	sub.w	r9, r3, r1
{
 800250c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8002510:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8002514:	eba8 0a00 	sub.w	sl, r8, r0
 8002518:	f1b9 0f00 	cmp.w	r9, #0
 800251c:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 8002520:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002524:	bfb8      	it	lt
 8002526:	f1c9 0900 	rsblt	r9, r9, #0
 800252a:	f1ba 0f00 	cmp.w	sl, #0
 800252e:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
 8002532:	bfb8      	it	lt
 8002534:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep)
 8002538:	45d1      	cmp	r9, sl
 800253a:	dd05      	ble.n	8002548 <lcdDrawLine+0x46>
 800253c:	4643      	mov	r3, r8
    _swap_int16_t(x1, y1);
 800253e:	46b8      	mov	r8, r7
 8002540:	461f      	mov	r7, r3
  if (steep)
 8002542:	4623      	mov	r3, r4
    _swap_int16_t(x0, y0);
 8002544:	462c      	mov	r4, r5
 8002546:	461d      	mov	r5, r3
  if (x0 > x1)
 8002548:	4544      	cmp	r4, r8
 800254a:	dd05      	ble.n	8002558 <lcdDrawLine+0x56>
 800254c:	462b      	mov	r3, r5
    _swap_int16_t(y0, y1);
 800254e:	463d      	mov	r5, r7
 8002550:	461f      	mov	r7, r3
  if (x0 > x1)
 8002552:	4623      	mov	r3, r4
 8002554:	4644      	mov	r4, r8
 8002556:	4698      	mov	r8, r3
  dx = x1 - x0;
 8002558:	eba8 0604 	sub.w	r6, r8, r4
  dy = abs(y1 - y0);
 800255c:	eba7 0b05 	sub.w	fp, r7, r5
  dx = x1 - x0;
 8002560:	b2b3      	uxth	r3, r6
  dy = abs(y1 - y0);
 8002562:	f1bb 0f00 	cmp.w	fp, #0
  dx = x1 - x0;
 8002566:	9300      	str	r3, [sp, #0]
  int16_t err = dx / 2;
 8002568:	f3c6 33c0 	ubfx	r3, r6, #15, #1
  dy = abs(y1 - y0);
 800256c:	bfb8      	it	lt
 800256e:	f1cb 0b00 	rsblt	fp, fp, #0
  int16_t err = dx / 2;
 8002572:	fa03 f686 	sxtah	r6, r3, r6
    ystep = -1;
 8002576:	42bd      	cmp	r5, r7
 8002578:	bfb4      	ite	lt
 800257a:	2301      	movlt	r3, #1
 800257c:	f04f 33ff 	movge.w	r3, #4294967295
  int16_t err = dx / 2;
 8002580:	1076      	asrs	r6, r6, #1
    ystep = -1;
 8002582:	9301      	str	r3, [sp, #4]
  for (; x0<=x1; x0++)
 8002584:	4544      	cmp	r4, r8
 8002586:	dd02      	ble.n	800258e <lcdDrawLine+0x8c>
}
 8002588:	b003      	add	sp, #12
 800258a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (steep)
 800258e:	45d1      	cmp	r9, sl
      lcdDrawPixel(y0, x0, color);
 8002590:	b2a4      	uxth	r4, r4
 8002592:	b2af      	uxth	r7, r5
    err -= dy;
 8002594:	eba6 060b 	sub.w	r6, r6, fp
      lcdDrawPixel(y0, x0, color);
 8002598:	bfcd      	iteet	gt
 800259a:	4621      	movgt	r1, r4
      lcdDrawPixel(x0, y0, color);
 800259c:	4620      	movle	r0, r4
 800259e:	4639      	movle	r1, r7
      lcdDrawPixel(y0, x0, color);
 80025a0:	4638      	movgt	r0, r7
      lcdDrawPixel(x0, y0, color);
 80025a2:	f7ff ff33 	bl	800240c <lcdDrawPixel>
    err -= dy;
 80025a6:	b2b1      	uxth	r1, r6
 80025a8:	b236      	sxth	r6, r6
    if (err < 0)
 80025aa:	2e00      	cmp	r6, #0
 80025ac:	da05      	bge.n	80025ba <lcdDrawLine+0xb8>
      y0 += ystep;
 80025ae:	9b01      	ldr	r3, [sp, #4]
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	b21d      	sxth	r5, r3
      err += dx;
 80025b4:	9b00      	ldr	r3, [sp, #0]
 80025b6:	185e      	adds	r6, r3, r1
 80025b8:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++)
 80025ba:	3401      	adds	r4, #1
 80025bc:	b224      	sxth	r4, r4
 80025be:	e7e1      	b.n	8002584 <lcdDrawLine+0x82>

080025c0 <lcdDrawVLine>:
{
 80025c0:	b507      	push	{r0, r1, r2, lr}
  lcdDrawLine(x, y, x, y+h-1, color);
 80025c2:	3a01      	subs	r2, #1
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	440a      	add	r2, r1
 80025c8:	b213      	sxth	r3, r2
 80025ca:	4602      	mov	r2, r0
 80025cc:	f7ff ff99 	bl	8002502 <lcdDrawLine>
}
 80025d0:	b003      	add	sp, #12
 80025d2:	f85d fb04 	ldr.w	pc, [sp], #4

080025d6 <lcdDrawFillRect>:
{
 80025d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025da:	4688      	mov	r8, r1
 80025dc:	461e      	mov	r6, r3
 80025de:	f8bd 7018 	ldrh.w	r7, [sp, #24]
  for (int16_t i=x; i<x+w; i++)
 80025e2:	4604      	mov	r4, r0
 80025e4:	1885      	adds	r5, r0, r2
 80025e6:	42ac      	cmp	r4, r5
 80025e8:	db01      	blt.n	80025ee <lcdDrawFillRect+0x18>
}
 80025ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lcdDrawVLine(i, y, h, color);
 80025ee:	4620      	mov	r0, r4
 80025f0:	3401      	adds	r4, #1
 80025f2:	463b      	mov	r3, r7
 80025f4:	4632      	mov	r2, r6
 80025f6:	4641      	mov	r1, r8
 80025f8:	b224      	sxth	r4, r4
 80025fa:	f7ff ffe1 	bl	80025c0 <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 80025fe:	e7f2      	b.n	80025e6 <lcdDrawFillRect+0x10>

08002600 <disHanFontBuffer>:
{
 8002600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  FontSize = FontPtr->Size_Char;
 8002604:	f8b2 9002 	ldrh.w	r9, [r2, #2]
{
 8002608:	b087      	sub	sp, #28
 800260a:	4690      	mov	r8, r2
  uint16_t  FontSize = FontPtr->Size_Char;
 800260c:	2610      	movs	r6, #16
 800260e:	f1b9 0f02 	cmp.w	r9, #2
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8002612:	f04f 0400 	mov.w	r4, #0
 8002616:	bf28      	it	cs
 8002618:	f04f 0902 	movcs.w	r9, #2
  if (textcolor == 0)
 800261c:	2b01      	cmp	r3, #1
 800261e:	bf38      	it	cc
 8002620:	2301      	movcc	r3, #1
 8002622:	469a      	mov	sl, r3
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8002624:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002628:	b29b      	uxth	r3, r3
{
 800262a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800262e:	9301      	str	r3, [sp, #4]
          lcdDrawPixelBuffer(x + index_x, y + i, textcolor);
 8002630:	9b03      	ldr	r3, [sp, #12]
 8002632:	fb09 8704 	mla	r7, r9, r4, r8
    index_x = 0;
 8002636:	2500      	movs	r5, #0
          lcdDrawPixelBuffer(x + index_x, y + i, textcolor);
 8002638:	18e1      	adds	r1, r4, r3
 800263a:	3706      	adds	r7, #6
 800263c:	b289      	uxth	r1, r1
 800263e:	e01d      	b.n	800267c <disHanFontBuffer+0x7c>
      font_data = FontPtr->FontBuffer[i*FontSize +j];
 8002640:	f817 3b01 	ldrb.w	r3, [r7], #1
 8002644:	f04f 0b00 	mov.w	fp, #0
 8002648:	9300      	str	r3, [sp, #0]
          lcdDrawPixelBuffer(x + index_x, y + i, textcolor);
 800264a:	9b02      	ldr	r3, [sp, #8]
 800264c:	18eb      	adds	r3, r5, r3
 800264e:	9304      	str	r3, [sp, #16]
 8002650:	9b04      	ldr	r3, [sp, #16]
          lcdDrawPixelBuffer(x + index_x, y + i, 0);
 8002652:	9105      	str	r1, [sp, #20]
          lcdDrawPixelBuffer(x + index_x, y + i, textcolor);
 8002654:	eb03 000b 	add.w	r0, r3, fp
        if(font_data & ((uint8_t)0x80>>Loop))
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	fa43 f20b 	asr.w	r2, r3, fp
 800265e:	9b00      	ldr	r3, [sp, #0]
      for( Loop=0; Loop<8; Loop++ )
 8002660:	f10b 0b01 	add.w	fp, fp, #1
          lcdDrawPixelBuffer(x + index_x, y + i, textcolor);
 8002664:	b280      	uxth	r0, r0
        if(font_data & ((uint8_t)0x80>>Loop))
 8002666:	401a      	ands	r2, r3
          lcdDrawPixelBuffer(x + index_x, y + i, textcolor);
 8002668:	bf18      	it	ne
 800266a:	4652      	movne	r2, sl
          lcdDrawPixelBuffer(x + index_x, y + i, 0);
 800266c:	f7ff fe86 	bl	800237c <lcdDrawPixelBuffer>
      for( Loop=0; Loop<8; Loop++ )
 8002670:	f1bb 0f08 	cmp.w	fp, #8
          lcdDrawPixelBuffer(x + index_x, y + i, 0);
 8002674:	9905      	ldr	r1, [sp, #20]
      for( Loop=0; Loop<8; Loop++ )
 8002676:	d1eb      	bne.n	8002650 <disHanFontBuffer+0x50>
        index_x++;
 8002678:	3508      	adds	r5, #8
 800267a:	b2ad      	uxth	r5, r5
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 800267c:	9b01      	ldr	r3, [sp, #4]
 800267e:	429d      	cmp	r5, r3
 8002680:	d1de      	bne.n	8002640 <disHanFontBuffer+0x40>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8002682:	3e01      	subs	r6, #1
 8002684:	3401      	adds	r4, #1
 8002686:	b2b6      	uxth	r6, r6
 8002688:	b2a4      	uxth	r4, r4
 800268a:	2e00      	cmp	r6, #0
 800268c:	d1d0      	bne.n	8002630 <disHanFontBuffer+0x30>
}
 800268e:	b007      	add	sp, #28
 8002690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002694 <lcdPrintfResize>:
{
 8002694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002698:	ed2d 8b02 	vpush	{d8}
 800269c:	b0db      	sub	sp, #364	; 0x16c
 800269e:	460f      	mov	r7, r1
  r_src.h = 16;
 80026a0:	2110      	movs	r1, #16
  r_src.x = 0;
 80026a2:	2400      	movs	r4, #0
{
 80026a4:	ee08 3a10 	vmov	s16, r3
 80026a8:	ab66      	add	r3, sp, #408	; 0x198
  r_src.h = 16;
 80026aa:	9105      	str	r1, [sp, #20]
  len = vsnprintf(print_buffer, 255, fmt, arg);
 80026ac:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  r_src.stride = LCD_WIDTH;
 80026b0:	f44f 7148 	mov.w	r1, #800	; 0x320
{
 80026b4:	4690      	mov	r8, r2
  r_src.p_data = lcd_buffer;
 80026b6:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800280c <lcdPrintfResize+0x178>
  y = 0;
 80026ba:	46a3      	mov	fp, r4
{
 80026bc:	f853 2b04 	ldr.w	r2, [r3], #4
  x = 0;
 80026c0:	4625      	mov	r5, r4
  r_src.stride = LCD_WIDTH;
 80026c2:	9108      	str	r1, [sp, #32]
{
 80026c4:	4606      	mov	r6, r0
  len = vsnprintf(print_buffer, 255, fmt, arg);
 80026c6:	21ff      	movs	r1, #255	; 0xff
 80026c8:	4650      	mov	r0, sl
  va_start (arg, fmt);
 80026ca:	9303      	str	r3, [sp, #12]
  r_src.w = 0;
 80026cc:	9404      	str	r4, [sp, #16]
  r_src.p_data = lcd_buffer;
 80026ce:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  r_src.y = 0;
 80026d2:	e9cd 4406 	strd	r4, r4, [sp, #24]
  len = vsnprintf(print_buffer, 255, fmt, arg);
 80026d6:	f00a fe1f 	bl	800d318 <vsniprintf>
 80026da:	9000      	str	r0, [sp, #0]
  for( i=0; i<len; i+=Size_Char )
 80026dc:	9b00      	ldr	r3, [sp, #0]
 80026de:	429c      	cmp	r4, r3
 80026e0:	da23      	bge.n	800272a <lcdPrintfResize+0x96>
    PHan_FontLoad( &print_buffer[i], &FontBuf );
 80026e2:	a910      	add	r1, sp, #64	; 0x40
 80026e4:	eb0a 0004 	add.w	r0, sl, r4
 80026e8:	f001 ff1e 	bl	8004528 <PHan_FontLoad>
    disHanFontBuffer(x, y, &FontBuf, 0xFF);
 80026ec:	23ff      	movs	r3, #255	; 0xff
 80026ee:	4628      	mov	r0, r5
 80026f0:	aa10      	add	r2, sp, #64	; 0x40
 80026f2:	4659      	mov	r1, fp
 80026f4:	f7ff ff84 	bl	8002600 <disHanFontBuffer>
    Size_Char = FontBuf.Size_Char;
 80026f8:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
    r_src.w += font_width;
 80026fc:	9a04      	ldr	r2, [sp, #16]
    if (Size_Char >= 2)
 80026fe:	2901      	cmp	r1, #1
      font_width = 16;
 8002700:	bfcb      	itete	gt
 8002702:	2310      	movgt	r3, #16
      font_width = 8;
 8002704:	2308      	movle	r3, #8
      x += 2*8;
 8002706:	3510      	addgt	r5, #16
      x += 1*8;
 8002708:	3508      	addle	r5, #8
    r_src.w += font_width;
 800270a:	441a      	add	r2, r3
    if ((x+font_width) > HW_LCD_WIDTH)
 800270c:	442b      	add	r3, r5
    r_src.w += font_width;
 800270e:	9204      	str	r2, [sp, #16]
    if ((x+font_width) > HW_LCD_WIDTH)
 8002710:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002714:	dd05      	ble.n	8002722 <lcdPrintfResize+0x8e>
      r_src.h += 16;
 8002716:	9b05      	ldr	r3, [sp, #20]
      y += 16;
 8002718:	f10b 0b10 	add.w	fp, fp, #16
      x  = x_Pre;
 800271c:	4635      	mov	r5, r6
      r_src.h += 16;
 800271e:	3310      	adds	r3, #16
 8002720:	9305      	str	r3, [sp, #20]
    if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8002722:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8002726:	2b04      	cmp	r3, #4
 8002728:	d131      	bne.n	800278e <lcdPrintfResize+0xfa>
  r_dst.y = r_src.y + r_src.h;
 800272a:	9b05      	ldr	r3, [sp, #20]
  r_dst.x = 0;
 800272c:	2400      	movs	r4, #0
  r_dst.stride = LCD_WIDTH;
 800272e:	f44f 7a48 	mov.w	sl, #800	; 0x320
  r_dst.y = r_src.y + r_src.h;
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	9a00      	ldr	r2, [sp, #0]
 8002736:	9b07      	ldr	r3, [sp, #28]
  r_dst.x = 0;
 8002738:	940c      	str	r4, [sp, #48]	; 0x30
  r_dst.y = r_src.y + r_src.h;
 800273a:	4413      	add	r3, r2
 800273c:	930d      	str	r3, [sp, #52]	; 0x34
  r_dst.w = r_src.w * ratio;
 800273e:	9b04      	ldr	r3, [sp, #16]
 8002740:	ee07 3a90 	vmov	s15, r3
 8002744:	9301      	str	r3, [sp, #4]
  if (lcd_resize_mode == LCD_RESIZE_BILINEAR)
 8002746:	4b30      	ldr	r3, [pc, #192]	; (8002808 <lcdPrintfResize+0x174>)
  r_dst.w = r_src.w * ratio;
 8002748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if (lcd_resize_mode == LCD_RESIZE_BILINEAR)
 800274c:	781b      	ldrb	r3, [r3, #0]
  r_dst.w = r_src.w * ratio;
 800274e:	ee67 7a88 	vmul.f32	s15, s15, s16
  if (lcd_resize_mode == LCD_RESIZE_BILINEAR)
 8002752:	2b01      	cmp	r3, #1
  r_dst.p_data = lcd_buffer;
 8002754:	e9cd a90e 	strd	sl, r9, [sp, #56]	; 0x38
  r_dst.w = r_src.w * ratio;
 8002758:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800275c:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
  r_dst.h = r_src.h * ratio;
 8002760:	ee07 2a90 	vmov	s15, r2
 8002764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002768:	ee67 7a88 	vmul.f32	s15, s15, s16
 800276c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002770:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
  if (lcd_resize_mode == LCD_RESIZE_BILINEAR)
 8002774:	d127      	bne.n	80027c6 <lcdPrintfResize+0x132>
    resizeImageFastGray(&r_src, &r_dst);
 8002776:	a90a      	add	r1, sp, #40	; 0x28
 8002778:	a804      	add	r0, sp, #16
 800277a:	f000 fec1 	bl	8003500 <resizeImageFastGray>
    for (int i_y=0; i_y<r_dst.h; i_y++)
 800277e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002780:	42a3      	cmp	r3, r4
 8002782:	dc1a      	bgt.n	80027ba <lcdPrintfResize+0x126>
}
 8002784:	b05b      	add	sp, #364	; 0x16c
 8002786:	ecbd 8b02 	vpop	{d8}
 800278a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for( i=0; i<len; i+=Size_Char )
 800278e:	440c      	add	r4, r1
 8002790:	e7a4      	b.n	80026dc <lcdPrintfResize+0x48>
        pixel = lcd_buffer[(i_y+r_dst.y)*LCD_WIDTH + i_x];
 8002792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002794:	4423      	add	r3, r4
 8002796:	fb0a 5303 	mla	r3, sl, r3, r5
 800279a:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
        if (pixel > 0)
 800279e:	b133      	cbz	r3, 80027ae <lcdPrintfResize+0x11a>
          lcdDrawPixelMix(x_Pre+i_x, y_Pre+i_y, color, pixel);
 80027a0:	1970      	adds	r0, r6, r5
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4642      	mov	r2, r8
 80027a6:	4659      	mov	r1, fp
 80027a8:	b280      	uxth	r0, r0
 80027aa:	f7ff fe3b 	bl	8002424 <lcdDrawPixelMix>
      for (int i_x=0; i_x<r_dst.w; i_x++)
 80027ae:	3501      	adds	r5, #1
 80027b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027b2:	42ab      	cmp	r3, r5
 80027b4:	dced      	bgt.n	8002792 <lcdPrintfResize+0xfe>
    for (int i_y=0; i_y<r_dst.h; i_y++)
 80027b6:	3401      	adds	r4, #1
 80027b8:	e7e1      	b.n	800277e <lcdPrintfResize+0xea>
          lcdDrawPixelMix(x_Pre+i_x, y_Pre+i_y, color, pixel);
 80027ba:	eb07 0b04 	add.w	fp, r7, r4
      for (int i_x=0; i_x<r_dst.w; i_x++)
 80027be:	2500      	movs	r5, #0
          lcdDrawPixelMix(x_Pre+i_x, y_Pre+i_y, color, pixel);
 80027c0:	fa1f fb8b 	uxth.w	fp, fp
 80027c4:	e7f4      	b.n	80027b0 <lcdPrintfResize+0x11c>
    resizeImageNearest(&r_src, &r_dst);
 80027c6:	a90a      	add	r1, sp, #40	; 0x28
 80027c8:	a804      	add	r0, sp, #16
 80027ca:	f000 ff5b 	bl	8003684 <resizeImageNearest>
    for (int i_y=0; i_y<r_dst.h; i_y++)
 80027ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80027d0:	42a3      	cmp	r3, r4
 80027d2:	ddd7      	ble.n	8002784 <lcdPrintfResize+0xf0>
          lcdDrawPixel(x_Pre+i_x, y_Pre+i_y, color);
 80027d4:	eb07 0b04 	add.w	fp, r7, r4
      for (int i_x=0; i_x<r_dst.w; i_x++)
 80027d8:	2500      	movs	r5, #0
          lcdDrawPixel(x_Pre+i_x, y_Pre+i_y, color);
 80027da:	fa1f fb8b 	uxth.w	fp, fp
 80027de:	e00d      	b.n	80027fc <lcdPrintfResize+0x168>
        pixel = lcd_buffer[(i_y+r_dst.y)*LCD_WIDTH + i_x];
 80027e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027e2:	4423      	add	r3, r4
 80027e4:	fb0a 5303 	mla	r3, sl, r3, r5
        if (pixel > 0)
 80027e8:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 80027ec:	b12b      	cbz	r3, 80027fa <lcdPrintfResize+0x166>
          lcdDrawPixel(x_Pre+i_x, y_Pre+i_y, color);
 80027ee:	1970      	adds	r0, r6, r5
 80027f0:	4642      	mov	r2, r8
 80027f2:	4659      	mov	r1, fp
 80027f4:	b280      	uxth	r0, r0
 80027f6:	f7ff fe09 	bl	800240c <lcdDrawPixel>
      for (int i_x=0; i_x<r_dst.w; i_x++)
 80027fa:	3501      	adds	r5, #1
 80027fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027fe:	42ab      	cmp	r3, r5
 8002800:	dcee      	bgt.n	80027e0 <lcdPrintfResize+0x14c>
    for (int i_y=0; i_y<r_dst.h; i_y++)
 8002802:	3401      	adds	r4, #1
 8002804:	e7e3      	b.n	80027ce <lcdPrintfResize+0x13a>
 8002806:	bf00      	nop
 8002808:	24000950 	.word	0x24000950
 800280c:	c0000000 	.word	0xc0000000

08002810 <lcdPrintfRect>:
{
 8002810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002814:	ed2d 8b02 	vpush	{d8}
 8002818:	b0dd      	sub	sp, #372	; 0x174
  r_src.x = 0;
 800281a:	2400      	movs	r4, #0
{
 800281c:	4605      	mov	r5, r0
 800281e:	460e      	mov	r6, r1
  len = vsnprintf(print_buffer, 255, fmt, arg);
 8002820:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  y = 0;
 8002824:	46a1      	mov	r9, r4
  x = 0;
 8002826:	4627      	mov	r7, r4
  len = vsnprintf(print_buffer, 255, fmt, arg);
 8002828:	21ff      	movs	r1, #255	; 0xff
 800282a:	4658      	mov	r0, fp
{
 800282c:	f8bd a1a0 	ldrh.w	sl, [sp, #416]	; 0x1a0
 8002830:	ed9d 8a69 	vldr	s16, [sp, #420]	; 0x1a4
 8002834:	f8bd 81a8 	ldrh.w	r8, [sp, #424]	; 0x1a8
  r_src.w = 0;
 8002838:	9406      	str	r4, [sp, #24]
{
 800283a:	e9cd 2300 	strd	r2, r3, [sp]
  r_src.h = 16;
 800283e:	2210      	movs	r2, #16
  va_start (arg, fmt);
 8002840:	ab6c      	add	r3, sp, #432	; 0x1b0
  r_src.h = 16;
 8002842:	9207      	str	r2, [sp, #28]
  r_src.stride = LCD_WIDTH;
 8002844:	f44f 7248 	mov.w	r2, #800	; 0x320
  va_start (arg, fmt);
 8002848:	9305      	str	r3, [sp, #20]
  r_src.stride = LCD_WIDTH;
 800284a:	920a      	str	r2, [sp, #40]	; 0x28
  r_src.p_data = lcd_buffer;
 800284c:	4a64      	ldr	r2, [pc, #400]	; (80029e0 <lcdPrintfRect+0x1d0>)
 800284e:	920b      	str	r2, [sp, #44]	; 0x2c
  len = vsnprintf(print_buffer, 255, fmt, arg);
 8002850:	9a6b      	ldr	r2, [sp, #428]	; 0x1ac
  r_src.y = 0;
 8002852:	e9cd 4408 	strd	r4, r4, [sp, #32]
  len = vsnprintf(print_buffer, 255, fmt, arg);
 8002856:	f00a fd5f 	bl	800d318 <vsniprintf>
 800285a:	9002      	str	r0, [sp, #8]
  for( i=0; i<len; i+=Size_Char )
 800285c:	9b02      	ldr	r3, [sp, #8]
 800285e:	429c      	cmp	r4, r3
 8002860:	da23      	bge.n	80028aa <lcdPrintfRect+0x9a>
    PHan_FontLoad( &print_buffer[i], &FontBuf );
 8002862:	a912      	add	r1, sp, #72	; 0x48
 8002864:	eb0b 0004 	add.w	r0, fp, r4
 8002868:	f001 fe5e 	bl	8004528 <PHan_FontLoad>
    disHanFontBuffer(x, y, &FontBuf, 0xFF);
 800286c:	23ff      	movs	r3, #255	; 0xff
 800286e:	4638      	mov	r0, r7
 8002870:	aa12      	add	r2, sp, #72	; 0x48
 8002872:	4649      	mov	r1, r9
 8002874:	f7ff fec4 	bl	8002600 <disHanFontBuffer>
    Size_Char = FontBuf.Size_Char;
 8002878:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
    r_src.w += font_width;
 800287c:	9a06      	ldr	r2, [sp, #24]
    if (Size_Char >= 2)
 800287e:	2901      	cmp	r1, #1
      font_width = 16;
 8002880:	bfcb      	itete	gt
 8002882:	2310      	movgt	r3, #16
      font_width = 8;
 8002884:	2308      	movle	r3, #8
      x += 2*8;
 8002886:	3710      	addgt	r7, #16
      x += 1*8;
 8002888:	3708      	addle	r7, #8
    r_src.w += font_width;
 800288a:	441a      	add	r2, r3
    if ((x+font_width) > HW_LCD_WIDTH)
 800288c:	443b      	add	r3, r7
    r_src.w += font_width;
 800288e:	9206      	str	r2, [sp, #24]
    if ((x+font_width) > HW_LCD_WIDTH)
 8002890:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002894:	dd05      	ble.n	80028a2 <lcdPrintfRect+0x92>
      r_src.h += 16;
 8002896:	9b07      	ldr	r3, [sp, #28]
      y += 16;
 8002898:	f109 0910 	add.w	r9, r9, #16
      x  = x_Pre;
 800289c:	462f      	mov	r7, r5
      r_src.h += 16;
 800289e:	3310      	adds	r3, #16
 80028a0:	9307      	str	r3, [sp, #28]
    if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 80028a2:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d15a      	bne.n	8002960 <lcdPrintfRect+0x150>
  r_dst.x = 0;
 80028aa:	2300      	movs	r3, #0
  if (lcd_resize_mode == LCD_RESIZE_BILINEAR)
 80028ac:	4c4d      	ldr	r4, [pc, #308]	; (80029e4 <lcdPrintfRect+0x1d4>)
  r_dst.p_data = lcd_buffer;
 80028ae:	4f4c      	ldr	r7, [pc, #304]	; (80029e0 <lcdPrintfRect+0x1d0>)
  r_dst.x = 0;
 80028b0:	930e      	str	r3, [sp, #56]	; 0x38
  r_dst.y = r_src.y + r_src.h;
 80028b2:	9b07      	ldr	r3, [sp, #28]
  r_dst.p_data = lcd_buffer;
 80028b4:	9711      	str	r7, [sp, #68]	; 0x44
  r_dst.y = r_src.y + r_src.h;
 80028b6:	9302      	str	r3, [sp, #8]
 80028b8:	9a02      	ldr	r2, [sp, #8]
 80028ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028bc:	4413      	add	r3, r2
 80028be:	930f      	str	r3, [sp, #60]	; 0x3c
  r_dst.w = r_src.w * ratio;
 80028c0:	9b06      	ldr	r3, [sp, #24]
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	9303      	str	r3, [sp, #12]
  r_dst.stride = LCD_WIDTH;
 80028c8:	f44f 7348 	mov.w	r3, #800	; 0x320
  r_dst.w = r_src.w * ratio;
 80028cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  r_dst.stride = LCD_WIDTH;
 80028d0:	9310      	str	r3, [sp, #64]	; 0x40
  if (lcd_resize_mode == LCD_RESIZE_BILINEAR)
 80028d2:	7823      	ldrb	r3, [r4, #0]
  r_dst.w = r_src.w * ratio;
 80028d4:	ee67 7a88 	vmul.f32	s15, s15, s16
  if (lcd_resize_mode == LCD_RESIZE_BILINEAR)
 80028d8:	2b01      	cmp	r3, #1
  r_dst.w = r_src.w * ratio;
 80028da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028de:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
  r_dst.h = r_src.h * ratio;
 80028e2:	ee07 2a90 	vmov	s15, r2
 80028e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ea:	ee67 7a88 	vmul.f32	s15, s15, s16
 80028ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028f2:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
  if (lcd_resize_mode == LCD_RESIZE_BILINEAR)
 80028f6:	d135      	bne.n	8002964 <lcdPrintfRect+0x154>
    resizeImageFastGray(&r_src, &r_dst);
 80028f8:	a90c      	add	r1, sp, #48	; 0x30
 80028fa:	a806      	add	r0, sp, #24
 80028fc:	f000 fe00 	bl	8003500 <resizeImageFastGray>
  if (w > r_dst.w)
 8002900:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002902:	9b00      	ldr	r3, [sp, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	da0b      	bge.n	8002920 <lcdPrintfRect+0x110>
    if (align & LCD_ALIGN_H_CENTER)
 8002908:	f018 0f02 	tst.w	r8, #2
      x_o += (w-r_dst.w)/2;
 800290c:	bf1c      	itt	ne
 800290e:	1a9b      	subne	r3, r3, r2
 8002910:	eb05 0563 	addne.w	r5, r5, r3, asr #1
    if (align & LCD_ALIGN_H_RIGHT)
 8002914:	f018 0f04 	tst.w	r8, #4
      x_o += (w-r_dst.w);
 8002918:	bf1e      	ittt	ne
 800291a:	9b00      	ldrne	r3, [sp, #0]
 800291c:	1a9a      	subne	r2, r3, r2
 800291e:	18ad      	addne	r5, r5, r2
  if (h > r_dst.h)
 8002920:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002922:	9a01      	ldr	r2, [sp, #4]
 8002924:	4293      	cmp	r3, r2
 8002926:	da0b      	bge.n	8002940 <lcdPrintfRect+0x130>
    if (align & LCD_ALIGN_V_CENTER)
 8002928:	f018 0f10 	tst.w	r8, #16
      y_o += (h-r_dst.h)/2 + 0;
 800292c:	bf1c      	itt	ne
 800292e:	1ad2      	subne	r2, r2, r3
 8002930:	eb06 0662 	addne.w	r6, r6, r2, asr #1
    if (align & LCD_ALIGN_V_BOTTOM)
 8002934:	f018 0f20 	tst.w	r8, #32
      y_o += (h-r_dst.h);
 8002938:	bf1e      	ittt	ne
 800293a:	9a01      	ldrne	r2, [sp, #4]
 800293c:	1ad3      	subne	r3, r2, r3
 800293e:	18f6      	addne	r6, r6, r3
  if (lcd_resize_mode == LCD_RESIZE_BILINEAR)
 8002940:	7823      	ldrb	r3, [r4, #0]
        pixel = lcd_buffer[(i_y+r_dst.y)*LCD_WIDTH + i_x];
 8002942:	f44f 7948 	mov.w	r9, #800	; 0x320
    for (int i_y=0; i_y<r_dst.h; i_y++)
 8002946:	2400      	movs	r4, #0
  if (lcd_resize_mode == LCD_RESIZE_BILINEAR)
 8002948:	2b01      	cmp	r3, #1
 800294a:	d025      	beq.n	8002998 <lcdPrintfRect+0x188>
    for (int i_y=0; i_y<r_dst.h; i_y++)
 800294c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800294e:	42a3      	cmp	r3, r4
 8002950:	dd25      	ble.n	800299e <lcdPrintfRect+0x18e>
          lcdDrawPixel(x_o+i_x, y_o+i_y, color);
 8002952:	eb06 0b04 	add.w	fp, r6, r4
      for (int i_x=0; i_x<r_dst.w; i_x++)
 8002956:	f04f 0800 	mov.w	r8, #0
          lcdDrawPixel(x_o+i_x, y_o+i_y, color);
 800295a:	fa1f fb8b 	uxth.w	fp, fp
 800295e:	e03a      	b.n	80029d6 <lcdPrintfRect+0x1c6>
  for( i=0; i<len; i+=Size_Char )
 8002960:	440c      	add	r4, r1
 8002962:	e77b      	b.n	800285c <lcdPrintfRect+0x4c>
    resizeImageNearest(&r_src, &r_dst);
 8002964:	a90c      	add	r1, sp, #48	; 0x30
 8002966:	a806      	add	r0, sp, #24
 8002968:	f000 fe8c 	bl	8003684 <resizeImageNearest>
 800296c:	e7c8      	b.n	8002900 <lcdPrintfRect+0xf0>
        pixel = lcd_buffer[(i_y+r_dst.y)*LCD_WIDTH + i_x];
 800296e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002970:	4423      	add	r3, r4
 8002972:	fb09 8303 	mla	r3, r9, r3, r8
 8002976:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
        if (pixel > 0)
 800297a:	b13b      	cbz	r3, 800298c <lcdPrintfRect+0x17c>
          lcdDrawPixelMix(x_o+i_x, y_o+i_y, color, pixel);
 800297c:	eb05 0008 	add.w	r0, r5, r8
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4652      	mov	r2, sl
 8002984:	4659      	mov	r1, fp
 8002986:	b280      	uxth	r0, r0
 8002988:	f7ff fd4c 	bl	8002424 <lcdDrawPixelMix>
      for (int i_x=0; i_x<r_dst.w; i_x++)
 800298c:	f108 0801 	add.w	r8, r8, #1
 8002990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002992:	4543      	cmp	r3, r8
 8002994:	dceb      	bgt.n	800296e <lcdPrintfRect+0x15e>
    for (int i_y=0; i_y<r_dst.h; i_y++)
 8002996:	3401      	adds	r4, #1
 8002998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800299a:	42a3      	cmp	r3, r4
 800299c:	dc04      	bgt.n	80029a8 <lcdPrintfRect+0x198>
}
 800299e:	b05d      	add	sp, #372	; 0x174
 80029a0:	ecbd 8b02 	vpop	{d8}
 80029a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          lcdDrawPixelMix(x_o+i_x, y_o+i_y, color, pixel);
 80029a8:	eb06 0b04 	add.w	fp, r6, r4
      for (int i_x=0; i_x<r_dst.w; i_x++)
 80029ac:	f04f 0800 	mov.w	r8, #0
          lcdDrawPixelMix(x_o+i_x, y_o+i_y, color, pixel);
 80029b0:	fa1f fb8b 	uxth.w	fp, fp
 80029b4:	e7ec      	b.n	8002990 <lcdPrintfRect+0x180>
        pixel = lcd_buffer[(i_y+r_dst.y)*LCD_WIDTH + i_x];
 80029b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80029b8:	4423      	add	r3, r4
 80029ba:	fb09 8303 	mla	r3, r9, r3, r8
        if (pixel > 0)
 80029be:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80029c2:	b133      	cbz	r3, 80029d2 <lcdPrintfRect+0x1c2>
          lcdDrawPixel(x_o+i_x, y_o+i_y, color);
 80029c4:	eb05 0008 	add.w	r0, r5, r8
 80029c8:	4652      	mov	r2, sl
 80029ca:	4659      	mov	r1, fp
 80029cc:	b280      	uxth	r0, r0
 80029ce:	f7ff fd1d 	bl	800240c <lcdDrawPixel>
      for (int i_x=0; i_x<r_dst.w; i_x++)
 80029d2:	f108 0801 	add.w	r8, r8, #1
 80029d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80029d8:	4543      	cmp	r3, r8
 80029da:	dcec      	bgt.n	80029b6 <lcdPrintfRect+0x1a6>
    for (int i_y=0; i_y<r_dst.h; i_y++)
 80029dc:	3401      	adds	r4, #1
 80029de:	e7b5      	b.n	800294c <lcdPrintfRect+0x13c>
 80029e0:	c0000000 	.word	0xc0000000
 80029e4:	24000950 	.word	0x24000950

080029e8 <ledOff>:
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;
 80029e8:	2801      	cmp	r0, #1
 80029ea:	d808      	bhi.n	80029fe <ledOff+0x16>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80029ec:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <ledOff+0x18>)
 80029ee:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 80029f2:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80029f6:	79ca      	ldrb	r2, [r1, #7]
 80029f8:	8889      	ldrh	r1, [r1, #4]
 80029fa:	f005 ba75 	b.w	8007ee8 <HAL_GPIO_WritePin>
}
 80029fe:	4770      	bx	lr
 8002a00:	24000018 	.word	0x24000018

08002a04 <ledInit>:
{
 8002a04:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <ledInit+0x78>)
{
 8002a08:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0a:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8002a0c:	4c1c      	ldr	r4, [pc, #112]	; (8002a80 <ledInit+0x7c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0e:	2601      	movs	r6, #1
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8002a10:	a903      	add	r1, sp, #12
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a12:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8002a14:	6820      	ldr	r0, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a16:	e9cd 5505 	strd	r5, r5, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a1e:	f042 0204 	orr.w	r2, r2, #4
 8002a22:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002a26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a2a:	f002 0204 	and.w	r2, r2, #4
 8002a2e:	9201      	str	r2, [sp, #4]
 8002a30:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a3a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a42:	9604      	str	r6, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	9302      	str	r3, [sp, #8]
 8002a4a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8002a4c:	88a3      	ldrh	r3, [r4, #4]
 8002a4e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8002a50:	f005 f8b8 	bl	8007bc4 <HAL_GPIO_Init>
    ledOff(i);
 8002a54:	4628      	mov	r0, r5
 8002a56:	f7ff ffc7 	bl	80029e8 <ledOff>
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8002a5a:	89a3      	ldrh	r3, [r4, #12]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8002a5c:	a903      	add	r1, sp, #12
 8002a5e:	68a0      	ldr	r0, [r4, #8]
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8002a60:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8002a62:	f005 f8af 	bl	8007bc4 <HAL_GPIO_Init>
    ledOff(i);
 8002a66:	4630      	mov	r0, r6
 8002a68:	f7ff ffbe 	bl	80029e8 <ledOff>
  cliAdd("led", cliLed);
 8002a6c:	4905      	ldr	r1, [pc, #20]	; (8002a84 <ledInit+0x80>)
 8002a6e:	4806      	ldr	r0, [pc, #24]	; (8002a88 <ledInit+0x84>)
 8002a70:	f7ff f830 	bl	8001ad4 <cliAdd>
}
 8002a74:	4630      	mov	r0, r6
 8002a76:	b008      	add	sp, #32
 8002a78:	bd70      	pop	{r4, r5, r6, pc}
 8002a7a:	bf00      	nop
 8002a7c:	58024400 	.word	0x58024400
 8002a80:	24000018 	.word	0x24000018
 8002a84:	08002aa9 	.word	0x08002aa9
 8002a88:	0800f9b0 	.word	0x0800f9b0

08002a8c <ledToggle>:

void ledToggle(uint8_t ch)
{
  if (ch >= LED_MAX_CH) return;
 8002a8c:	2801      	cmp	r0, #1
 8002a8e:	d807      	bhi.n	8002aa0 <ledToggle+0x14>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <ledToggle+0x18>)
 8002a92:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 8002a96:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8002a9a:	8891      	ldrh	r1, [r2, #4]
 8002a9c:	f005 ba29 	b.w	8007ef2 <HAL_GPIO_TogglePin>
}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	24000018 	.word	0x24000018

08002aa8 <cliLed>:
void cliLed(cli_args_t *args)
{
  bool ret = false;


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8002aa8:	8803      	ldrh	r3, [r0, #0]
 8002aaa:	2b03      	cmp	r3, #3
{
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	4605      	mov	r5, r0
  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8002ab0:	d122      	bne.n	8002af8 <cliLed+0x50>
 8002ab2:	6943      	ldr	r3, [r0, #20]
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	4913      	ldr	r1, [pc, #76]	; (8002b04 <cliLed+0x5c>)
 8002ab8:	4798      	blx	r3
 8002aba:	b1e8      	cbz	r0, 8002af8 <cliLed+0x50>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8002abc:	68ab      	ldr	r3, [r5, #8]
 8002abe:	2001      	movs	r0, #1
 8002ac0:	4798      	blx	r3
    toggle_time = (uint32_t)args->getData(2);
 8002ac2:	68ab      	ldr	r3, [r5, #8]
    led_ch      = (uint8_t)args->getData(1);
 8002ac4:	b2c4      	uxtb	r4, r0
    toggle_time = (uint32_t)args->getData(2);
 8002ac6:	2002      	movs	r0, #2
 8002ac8:	4798      	blx	r3
 8002aca:	4606      	mov	r6, r0

    if (led_ch > 0)
 8002acc:	b10c      	cbz	r4, 8002ad2 <cliLed+0x2a>
    {
      led_ch--;
 8002ace:	3c01      	subs	r4, #1
 8002ad0:	b2e4      	uxtb	r4, r4
    }

    pre_time = millis();
 8002ad2:	f7fe f959 	bl	8000d88 <millis>
 8002ad6:	4605      	mov	r5, r0
    while(cliKeepLoop())
 8002ad8:	f7fe fff0 	bl	8001abc <cliKeepLoop>
 8002adc:	b900      	cbnz	r0, 8002ae0 <cliLed+0x38>

  if (ret != true)
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
  }
}
 8002ade:	bd70      	pop	{r4, r5, r6, pc}
      if (millis()-pre_time >= toggle_time)
 8002ae0:	f7fe f952 	bl	8000d88 <millis>
 8002ae4:	1b40      	subs	r0, r0, r5
 8002ae6:	4286      	cmp	r6, r0
 8002ae8:	d8f6      	bhi.n	8002ad8 <cliLed+0x30>
        pre_time = millis();
 8002aea:	f7fe f94d 	bl	8000d88 <millis>
 8002aee:	4605      	mov	r5, r0
        ledToggle(led_ch);
 8002af0:	4620      	mov	r0, r4
 8002af2:	f7ff ffcb 	bl	8002a8c <ledToggle>
 8002af6:	e7ef      	b.n	8002ad8 <cliLed+0x30>
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8002af8:	2102      	movs	r1, #2
 8002afa:	4803      	ldr	r0, [pc, #12]	; (8002b08 <cliLed+0x60>)
}
 8002afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8002b00:	f7fe bd4e 	b.w	80015a0 <cliPrintf>
 8002b04:	0800f9b4 	.word	0x0800f9b4
 8002b08:	0800f9bb 	.word	0x0800f9bb

08002b0c <ltdcLayerInit>:
  HAL_LTDC_SetAlpha(&hltdc, value, LayerIndex);
}


bool ltdcLayerInit(uint16_t LayerIndex, uint32_t Address)
{
 8002b0c:	b500      	push	{lr}
 8002b0e:	b08f      	sub	sp, #60	; 0x3c
  /* In this case all the active display area is used to display a picture then :
     Horizontal start = horizontal synchronization + Horizontal back porch = 43
     Vertical start   = vertical synchronization + vertical back porch     = 12
     Horizontal stop = Horizontal start + window width -1 = 43 + 480 -1
     Vertical stop   = Vertical start + window height -1  = 12 + 272 -1      */
  if (LayerIndex == LTDC_LAYER_1)
 8002b10:	bb40      	cbnz	r0, 8002b64 <ltdcLayerInit+0x58>
  {
    pLayerCfg.WindowX0 = 0;
    pLayerCfg.WindowX1 = LCD_WIDTH;
 8002b12:	f44f 7348 	mov.w	r3, #800	; 0x320
    pLayerCfg.WindowX0 = 0;
 8002b16:	9001      	str	r0, [sp, #4]
    pLayerCfg.WindowY0 = 0;
 8002b18:	e9cd 3002 	strd	r3, r0, [sp, #8]
    pLayerCfg.WindowY1 = LCD_HEIGHT;
 8002b1c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  else
  {
    pLayerCfg.WindowX0 = (LCD_WIDTH-200)/2;
    pLayerCfg.WindowX1 = pLayerCfg.WindowX0 + 200;
    pLayerCfg.WindowY0 = (LCD_HEIGHT-200)/2;
    pLayerCfg.WindowY1 = pLayerCfg.WindowY0 + 200;
 8002b20:	9304      	str	r3, [sp, #16]
  }


  /* Pixel Format configuration*/
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002b22:	2302      	movs	r3, #2

  /* Alpha constant (255 == totally opaque) */
  pLayerCfg.Alpha = 255;

  /* Default Color configuration (configure A,R,G,B component values) : no background color */
  pLayerCfg.Alpha0 = 0; /* fully transparent */
 8002b24:	22ff      	movs	r2, #255	; 0xff
  pLayerCfg.FBStartAdress = Address;
 8002b26:	910a      	str	r1, [sp, #40]	; 0x28
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002b28:	9305      	str	r3, [sp, #20]
  pLayerCfg.Alpha0 = 0; /* fully transparent */
 8002b2a:	2300      	movs	r3, #0
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;

  /* Configure blending factors */
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002b2c:	f44f 61c0 	mov.w	r1, #1536	; 0x600

  /* Configure the number of lines and number of pixels per line */
  pLayerCfg.ImageWidth  = LCD_WIDTH;
  pLayerCfg.ImageHeight = LCD_HEIGHT;
 8002b30:	f44f 7c48 	mov.w	ip, #800	; 0x320
  pLayerCfg.Backcolor.Blue = 0;
 8002b34:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 8002b38:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  pLayerCfg.Alpha0 = 0; /* fully transparent */
 8002b3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002b40:	2207      	movs	r2, #7
 8002b42:	e9cd 1208 	strd	r1, r2, [sp, #32]
  pLayerCfg.ImageHeight = LCD_HEIGHT;
 8002b46:	f44f 72f0 	mov.w	r2, #480	; 0x1e0


  /* Configure the Layer*/
  if(HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8002b4a:	a901      	add	r1, sp, #4
  pLayerCfg.ImageHeight = LCD_HEIGHT;
 8002b4c:	e9cd c20b 	strd	ip, r2, [sp, #44]	; 0x2c
  if(HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8002b50:	4602      	mov	r2, r0
 8002b52:	480a      	ldr	r0, [pc, #40]	; (8002b7c <ltdcLayerInit+0x70>)
 8002b54:	f005 fb31 	bl	80081ba <HAL_LTDC_ConfigLayer>
    ret = false;
  }


  return ret;
}
 8002b58:	fab0 f080 	clz	r0, r0
 8002b5c:	0940      	lsrs	r0, r0, #5
 8002b5e:	b00f      	add	sp, #60	; 0x3c
 8002b60:	f85d fb04 	ldr.w	pc, [sp], #4
    pLayerCfg.WindowX1 = pLayerCfg.WindowX0 + 200;
 8002b64:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b68:	f44f 7e96 	mov.w	lr, #300	; 0x12c
 8002b6c:	e9cd e301 	strd	lr, r3, [sp, #4]
    pLayerCfg.WindowY0 = (LCD_HEIGHT-200)/2;
 8002b70:	238c      	movs	r3, #140	; 0x8c
 8002b72:	9303      	str	r3, [sp, #12]
    pLayerCfg.WindowY1 = pLayerCfg.WindowY0 + 200;
 8002b74:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8002b78:	e7d2      	b.n	8002b20 <ltdcLayerInit+0x14>
 8002b7a:	bf00      	nop
 8002b7c:	24000958 	.word	0x24000958

08002b80 <ltdcInit>:
{
 8002b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_LTDC_DeInit(&hltdc);
 8002b84:	4c39      	ldr	r4, [pc, #228]	; (8002c6c <ltdcInit+0xec>)
  hltdc.Init.TotalWidth         = (LCD_WIDTH + LCD_HSYNC + LCD_HBP + LCD_HFP - 1);
 8002b86:	f240 2602 	movw	r6, #514	; 0x202
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002b8a:	2500      	movs	r5, #0
    p_data[i] = 0x0000;
 8002b8c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8002c90 <ltdcInit+0x110>
  HAL_LTDC_DeInit(&hltdc);
 8002b90:	4620      	mov	r0, r4
    p_data[i] = 0x0000;
 8002b92:	4f37      	ldr	r7, [pc, #220]	; (8002c70 <ltdcInit+0xf0>)
  HAL_LTDC_DeInit(&hltdc);
 8002b94:	f005 faa6 	bl	80080e4 <HAL_LTDC_DeInit>
  hltdc.Init.HorizontalSync     = (LCD_HSYNC - 1);
 8002b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b9c:	232f      	movs	r3, #47	; 0x2f
  hltdc.Init.AccumulatedHBP     = (LCD_HSYNC + LCD_HBP - 1);
 8002b9e:	2102      	movs	r1, #2
  hltdc.Init.AccumulatedActiveW = (LCD_WIDTH + LCD_HSYNC + LCD_HBP - 1);
 8002ba0:	2022      	movs	r0, #34	; 0x22
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002ba2:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002c94 <ltdcInit+0x114>
  ltdcLayerInit(LTDC_LAYER_1, (uint32_t)frame_buffer[frame_index]);
 8002ba6:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8002c98 <ltdcInit+0x118>
  hltdc.Init.Backcolor.Blue   = 0;
 8002baa:	86a5      	strh	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Red    = 0;
 8002bac:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  hltdc.Init.HorizontalSync     = (LCD_HSYNC - 1);
 8002bb0:	e9c4 2304 	strd	r2, r3, [r4, #16]
  hltdc.Init.AccumulatedHBP     = (LCD_HSYNC + LCD_HBP - 1);
 8002bb4:	2387      	movs	r3, #135	; 0x87
 8002bb6:	e9c4 1306 	strd	r1, r3, [r4, #24]
  hltdc.Init.AccumulatedActiveW = (LCD_WIDTH + LCD_HSYNC + LCD_HBP - 1);
 8002bba:	f240 33a7 	movw	r3, #935	; 0x3a7
 8002bbe:	e9c4 0308 	strd	r0, r3, [r4, #32]
  hltdc.Init.TotalWidth         = (LCD_WIDTH + LCD_HSYNC + LCD_HBP + LCD_HFP - 1);
 8002bc2:	f240 33cf 	movw	r3, #975	; 0x3cf
  if(HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002bc6:	4620      	mov	r0, r4
  hltdc.Init.TotalWidth         = (LCD_WIDTH + LCD_HSYNC + LCD_HBP + LCD_HFP - 1);
 8002bc8:	e9c4 630a 	strd	r6, r3, [r4, #40]	; 0x28
  hltdc.Init.TotalHeigh         = (LCD_HEIGHT + LCD_VSYNC + LCD_VBP + LCD_VFP - 1);
 8002bcc:	f240 230f 	movw	r3, #527	; 0x20f
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002bd0:	e9c4 8500 	strd	r8, r5, [r4]
  hltdc.Init.TotalHeigh         = (LCD_HEIGHT + LCD_VSYNC + LCD_VBP + LCD_VFP - 1);
 8002bd4:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002bd6:	e9c4 5502 	strd	r5, r5, [r4, #8]
  if(HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002bda:	f005 fa17 	bl	800800c <HAL_LTDC_Init>
    p_data[i] = 0x0000;
 8002bde:	464a      	mov	r2, r9
  if(HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002be0:	fab0 f680 	clz	r6, r0
    p_data[i] = 0x0000;
 8002be4:	4629      	mov	r1, r5
 8002be6:	4638      	mov	r0, r7
 8002be8:	f009 fb1c 	bl	800c224 <memset>
    p_data[i] = 0x0000;
 8002bec:	464a      	mov	r2, r9
 8002bee:	4629      	mov	r1, r5
 8002bf0:	4820      	ldr	r0, [pc, #128]	; (8002c74 <ltdcInit+0xf4>)
 8002bf2:	f009 fb17 	bl	800c224 <memset>
  ltdcLayerInit(LTDC_LAYER_1, (uint32_t)frame_buffer[frame_index]);
 8002bf6:	f8da 1000 	ldr.w	r1, [sl]
 8002bfa:	4628      	mov	r0, r5
  if(HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002bfc:	0976      	lsrs	r6, r6, #5
  ltdcLayerInit(LTDC_LAYER_1, (uint32_t)frame_buffer[frame_index]);
 8002bfe:	fb09 7101 	mla	r1, r9, r1, r7
 8002c02:	f7ff ff83 	bl	8002b0c <ltdcLayerInit>
  if (is_double_buffer == true)
 8002c06:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <ltdcInit+0xf8>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
    ltdc_draw_buffer = frame_buffer[frame_index ^ 1];
 8002c0a:	f8da 2000 	ldr.w	r2, [sl]
  if (is_double_buffer == true)
 8002c0e:	b10b      	cbz	r3, 8002c14 <ltdcInit+0x94>
    ltdc_draw_buffer = frame_buffer[frame_index ^ 1];
 8002c10:	f082 0201 	eor.w	r2, r2, #1
    ltdc_draw_buffer = frame_buffer[frame_index];
 8002c14:	fb09 7702 	mla	r7, r9, r2, r7
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <ltdcInit+0xfc>)
  lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002c1a:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <ltdcInit+0x100>)
 8002c1c:	601f      	str	r7, [r3, #0]
 8002c1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  lcd_int_porch_line  = (LTDC->AWCR & 0x7FF) - 1;
 8002c22:	4918      	ldr	r1, [pc, #96]	; (8002c84 <ltdcInit+0x104>)
  lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002c24:	f3c3 030a 	ubfx	r3, r3, #0, #11
  HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 8002c28:	4810      	ldr	r0, [pc, #64]	; (8002c6c <ltdcInit+0xec>)
  lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	8013      	strh	r3, [r2, #0]
  lcd_int_porch_line  = (LTDC->AWCR & 0x7FF) - 1;
 8002c30:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8002c34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	800b      	strh	r3, [r1, #0]
  HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 8002c3e:	8811      	ldrh	r1, [r2, #0]
 8002c40:	b289      	uxth	r1, r1
 8002c42:	f005 fae7 	bl	8008214 <HAL_LTDC_ProgramLineEvent>
  __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI | LTDC_IT_FU);
 8002c46:	6822      	ldr	r2, [r4, #0]
}
 8002c48:	4630      	mov	r0, r6
  __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI | LTDC_IT_FU);
 8002c4a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002c4c:	f043 0303 	orr.w	r3, r3, #3
 8002c50:	6353      	str	r3, [r2, #52]	; 0x34
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	2250      	movs	r2, #80	; 0x50
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <ltdcInit+0x108>)
 8002c56:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c5e:	609a      	str	r2, [r3, #8]
  return !ltdc_request_draw;
}

void ltdcRequestDraw(void)
{
  ltdc_request_draw = true;
 8002c60:	2201      	movs	r2, #1
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <ltdcInit+0x10c>)
 8002c64:	701a      	strb	r2, [r3, #0]
}
 8002c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c6a:	bf00      	nop
 8002c6c:	24000958 	.word	0x24000958
 8002c70:	c00bb800 	.word	0xc00bb800
 8002c74:	c0177000 	.word	0xc0177000
 8002c78:	24000028 	.word	0x24000028
 8002c7c:	24000a04 	.word	0x24000a04
 8002c80:	24000a00 	.word	0x24000a00
 8002c84:	24000a02 	.word	0x24000a02
 8002c88:	e000e100 	.word	0xe000e100
 8002c8c:	24000a08 	.word	0x24000a08
 8002c90:	000bb800 	.word	0x000bb800
 8002c94:	50001000 	.word	0x50001000
 8002c98:	24000954 	.word	0x24000954

08002c9c <ltdcDrawAvailable>:
  return !ltdc_request_draw;
 8002c9c:	4b02      	ldr	r3, [pc, #8]	; (8002ca8 <ltdcDrawAvailable+0xc>)
 8002c9e:	7818      	ldrb	r0, [r3, #0]
}
 8002ca0:	f080 0001 	eor.w	r0, r0, #1
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	24000a08 	.word	0x24000a08

08002cac <ltdcRequestDraw>:
  ltdc_request_draw = true;
 8002cac:	4b01      	ldr	r3, [pc, #4]	; (8002cb4 <ltdcRequestDraw+0x8>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
}
 8002cb2:	4770      	bx	lr
 8002cb4:	24000a08 	.word	0x24000a08

08002cb8 <ltdcGetFrameBuffer>:
}

uint16_t *ltdcGetFrameBuffer(void)
{
  return  ltdc_draw_buffer;
}
 8002cb8:	4b01      	ldr	r3, [pc, #4]	; (8002cc0 <ltdcGetFrameBuffer+0x8>)
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	24000a04 	.word	0x24000a04

08002cc4 <ltdcSwapFrameBuffer>:
extern void lcdTransferDoneISR(void);

void ltdcSwapFrameBuffer(void)
{
#if _USE_DOUBLE_BUFFER
  if (ltdc_request_draw == true)
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <ltdcSwapFrameBuffer+0x4c>)
 8002cc6:	781a      	ldrb	r2, [r3, #0]
{
 8002cc8:	b410      	push	{r4}
  if (ltdc_request_draw == true)
 8002cca:	b1f2      	cbz	r2, 8002d0a <ltdcSwapFrameBuffer+0x46>
  {
    ltdc_request_draw = false;
 8002ccc:	2200      	movs	r2, #0

    frame_index ^= 1;

    ltdcSetFrameBuffer(frame_buffer[frame_index]);
 8002cce:	4911      	ldr	r1, [pc, #68]	; (8002d14 <ltdcSwapFrameBuffer+0x50>)
  LTDC_Layer1->CFBAR = (uint32_t)addr;
 8002cd0:	4c11      	ldr	r4, [pc, #68]	; (8002d18 <ltdcSwapFrameBuffer+0x54>)
    ltdc_request_draw = false;
 8002cd2:	701a      	strb	r2, [r3, #0]
    frame_index ^= 1;
 8002cd4:	4a11      	ldr	r2, [pc, #68]	; (8002d1c <ltdcSwapFrameBuffer+0x58>)
 8002cd6:	6813      	ldr	r3, [r2, #0]
 8002cd8:	f083 0301 	eor.w	r3, r3, #1
 8002cdc:	6013      	str	r3, [r2, #0]
    ltdcSetFrameBuffer(frame_buffer[frame_index]);
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <ltdcSwapFrameBuffer+0x5c>)
 8002ce0:	6810      	ldr	r0, [r2, #0]
 8002ce2:	fb01 3000 	mla	r0, r1, r0, r3
  LTDC_Layer1->CFBAR = (uint32_t)addr;
 8002ce6:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
  LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002cea:	2001      	movs	r0, #1
 8002cec:	6260      	str	r0, [r4, #36]	; 0x24

    if (is_double_buffer == true)
 8002cee:	480d      	ldr	r0, [pc, #52]	; (8002d24 <ltdcSwapFrameBuffer+0x60>)
 8002cf0:	7800      	ldrb	r0, [r0, #0]
    {
      ltdc_draw_buffer = frame_buffer[frame_index ^ 1];
 8002cf2:	6812      	ldr	r2, [r2, #0]
    if (is_double_buffer == true)
 8002cf4:	b108      	cbz	r0, 8002cfa <ltdcSwapFrameBuffer+0x36>
      ltdc_draw_buffer = frame_buffer[frame_index ^ 1];
 8002cf6:	f082 0201 	eor.w	r2, r2, #1
    }
    else
    {
      ltdc_draw_buffer = frame_buffer[frame_index];
 8002cfa:	fb01 3302 	mla	r3, r1, r2, r3
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <ltdcSwapFrameBuffer+0x64>)
    ltdc_draw_buffer = frame_buffer[frame_index];

    lcdTransferDoneISR();
  }
#endif
}
 8002d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d04:	6013      	str	r3, [r2, #0]
    lcdTransferDoneISR();
 8002d06:	f7ff bb43 	b.w	8002390 <lcdTransferDoneISR>
}
 8002d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	24000a08 	.word	0x24000a08
 8002d14:	000bb800 	.word	0x000bb800
 8002d18:	50001000 	.word	0x50001000
 8002d1c:	24000954 	.word	0x24000954
 8002d20:	c00bb800 	.word	0xc00bb800
 8002d24:	24000028 	.word	0x24000028
 8002d28:	24000a04 	.word	0x24000a04

08002d2c <LTDC_IRQHandler>:



void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hltdc);
 8002d2c:	4801      	ldr	r0, [pc, #4]	; (8002d34 <LTDC_IRQHandler+0x8>)
 8002d2e:	f005 b9e7 	b.w	8008100 <HAL_LTDC_IRQHandler>
 8002d32:	bf00      	nop
 8002d34:	24000958 	.word	0x24000958

08002d38 <HAL_LTDC_LineEventCallback>:
}


void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef* hltdc)
{
 8002d38:	b538      	push	{r3, r4, r5, lr}
  if (LTDC->LIPCR == lcd_int_active_line)
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <HAL_LTDC_LineEventCallback+0x2c>)
{
 8002d3c:	4605      	mov	r5, r0
  if (LTDC->LIPCR == lcd_int_active_line)
 8002d3e:	4c0a      	ldr	r4, [pc, #40]	; (8002d68 <HAL_LTDC_LineEventCallback+0x30>)
 8002d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d42:	8823      	ldrh	r3, [r4, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d108      	bne.n	8002d5c <HAL_LTDC_LineEventCallback+0x24>
  {
    ltdcSwapFrameBuffer();
 8002d4a:	f7ff ffbb 	bl	8002cc4 <ltdcSwapFrameBuffer>
    HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002d4e:	8821      	ldrh	r1, [r4, #0]
 8002d50:	4628      	mov	r0, r5
 8002d52:	b289      	uxth	r1, r1
  }
  else
  {
    HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
  }
}
 8002d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002d58:	f005 ba5c 	b.w	8008214 <HAL_LTDC_ProgramLineEvent>
 8002d5c:	8821      	ldrh	r1, [r4, #0]
 8002d5e:	b289      	uxth	r1, r1
 8002d60:	e7f8      	b.n	8002d54 <HAL_LTDC_LineEventCallback+0x1c>
 8002d62:	bf00      	nop
 8002d64:	50001000 	.word	0x50001000
 8002d68:	24000a00 	.word	0x24000a00

08002d6c <HAL_LTDC_MspInit>:
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002d6c:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <HAL_LTDC_MspInit+0x120>)
                        |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002d6e:	4848      	ldr	r0, [pc, #288]	; (8002e90 <HAL_LTDC_MspInit+0x124>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002d70:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8002d74:	f042 0208 	orr.w	r2, r2, #8
{
 8002d78:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002d7a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
{
 8002d7e:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002d80:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d86:	2600      	movs	r6, #0
 8002d88:	2503      	movs	r5, #3
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002d8a:	f002 0208 	and.w	r2, r2, #8
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d8e:	240e      	movs	r4, #14
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002d90:	a907      	add	r1, sp, #28
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002d92:	9201      	str	r2, [sp, #4]
 8002d94:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002d96:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002d9a:	f042 0210 	orr.w	r2, r2, #16
 8002d9e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002da2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002da6:	f002 0210 	and.w	r2, r2, #16
 8002daa:	9202      	str	r2, [sp, #8]
 8002dac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_LTDC_FORCE_RESET();
 8002dae:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002db2:	f042 0208 	orr.w	r2, r2, #8
 8002db6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_LTDC_RELEASE_RESET();
 8002dba:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002dbe:	f022 0208 	bic.w	r2, r2, #8
 8002dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_DMA2D_FORCE_RESET();
 8002dc6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002dc8:	f042 0210 	orr.w	r2, r2, #16
 8002dcc:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8002dce:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002dd0:	f022 0210 	bic.w	r2, r2, #16
 8002dd4:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002dd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dde:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002de2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002de6:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002dea:	9203      	str	r2, [sp, #12]
 8002dec:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002dee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002dfa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002dfe:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002e02:	9204      	str	r2, [sp, #16]
 8002e04:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e0e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002e12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e16:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002e1a:	9205      	str	r2, [sp, #20]
 8002e1c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e2e:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	9306      	str	r3, [sp, #24]
 8002e36:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	23ff      	movs	r3, #255	; 0xff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3a:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	e9cd 3707 	strd	r3, r7, [sp, #28]
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002e42:	f004 febf 	bl	8007bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8002e46:	f64f 73fe 	movw	r3, #65534	; 0xfffe
                        |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002e4a:	a907      	add	r1, sp, #28
 8002e4c:	4811      	ldr	r0, [pc, #68]	; (8002e94 <HAL_LTDC_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e4e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e50:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e54:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002e58:	f004 feb4 	bl	8007bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002e5c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e60:	a907      	add	r1, sp, #28
 8002e62:	480d      	ldr	r0, [pc, #52]	; (8002e98 <HAL_LTDC_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e64:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6a:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e6e:	f004 fea9 	bl	8007bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e72:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e74:	a907      	add	r1, sp, #28
 8002e76:	4809      	ldr	r0, [pc, #36]	; (8002e9c <HAL_LTDC_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e78:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7e:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e82:	f004 fe9f 	bl	8007bc4 <HAL_GPIO_Init>

}
 8002e86:	b00d      	add	sp, #52	; 0x34
 8002e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	58024400 	.word	0x58024400
 8002e90:	58022800 	.word	0x58022800
 8002e94:	58022400 	.word	0x58022400
 8002e98:	58022000 	.word	0x58022000
 8002e9c:	58020000 	.word	0x58020000

08002ea0 <HAL_LTDC_MspDeInit>:
void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{

  /*##-1- Reset peripherals ##################################################*/
  /* Peripheral clock disable */
  __HAL_RCC_LTDC_CLK_DISABLE();
 8002ea0:	4a0f      	ldr	r2, [pc, #60]	; (8002ee0 <HAL_LTDC_MspDeInit+0x40>)
  PJ5     ------> LTDC_R6
  PJ2     ------> LTDC_R3
  PJ3     ------> LTDC_R4
  PJ4     ------> LTDC_R5
  */
  HAL_GPIO_DeInit(GPIOK, GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8002ea2:	21ff      	movs	r1, #255	; 0xff
 8002ea4:	480f      	ldr	r0, [pc, #60]	; (8002ee4 <HAL_LTDC_MspDeInit+0x44>)
{
 8002ea6:	b508      	push	{r3, lr}
  __HAL_RCC_LTDC_CLK_DISABLE();
 8002ea8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8002eac:	f023 0308 	bic.w	r3, r3, #8
 8002eb0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  HAL_GPIO_DeInit(GPIOK, GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8002eb4:	f004 ff70 	bl	8007d98 <HAL_GPIO_DeInit>
                        |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8002eb8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8002ebc:	480a      	ldr	r0, [pc, #40]	; (8002ee8 <HAL_LTDC_MspDeInit+0x48>)
 8002ebe:	f004 ff6b 	bl	8007d98 <HAL_GPIO_DeInit>
                        |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                        |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_5
                        |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4);

  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8002ec2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002ec6:	4809      	ldr	r0, [pc, #36]	; (8002eec <HAL_LTDC_MspDeInit+0x4c>)
 8002ec8:	f004 ff66 	bl	8007d98 <HAL_GPIO_DeInit>

  HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8002ecc:	4808      	ldr	r0, [pc, #32]	; (8002ef0 <HAL_LTDC_MspDeInit+0x50>)
 8002ece:	2104      	movs	r1, #4
 8002ed0:	f004 ff62 	bl	8007d98 <HAL_GPIO_DeInit>

  /* LTDC interrupt Deinit */
  HAL_NVIC_DisableIRQ(LTDC_IRQn);
 8002ed4:	2058      	movs	r0, #88	; 0x58
}
 8002ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_DisableIRQ(LTDC_IRQn);
 8002eda:	f003 bcf9 	b.w	80068d0 <HAL_NVIC_DisableIRQ>
 8002ede:	bf00      	nop
 8002ee0:	58024400 	.word	0x58024400
 8002ee4:	58022800 	.word	0x58022800
 8002ee8:	58022400 	.word	0x58022400
 8002eec:	58022000 	.word	0x58022000
 8002ef0:	58020000 	.word	0x58020000

08002ef4 <QSPI_WriteEnable.constprop.0>:
/**
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8002ef4:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8002efa:	b095      	sub	sp, #84	; 0x54
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f00:	4817      	ldr	r0, [pc, #92]	; (8002f60 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f02:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002f04:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f06:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002f08:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f0a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f0c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8002f10:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8002f12:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f14:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f16:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f1a:	f005 faf4 	bl	8008506 <HAL_QSPI_Command>
 8002f1e:	b9e0      	cbnz	r0, 8002f5a <QSPI_WriteEnable.constprop.0+0x66>
  {
    return QSPI_ERROR;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = W25Q128FV_SR_WREN;
 8002f20:	2302      	movs	r3, #2
  s_config.Mask            = W25Q128FV_SR_WREN;
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
 8002f22:	2201      	movs	r2, #1
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002f24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002f28:	9004      	str	r0, [sp, #16]
  s_command.DataMode       = QSPI_DATA_1_LINE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f2a:	480d      	ldr	r0, [pc, #52]	; (8002f60 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = W25Q128FV_SR_WREN;
 8002f2c:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8002f30:	2310      	movs	r3, #16
 8002f32:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002f36:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f38:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002f3a:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8002f3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f42:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8002f44:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f46:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f4a:	f005 fbd7 	bl	80086fc <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8002f4e:	3800      	subs	r0, #0
 8002f50:	bf18      	it	ne
 8002f52:	2001      	movne	r0, #1
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8002f54:	b015      	add	sp, #84	; 0x54
 8002f56:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	e7fa      	b.n	8002f54 <QSPI_WriteEnable.constprop.0+0x60>
 8002f5e:	bf00      	nop
 8002f60:	24000a0c 	.word	0x24000a0c

08002f64 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi QSPI handle
  * @param  Timeout Autopolling timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8002f64:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f66:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8002f6a:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002f6c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8002f70:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f72:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002f74:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002f76:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = W25Q128FV_SR_WIP;
 8002f78:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002f7a:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f7c:	2200      	movs	r2, #0
  s_config.Mask            = W25Q128FV_SR_WIP;
 8002f7e:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 8002f80:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f82:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8002f84:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8002f86:	480b      	ldr	r0, [pc, #44]	; (8002fb4 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 8002f88:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f8c:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f90:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8002f94:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8002f96:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8002f98:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002f9a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002f9e:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8002fa0:	466a      	mov	r2, sp
 8002fa2:	f005 fbab 	bl	80086fc <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8002fa6:	3800      	subs	r0, #0
 8002fa8:	bf18      	it	ne
 8002faa:	2001      	movne	r0, #1
 8002fac:	b015      	add	sp, #84	; 0x54
 8002fae:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fb2:	bf00      	nop
 8002fb4:	24000a0c 	.word	0x24000a0c

08002fb8 <QSPI_ResetMemory.constprop.0>:
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
 8002fb8:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002fba:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
 8002fbe:	b08f      	sub	sp, #60	; 0x3c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc4:	4812      	ldr	r0, [pc, #72]	; (8003010 <QSPI_ResetMemory.constprop.0+0x58>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002fc6:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002fc8:	2366      	movs	r3, #102	; 0x66
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fca:	4669      	mov	r1, sp
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002fcc:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002fce:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002fd0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8002fd4:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8002fd6:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002fd8:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002fda:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fde:	f005 fa92 	bl	8008506 <HAL_QSPI_Command>
 8002fe2:	b118      	cbz	r0, 8002fec <QSPI_ResetMemory.constprop.0+0x34>
    return QSPI_ERROR;
 8002fe4:	2001      	movs	r0, #1
}
 8002fe6:	b00f      	add	sp, #60	; 0x3c
 8002fe8:	f85d fb04 	ldr.w	pc, [sp], #4
  s_command.Instruction = RESET_MEMORY_CMD;
 8002fec:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff2:	4669      	mov	r1, sp
 8002ff4:	4806      	ldr	r0, [pc, #24]	; (8003010 <QSPI_ResetMemory.constprop.0+0x58>)
  s_command.Instruction = RESET_MEMORY_CMD;
 8002ff6:	9300      	str	r3, [sp, #0]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ff8:	f005 fa85 	bl	8008506 <HAL_QSPI_Command>
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d1f1      	bne.n	8002fe4 <QSPI_ResetMemory.constprop.0+0x2c>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003000:	f241 3088 	movw	r0, #5000	; 0x1388
 8003004:	f7ff ffae 	bl	8002f64 <QSPI_AutoPollingMemReady.constprop.0>
    return QSPI_ERROR;
 8003008:	3800      	subs	r0, #0
 800300a:	bf18      	it	ne
 800300c:	2001      	movne	r0, #1
 800300e:	e7ea      	b.n	8002fe6 <QSPI_ResetMemory.constprop.0+0x2e>
 8003010:	24000a0c 	.word	0x24000a0c

08003014 <qspiGetAddr>:
}
 8003014:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8003018:	4770      	bx	lr

0800301a <qspiGetLength>:
}
 800301a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800301e:	4770      	bx	lr

08003020 <BSP_QSPI_Config>:
{
 8003020:	b570      	push	{r4, r5, r6, lr}
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read flag status register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
  s_command.Instruction       = cmd;
 8003022:	2335      	movs	r3, #53	; 0x35
{
 8003024:	b090      	sub	sp, #64	; 0x40
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003026:	f44f 7680 	mov.w	r6, #256	; 0x100
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800302a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  s_command.DummyCycles       = 0;
  s_command.NbData            = 1;
 800302e:	2401      	movs	r4, #1
  s_command.Instruction       = cmd;
 8003030:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003032:	2300      	movs	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	a902      	add	r1, sp, #8
 800303a:	4824      	ldr	r0, [pc, #144]	; (80030cc <BSP_QSPI_Config+0xac>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800303c:	9608      	str	r6, [sp, #32]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800303e:	950b      	str	r5, [sp, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8003040:	9307      	str	r3, [sp, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003042:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003046:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800304a:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800304e:	f005 fa5a 	bl	8008506 <HAL_QSPI_Command>
 8003052:	b108      	cbz	r0, 8003058 <BSP_QSPI_Config+0x38>
      return QSPI_ERROR;
 8003054:	2001      	movs	r0, #1
 8003056:	e036      	b.n	80030c6 <BSP_QSPI_Config+0xa6>
  {
    return QSPI_ERROR;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003058:	f241 3288 	movw	r2, #5000	; 0x1388
 800305c:	f10d 0107 	add.w	r1, sp, #7
 8003060:	481a      	ldr	r0, [pc, #104]	; (80030cc <BSP_QSPI_Config+0xac>)
 8003062:	f005 faec 	bl	800863e <HAL_QSPI_Receive>
 8003066:	2800      	cmp	r0, #0
 8003068:	d1f4      	bne.n	8003054 <BSP_QSPI_Config+0x34>
  {
    return QSPI_ERROR;
  }

  *p_data = reg;
 800306a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if ((reg & (1<<1)) == 0x00)
 800306e:	079a      	lsls	r2, r3, #30
 8003070:	d429      	bmi.n	80030c6 <BSP_QSPI_Config+0xa6>
    reg |= (1<<1);
 8003072:	f043 0302 	orr.w	r3, r3, #2
static uint8_t QSPI_WriteStatus(QSPI_HandleTypeDef *hqspi, uint8_t cmd, uint8_t data)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003076:	9608      	str	r6, [sp, #32]
  s_command.Instruction       = cmd;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003078:	950b      	str	r5, [sp, #44]	; 0x2c
 800307a:	f88d 3007 	strb.w	r3, [sp, #7]
  s_command.Instruction       = cmd;
 800307e:	2331      	movs	r3, #49	; 0x31
  s_command.DummyCycles       = 0;
 8003080:	9007      	str	r0, [sp, #28]
  s_command.Instruction       = cmd;
 8003082:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003084:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.NbData            = 1;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003088:	e9cd 400c 	strd	r4, r0, [sp, #48]	; 0x30
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800308c:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38



  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003090:	f7ff ff30 	bl	8002ef4 <QSPI_WriteEnable.constprop.0>
 8003094:	2800      	cmp	r0, #0
 8003096:	d1dd      	bne.n	8003054 <BSP_QSPI_Config+0x34>
  {
    return QSPI_ERROR;
  }

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003098:	f241 3288 	movw	r2, #5000	; 0x1388
 800309c:	a902      	add	r1, sp, #8
 800309e:	480b      	ldr	r0, [pc, #44]	; (80030cc <BSP_QSPI_Config+0xac>)
 80030a0:	f005 fa31 	bl	8008506 <HAL_QSPI_Command>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	d1d5      	bne.n	8003054 <BSP_QSPI_Config+0x34>
  {
    return QSPI_ERROR;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &data, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ac:	f10d 0107 	add.w	r1, sp, #7
 80030b0:	4806      	ldr	r0, [pc, #24]	; (80030cc <BSP_QSPI_Config+0xac>)
 80030b2:	f005 fa6b 	bl	800858c <HAL_QSPI_Transmit>
 80030b6:	2800      	cmp	r0, #0
 80030b8:	d1cc      	bne.n	8003054 <BSP_QSPI_Config+0x34>
  {
    return QSPI_ERROR;
  }

  /* Configure automatic polling mode to wait for end of program */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80030ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80030be:	f7ff ff51 	bl	8002f64 <QSPI_AutoPollingMemReady.constprop.0>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	d1c6      	bne.n	8003054 <BSP_QSPI_Config+0x34>
}
 80030c6:	b010      	add	sp, #64	; 0x40
 80030c8:	bd70      	pop	{r4, r5, r6, pc}
 80030ca:	bf00      	nop
 80030cc:	24000a0c 	.word	0x24000a0c

080030d0 <BSP_QSPI_Init>:
{
 80030d0:	b570      	push	{r4, r5, r6, lr}
  hqspi.Instance = QUADSPI;
 80030d2:	4d19      	ldr	r5, [pc, #100]	; (8003138 <BSP_QSPI_Init+0x68>)
 80030d4:	2401      	movs	r4, #1
 80030d6:	4b19      	ldr	r3, [pc, #100]	; (800313c <BSP_QSPI_Init+0x6c>)
  if (HAL_QSPI_DeInit(&hqspi) != HAL_OK)
 80030d8:	4628      	mov	r0, r5
  hqspi.Instance = QUADSPI;
 80030da:	602b      	str	r3, [r5, #0]
  if (HAL_QSPI_DeInit(&hqspi) != HAL_OK)
 80030dc:	f005 fa02 	bl	80084e4 <HAL_QSPI_DeInit>
 80030e0:	b9c8      	cbnz	r0, 8003116 <BSP_QSPI_Init+0x46>
  hqspi.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80030e2:	2604      	movs	r6, #4
 80030e4:	2310      	movs	r3, #16
  hqspi.Init.ClockPrescaler     = 1;
 80030e6:	606c      	str	r4, [r5, #4]
  hqspi.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80030e8:	e9c5 6302 	strd	r6, r3, [r5, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030f0:	fa93 f3a3 	rbit	r3, r3
  hqspi.Init.FlashSize          = POSITION_VAL(W25Q128FV_FLASH_SIZE) - 1;
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	612b      	str	r3, [r5, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 80030fc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  hqspi.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8003100:	e9c5 0007 	strd	r0, r0, [r5, #28]
  hqspi.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8003104:	e9c5 3005 	strd	r3, r0, [r5, #20]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003108:	4628      	mov	r0, r5
 800310a:	f005 f99d 	bl	8008448 <HAL_QSPI_Init>
 800310e:	b120      	cbz	r0, 800311a <BSP_QSPI_Init+0x4a>
    printf("HAL_QSPI_Init() fail\n");
 8003110:	480b      	ldr	r0, [pc, #44]	; (8003140 <BSP_QSPI_Init+0x70>)
 8003112:	f009 f9f5 	bl	800c500 <puts>
    return QSPI_ERROR;
 8003116:	4620      	mov	r0, r4
 8003118:	e006      	b.n	8003128 <BSP_QSPI_Init+0x58>
  if (QSPI_ResetMemory(&hqspi) != QSPI_OK)
 800311a:	f7ff ff4d 	bl	8002fb8 <QSPI_ResetMemory.constprop.0>
 800311e:	b120      	cbz	r0, 800312a <BSP_QSPI_Init+0x5a>
    printf("QSPI_ResetMemory() fail\n");
 8003120:	4808      	ldr	r0, [pc, #32]	; (8003144 <BSP_QSPI_Init+0x74>)
    printf("QSPI_Config() fail\n");
 8003122:	f009 f9ed 	bl	800c500 <puts>
    return QSPI_NOT_SUPPORTED;
 8003126:	4630      	mov	r0, r6
}
 8003128:	bd70      	pop	{r4, r5, r6, pc}
  if (BSP_QSPI_Config() != QSPI_OK)
 800312a:	f7ff ff79 	bl	8003020 <BSP_QSPI_Config>
 800312e:	2800      	cmp	r0, #0
 8003130:	d0fa      	beq.n	8003128 <BSP_QSPI_Init+0x58>
    printf("QSPI_Config() fail\n");
 8003132:	4805      	ldr	r0, [pc, #20]	; (8003148 <BSP_QSPI_Init+0x78>)
 8003134:	e7f5      	b.n	8003122 <BSP_QSPI_Init+0x52>
 8003136:	bf00      	nop
 8003138:	24000a0c 	.word	0x24000a0c
 800313c:	52005000 	.word	0x52005000
 8003140:	0800f9d8 	.word	0x0800f9d8
 8003144:	0800f9ed 	.word	0x0800f9ed
 8003148:	0800fa05 	.word	0x0800fa05

0800314c <BSP_QSPI_Read>:
{
 800314c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800314e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8003152:	b08f      	sub	sp, #60	; 0x3c
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003154:	4c1d      	ldr	r4, [pc, #116]	; (80031cc <BSP_QSPI_Read+0x80>)
{
 8003156:	4605      	mov	r5, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003158:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800315a:	23eb      	movs	r3, #235	; 0xeb
  s_command.Address           = ReadAddr;
 800315c:	9101      	str	r1, [sp, #4]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800315e:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8003162:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003164:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003168:	9109      	str	r1, [sp, #36]	; 0x24
  s_command.DummyCycles       = W25Q128FV_DUMMY_CYCLES_READ_QUAD;
 800316a:	2104      	movs	r1, #4
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800316c:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 800316e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  s_command.DummyCycles       = W25Q128FV_DUMMY_CYCLES_READ_QUAD;
 8003172:	9105      	str	r1, [sp, #20]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003174:	4620      	mov	r0, r4
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003176:	9303      	str	r3, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8003178:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800317c:	4669      	mov	r1, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 800317e:	9308      	str	r3, [sp, #32]
  s_command.AlternateBytesSize= QSPI_ALTERNATE_BYTES_8_BITS;
 8003180:	2300      	movs	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003182:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.AlternateBytesSize= QSPI_ALTERNATE_BYTES_8_BITS;
 800318a:	9304      	str	r3, [sp, #16]
  s_command.AlternateBytes    = 0;
 800318c:	9302      	str	r3, [sp, #8]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800318e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003192:	f005 f9b8 	bl	8008506 <HAL_QSPI_Command>
 8003196:	b110      	cbz	r0, 800319e <BSP_QSPI_Read+0x52>
    return QSPI_ERROR;
 8003198:	2001      	movs	r0, #1
}
 800319a:	b00f      	add	sp, #60	; 0x3c
 800319c:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_2_CYCLE);
 800319e:	6822      	ldr	r2, [r4, #0]
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031a0:	4629      	mov	r1, r5
 80031a2:	4620      	mov	r0, r4
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_2_CYCLE);
 80031a4:	6853      	ldr	r3, [r2, #4]
 80031a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ae:	6053      	str	r3, [r2, #4]
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	f005 fa43 	bl	800863e <HAL_QSPI_Receive>
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d1ed      	bne.n	8003198 <BSP_QSPI_Read+0x4c>
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_5_CYCLE);
 80031bc:	6822      	ldr	r2, [r4, #0]
 80031be:	6853      	ldr	r3, [r2, #4]
 80031c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031c8:	6053      	str	r3, [r2, #4]
  return QSPI_OK;
 80031ca:	e7e6      	b.n	800319a <BSP_QSPI_Read+0x4e>
 80031cc:	24000a0c 	.word	0x24000a0c

080031d0 <qspiRead>:
{
 80031d0:	b508      	push	{r3, lr}
 80031d2:	4603      	mov	r3, r0
 80031d4:	4608      	mov	r0, r1
  if (addr >= qspiGetLength())
 80031d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031da:	d206      	bcs.n	80031ea <qspiRead+0x1a>
  ret = BSP_QSPI_Read(p_data, addr, length);
 80031dc:	4619      	mov	r1, r3
 80031de:	f7ff ffb5 	bl	800314c <BSP_QSPI_Read>
  if (ret == QSPI_OK)
 80031e2:	fab0 f080 	clz	r0, r0
 80031e6:	0940      	lsrs	r0, r0, #5
}
 80031e8:	bd08      	pop	{r3, pc}
    return false;
 80031ea:	2000      	movs	r0, #0
 80031ec:	e7fc      	b.n	80031e8 <qspiRead+0x18>
	...

080031f0 <BSP_QSPI_Write>:
{
 80031f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80031f4:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 80031f8:	b08e      	sub	sp, #56	; 0x38
  current_size = W25Q128FV_PAGE_SIZE - (WriteAddr % W25Q128FV_PAGE_SIZE);
 80031fa:	b2cd      	uxtb	r5, r1
  end_addr = WriteAddr + Size;
 80031fc:	188e      	adds	r6, r1, r2
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80031fe:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = QUAD_IN_FAST_PROG_CMD;
 8003200:	2332      	movs	r3, #50	; 0x32
  current_size = W25Q128FV_PAGE_SIZE - (WriteAddr % W25Q128FV_PAGE_SIZE);
 8003202:	f5c5 7580 	rsb	r5, r5, #256	; 0x100
{
 8003206:	4607      	mov	r7, r0
  s_command.Instruction       = QUAD_IN_FAST_PROG_CMD;
 8003208:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800320a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800320e:	4295      	cmp	r5, r2
{
 8003210:	460c      	mov	r4, r1
  s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8003212:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003218:	bf28      	it	cs
 800321a:	4615      	movcs	r5, r2
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800321c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8003284 <BSP_QSPI_Write+0x94>
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003220:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003224:	9303      	str	r3, [sp, #12]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003226:	2300      	movs	r3, #0
 8003228:	e9cd 3208 	strd	r3, r2, [sp, #32]
  s_command.DummyCycles       = 0;
 800322c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800322e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003230:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    s_command.Address = current_addr;
 8003234:	9401      	str	r4, [sp, #4]
    s_command.NbData  = current_size;
 8003236:	950a      	str	r5, [sp, #40]	; 0x28
    if (QSPI_WriteEnable(&hqspi) != QSPI_OK)
 8003238:	f7ff fe5c 	bl	8002ef4 <QSPI_WriteEnable.constprop.0>
 800323c:	bb00      	cbnz	r0, 8003280 <BSP_QSPI_Write+0x90>
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800323e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003242:	4669      	mov	r1, sp
 8003244:	480f      	ldr	r0, [pc, #60]	; (8003284 <BSP_QSPI_Write+0x94>)
 8003246:	f005 f95e 	bl	8008506 <HAL_QSPI_Command>
 800324a:	b9c8      	cbnz	r0, 8003280 <BSP_QSPI_Write+0x90>
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800324c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003250:	4639      	mov	r1, r7
 8003252:	4640      	mov	r0, r8
 8003254:	f005 f99a 	bl	800858c <HAL_QSPI_Transmit>
 8003258:	b990      	cbnz	r0, 8003280 <BSP_QSPI_Write+0x90>
    if (QSPI_AutoPollingMemReady(&hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800325a:	f241 3088 	movw	r0, #5000	; 0x1388
 800325e:	f7ff fe81 	bl	8002f64 <QSPI_AutoPollingMemReady.constprop.0>
 8003262:	b968      	cbnz	r0, 8003280 <BSP_QSPI_Write+0x90>
    current_addr += current_size;
 8003264:	442c      	add	r4, r5
    pData += current_size;
 8003266:	442f      	add	r7, r5
    current_size = ((current_addr + W25Q128FV_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25Q128FV_PAGE_SIZE;
 8003268:	f504 7380 	add.w	r3, r4, #256	; 0x100
 800326c:	42b3      	cmp	r3, r6
 800326e:	bf8c      	ite	hi
 8003270:	1b35      	subhi	r5, r6, r4
 8003272:	f44f 7580 	movls.w	r5, #256	; 0x100
  } while (current_addr < end_addr);
 8003276:	42a6      	cmp	r6, r4
 8003278:	d8dc      	bhi.n	8003234 <BSP_QSPI_Write+0x44>
}
 800327a:	b00e      	add	sp, #56	; 0x38
 800327c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return QSPI_ERROR;
 8003280:	2001      	movs	r0, #1
 8003282:	e7fa      	b.n	800327a <BSP_QSPI_Write+0x8a>
 8003284:	24000a0c 	.word	0x24000a0c

08003288 <qspiWrite>:
{
 8003288:	b508      	push	{r3, lr}
 800328a:	4603      	mov	r3, r0
 800328c:	4608      	mov	r0, r1
  if (addr >= qspiGetLength())
 800328e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003292:	d206      	bcs.n	80032a2 <qspiWrite+0x1a>
  ret = BSP_QSPI_Write(p_data, addr, length);
 8003294:	4619      	mov	r1, r3
 8003296:	f7ff ffab 	bl	80031f0 <BSP_QSPI_Write>
  if (ret == QSPI_OK)
 800329a:	fab0 f080 	clz	r0, r0
 800329e:	0940      	lsrs	r0, r0, #5
}
 80032a0:	bd08      	pop	{r3, pc}
    return false;
 80032a2:	2000      	movs	r0, #0
 80032a4:	e7fc      	b.n	80032a0 <qspiWrite+0x18>
	...

080032a8 <BSP_QSPI_Erase_Block>:
{
 80032a8:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80032aa:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 80032ae:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80032b0:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = SUBSECTOR_ERASE_CMD;
 80032b2:	2320      	movs	r3, #32
  s_command.Address           = BlockAddress;
 80032b4:	9001      	str	r0, [sp, #4]
  s_command.Instruction       = SUBSECTOR_ERASE_CMD;
 80032b6:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80032b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032bc:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80032be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032c2:	9303      	str	r3, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80032c4:	2300      	movs	r3, #0
  s_command.DataMode          = QSPI_DATA_NONE;
 80032c6:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.DummyCycles       = 0;
 80032ca:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80032cc:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80032ce:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (QSPI_WriteEnable(&hqspi) != QSPI_OK)
 80032d2:	f7ff fe0f 	bl	8002ef4 <QSPI_WriteEnable.constprop.0>
 80032d6:	b118      	cbz	r0, 80032e0 <BSP_QSPI_Erase_Block+0x38>
    return QSPI_ERROR;
 80032d8:	2001      	movs	r0, #1
}
 80032da:	b00f      	add	sp, #60	; 0x3c
 80032dc:	f85d fb04 	ldr.w	pc, [sp], #4
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4669      	mov	r1, sp
 80032e6:	4806      	ldr	r0, [pc, #24]	; (8003300 <BSP_QSPI_Erase_Block+0x58>)
 80032e8:	f005 f90d 	bl	8008506 <HAL_QSPI_Command>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d1f3      	bne.n	80032d8 <BSP_QSPI_Erase_Block+0x30>
  if (QSPI_AutoPollingMemReady(&hqspi, W25Q128FV_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 80032f0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80032f4:	f7ff fe36 	bl	8002f64 <QSPI_AutoPollingMemReady.constprop.0>
    return QSPI_ERROR;
 80032f8:	3800      	subs	r0, #0
 80032fa:	bf18      	it	ne
 80032fc:	2001      	movne	r0, #1
 80032fe:	e7ec      	b.n	80032da <BSP_QSPI_Erase_Block+0x32>
 8003300:	24000a0c 	.word	0x24000a0c

08003304 <qspiEraseBlock>:
{
 8003304:	b508      	push	{r3, lr}
  ret = BSP_QSPI_Erase_Block(block_addr);
 8003306:	f7ff ffcf 	bl	80032a8 <BSP_QSPI_Erase_Block>
}
 800330a:	fab0 f080 	clz	r0, r0
 800330e:	0940      	lsrs	r0, r0, #5
 8003310:	bd08      	pop	{r3, pc}

08003312 <qspiErase>:
  if ((addr > flash_length) || ((addr+length) > flash_length))
 8003312:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
{
 8003316:	b538      	push	{r3, r4, r5, lr}
  if ((addr > flash_length) || ((addr+length) > flash_length))
 8003318:	d901      	bls.n	800331e <qspiErase+0xc>
    return false;
 800331a:	2000      	movs	r0, #0
}
 800331c:	bd38      	pop	{r3, r4, r5, pc}
  if ((addr > flash_length) || ((addr+length) > flash_length))
 800331e:	1843      	adds	r3, r0, r1
 8003320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003324:	d8f9      	bhi.n	800331a <qspiErase+0x8>
  if (length == 0)
 8003326:	2900      	cmp	r1, #0
 8003328:	d0f7      	beq.n	800331a <qspiErase+0x8>
  block_end   = (addr + length - 1) / block_size;
 800332a:	3b01      	subs	r3, #1
  block_begin = addr / block_size;
 800332c:	0b04      	lsrs	r4, r0, #12
  block_end   = (addr + length - 1) / block_size;
 800332e:	0b1d      	lsrs	r5, r3, #12
  for (i=block_begin; i<=block_end; i++)
 8003330:	42ac      	cmp	r4, r5
 8003332:	d901      	bls.n	8003338 <qspiErase+0x26>
 8003334:	2001      	movs	r0, #1
 8003336:	e7f1      	b.n	800331c <qspiErase+0xa>
    ret = qspiEraseBlock(block_size*i);
 8003338:	0320      	lsls	r0, r4, #12
 800333a:	f7ff ffe3 	bl	8003304 <qspiEraseBlock>
    if (ret == false)
 800333e:	2800      	cmp	r0, #0
 8003340:	d0eb      	beq.n	800331a <qspiErase+0x8>
  for (i=block_begin; i<=block_end; i++)
 8003342:	3401      	adds	r4, #1
 8003344:	e7f4      	b.n	8003330 <qspiErase+0x1e>
	...

08003348 <BSP_QSPI_GetID>:
{
 8003348:	b510      	push	{r4, lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800334a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800334e:	b08e      	sub	sp, #56	; 0x38
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003350:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
{
 8003354:	4604      	mov	r4, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003356:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = READ_ID_CMD;
 8003358:	239f      	movs	r3, #159	; 0x9f
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800335a:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.NbData            = 20;
 800335c:	2214      	movs	r2, #20
  s_command.Instruction       = READ_ID_CMD;
 800335e:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003360:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003362:	4669      	mov	r1, sp
 8003364:	480d      	ldr	r0, [pc, #52]	; (800339c <BSP_QSPI_GetID+0x54>)
  s_command.DummyCycles       = 0;
 8003366:	9305      	str	r3, [sp, #20]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003368:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800336c:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003370:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003374:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003378:	f005 f8c5 	bl	8008506 <HAL_QSPI_Command>
 800337c:	b958      	cbnz	r0, 8003396 <BSP_QSPI_GetID+0x4e>
  if (HAL_QSPI_Receive(&hqspi, pInfo->device_id, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800337e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003382:	f104 0114 	add.w	r1, r4, #20
 8003386:	4805      	ldr	r0, [pc, #20]	; (800339c <BSP_QSPI_GetID+0x54>)
 8003388:	f005 f959 	bl	800863e <HAL_QSPI_Receive>
    return QSPI_ERROR;
 800338c:	3800      	subs	r0, #0
 800338e:	bf18      	it	ne
 8003390:	2001      	movne	r0, #1
}
 8003392:	b00e      	add	sp, #56	; 0x38
 8003394:	bd10      	pop	{r4, pc}
    return QSPI_ERROR;
 8003396:	2001      	movs	r0, #1
 8003398:	e7fb      	b.n	8003392 <BSP_QSPI_GetID+0x4a>
 800339a:	bf00      	nop
 800339c:	24000a0c 	.word	0x24000a0c

080033a0 <qspiInit>:
{
 80033a0:	b510      	push	{r4, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
  if (BSP_QSPI_Init() == QSPI_OK)
 80033a4:	f7ff fe94 	bl	80030d0 <BSP_QSPI_Init>
  if (BSP_QSPI_GetID(&info) == QSPI_OK)
 80033a8:	4668      	mov	r0, sp
 80033aa:	f7ff ffcd 	bl	8003348 <BSP_QSPI_GetID>
 80033ae:	b9c0      	cbnz	r0, 80033e2 <qspiInit+0x42>
    if (info.device_id[0] == 0xEF && info.device_id[1] == 0x40 && info.device_id[2] == 0x17)
 80033b0:	9b05      	ldr	r3, [sp, #20]
 80033b2:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <qspiInit+0x4c>)
 80033b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d107      	bne.n	80033cc <qspiInit+0x2c>
      logPrintf("W25Q128JV         \t: OK\r\n");
 80033bc:	480c      	ldr	r0, [pc, #48]	; (80033f0 <qspiInit+0x50>)
 80033be:	f009 f89f 	bl	800c500 <puts>
      ret = true;
 80033c2:	2001      	movs	r0, #1
  is_init = ret;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <qspiInit+0x54>)
 80033c6:	7018      	strb	r0, [r3, #0]
}
 80033c8:	b00a      	add	sp, #40	; 0x28
 80033ca:	bd10      	pop	{r4, pc}
      logPrintf("W25Q128JV         \t: Fail %X %X %X\r\n", info.device_id[0], info.device_id[1], info.device_id[2]);
 80033cc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80033d0:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80033d4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80033d8:	4807      	ldr	r0, [pc, #28]	; (80033f8 <qspiInit+0x58>)
 80033da:	f009 f80b 	bl	800c3f4 <iprintf>
    ret = false;
 80033de:	2000      	movs	r0, #0
 80033e0:	e7f0      	b.n	80033c4 <qspiInit+0x24>
    logPrintf("QSPI                \t: Fail\r\n");
 80033e2:	4806      	ldr	r0, [pc, #24]	; (80033fc <qspiInit+0x5c>)
 80033e4:	f009 f88c 	bl	800c500 <puts>
 80033e8:	e7f9      	b.n	80033de <qspiInit+0x3e>
 80033ea:	bf00      	nop
 80033ec:	001740ef 	.word	0x001740ef
 80033f0:	0800fa18 	.word	0x0800fa18
 80033f4:	24000a58 	.word	0x24000a58
 80033f8:	0800fa31 	.word	0x0800fa31
 80033fc:	0800fa56 	.word	0x0800fa56

08003400 <HAL_QSPI_MspInit>:




void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8003400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003406:	2214      	movs	r2, #20
 8003408:	2100      	movs	r1, #0
 800340a:	a803      	add	r0, sp, #12
 800340c:	f008 ff0a 	bl	800c224 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8003410:	6822      	ldr	r2, [r4, #0]
 8003412:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <HAL_QSPI_MspInit+0xb0>)
 8003414:	429a      	cmp	r2, r3
 8003416:	d148      	bne.n	80034aa <HAL_QSPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003418:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <HAL_QSPI_MspInit+0xb4>)
    PF8     ------> QUADSPI_BK1_IO0
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800341c:	2403      	movs	r4, #3
 800341e:	260a      	movs	r6, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003420:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003424:	a903      	add	r1, sp, #12
 8003426:	4824      	ldr	r0, [pc, #144]	; (80034b8 <HAL_QSPI_MspInit+0xb8>)

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 800342a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800342e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003432:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003436:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800343a:	9200      	str	r2, [sp, #0]
 800343c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800343e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003446:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800344a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800344e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003452:	9201      	str	r2, [sp, #4]
 8003454:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003456:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800345a:	f042 0220 	orr.w	r2, r2, #32
 800345e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	9302      	str	r3, [sp, #8]
 800346c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003470:	e9cd 4606 	strd	r4, r6, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003474:	e9cd 3503 	strd	r3, r5, [sp, #12]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003478:	f004 fba4 	bl	8007bc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 800347c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003480:	a903      	add	r1, sp, #12
 8003482:	480e      	ldr	r0, [pc, #56]	; (80034bc <HAL_QSPI_MspInit+0xbc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003488:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348a:	e9cd 7405 	strd	r7, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800348e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003490:	f004 fb98 	bl	8007bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003494:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003498:	a903      	add	r1, sp, #12
 800349a:	4808      	ldr	r0, [pc, #32]	; (80034bc <HAL_QSPI_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800349c:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349e:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a2:	e9cd 7405 	strd	r7, r4, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034a6:	f004 fb8d 	bl	8007bc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80034aa:	b009      	add	sp, #36	; 0x24
 80034ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ae:	bf00      	nop
 80034b0:	52005000 	.word	0x52005000
 80034b4:	58024400 	.word	0x58024400
 80034b8:	58021800 	.word	0x58021800
 80034bc:	58021400 	.word	0x58021400

080034c0 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{

  if(qspiHandle->Instance==QUADSPI)
 80034c0:	6802      	ldr	r2, [r0, #0]
{
 80034c2:	b508      	push	{r3, lr}
  if(qspiHandle->Instance==QUADSPI)
 80034c4:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_QSPI_MspDeInit+0x30>)
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d111      	bne.n	80034ee <HAL_QSPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <HAL_QSPI_MspDeInit+0x34>)
    PF7     ------> QUADSPI_BK1_IO2
    PF8     ------> QUADSPI_BK1_IO0
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6);
 80034cc:	2140      	movs	r1, #64	; 0x40
 80034ce:	480a      	ldr	r0, [pc, #40]	; (80034f8 <HAL_QSPI_MspDeInit+0x38>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 80034d0:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 80034d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6);
 80034dc:	f004 fc5c 	bl	8007d98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 80034e0:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 80034e4:	4805      	ldr	r0, [pc, #20]	; (80034fc <HAL_QSPI_MspDeInit+0x3c>)

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 80034e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 80034ea:	f004 bc55 	b.w	8007d98 <HAL_GPIO_DeInit>
}
 80034ee:	bd08      	pop	{r3, pc}
 80034f0:	52005000 	.word	0x52005000
 80034f4:	58024400 	.word	0x58024400
 80034f8:	58021800 	.word	0x58021800
 80034fc:	58021400 	.word	0x58021400

08003500 <resizeImageFastGray>:
{
  int destw = dest->w;
  int desth = dest->h;
  int i, j;
  float src_dest_w = (float)(src->w-1)/(float)(dest->w-1);
  float src_dest_h = (float)(src->h-1)/(float)(dest->h-1);
 8003500:	6843      	ldr	r3, [r0, #4]

   uint_least16_t xi, yi;
   uint_least8_t s0, s1, s2, s3;
   uint_least32_t s01f, s23f, soutf;

   xstep_c = (int_least32_t) round2int32(src_dest_w * (1<<AFFINEWARP_ISHIFT));
 8003502:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
  float src_dest_w = (float)(src->w-1)/(float)(dest->w-1);
 8003506:	6802      	ldr	r2, [r0, #0]
  float src_dest_h = (float)(src->h-1)/(float)(dest->h-1);
 8003508:	3b01      	subs	r3, #1
   xstep_c = (int_least32_t) round2int32(src_dest_w * (1<<AFFINEWARP_ISHIFT));
 800350a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 8003680 <resizeImageFastGray+0x180>
{
 800350e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  float src_dest_h = (float)(src->h-1)/(float)(dest->h-1);
 8003512:	ee07 3a90 	vmov	s15, r3
  int destw = dest->w;
 8003516:	680c      	ldr	r4, [r1, #0]
  float src_dest_w = (float)(src->w-1)/(float)(dest->w-1);
 8003518:	1e53      	subs	r3, r2, #1
  int desth = dest->h;
 800351a:	684d      	ldr	r5, [r1, #4]
  float src_dest_h = (float)(src->h-1)/(float)(dest->h-1);
 800351c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8003520:	b08f      	sub	sp, #60	; 0x3c
  float src_dest_w = (float)(src->w-1)/(float)(dest->w-1);
 8003522:	ee06 3a90 	vmov	s13, r3
 8003526:	1e63      	subs	r3, r4, #1
  int destw = dest->w;
 8003528:	9405      	str	r4, [sp, #20]
  float src_dest_w = (float)(src->w-1)/(float)(dest->w-1);
 800352a:	ee07 3a10 	vmov	s14, r3
  float src_dest_h = (float)(src->h-1)/(float)(dest->h-1);
 800352e:	1e6b      	subs	r3, r5, #1
  float src_dest_w = (float)(src->w-1)/(float)(dest->w-1);
 8003530:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  int desth = dest->h;
 8003534:	9507      	str	r5, [sp, #28]
  float src_dest_h = (float)(src->h-1)/(float)(dest->h-1);
 8003536:	ee05 3a90 	vmov	s11, r3
  float src_dest_w = (float)(src->w-1)/(float)(dest->w-1);
 800353a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14


   xstart_r = 0;
   ystart_r = 0;

   if (src->stride == 0)  src->stride  = src->w;
 800353e:	6903      	ldr	r3, [r0, #16]
  float src_dest_h = (float)(src->h-1)/(float)(dest->h-1);
 8003540:	eef8 5ae5 	vcvt.f32.s32	s11, s11
  float src_dest_w = (float)(src->w-1)/(float)(dest->w-1);
 8003544:	ee86 6a87 	vdiv.f32	s12, s13, s14
  float src_dest_h = (float)(src->h-1)/(float)(dest->h-1);
 8003548:	ee87 7aa5 	vdiv.f32	s14, s15, s11
   xstep_c = (int_least32_t) round2int32(src_dest_w * (1<<AFFINEWARP_ISHIFT));
 800354c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8003550:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
   ystep_r = (int_least32_t) round2int32(src_dest_h * (1<<AFFINEWARP_ISHIFT));
 8003554:	ee27 7a05 	vmul.f32	s14, s14, s10
   xstep_c = (int_least32_t) round2int32(src_dest_w * (1<<AFFINEWARP_ISHIFT));
 8003558:	ee36 6b04 	vadd.f64	d6, d6, d4
   ystep_r = (int_least32_t) round2int32(src_dest_h * (1<<AFFINEWARP_ISHIFT));
 800355c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   xstep_c = (int_least32_t) round2int32(src_dest_w * (1<<AFFINEWARP_ISHIFT));
 8003560:	febb 6b46 	vrintm.f64	d6, d6
 8003564:	eefd 6bc6 	vcvt.s32.f64	s13, d6
   ystep_r = (int_least32_t) round2int32(src_dest_h * (1<<AFFINEWARP_ISHIFT));
 8003568:	ee37 7b04 	vadd.f64	d7, d7, d4
   xstep_c = (int_least32_t) round2int32(src_dest_w * (1<<AFFINEWARP_ISHIFT));
 800356c:	edcd 6a00 	vstr	s13, [sp]
   ystep_r = (int_least32_t) round2int32(src_dest_h * (1<<AFFINEWARP_ISHIFT));
 8003570:	febb 7b47 	vrintm.f64	d7, d7
 8003574:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003578:	edcd 7a08 	vstr	s15, [sp, #32]
   if (src->stride == 0)  src->stride  = src->w;
 800357c:	b903      	cbnz	r3, 8003580 <resizeImageFastGray+0x80>
 800357e:	6102      	str	r2, [r0, #16]
   if (dest->stride == 0) dest->stride = dest->w;
 8003580:	690b      	ldr	r3, [r1, #16]
 8003582:	9306      	str	r3, [sp, #24]
 8003584:	b913      	cbnz	r3, 800358c <resizeImageFastGray+0x8c>
 8003586:	9b05      	ldr	r3, [sp, #20]
 8003588:	610b      	str	r3, [r1, #16]
 800358a:	9306      	str	r3, [sp, #24]

   if ((destw+dest->x) > dest->stride) destw = dest->stride - dest->x;
 800358c:	688a      	ldr	r2, [r1, #8]
 800358e:	9b05      	ldr	r3, [sp, #20]
 8003590:	9c06      	ldr	r4, [sp, #24]
 8003592:	18d3      	adds	r3, r2, r3
 8003594:	42a3      	cmp	r3, r4
 8003596:	bfc4      	itt	gt
 8003598:	1aa3      	subgt	r3, r4, r2
 800359a:	9305      	strgt	r3, [sp, #20]

   for (j=0; j<desth; j++)
 800359c:	9b07      	ldr	r3, [sp, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	dd6b      	ble.n	800367a <resizeImageFastGray+0x17a>
 80035a2:	68cb      	ldr	r3, [r1, #12]

     yi = (uint_least16_t)(yf >> AFFINEWARP_ISHIFT);

     line1 = (COLOR_DEPTH_TYPE *)&src->p_data[(yi)*src->stride];
     line2 = (COLOR_DEPTH_TYPE *)&src->p_data[(yi+1)*src->stride];
     dest_line = (COLOR_DEPTH_TYPE *)&dest->p_data[(j+dest->y)*(dest->stride) + dest->x];
 80035a4:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80035a8:	9c06      	ldr	r4, [sp, #24]
     line1 = (COLOR_DEPTH_TYPE *)&src->p_data[(yi)*src->stride];
 80035aa:	6945      	ldr	r5, [r0, #20]
 80035ac:	6900      	ldr	r0, [r0, #16]
 80035ae:	fb03 2304 	mla	r3, r3, r4, r2
 80035b2:	694a      	ldr	r2, [r1, #20]
   ystart_r = 0;
 80035b4:	2100      	movs	r1, #0
     line1 = (COLOR_DEPTH_TYPE *)&src->p_data[(yi)*src->stride];
 80035b6:	900a      	str	r0, [sp, #40]	; 0x28
 80035b8:	9805      	ldr	r0, [sp, #20]
 80035ba:	9303      	str	r3, [sp, #12]
 80035bc:	eb00 0a03 	add.w	sl, r0, r3
 80035c0:	0063      	lsls	r3, r4, #1
 80035c2:	920d      	str	r2, [sp, #52]	; 0x34
 80035c4:	930c      	str	r3, [sp, #48]	; 0x30
 80035c6:	eb02 0a4a 	add.w	sl, r2, sl, lsl #1
 80035ca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   ystart_r = 0;
 80035ce:	9102      	str	r1, [sp, #8]
 80035d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80035d2:	f8bd 3000 	ldrh.w	r3, [sp]
     line1 = (COLOR_DEPTH_TYPE *)&src->p_data[(yi)*src->stride];
 80035d6:	9509      	str	r5, [sp, #36]	; 0x24
   for (j=0; j<desth; j++)
 80035d8:	9104      	str	r1, [sp, #16]
 80035da:	9301      	str	r3, [sp, #4]
     line1 = (COLOR_DEPTH_TYPE *)&src->p_data[(yi)*src->stride];
 80035dc:	9b02      	ldr	r3, [sp, #8]
 80035de:	0c1c      	lsrs	r4, r3, #16
 80035e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035e2:	fb03 f404 	mul.w	r4, r3, r4
     line2 = (COLOR_DEPTH_TYPE *)&src->p_data[(yi+1)*src->stride];
 80035e6:	191d      	adds	r5, r3, r4
     line1 = (COLOR_DEPTH_TYPE *)&src->p_data[(yi)*src->stride];
 80035e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035ea:	eb03 0444 	add.w	r4, r3, r4, lsl #1
     line2 = (COLOR_DEPTH_TYPE *)&src->p_data[(yi+1)*src->stride];
 80035ee:	eb03 0545 	add.w	r5, r3, r5, lsl #1

     for(i=0; i<destw; i++)
 80035f2:	9b05      	ldr	r3, [sp, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	dd2b      	ble.n	8003650 <resizeImageFastGray+0x150>
 80035f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
       s01f  = oneminuscxf*s0 + cxf*s1;   // Interpolate points above
       s23f  = oneminuscxf*s2 + cxf*s3;   // Interpolate points below

       s01f >>= 8;
       s23f >>= 8;
       soutf = oneminuscyf*s01f + cyf*s23f; // Final interpolation
 80035fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035fe:	9a03      	ldr	r2, [sp, #12]
     xf = xstart_r;
 8003600:	2000      	movs	r0, #0
       soutf = oneminuscyf*s01f + cyf*s23f; // Final interpolation
 8003602:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8003606:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
       soutf = (soutf >> 24);
       pixel = (uint_least8_t)soutf;

       dest_line[i] = pixel;
       xf += xstep_c;
 800360a:	9a00      	ldr	r2, [sp, #0]
       s0 = line1[xi];
 800360c:	0c03      	lsrs	r3, r0, #16
 800360e:	fa1f fe80 	uxth.w	lr, r0
       xf += xstep_c;
 8003612:	4410      	add	r0, r2
     for(i=0; i<destw; i++)
 8003614:	9a01      	ldr	r2, [sp, #4]
       s23f  = oneminuscxf*s2 + cxf*s3;   // Interpolate points below
 8003616:	f815 8013 	ldrb.w	r8, [r5, r3, lsl #1]
     for(i=0; i<destw; i++)
 800361a:	1a8e      	subs	r6, r1, r2
       s0 = line1[xi];
 800361c:	005a      	lsls	r2, r3, #1
       s01f  = oneminuscxf*s0 + cxf*s1;   // Interpolate points above
 800361e:	f814 7013 	ldrb.w	r7, [r4, r3, lsl #1]
       s1 = line1[xi+1];
 8003622:	3202      	adds	r2, #2
       s23f  = oneminuscxf*s2 + cxf*s3;   // Interpolate points below
 8003624:	5cab      	ldrb	r3, [r5, r2]
       s01f  = oneminuscxf*s0 + cxf*s1;   // Interpolate points above
 8003626:	5ca2      	ldrb	r2, [r4, r2]
       s23f  = oneminuscxf*s2 + cxf*s3;   // Interpolate points below
 8003628:	fb0e f303 	mul.w	r3, lr, r3
       s01f  = oneminuscxf*s0 + cxf*s1;   // Interpolate points above
 800362c:	fb0e f202 	mul.w	r2, lr, r2
       s23f  = oneminuscxf*s2 + cxf*s3;   // Interpolate points below
 8003630:	fb01 3308 	mla	r3, r1, r8, r3
       s01f  = oneminuscxf*s0 + cxf*s1;   // Interpolate points above
 8003634:	fb01 2207 	mla	r2, r1, r7, r2
     for(i=0; i<destw; i++)
 8003638:	b2b1      	uxth	r1, r6
       s23f >>= 8;
 800363a:	0a1b      	lsrs	r3, r3, #8
       s01f >>= 8;
 800363c:	0a12      	lsrs	r2, r2, #8
       soutf = oneminuscyf*s01f + cyf*s23f; // Final interpolation
 800363e:	fb0b f303 	mul.w	r3, fp, r3
 8003642:	fb09 3302 	mla	r3, r9, r2, r3
       soutf = (soutf >> 24);
 8003646:	0e1b      	lsrs	r3, r3, #24
       dest_line[i] = pixel;
 8003648:	f82c 3b02 	strh.w	r3, [ip], #2
     for(i=0; i<destw; i++)
 800364c:	45e2      	cmp	sl, ip
 800364e:	d1dc      	bne.n	800360a <resizeImageFastGray+0x10a>
       yf += ystep_c;
     }

     xstart_r += xstep_r;
     ystart_r += ystep_r;
 8003650:	9a02      	ldr	r2, [sp, #8]
 8003652:	9908      	ldr	r1, [sp, #32]
   for (j=0; j<desth; j++)
 8003654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     ystart_r += ystep_r;
 8003656:	440a      	add	r2, r1
   for (j=0; j<desth; j++)
 8003658:	9906      	ldr	r1, [sp, #24]
 800365a:	eba9 0903 	sub.w	r9, r9, r3
 800365e:	9b04      	ldr	r3, [sp, #16]
     ystart_r += ystep_r;
 8003660:	9202      	str	r2, [sp, #8]
   for (j=0; j<desth; j++)
 8003662:	9a03      	ldr	r2, [sp, #12]
 8003664:	3301      	adds	r3, #1
 8003666:	fa1f f989 	uxth.w	r9, r9
 800366a:	440a      	add	r2, r1
 800366c:	9304      	str	r3, [sp, #16]
 800366e:	9203      	str	r2, [sp, #12]
 8003670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003672:	4492      	add	sl, r2
 8003674:	9a07      	ldr	r2, [sp, #28]
 8003676:	429a      	cmp	r2, r3
 8003678:	d1b0      	bne.n	80035dc <resizeImageFastGray+0xdc>
   }
}
 800367a:	b00f      	add	sp, #60	; 0x3c
 800367c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003680:	47800000 	.word	0x47800000

08003684 <resizeImageNearest>:


__attribute__((optimize("O2"))) void resizeImageNearest(resize_image_t *src, resize_image_t *dest)
{
  int x_ratio = (int)((src->w<<16)/dest->w) +1;
  int y_ratio = (int)((src->h<<16)/dest->h) +1;
 8003684:	6843      	ldr	r3, [r0, #4]
  int x_ratio = (int)((src->w<<16)/dest->w) +1;
 8003686:	6802      	ldr	r2, [r0, #0]
  int y_ratio = (int)((src->h<<16)/dest->h) +1;
 8003688:	041b      	lsls	r3, r3, #16
{
 800368a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800368e:	4681      	mov	r9, r0
  int y_ratio = (int)((src->h<<16)/dest->h) +1;
 8003690:	6848      	ldr	r0, [r1, #4]
{
 8003692:	b085      	sub	sp, #20
  int x_ratio = (int)((src->w<<16)/dest->w) +1;
 8003694:	f8d1 8000 	ldr.w	r8, [r1]

  w1 = src->w;
  w2 = dest->w;
  h2 = dest->h;

  if (dest->stride > 0)
 8003698:	f8d1 a010 	ldr.w	sl, [r1, #16]
  int x_ratio = (int)((src->w<<16)/dest->w) +1;
 800369c:	0415      	lsls	r5, r2, #16
  int y_ratio = (int)((src->h<<16)/dest->h) +1;
 800369e:	9001      	str	r0, [sp, #4]
  int x_ratio = (int)((src->w<<16)/dest->w) +1;
 80036a0:	f1ba 0f00 	cmp.w	sl, #0
 80036a4:	bfd8      	it	le
 80036a6:	46c2      	movle	sl, r8
  int y_ratio = (int)((src->h<<16)/dest->h) +1;
 80036a8:	fb93 f3f0 	sdiv	r3, r3, r0
 80036ac:	3301      	adds	r3, #1
 80036ae:	9302      	str	r3, [sp, #8]
  }
  else
  {
    stride_dst = w2;
  }
  if (src->stride > 0)
 80036b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bfc8      	it	gt
 80036b8:	461a      	movgt	r2, r3
  {
    stride_src = w1;
  }


  for (int i=0;i<h2;i++)
 80036ba:	2800      	cmp	r0, #0
  int x_ratio = (int)((src->w<<16)/dest->w) +1;
 80036bc:	fb95 f5f8 	sdiv	r5, r5, r8
  if (src->stride > 0)
 80036c0:	9203      	str	r2, [sp, #12]
  for (int i=0;i<h2;i++)
 80036c2:	dd2a      	ble.n	800371a <resizeImageNearest+0x96>
 80036c4:	2700      	movs	r7, #0
 80036c6:	3501      	adds	r5, #1
 80036c8:	463e      	mov	r6, r7
  {
    for (int j=0;j<w2;j++)
 80036ca:	f1b8 0f00 	cmp.w	r8, #0
 80036ce:	dd1e      	ble.n	800370e <resizeImageNearest+0x8a>
    {
      x2 = ((j*x_ratio)>>16) ;
      y2 = ((i*y_ratio)>>16) ;
      dest->p_data[((i+dest->y)*stride_dst)+j+dest->x] = src->p_data[(y2*stride_src)+x2];
 80036d0:	9b03      	ldr	r3, [sp, #12]
      y2 = ((i*y_ratio)>>16) ;
 80036d2:	ea4f 4e27 	mov.w	lr, r7, asr #16
      dest->p_data[((i+dest->y)*stride_dst)+j+dest->x] = src->p_data[(y2*stride_src)+x2];
 80036d6:	6948      	ldr	r0, [r1, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	fb03 fe0e 	mul.w	lr, r3, lr
 80036de:	68cb      	ldr	r3, [r1, #12]
 80036e0:	f8d9 4014 	ldr.w	r4, [r9, #20]
 80036e4:	4433      	add	r3, r6
 80036e6:	fb0a fc03 	mul.w	ip, sl, r3
 80036ea:	688b      	ldr	r3, [r1, #8]
 80036ec:	eb08 0b03 	add.w	fp, r8, r3
 80036f0:	4463      	add	r3, ip
 80036f2:	44dc      	add	ip, fp
 80036f4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80036f8:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 80036fc:	eb0e 4022 	add.w	r0, lr, r2, asr #16
    for (int j=0;j<w2;j++)
 8003700:	442a      	add	r2, r5
      dest->p_data[((i+dest->y)*stride_dst)+j+dest->x] = src->p_data[(y2*stride_src)+x2];
 8003702:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8003706:	f823 0b02 	strh.w	r0, [r3], #2
    for (int j=0;j<w2;j++)
 800370a:	4563      	cmp	r3, ip
 800370c:	d1f6      	bne.n	80036fc <resizeImageNearest+0x78>
  for (int i=0;i<h2;i++)
 800370e:	9b02      	ldr	r3, [sp, #8]
 8003710:	3601      	adds	r6, #1
 8003712:	441f      	add	r7, r3
 8003714:	9b01      	ldr	r3, [sp, #4]
 8003716:	42b3      	cmp	r3, r6
 8003718:	d1d7      	bne.n	80036ca <resizeImageNearest+0x46>
    }
  }
}
 800371a:	b005      	add	sp, #20
 800371c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003720 <sdReInit>:

  return ret;
}

bool sdReInit(void)
{
 8003720:	b508      	push	{r3, lr}
  bool ret = false;

  HAL_SD_DeInit(&hsd);
 8003722:	4806      	ldr	r0, [pc, #24]	; (800373c <sdReInit+0x1c>)
 8003724:	f006 ff80 	bl	800a628 <HAL_SD_DeInit>
  if (HAL_SD_Init(&hsd) == HAL_OK)
 8003728:	4804      	ldr	r0, [pc, #16]	; (800373c <sdReInit+0x1c>)
 800372a:	f007 fb17 	bl	800ad5c <HAL_SD_Init>
 800372e:	b918      	cbnz	r0, 8003738 <sdReInit+0x18>
  {
    ret = true;
    is_init = ret;
 8003730:	2001      	movs	r0, #1
 8003732:	4b03      	ldr	r3, [pc, #12]	; (8003740 <sdReInit+0x20>)
 8003734:	7018      	strb	r0, [r3, #0]
  }

  return ret;
}
 8003736:	bd08      	pop	{r3, pc}
  bool ret = false;
 8003738:	2000      	movs	r0, #0
 800373a:	e7fc      	b.n	8003736 <sdReInit+0x16>
 800373c:	24000a5c 	.word	0x24000a5c
 8003740:	24000add 	.word	0x24000add

08003744 <sdIsInit>:
}

bool sdIsInit(void)
{
  return is_init;
}
 8003744:	4b01      	ldr	r3, [pc, #4]	; (800374c <sdIsInit+0x8>)
 8003746:	7818      	ldrb	r0, [r3, #0]
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	24000add 	.word	0x24000add

08003750 <sdIsDetected>:

bool sdIsDetected(void)
{
 8003750:	b508      	push	{r3, lr}
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8003752:	2000      	movs	r0, #0
 8003754:	f7fe fd74 	bl	8002240 <gpioPinRead>
 8003758:	4b01      	ldr	r3, [pc, #4]	; (8003760 <sdIsDetected+0x10>)
 800375a:	7018      	strb	r0, [r3, #0]
  {
    is_detected = false;
  }

  return is_detected;
}
 800375c:	bd08      	pop	{r3, pc}
 800375e:	bf00      	nop
 8003760:	24000adc 	.word	0x24000adc

08003764 <sdInit>:
{
 8003764:	b570      	push	{r4, r5, r6, lr}
  hsd.Init.ClockEdge            = SDMMC_CLOCK_EDGE_RISING;
 8003766:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <sdInit+0x5c>)
 8003768:	2600      	movs	r6, #0
  hsd.Instance                  = SDMMC1;
 800376a:	4c16      	ldr	r4, [pc, #88]	; (80037c4 <sdInit+0x60>)
  hsd.Init.TranceiverPresent    = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800376c:	2202      	movs	r2, #2
  hsd.Init.ClockEdge            = SDMMC_CLOCK_EDGE_RISING;
 800376e:	e9c4 3600 	strd	r3, r6, [r4]
  hsd.Init.BusWide              = SDMMC_BUS_WIDE_4B;
 8003772:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hsd.Init.ClockPowerSave       = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003776:	60a6      	str	r6, [r4, #8]
  hsd.Init.HardwareFlowControl  = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003778:	e9c4 3603 	strd	r3, r6, [r4, #12]
  hsd.Init.TranceiverPresent    = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800377c:	2301      	movs	r3, #1
 800377e:	e9c4 2305 	strd	r2, r3, [r4, #20]
  is_detected = sdIsDetected();
 8003782:	f7ff ffe5 	bl	8003750 <sdIsDetected>
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <sdInit+0x64>)
 8003788:	4605      	mov	r5, r0
 800378a:	7018      	strb	r0, [r3, #0]
  if (is_detected == true)
 800378c:	b1a0      	cbz	r0, 80037b8 <sdInit+0x54>
    logPrintf("sdCard     \t\t: connected\r\n");
 800378e:	480f      	ldr	r0, [pc, #60]	; (80037cc <sdInit+0x68>)
 8003790:	f008 feb6 	bl	800c500 <puts>
    HAL_SD_DeInit(&hsd);
 8003794:	4620      	mov	r0, r4
 8003796:	f006 ff47 	bl	800a628 <HAL_SD_DeInit>
    if (HAL_SD_Init(&hsd) == HAL_OK)
 800379a:	4620      	mov	r0, r4
 800379c:	f007 fade 	bl	800ad5c <HAL_SD_Init>
 80037a0:	b960      	cbnz	r0, 80037bc <sdInit+0x58>
      logPrintf("sdCardInit  \t\t: OK\r\n");
 80037a2:	480b      	ldr	r0, [pc, #44]	; (80037d0 <sdInit+0x6c>)
    logPrintf("sdCard     \t\t: not connected\r\n");
 80037a4:	f008 feac 	bl	800c500 <puts>
  is_init = ret;
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <sdInit+0x70>)
  cliAdd("sd", cliSd);
 80037aa:	490b      	ldr	r1, [pc, #44]	; (80037d8 <sdInit+0x74>)
 80037ac:	480b      	ldr	r0, [pc, #44]	; (80037dc <sdInit+0x78>)
  is_init = ret;
 80037ae:	701d      	strb	r5, [r3, #0]
  cliAdd("sd", cliSd);
 80037b0:	f7fe f990 	bl	8001ad4 <cliAdd>
}
 80037b4:	4628      	mov	r0, r5
 80037b6:	bd70      	pop	{r4, r5, r6, pc}
    logPrintf("sdCard     \t\t: not connected\r\n");
 80037b8:	4809      	ldr	r0, [pc, #36]	; (80037e0 <sdInit+0x7c>)
 80037ba:	e7f3      	b.n	80037a4 <sdInit+0x40>
  bool ret = false;
 80037bc:	4635      	mov	r5, r6
 80037be:	e7f3      	b.n	80037a8 <sdInit+0x44>
 80037c0:	52007000 	.word	0x52007000
 80037c4:	24000a5c 	.word	0x24000a5c
 80037c8:	24000adc 	.word	0x24000adc
 80037cc:	0800fa73 	.word	0x0800fa73
 80037d0:	0800fa8d 	.word	0x0800fa8d
 80037d4:	24000add 	.word	0x24000add
 80037d8:	08003931 	.word	0x08003931
 80037dc:	0800fabf 	.word	0x0800fabf
 80037e0:	0800faa1 	.word	0x0800faa1

080037e4 <sdUpdate>:

sd_state_t sdUpdate(void)
{
 80037e4:	b538      	push	{r3, r4, r5, lr}
  sd_state_t ret_state = SDCARD_IDLE;
  static uint32_t pre_time;


  switch(sd_state)
 80037e6:	4d22      	ldr	r5, [pc, #136]	; (8003870 <sdUpdate+0x8c>)
 80037e8:	782c      	ldrb	r4, [r5, #0]
 80037ea:	2c03      	cmp	r4, #3
 80037ec:	d81f      	bhi.n	800382e <sdUpdate+0x4a>
 80037ee:	e8df f004 	tbb	[pc, r4]
 80037f2:	1702      	.short	0x1702
 80037f4:	3830      	.short	0x3830
  {
    case SDCARD_IDLE:
      if (sdIsDetected() == true)
 80037f6:	f7ff ffab 	bl	8003750 <sdIsDetected>
 80037fa:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <sdUpdate+0x90>)
 80037fc:	b160      	cbz	r0, 8003818 <sdUpdate+0x34>
      {
        if (is_init)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	b11b      	cbz	r3, 800380a <sdUpdate+0x26>
        {
          sd_state = SDCARD_CONNECTED;
 8003802:	2302      	movs	r3, #2
 8003804:	702b      	strb	r3, [r5, #0]
    case SDCARD_ERROR:
      break;
  }

  return ret_state;
}
 8003806:	4620      	mov	r0, r4
 8003808:	bd38      	pop	{r3, r4, r5, pc}
          sd_state = SDCARD_CONNECTTING;
 800380a:	2301      	movs	r3, #1
 800380c:	702b      	strb	r3, [r5, #0]
          pre_time = millis();
 800380e:	f7fd fabb 	bl	8000d88 <millis>
 8003812:	4b19      	ldr	r3, [pc, #100]	; (8003878 <sdUpdate+0x94>)
 8003814:	6018      	str	r0, [r3, #0]
 8003816:	e7f6      	b.n	8003806 <sdUpdate+0x22>
        sd_state  = SDCARD_DISCONNECTED;
 8003818:	2403      	movs	r4, #3
        is_init = false;
 800381a:	7018      	strb	r0, [r3, #0]
        sd_state = SDCARD_IDLE;
 800381c:	702c      	strb	r4, [r5, #0]
 800381e:	e7f2      	b.n	8003806 <sdUpdate+0x22>
      if (millis()-pre_time >= 100)
 8003820:	f7fd fab2 	bl	8000d88 <millis>
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <sdUpdate+0x94>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	1ac0      	subs	r0, r0, r3
 800382a:	2863      	cmp	r0, #99	; 0x63
 800382c:	d801      	bhi.n	8003832 <sdUpdate+0x4e>
  switch(sd_state)
 800382e:	2400      	movs	r4, #0
 8003830:	e7e9      	b.n	8003806 <sdUpdate+0x22>
        if (sdReInit())
 8003832:	f7ff ff75 	bl	8003720 <sdReInit>
 8003836:	b108      	cbz	r0, 800383c <sdUpdate+0x58>
          sd_state  = SDCARD_CONNECTED;
 8003838:	2402      	movs	r4, #2
 800383a:	e7ef      	b.n	800381c <sdUpdate+0x38>
          is_try++;
 800383c:	4a0f      	ldr	r2, [pc, #60]	; (800387c <sdUpdate+0x98>)
          sd_state = SDCARD_IDLE;
 800383e:	7028      	strb	r0, [r5, #0]
          is_try++;
 8003840:	7813      	ldrb	r3, [r2, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	b2db      	uxtb	r3, r3
          if (is_try >= 3)
 8003846:	2b02      	cmp	r3, #2
          is_try++;
 8003848:	7013      	strb	r3, [r2, #0]
          if (is_try >= 3)
 800384a:	d9f0      	bls.n	800382e <sdUpdate+0x4a>
            sd_state = SDCARD_ERROR;
 800384c:	2304      	movs	r3, #4
 800384e:	702b      	strb	r3, [r5, #0]
 8003850:	e7ed      	b.n	800382e <sdUpdate+0x4a>
      if (sdIsDetected() != true)
 8003852:	f7ff ff7d 	bl	8003750 <sdIsDetected>
 8003856:	2800      	cmp	r0, #0
 8003858:	d1e9      	bne.n	800382e <sdUpdate+0x4a>
        is_try = 0;
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <sdUpdate+0x98>)
        sd_state = SDCARD_IDLE;
 800385c:	7028      	strb	r0, [r5, #0]
        is_try = 0;
 800385e:	7018      	strb	r0, [r3, #0]
        sd_state = SDCARD_IDLE;
 8003860:	e7e5      	b.n	800382e <sdUpdate+0x4a>
      if (sdIsDetected() == true)
 8003862:	f7ff ff75 	bl	8003750 <sdIsDetected>
 8003866:	2800      	cmp	r0, #0
 8003868:	d0e1      	beq.n	800382e <sdUpdate+0x4a>
        sd_state = SDCARD_IDLE;
 800386a:	2400      	movs	r4, #0
 800386c:	e7d6      	b.n	800381c <sdUpdate+0x38>
 800386e:	bf00      	nop
 8003870:	24000ae8 	.word	0x24000ae8
 8003874:	24000add 	.word	0x24000add
 8003878:	24000ae4 	.word	0x24000ae4
 800387c:	24000adf 	.word	0x24000adf

08003880 <sdGetInfo>:
  sd_info_t *p_sd_info = (sd_info_t *)p_info;

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <sdGetInfo+0x48>)
{
 8003882:	b530      	push	{r4, r5, lr}
  if (is_init == true)
 8003884:	781d      	ldrb	r5, [r3, #0]
{
 8003886:	b08b      	sub	sp, #44	; 0x2c
 8003888:	4604      	mov	r4, r0
  if (is_init == true)
 800388a:	b1cd      	cbz	r5, 80038c0 <sdGetInfo+0x40>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 800388c:	a901      	add	r1, sp, #4
 800388e:	480f      	ldr	r0, [pc, #60]	; (80038cc <sdGetInfo+0x4c>)
 8003890:	f007 f9ac 	bl	800abec <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 8003894:	9b01      	ldr	r3, [sp, #4]
    p_sd_info->card_version       = card_info.CardVersion;
    p_sd_info->card_class         = card_info.Class;
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
    p_sd_info->block_numbers      = card_info.BlockNbr;
    p_sd_info->block_size         = card_info.BlockSize;
 8003896:	9a06      	ldr	r2, [sp, #24]
    p_sd_info->card_type          = card_info.CardType;
 8003898:	6023      	str	r3, [r4, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 800389a:	9b02      	ldr	r3, [sp, #8]
    p_sd_info->block_size         = card_info.BlockSize;
 800389c:	6162      	str	r2, [r4, #20]
    p_sd_info->card_version       = card_info.CardVersion;
 800389e:	6063      	str	r3, [r4, #4]
    p_sd_info->card_class         = card_info.Class;
 80038a0:	9b03      	ldr	r3, [sp, #12]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 80038a2:	9907      	ldr	r1, [sp, #28]
    p_sd_info->card_class         = card_info.Class;
 80038a4:	60a3      	str	r3, [r4, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 80038a6:	9b04      	ldr	r3, [sp, #16]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 80038a8:	61a1      	str	r1, [r4, #24]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 80038aa:	60e3      	str	r3, [r4, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 80038ac:	9b05      	ldr	r3, [sp, #20]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 80038ae:	9908      	ldr	r1, [sp, #32]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 80038b0:	6123      	str	r3, [r4, #16]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 80038b2:	fba3 3202 	umull	r3, r2, r3, r2
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 80038b6:	61e1      	str	r1, [r4, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 80038b8:	0d1b      	lsrs	r3, r3, #20
 80038ba:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80038be:	6223      	str	r3, [r4, #32]
    ret = true;
  }

  return ret;
}
 80038c0:	4628      	mov	r0, r5
 80038c2:	b00b      	add	sp, #44	; 0x2c
 80038c4:	bd30      	pop	{r4, r5, pc}
 80038c6:	bf00      	nop
 80038c8:	24000add 	.word	0x24000add
 80038cc:	24000a5c 	.word	0x24000a5c

080038d0 <sdIsBusy>:

bool sdIsBusy(void)
{
 80038d0:	b508      	push	{r3, lr}
  bool is_busy;

  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 80038d2:	4803      	ldr	r0, [pc, #12]	; (80038e0 <sdIsBusy+0x10>)
 80038d4:	f007 fa2e 	bl	800ad34 <HAL_SD_GetCardState>
  {
    is_busy = true;
  }

  return is_busy;
}
 80038d8:	3804      	subs	r0, #4
 80038da:	bf18      	it	ne
 80038dc:	2001      	movne	r0, #1
 80038de:	bd08      	pop	{r3, pc}
 80038e0:	24000a5c 	.word	0x24000a5c

080038e4 <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	4604      	mov	r4, r0
  uint32_t pre_time;

  pre_time = millis();
 80038e8:	f7fd fa4e 	bl	8000d88 <millis>
 80038ec:	4605      	mov	r5, r0

  while(millis() - pre_time < timeout)
 80038ee:	f7fd fa4b 	bl	8000d88 <millis>
 80038f2:	1b43      	subs	r3, r0, r5
 80038f4:	42a3      	cmp	r3, r4
 80038f6:	d301      	bcc.n	80038fc <sdIsReady+0x18>
    {
      return true;
    }
  }

  return false;
 80038f8:	2000      	movs	r0, #0
}
 80038fa:	bd38      	pop	{r3, r4, r5, pc}
    if (sdIsBusy() == false)
 80038fc:	f7ff ffe8 	bl	80038d0 <sdIsBusy>
 8003900:	2800      	cmp	r0, #0
 8003902:	d1f4      	bne.n	80038ee <sdIsReady+0xa>
      return true;
 8003904:	2001      	movs	r0, #1
 8003906:	e7f8      	b.n	80038fa <sdIsReady+0x16>

08003908 <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8003908:	b507      	push	{r0, r1, r2, lr}
  bool ret = false;

#if 1
  if(HAL_SD_ReadBlocks(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks, timeout_ms) == HAL_OK)
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	4602      	mov	r2, r0
 8003910:	4806      	ldr	r0, [pc, #24]	; (800392c <sdReadBlocks+0x24>)
 8003912:	f006 fcd1 	bl	800a2b8 <HAL_SD_ReadBlocks>
 8003916:	b938      	cbnz	r0, 8003928 <sdReadBlocks+0x20>
  {
    while(sdIsBusy() == true);
 8003918:	f7ff ffda 	bl	80038d0 <sdIsBusy>
 800391c:	2800      	cmp	r0, #0
 800391e:	d1fb      	bne.n	8003918 <sdReadBlocks+0x10>
 8003920:	2001      	movs	r0, #1
    }
    ret = is_rx_done;
  }
#endif
  return ret;
}
 8003922:	b003      	add	sp, #12
 8003924:	f85d fb04 	ldr.w	pc, [sp], #4
  bool ret = false;
 8003928:	2000      	movs	r0, #0
 800392a:	e7fa      	b.n	8003922 <sdReadBlocks+0x1a>
 800392c:	24000a5c 	.word	0x24000a5c

08003930 <cliSd>:
void cliSd(cli_args_t *args)
{
  bool ret = false;


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8003930:	8803      	ldrh	r3, [r0, #0]
 8003932:	2b01      	cmp	r3, #1
{
 8003934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003936:	4604      	mov	r4, r0
 8003938:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
  if (args->argc == 1 && args->isStr(0, "info") == true)
 800393c:	d025      	beq.n	800398a <cliSd+0x5a>
  bool ret = false;
 800393e:	2500      	movs	r5, #0
      }
    }
    ret = true;
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8003940:	8823      	ldrh	r3, [r4, #0]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d16c      	bne.n	8003a20 <cliSd+0xf0>
 8003946:	6963      	ldr	r3, [r4, #20]
 8003948:	2000      	movs	r0, #0
 800394a:	493d      	ldr	r1, [pc, #244]	; (8003a40 <cliSd+0x110>)
 800394c:	4798      	blx	r3
 800394e:	2800      	cmp	r0, #0
 8003950:	d066      	beq.n	8003a20 <cliSd+0xf0>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 8003952:	68a3      	ldr	r3, [r4, #8]
 8003954:	2001      	movs	r0, #1
 8003956:	4798      	blx	r3

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 8003958:	2364      	movs	r3, #100	; 0x64
 800395a:	2201      	movs	r2, #1
 800395c:	4669      	mov	r1, sp
    number = args->getData(1);
 800395e:	4606      	mov	r6, r0
    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 8003960:	f7ff ffd2 	bl	8003908 <sdReadBlocks>
 8003964:	2800      	cmp	r0, #0
 8003966:	d057      	beq.n	8003a18 <cliSd+0xe8>
 8003968:	466c      	mov	r4, sp
 800396a:	2500      	movs	r5, #0
    {
      for (int i=0; i<512/4; i++)
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 800396c:	4f35      	ldr	r7, [pc, #212]	; (8003a44 <cliSd+0x114>)
 800396e:	462a      	mov	r2, r5
      for (int i=0; i<512/4; i++)
 8003970:	3504      	adds	r5, #4
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 8003972:	f854 3b04 	ldr.w	r3, [r4], #4
 8003976:	4631      	mov	r1, r6
 8003978:	4638      	mov	r0, r7
 800397a:	f7fd fe11 	bl	80015a0 <cliPrintf>
      for (int i=0; i<512/4; i++)
 800397e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8003982:	d1f4      	bne.n	800396e <cliSd+0x3e>
    if (is_init == true)
    {
      cliPrintf("sd read block_number\n");
    }
  }
}
 8003984:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 8003988:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (args->argc == 1 && args->isStr(0, "info") == true)
 800398a:	6943      	ldr	r3, [r0, #20]
 800398c:	2000      	movs	r0, #0
 800398e:	492e      	ldr	r1, [pc, #184]	; (8003a48 <cliSd+0x118>)
 8003990:	4798      	blx	r3
 8003992:	4605      	mov	r5, r0
 8003994:	2800      	cmp	r0, #0
 8003996:	d0d2      	beq.n	800393e <cliSd+0xe>
    cliPrintf("sd init      : %d\n", is_init);
 8003998:	4e2c      	ldr	r6, [pc, #176]	; (8003a4c <cliSd+0x11c>)
 800399a:	482d      	ldr	r0, [pc, #180]	; (8003a50 <cliSd+0x120>)
 800399c:	7831      	ldrb	r1, [r6, #0]
 800399e:	f7fd fdff 	bl	80015a0 <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 80039a2:	4b2c      	ldr	r3, [pc, #176]	; (8003a54 <cliSd+0x124>)
 80039a4:	482c      	ldr	r0, [pc, #176]	; (8003a58 <cliSd+0x128>)
 80039a6:	7819      	ldrb	r1, [r3, #0]
 80039a8:	f7fd fdfa 	bl	80015a0 <cliPrintf>
    if (is_init == true)
 80039ac:	7833      	ldrb	r3, [r6, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0c6      	beq.n	8003940 <cliSd+0x10>
      if (sdGetInfo(&sd_info) == true)
 80039b2:	4668      	mov	r0, sp
 80039b4:	f7ff ff64 	bl	8003880 <sdGetInfo>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	d0c1      	beq.n	8003940 <cliSd+0x10>
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 80039bc:	9900      	ldr	r1, [sp, #0]
 80039be:	4827      	ldr	r0, [pc, #156]	; (8003a5c <cliSd+0x12c>)
 80039c0:	f7fd fdee 	bl	80015a0 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 80039c4:	9901      	ldr	r1, [sp, #4]
 80039c6:	4826      	ldr	r0, [pc, #152]	; (8003a60 <cliSd+0x130>)
 80039c8:	f7fd fdea 	bl	80015a0 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 80039cc:	9902      	ldr	r1, [sp, #8]
 80039ce:	4825      	ldr	r0, [pc, #148]	; (8003a64 <cliSd+0x134>)
 80039d0:	f7fd fde6 	bl	80015a0 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 80039d4:	9903      	ldr	r1, [sp, #12]
 80039d6:	4824      	ldr	r0, [pc, #144]	; (8003a68 <cliSd+0x138>)
 80039d8:	f7fd fde2 	bl	80015a0 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 80039dc:	9904      	ldr	r1, [sp, #16]
 80039de:	4823      	ldr	r0, [pc, #140]	; (8003a6c <cliSd+0x13c>)
 80039e0:	f7fd fdde 	bl	80015a0 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 80039e4:	9905      	ldr	r1, [sp, #20]
 80039e6:	4822      	ldr	r0, [pc, #136]	; (8003a70 <cliSd+0x140>)
 80039e8:	f7fd fdda 	bl	80015a0 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 80039ec:	9906      	ldr	r1, [sp, #24]
 80039ee:	4821      	ldr	r0, [pc, #132]	; (8003a74 <cliSd+0x144>)
 80039f0:	f7fd fdd6 	bl	80015a0 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 80039f4:	9907      	ldr	r1, [sp, #28]
 80039f6:	4820      	ldr	r0, [pc, #128]	; (8003a78 <cliSd+0x148>)
 80039f8:	f7fd fdd2 	bl	80015a0 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 80039fc:	230a      	movs	r3, #10
 80039fe:	9908      	ldr	r1, [sp, #32]
 8003a00:	fb03 f201 	mul.w	r2, r3, r1
 8003a04:	40da      	lsrs	r2, r3
 8003a06:	fbb2 f0f3 	udiv	r0, r2, r3
 8003a0a:	fb03 2310 	mls	r3, r3, r0, r2
 8003a0e:	0a8a      	lsrs	r2, r1, #10
 8003a10:	481a      	ldr	r0, [pc, #104]	; (8003a7c <cliSd+0x14c>)
 8003a12:	f7fd fdc5 	bl	80015a0 <cliPrintf>
    ret = true;
 8003a16:	e793      	b.n	8003940 <cliSd+0x10>
      cliPrintf("sdRead Fail\n");
 8003a18:	4819      	ldr	r0, [pc, #100]	; (8003a80 <cliSd+0x150>)
 8003a1a:	f7fd fdc1 	bl	80015a0 <cliPrintf>
  if (ret != true)
 8003a1e:	e7b1      	b.n	8003984 <cliSd+0x54>
 8003a20:	2d00      	cmp	r5, #0
 8003a22:	d1af      	bne.n	8003984 <cliSd+0x54>
    cliPrintf("sd info\n");
 8003a24:	4817      	ldr	r0, [pc, #92]	; (8003a84 <cliSd+0x154>)
 8003a26:	f7fd fdbb 	bl	80015a0 <cliPrintf>
    if (is_init == true)
 8003a2a:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <cliSd+0x11c>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0a8      	beq.n	8003984 <cliSd+0x54>
      cliPrintf("sd read block_number\n");
 8003a32:	4815      	ldr	r0, [pc, #84]	; (8003a88 <cliSd+0x158>)
}
 8003a34:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 8003a38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      cliPrintf("sd read block_number\n");
 8003a3c:	f7fd bdb0 	b.w	80015a0 <cliPrintf>
 8003a40:	0800f859 	.word	0x0800f859
 8003a44:	0800fc03 	.word	0x0800fc03
 8003a48:	0800f76f 	.word	0x0800f76f
 8003a4c:	24000add 	.word	0x24000add
 8003a50:	0800fac2 	.word	0x0800fac2
 8003a54:	24000adc 	.word	0x24000adc
 8003a58:	0800fad5 	.word	0x0800fad5
 8003a5c:	0800fae8 	.word	0x0800fae8
 8003a60:	0800fb06 	.word	0x0800fb06
 8003a64:	0800fb24 	.word	0x0800fb24
 8003a68:	0800fb42 	.word	0x0800fb42
 8003a6c:	0800fb60 	.word	0x0800fb60
 8003a70:	0800fb7e 	.word	0x0800fb7e
 8003a74:	0800fb9c 	.word	0x0800fb9c
 8003a78:	0800fbba 	.word	0x0800fbba
 8003a7c:	0800fbd8 	.word	0x0800fbd8
 8003a80:	0800fc15 	.word	0x0800fc15
 8003a84:	0800fc22 	.word	0x0800fc22
 8003a88:	0800fc2b 	.word	0x0800fc2b

08003a8c <sdWriteBlocks>:
{
 8003a8c:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_WriteBlocks(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks, timeout_ms) == HAL_OK)
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	4602      	mov	r2, r0
 8003a94:	4804      	ldr	r0, [pc, #16]	; (8003aa8 <sdWriteBlocks+0x1c>)
 8003a96:	f006 fcf1 	bl	800a47c <HAL_SD_WriteBlocks>
}
 8003a9a:	fab0 f080 	clz	r0, r0
 8003a9e:	0940      	lsrs	r0, r0, #5
 8003aa0:	b003      	add	sp, #12
 8003aa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003aa6:	bf00      	nop
 8003aa8:	24000a5c 	.word	0x24000a5c

08003aac <HAL_SD_RxCpltCallback>:
  is_rx_done = true;
 8003aac:	4b01      	ldr	r3, [pc, #4]	; (8003ab4 <HAL_SD_RxCpltCallback+0x8>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	701a      	strb	r2, [r3, #0]
}
 8003ab2:	4770      	bx	lr
 8003ab4:	24000ade 	.word	0x24000ade

08003ab8 <HAL_SD_TxCpltCallback>:
  is_tx_done = true;
 8003ab8:	4b01      	ldr	r3, [pc, #4]	; (8003ac0 <HAL_SD_TxCpltCallback+0x8>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]
}
 8003abe:	4770      	bx	lr
 8003ac0:	24000ae0 	.word	0x24000ae0

08003ac4 <HAL_SD_MspInit>:
{
 8003ac4:	b570      	push	{r4, r5, r6, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aca:	2214      	movs	r2, #20
 8003acc:	2100      	movs	r1, #0
 8003ace:	a803      	add	r0, sp, #12
 8003ad0:	f008 fba8 	bl	800c224 <memset>
  if(sdHandle->Instance==SDMMC1)
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <HAL_SD_MspInit+0xac>)
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d146      	bne.n	8003b6a <HAL_SD_MspInit+0xa6>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003adc:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <HAL_SD_MspInit+0xb0>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003ade:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae0:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003ae2:	2603      	movs	r6, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003ae4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae8:	eb0d 0105 	add.w	r1, sp, r5
 8003aec:	4822      	ldr	r0, [pc, #136]	; (8003b78 <HAL_SD_MspInit+0xb4>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003aee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003af2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003af6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003afa:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003afe:	9200      	str	r2, [sp, #0]
 8003b00:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003b06:	f042 0204 	orr.w	r2, r2, #4
 8003b0a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003b0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003b12:	f002 0204 	and.w	r2, r2, #4
 8003b16:	9201      	str	r2, [sp, #4]
 8003b18:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003b1e:	f042 0208 	orr.w	r2, r2, #8
 8003b22:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	9302      	str	r3, [sp, #8]
 8003b30:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b32:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003b36:	e9cd 6506 	strd	r6, r5, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b3e:	f004 f841 	bl	8007bc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b42:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b44:	eb0d 0105 	add.w	r1, sp, r5
 8003b48:	480c      	ldr	r0, [pc, #48]	; (8003b7c <HAL_SD_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003b4a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b50:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b52:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b56:	f004 f835 	bl	8007bc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8003b5a:	2031      	movs	r0, #49	; 0x31
 8003b5c:	4622      	mov	r2, r4
 8003b5e:	2105      	movs	r1, #5
 8003b60:	f002 fe76 	bl	8006850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003b64:	2031      	movs	r0, #49	; 0x31
 8003b66:	f002 fea5 	bl	80068b4 <HAL_NVIC_EnableIRQ>
}
 8003b6a:	b008      	add	sp, #32
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
 8003b6e:	bf00      	nop
 8003b70:	52007000 	.word	0x52007000
 8003b74:	58024400 	.word	0x58024400
 8003b78:	58020800 	.word	0x58020800
 8003b7c:	58020c00 	.word	0x58020c00

08003b80 <HAL_SD_MspDeInit>:
  if(sdHandle->Instance==SDMMC1)
 8003b80:	6802      	ldr	r2, [r0, #0]
{
 8003b82:	b508      	push	{r3, lr}
  if(sdHandle->Instance==SDMMC1)
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <HAL_SD_MspDeInit+0x38>)
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d114      	bne.n	8003bb4 <HAL_SD_MspDeInit+0x34>
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8003b8a:	4a0c      	ldr	r2, [pc, #48]	; (8003bbc <HAL_SD_MspDeInit+0x3c>)
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8003b8c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8003b90:	480b      	ldr	r0, [pc, #44]	; (8003bc0 <HAL_SD_MspDeInit+0x40>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8003b92:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8003b9e:	f004 f8fb 	bl	8007d98 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8003ba2:	4808      	ldr	r0, [pc, #32]	; (8003bc4 <HAL_SD_MspDeInit+0x44>)
 8003ba4:	2104      	movs	r1, #4
 8003ba6:	f004 f8f7 	bl	8007d98 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8003baa:	2031      	movs	r0, #49	; 0x31
}
 8003bac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8003bb0:	f002 be8e 	b.w	80068d0 <HAL_NVIC_DisableIRQ>
}
 8003bb4:	bd08      	pop	{r3, pc}
 8003bb6:	bf00      	nop
 8003bb8:	52007000 	.word	0x52007000
 8003bbc:	58024400 	.word	0x58024400
 8003bc0:	58020800 	.word	0x58020800
 8003bc4:	58020c00 	.word	0x58020c00

08003bc8 <cliSdram>:
  uint8_t number;
  uint32_t i;
  uint32_t pre_time;


  if (args->argc == 2)
 8003bc8:	8803      	ldrh	r3, [r0, #0]
 8003bca:	2b02      	cmp	r3, #2
{
 8003bcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003bd0:	4604      	mov	r4, r0
  if (args->argc == 2)
 8003bd2:	d16f      	bne.n	8003cb4 <cliSdram+0xec>
  {
    if(args->isStr(0, "test") == true)
 8003bd4:	6943      	ldr	r3, [r0, #20]
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	4937      	ldr	r1, [pc, #220]	; (8003cb8 <cliSdram+0xf0>)
 8003bda:	4798      	blx	r3
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d069      	beq.n	8003cb4 <cliSdram+0xec>
    {
      uint32_t *p_data = (uint32_t *)SDRAM_DEVICE_ADDR;

      number = (uint8_t)args->getData(1);
 8003be0:	68a3      	ldr	r3, [r4, #8]
 8003be2:	2001      	movs	r0, #1
 8003be4:	4798      	blx	r3
        pre_time = millis();
        for (i=0; i<SDRAM_DEVICE_SIZE/4; i++)
        {
          p_data[i] = i;
        }
        cliPrintf( "Write : %d MB/s\n", SDRAM_DEVICE_SIZE / (millis()-pre_time) / 1000 );
 8003be6:	4e35      	ldr	r6, [pc, #212]	; (8003cbc <cliSdram+0xf4>)
 8003be8:	b2c4      	uxtb	r4, r0
        pre_time = millis();
        for (i=0; i<SDRAM_DEVICE_SIZE/4; i++)
        {
          data_sum += p_data[i];
        }
        cliPrintf( "Read  : %d MB/s\n", SDRAM_DEVICE_SIZE / 1000 / (millis()-pre_time) );
 8003bea:	4f35      	ldr	r7, [pc, #212]	; (8003cc0 <cliSdram+0xf8>)
          }
        }

        if (i == SDRAM_DEVICE_SIZE/4)
        {
          cliPrintf( "Count %d\n", number);
 8003bec:	4d35      	ldr	r5, [pc, #212]	; (8003cc4 <cliSdram+0xfc>)
      while(number > 0)
 8003bee:	b914      	cbnz	r4, 8003bf6 <cliSdram+0x2e>

  if (ret == false)
  {
    cliPrintf( "sdram test 1~100 \n");
  }
}
 8003bf0:	b002      	add	sp, #8
 8003bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pre_time = millis();
 8003bf6:	f7fd f8c7 	bl	8000d88 <millis>
        for (i=0; i<SDRAM_DEVICE_SIZE/4; i++)
 8003bfa:	2300      	movs	r3, #0
        pre_time = millis();
 8003bfc:	4680      	mov	r8, r0
          p_data[i] = i;
 8003bfe:	009a      	lsls	r2, r3, #2
 8003c00:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8003c04:	6013      	str	r3, [r2, #0]
        for (i=0; i<SDRAM_DEVICE_SIZE/4; i++)
 8003c06:	3301      	adds	r3, #1
 8003c08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c0c:	d1f7      	bne.n	8003bfe <cliSdram+0x36>
        cliPrintf( "Write : %d MB/s\n", SDRAM_DEVICE_SIZE / (millis()-pre_time) / 1000 );
 8003c0e:	f7fd f8bb 	bl	8000d88 <millis>
 8003c12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c16:	eba0 0008 	sub.w	r0, r0, r8
 8003c1a:	fbb1 f0f0 	udiv	r0, r1, r0
 8003c1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c22:	fbb0 f1f1 	udiv	r1, r0, r1
 8003c26:	4630      	mov	r0, r6
 8003c28:	f7fd fcba 	bl	80015a0 <cliPrintf>
        volatile uint32_t data_sum = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9301      	str	r3, [sp, #4]
        pre_time = millis();
 8003c30:	f7fd f8aa 	bl	8000d88 <millis>
 8003c34:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8003c38:	4680      	mov	r8, r0
          data_sum += p_data[i];
 8003c3a:	9a01      	ldr	r2, [sp, #4]
 8003c3c:	f853 1b04 	ldr.w	r1, [r3], #4
 8003c40:	440a      	add	r2, r1
        for (i=0; i<SDRAM_DEVICE_SIZE/4; i++)
 8003c42:	f1b3 4f42 	cmp.w	r3, #3254779904	; 0xc2000000
          data_sum += p_data[i];
 8003c46:	9201      	str	r2, [sp, #4]
        for (i=0; i<SDRAM_DEVICE_SIZE/4; i++)
 8003c48:	d1f7      	bne.n	8003c3a <cliSdram+0x72>
        cliPrintf( "Read  : %d MB/s\n", SDRAM_DEVICE_SIZE / 1000 / (millis()-pre_time) );
 8003c4a:	f7fd f89d 	bl	8000d88 <millis>
 8003c4e:	f248 3112 	movw	r1, #33554	; 0x8312
 8003c52:	eba0 0008 	sub.w	r0, r0, r8
 8003c56:	fbb1 f1f0 	udiv	r1, r1, r0
 8003c5a:	4638      	mov	r0, r7
 8003c5c:	f7fd fca0 	bl	80015a0 <cliPrintf>
        for (i=0; i<SDRAM_DEVICE_SIZE/4; i++)
 8003c60:	2100      	movs	r1, #0
          if (p_data[i] != i)
 8003c62:	008b      	lsls	r3, r1, #2
 8003c64:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	428a      	cmp	r2, r1
 8003c6c:	d00d      	beq.n	8003c8a <cliSdram+0xc2>
            cliPrintf( "%d : 0x%X fail\n", i, p_data[i]);
 8003c6e:	4816      	ldr	r0, [pc, #88]	; (8003cc8 <cliSdram+0x100>)
 8003c70:	f7fd fc96 	bl	80015a0 <cliPrintf>
        if (cliAvailable() > 0)
 8003c74:	3c01      	subs	r4, #1
 8003c76:	f7fd fc8d 	bl	8001594 <cliAvailable>
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	d0b7      	beq.n	8003bee <cliSdram+0x26>
          cliPrintf( "Stop test...\n");
 8003c7e:	4813      	ldr	r0, [pc, #76]	; (8003ccc <cliSdram+0x104>)
}
 8003c80:	b002      	add	sp, #8
 8003c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cliPrintf( "sdram test 1~100 \n");
 8003c86:	f7fd bc8b 	b.w	80015a0 <cliPrintf>
        for (i=0; i<SDRAM_DEVICE_SIZE/4; i++)
 8003c8a:	3101      	adds	r1, #1
 8003c8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003c90:	d1e7      	bne.n	8003c62 <cliSdram+0x9a>
          cliPrintf( "Count %d\n", number);
 8003c92:	4621      	mov	r1, r4
 8003c94:	4628      	mov	r0, r5
 8003c96:	f7fd fc83 	bl	80015a0 <cliPrintf>
          cliPrintf( "Sdram %d MB OK\n\n", SDRAM_DEVICE_SIZE/1024/1024);
 8003c9a:	2120      	movs	r1, #32
 8003c9c:	480c      	ldr	r0, [pc, #48]	; (8003cd0 <cliSdram+0x108>)
 8003c9e:	f7fd fc7f 	bl	80015a0 <cliPrintf>
 8003ca2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
            p_data[i] = 0x5555AAAA;
 8003ca6:	4a0b      	ldr	r2, [pc, #44]	; (8003cd4 <cliSdram+0x10c>)
 8003ca8:	f843 2b04 	str.w	r2, [r3], #4
          for (i=0; i<SDRAM_DEVICE_SIZE/4; i++)
 8003cac:	f1b3 4f42 	cmp.w	r3, #3254779904	; 0xc2000000
 8003cb0:	d1fa      	bne.n	8003ca8 <cliSdram+0xe0>
 8003cb2:	e7df      	b.n	8003c74 <cliSdram+0xac>
    cliPrintf( "sdram test 1~100 \n");
 8003cb4:	4808      	ldr	r0, [pc, #32]	; (8003cd8 <cliSdram+0x110>)
 8003cb6:	e7e3      	b.n	8003c80 <cliSdram+0xb8>
 8003cb8:	0800f7ca 	.word	0x0800f7ca
 8003cbc:	0800fc41 	.word	0x0800fc41
 8003cc0:	0800fc52 	.word	0x0800fc52
 8003cc4:	0800fc94 	.word	0x0800fc94
 8003cc8:	0800fc63 	.word	0x0800fc63
 8003ccc:	0800fc73 	.word	0x0800fc73
 8003cd0:	0800fc9e 	.word	0x0800fc9e
 8003cd4:	5555aaaa 	.word	0x5555aaaa
 8003cd8:	0800fc81 	.word	0x0800fc81

08003cdc <BSP_SDRAM_Initialization_sequence>:
{
 8003cdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003ce0:	4c21      	ldr	r4, [pc, #132]	; (8003d68 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003ce2:	2601      	movs	r6, #1
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003ce4:	4d21      	ldr	r5, [pc, #132]	; (8003d6c <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 8003ce6:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003cea:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003cec:	4621      	mov	r1, r4
{
 8003cee:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cf4:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8003cf6:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003cfa:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8003cfe:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d02:	f007 f9d3 	bl	800b0ac <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 8003d06:	4630      	mov	r0, r6
 8003d08:	f002 fd78 	bl	80067fc <HAL_Delay>
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003d0c:	2302      	movs	r3, #2
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d0e:	4621      	mov	r1, r4
 8003d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d14:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003d16:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8003d1a:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d1e:	f007 f9c5 	bl	800b0ac <HAL_SDRAM_SendCommand>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003d22:	2303      	movs	r3, #3
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d24:	4621      	mov	r1, r4
 8003d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d2a:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003d2c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8003d30:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8003d32:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d36:	f007 f9b9 	bl	800b0ac <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003d3a:	f44f 730c 	mov.w	r3, #560	; 0x230
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d3e:	4621      	mov	r1, r4
 8003d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003d44:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003d46:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d48:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8003d4a:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003d4c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8003d50:	9b01      	ldr	r3, [sp, #4]
 8003d52:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d54:	f007 f9aa 	bl	800b0ac <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8003d58:	4649      	mov	r1, r9
 8003d5a:	4628      	mov	r0, r5
}
 8003d5c:	b003      	add	sp, #12
 8003d5e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8003d62:	f007 b9c2 	b.w	800b0ea <HAL_SDRAM_ProgramRefreshRate>
 8003d66:	bf00      	nop
 8003d68:	24000aec 	.word	0x24000aec
 8003d6c:	24000b1c 	.word	0x24000b1c

08003d70 <BSP_SDRAM_MspInit>:
{
 8003d70:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d72:	4b59      	ldr	r3, [pc, #356]	; (8003ed8 <BSP_SDRAM_MspInit+0x168>)
{
 8003d74:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d76:	2600      	movs	r6, #0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003d78:	240c      	movs	r4, #12
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7a:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003d7c:	2503      	movs	r5, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7e:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d80:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d86:	4855      	ldr	r0, [pc, #340]	; (8003edc <BSP_SDRAM_MspInit+0x16c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d88:	f042 0210 	orr.w	r2, r2, #16
 8003d8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003d90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003d94:	f002 0210 	and.w	r2, r2, #16
 8003d98:	9200      	str	r2, [sp, #0]
 8003d9a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003da8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003dac:	f002 0201 	and.w	r2, r2, #1
 8003db0:	9201      	str	r2, [sp, #4]
 8003db2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003db4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003db8:	f042 0204 	orr.w	r2, r2, #4
 8003dbc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003dc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003dc4:	f002 0204 	and.w	r2, r2, #4
 8003dc8:	9202      	str	r2, [sp, #8]
 8003dca:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003dcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dd4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003dd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ddc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003de0:	9203      	str	r2, [sp, #12]
 8003de2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003de4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003de8:	f042 0208 	orr.w	r2, r2, #8
 8003dec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003df0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003df4:	f002 0208 	and.w	r2, r2, #8
 8003df8:	9204      	str	r2, [sp, #16]
 8003dfa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003dfc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e04:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e0c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003e10:	9205      	str	r2, [sp, #20]
 8003e12:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e18:	f042 0220 	orr.w	r2, r2, #32
 8003e1c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e24:	f002 0220 	and.w	r2, r2, #32
 8003e28:	9206      	str	r2, [sp, #24]
 8003e2a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e34:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e3c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003e40:	9207      	str	r2, [sp, #28]
 8003e42:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003e44:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003e48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e4c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003e50:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e58:	9308      	str	r3, [sp, #32]
 8003e5a:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5c:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e60:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e64:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e68:	f003 feac 	bl	8007bc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8003e6c:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e70:	a909      	add	r1, sp, #36	; 0x24
 8003e72:	481b      	ldr	r0, [pc, #108]	; (8003ee0 <BSP_SDRAM_MspInit+0x170>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e74:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e76:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e7a:	e9cd 650b 	strd	r6, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e7e:	f003 fea1 	bl	8007bc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8003e82:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e86:	a909      	add	r1, sp, #36	; 0x24
 8003e88:	4816      	ldr	r0, [pc, #88]	; (8003ee4 <BSP_SDRAM_MspInit+0x174>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e8a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8c:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e90:	e9cd 650b 	strd	r6, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e94:	f003 fe96 	bl	8007bc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8003e98:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e9c:	a909      	add	r1, sp, #36	; 0x24
 8003e9e:	4812      	ldr	r0, [pc, #72]	; (8003ee8 <BSP_SDRAM_MspInit+0x178>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ea0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea6:	e9cd 650b 	strd	r6, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003eaa:	f003 fe8b 	bl	8007bc4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eae:	a909      	add	r1, sp, #36	; 0x24
 8003eb0:	480e      	ldr	r0, [pc, #56]	; (8003eec <BSP_SDRAM_MspInit+0x17c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003eb2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb4:	e9cd 4709 	strd	r4, r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb8:	e9cd 650b 	strd	r6, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ebc:	f003 fe82 	bl	8007bc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003ec0:	2320      	movs	r3, #32
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003ec2:	a909      	add	r1, sp, #36	; 0x24
 8003ec4:	480a      	ldr	r0, [pc, #40]	; (8003ef0 <BSP_SDRAM_MspInit+0x180>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ec6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec8:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ecc:	e9cd 650b 	strd	r6, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003ed0:	f003 fe78 	bl	8007bc4 <HAL_GPIO_Init>
}
 8003ed4:	b00f      	add	sp, #60	; 0x3c
 8003ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed8:	58024400 	.word	0x58024400
 8003edc:	58021000 	.word	0x58021000
 8003ee0:	58021800 	.word	0x58021800
 8003ee4:	58020c00 	.word	0x58020c00
 8003ee8:	58021400 	.word	0x58021400
 8003eec:	58020800 	.word	0x58020800
 8003ef0:	58021c00 	.word	0x58021c00

08003ef4 <BSP_SDRAM_Init>:
{
 8003ef4:	b570      	push	{r4, r5, r6, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003ef6:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <BSP_SDRAM_Init+0x6c>)
  Timing.ExitSelfRefreshDelay = 9;  // 72ns / 8.33ns = 9
 8003ef8:	2209      	movs	r2, #9
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003efa:	4c1a      	ldr	r4, [pc, #104]	; (8003f64 <BSP_SDRAM_Init+0x70>)
  Timing.RowCycleDelay        = 8;  // 60ns / 8.33ns = 8
 8003efc:	2106      	movs	r1, #6
  Timing.LoadToActiveDelay    = 2;  // 2*tCK
 8003efe:	4d1a      	ldr	r5, [pc, #104]	; (8003f68 <BSP_SDRAM_Init+0x74>)
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003f00:	2010      	movs	r0, #16
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003f02:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 9;  // 72ns / 8.33ns = 9
 8003f04:	2302      	movs	r3, #2
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003f06:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8003f0a:	2601      	movs	r6, #1
  Timing.RCDDelay             = 2;  // 15ns / 8.33ns = 3;
 8003f0c:	61ab      	str	r3, [r5, #24]
  Timing.ExitSelfRefreshDelay = 9;  // 72ns / 8.33ns = 9
 8003f0e:	e9c5 3200 	strd	r3, r2, [r5]
  Timing.RPDelay              = 2;  // 15ns / 8.33ns = 3
 8003f12:	e9c5 3304 	strd	r3, r3, [r5, #16]
  Timing.RowCycleDelay        = 8;  // 60ns / 8.33ns = 8
 8003f16:	2208      	movs	r2, #8
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003f18:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 8;  // 60ns / 8.33ns = 8
 8003f1a:	e9c5 1202 	strd	r1, r2, [r5, #8]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003f1e:	e9c4 0304 	strd	r0, r3, [r4, #16]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8003f22:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8003f24:	f44f 73c0 	mov.w	r3, #384	; 0x180
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003f28:	4620      	mov	r0, r4
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_13;
 8003f2a:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003f2c:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003f2e:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8003f36:	e9c4 1601 	strd	r1, r6, [r4, #4]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003f3a:	e9c4 c308 	strd	ip, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003f3e:	f7ff ff17 	bl	8003d70 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003f42:	4620      	mov	r0, r4
 8003f44:	4629      	mov	r1, r5
 8003f46:	4c09      	ldr	r4, [pc, #36]	; (8003f6c <BSP_SDRAM_Init+0x78>)
 8003f48:	f007 f888 	bl	800b05c <HAL_SDRAM_Init>
 8003f4c:	b110      	cbz	r0, 8003f54 <BSP_SDRAM_Init+0x60>
    sdramstatus = SDRAM_ERROR;
 8003f4e:	7026      	strb	r6, [r4, #0]
}
 8003f50:	7820      	ldrb	r0, [r4, #0]
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
    BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003f54:	f240 6003 	movw	r0, #1539	; 0x603
 8003f58:	f7ff fec0 	bl	8003cdc <BSP_SDRAM_Initialization_sequence>
 8003f5c:	e7f8      	b.n	8003f50 <BSP_SDRAM_Init+0x5c>
 8003f5e:	bf00      	nop
 8003f60:	52004140 	.word	0x52004140
 8003f64:	24000b1c 	.word	0x24000b1c
 8003f68:	24000afc 	.word	0x24000afc
 8003f6c:	24000b50 	.word	0x24000b50

08003f70 <sdramInit>:
{
 8003f70:	b510      	push	{r4, lr}
  if (BSP_SDRAM_Init() != 0x00)
 8003f72:	f7ff ffbf 	bl	8003ef4 <BSP_SDRAM_Init>
 8003f76:	b960      	cbnz	r0, 8003f92 <sdramInit+0x22>
  bool ret = true;;
 8003f78:	2401      	movs	r4, #1
    logPrintf("SDRAM %dMB \t\t: OK\r\n", (int)(SDRAM_DEVICE_SIZE/1024/1024));
 8003f7a:	2120      	movs	r1, #32
 8003f7c:	4807      	ldr	r0, [pc, #28]	; (8003f9c <sdramInit+0x2c>)
 8003f7e:	f008 fa39 	bl	800c3f4 <iprintf>
  cliAdd("sdram", cliSdram);
 8003f82:	4907      	ldr	r1, [pc, #28]	; (8003fa0 <sdramInit+0x30>)
 8003f84:	4807      	ldr	r0, [pc, #28]	; (8003fa4 <sdramInit+0x34>)
 8003f86:	f7fd fda5 	bl	8001ad4 <cliAdd>
  is_init = ret;
 8003f8a:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <sdramInit+0x38>)
}
 8003f8c:	4620      	mov	r0, r4
  is_init = ret;
 8003f8e:	701c      	strb	r4, [r3, #0]
}
 8003f90:	bd10      	pop	{r4, pc}
    logPrintf("SDRAM  \t\t: Fail\r\n");
 8003f92:	4806      	ldr	r0, [pc, #24]	; (8003fac <sdramInit+0x3c>)
    ret = false;
 8003f94:	2400      	movs	r4, #0
    logPrintf("SDRAM  \t\t: Fail\r\n");
 8003f96:	f008 fab3 	bl	800c500 <puts>
 8003f9a:	e7f2      	b.n	8003f82 <sdramInit+0x12>
 8003f9c:	0800fcaf 	.word	0x0800fcaf
 8003fa0:	08003bc9 	.word	0x08003bc9
 8003fa4:	0800fcd4 	.word	0x0800fcd4
 8003fa8:	24000b18 	.word	0x24000b18
 8003fac:	0800fcc3 	.word	0x0800fcc3

08003fb0 <uartInit>:

bool uartInit(void)
{
  for (int i=0; i<UART_MAX_CH; i++)
  {
    uart_tbl[i].is_open = false;
 8003fb0:	4b03      	ldr	r3, [pc, #12]	; (8003fc0 <uartInit+0x10>)
 8003fb2:	2200      	movs	r2, #0
    uart_tbl[i].baud = 57600;
  }

  return true;
}
 8003fb4:	2001      	movs	r0, #1
    uart_tbl[i].is_open = false;
 8003fb6:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].baud = 57600;
 8003fb8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003fbc:	605a      	str	r2, [r3, #4]
}
 8003fbe:	4770      	bx	lr
 8003fc0:	38000000 	.word	0x38000000

08003fc4 <uartOpen>:
bool uartOpen(uint8_t ch, uint32_t baud)
{
  bool ret = false;


  switch(ch)
 8003fc4:	4603      	mov	r3, r0
{
 8003fc6:	b513      	push	{r0, r1, r4, lr}
  switch(ch)
 8003fc8:	b110      	cbz	r0, 8003fd0 <uartOpen+0xc>
  bool ret = false;
 8003fca:	2000      	movs	r0, #0
      }
      break;
  }

  return ret;
}
 8003fcc:	b002      	add	sp, #8
 8003fce:	bd10      	pop	{r4, pc}
      uart_tbl[ch].p_huart   = &huart4;
 8003fd0:	4c25      	ldr	r4, [pc, #148]	; (8004068 <uartOpen+0xa4>)
      uart_tbl[ch].p_hdma_rx = &hdma_uart4_rx;
 8003fd2:	4a26      	ldr	r2, [pc, #152]	; (800406c <uartOpen+0xa8>)
      uart_tbl[ch].p_huart   = &huart4;
 8003fd4:	4826      	ldr	r0, [pc, #152]	; (8004070 <uartOpen+0xac>)
      uart_tbl[ch].p_hdma_rx = &hdma_uart4_rx;
 8003fd6:	f8c4 2420 	str.w	r2, [r4, #1056]	; 0x420
      uart_tbl[ch].p_huart->Instance    = UART4;
 8003fda:	4a26      	ldr	r2, [pc, #152]	; (8004074 <uartOpen+0xb0>)
      uart_tbl[ch].p_huart->Init.Parity      = UART_PARITY_NONE;
 8003fdc:	6103      	str	r3, [r0, #16]
      uart_tbl[ch].p_huart   = &huart4;
 8003fde:	f8c4 041c 	str.w	r0, [r4, #1052]	; 0x41c
      uart_tbl[ch].p_huart->Init.BaudRate    = baud;
 8003fe2:	e9c0 2100 	strd	r2, r1, [r0]
      uart_tbl[ch].p_huart->Init.Mode        = UART_MODE_TX_RX;
 8003fe6:	220c      	movs	r2, #12
      uart_tbl[ch].p_huart->Init.StopBits    = UART_STOPBITS_1;
 8003fe8:	e9c0 3302 	strd	r3, r3, [r0, #8]
      uart_tbl[ch].p_huart->Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8003fec:	e9c0 2305 	strd	r2, r3, [r0, #20]
      uart_tbl[ch].p_huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ff0:	e9c0 3307 	strd	r3, r3, [r0, #28]
      uart_tbl[ch].p_huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ff4:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
      HAL_UART_DeInit(uart_tbl[ch].p_huart);
 8003ff8:	f007 f8a0 	bl	800b13c <HAL_UART_DeInit>
      qbufferCreate(&uart_tbl[ch].qbuffer, &uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH);
 8003ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004000:	f104 0108 	add.w	r1, r4, #8
 8004004:	f504 6081 	add.w	r0, r4, #1032	; 0x408
 8004008:	f7fd f919 	bl	800123e <qbufferCreate>
      __HAL_RCC_DMA1_CLK_ENABLE();
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <uartOpen+0xb4>)
      if (HAL_UART_Init(uart_tbl[ch].p_huart) != HAL_OK)
 800400e:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
      __HAL_RCC_DMA1_CLK_ENABLE();
 8004012:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800401e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	9301      	str	r3, [sp, #4]
 8004028:	9b01      	ldr	r3, [sp, #4]
      if (HAL_UART_Init(uart_tbl[ch].p_huart) != HAL_OK)
 800402a:	f007 fc43 	bl	800b8b4 <HAL_UART_Init>
 800402e:	2800      	cmp	r0, #0
 8004030:	d1cb      	bne.n	8003fca <uartOpen+0x6>
        uart_tbl[ch].is_open = true;
 8004032:	2301      	movs	r3, #1
 8004034:	4621      	mov	r1, r4
        if(HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH) != HAL_OK)
 8004036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800403a:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
        uart_tbl[ch].is_open = true;
 800403e:	f801 3b08 	strb.w	r3, [r1], #8
        if(HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH) != HAL_OK)
 8004042:	f007 f899 	bl	800b178 <HAL_UART_Receive_DMA>
        uart_tbl[ch].qbuffer.in  = uart_tbl[ch].qbuffer.len - ((DMA_Stream_TypeDef *)uart_tbl[ch].p_huart->hdmarx->Instance)->NDTR;
 8004046:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
        if(HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH) != HAL_OK)
 800404a:	fab0 f080 	clz	r0, r0
        uart_tbl[ch].qbuffer.in  = uart_tbl[ch].qbuffer.len - ((DMA_Stream_TypeDef *)uart_tbl[ch].p_huart->hdmarx->Instance)->NDTR;
 800404e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
        if(HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH) != HAL_OK)
 8004050:	0940      	lsrs	r0, r0, #5
        uart_tbl[ch].qbuffer.in  = uart_tbl[ch].qbuffer.len - ((DMA_Stream_TypeDef *)uart_tbl[ch].p_huart->hdmarx->Instance)->NDTR;
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
 8004060:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
 8004064:	e7b2      	b.n	8003fcc <uartOpen+0x8>
 8004066:	bf00      	nop
 8004068:	38000000 	.word	0x38000000
 800406c:	24000b54 	.word	0x24000b54
 8004070:	24000bcc 	.word	0x24000bcc
 8004074:	40004c00 	.word	0x40004c00
 8004078:	58024400 	.word	0x58024400

0800407c <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
 800407c:	b958      	cbnz	r0, 8004096 <uartAvailable+0x1a>
  {
    case _DEF_UART1:
      uart_tbl[ch].qbuffer.in = (uart_tbl[ch].qbuffer.len - ((DMA_Stream_TypeDef *)uart_tbl[ch].p_hdma_rx->Instance)->NDTR);
 800407e:	4807      	ldr	r0, [pc, #28]	; (800409c <uartAvailable+0x20>)
 8004080:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
      ret = qbufferAvailable(&uart_tbl[ch].qbuffer);
 8004084:	f500 6081 	add.w	r0, r0, #1032	; 0x408
      uart_tbl[ch].qbuffer.in = (uart_tbl[ch].qbuffer.len - ((DMA_Stream_TypeDef *)uart_tbl[ch].p_hdma_rx->Instance)->NDTR);
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	6883      	ldr	r3, [r0, #8]
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	6003      	str	r3, [r0, #0]
      ret = qbufferAvailable(&uart_tbl[ch].qbuffer);
 8004092:	f7fd b903 	b.w	800129c <qbufferAvailable>
      break;
  }

  return ret;
}
 8004096:	2000      	movs	r0, #0
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	38000000 	.word	0x38000000

080040a0 <uartRead>:
  return true;
}

uint8_t uartRead(uint8_t ch)
{
  uint8_t ret = 0;
 80040a0:	2300      	movs	r3, #0
{
 80040a2:	b507      	push	{r0, r1, r2, lr}
  uint8_t ret = 0;
 80040a4:	f88d 3007 	strb.w	r3, [sp, #7]

  switch(ch)
 80040a8:	b928      	cbnz	r0, 80040b6 <uartRead+0x16>
  {
    case _DEF_UART1:
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
 80040aa:	2201      	movs	r2, #1
 80040ac:	f10d 0107 	add.w	r1, sp, #7
 80040b0:	4803      	ldr	r0, [pc, #12]	; (80040c0 <uartRead+0x20>)
 80040b2:	f7fd f8cd 	bl	8001250 <qbufferRead>
      break;
  }

  return ret;
}
 80040b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80040ba:	b003      	add	sp, #12
 80040bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80040c0:	38000408 	.word	0x38000408

080040c4 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80040c4:	b510      	push	{r4, lr}
 80040c6:	4614      	mov	r4, r2
  uint32_t ret = 0;

  switch(ch)
 80040c8:	b110      	cbz	r0, 80040d0 <uartWrite+0xc>
  uint32_t ret = 0;
 80040ca:	2400      	movs	r4, #0
      }
      break;
  }

  return ret;
}
 80040cc:	4620      	mov	r0, r4
 80040ce:	bd10      	pop	{r4, pc}
      if (HAL_UART_Transmit(uart_tbl[ch].p_huart, p_data, length, 100) == HAL_OK)
 80040d0:	4804      	ldr	r0, [pc, #16]	; (80040e4 <uartWrite+0x20>)
 80040d2:	2364      	movs	r3, #100	; 0x64
 80040d4:	b292      	uxth	r2, r2
 80040d6:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 80040da:	f007 fb5a 	bl	800b792 <HAL_UART_Transmit>
 80040de:	2800      	cmp	r0, #0
 80040e0:	d1f3      	bne.n	80040ca <uartWrite+0x6>
 80040e2:	e7f3      	b.n	80040cc <uartWrite+0x8>
 80040e4:	38000000 	.word	0x38000000

080040e8 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 80040e8:	b40e      	push	{r1, r2, r3}
 80040ea:	b510      	push	{r4, lr}
 80040ec:	b0c3      	sub	sp, #268	; 0x10c
 80040ee:	4604      	mov	r4, r0
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
  len = vsnprintf(buf, 256, fmt, args);
 80040f0:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 80040f4:	ab45      	add	r3, sp, #276	; 0x114
  len = vsnprintf(buf, 256, fmt, args);
 80040f6:	a802      	add	r0, sp, #8
{
 80040f8:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(args, fmt);
 80040fc:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf, 256, fmt, args);
 80040fe:	f009 f90b 	bl	800d318 <vsniprintf>

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8004102:	a902      	add	r1, sp, #8
  len = vsnprintf(buf, 256, fmt, args);
 8004104:	4602      	mov	r2, r0
  ret = uartWrite(ch, (uint8_t *)buf, len);
 8004106:	4620      	mov	r0, r4
 8004108:	f7ff ffdc 	bl	80040c4 <uartWrite>

  va_end(args);


  return ret;
}
 800410c:	b043      	add	sp, #268	; 0x10c
 800410e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004112:	b003      	add	sp, #12
 8004114:	4770      	bx	lr

08004116 <HAL_UART_ErrorCallback>:
 8004116:	4770      	bx	lr

08004118 <HAL_UART_RxCpltCallback>:
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8004118:	4770      	bx	lr
	...

0800411c <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004122:	2214      	movs	r2, #20
 8004124:	2100      	movs	r1, #0
 8004126:	a803      	add	r0, sp, #12
 8004128:	f008 f87c 	bl	800c224 <memset>
  if(uartHandle->Instance==UART4)
 800412c:	6832      	ldr	r2, [r6, #0]
 800412e:	4b2b      	ldr	r3, [pc, #172]	; (80041dc <HAL_UART_MspInit+0xc0>)
 8004130:	429a      	cmp	r2, r3
 8004132:	d151      	bne.n	80041d8 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004134:	4b2a      	ldr	r3, [pc, #168]	; (80041e0 <HAL_UART_MspInit+0xc4>)
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004136:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004138:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800413a:	a903      	add	r1, sp, #12
    __HAL_RCC_UART4_CLK_ENABLE();
 800413c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004140:	4828      	ldr	r0, [pc, #160]	; (80041e4 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8004142:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004146:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800414a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800414e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8004152:	9200      	str	r2, [sp, #0]
 8004154:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004156:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800415a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800415e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004162:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004166:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800416a:	9201      	str	r2, [sp, #4]
 800416c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800416e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800417a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800417e:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	9302      	str	r3, [sp, #8]
 8004186:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800418c:	e9cd 3503 	strd	r3, r5, [sp, #12]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004190:	f003 fd18 	bl	8007bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004194:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004196:	4814      	ldr	r0, [pc, #80]	; (80041e8 <HAL_UART_MspInit+0xcc>)
 8004198:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800419a:	9407      	str	r4, [sp, #28]

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream0;
 800419c:	4c13      	ldr	r4, [pc, #76]	; (80041ec <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800419e:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a2:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a4:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a8:	f003 fd0c 	bl	8007bc4 <HAL_GPIO_Init>
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80041ac:	233f      	movs	r3, #63	; 0x3f
 80041ae:	4a10      	ldr	r2, [pc, #64]	; (80041f0 <HAL_UART_MspInit+0xd4>)
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80041b0:	4620      	mov	r0, r4
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80041b2:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041ba:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041be:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80041c2:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041c6:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80041ca:	f002 fd83 	bl	8006cd4 <HAL_DMA_Init>
 80041ce:	b108      	cbz	r0, 80041d4 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 80041d0:	f7fc fe70 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80041d4:	67b4      	str	r4, [r6, #120]	; 0x78
 80041d6:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80041d8:	b008      	add	sp, #32
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	40004c00 	.word	0x40004c00
 80041e0:	58024400 	.word	0x58024400
 80041e4:	58022000 	.word	0x58022000
 80041e8:	58020000 	.word	0x58020000
 80041ec:	24000b54 	.word	0x24000b54
 80041f0:	40020010 	.word	0x40020010

080041f4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==UART4)
 80041f4:	6802      	ldr	r2, [r0, #0]
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <HAL_UART_MspDeInit+0x38>)
 80041f8:	429a      	cmp	r2, r3
{
 80041fa:	b510      	push	{r4, lr}
 80041fc:	4604      	mov	r4, r0
  if(uartHandle->Instance==UART4)
 80041fe:	d114      	bne.n	800422a <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8004200:	4a0b      	ldr	r2, [pc, #44]	; (8004230 <HAL_UART_MspDeInit+0x3c>)

    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0     ------> UART4_TX
    */
    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_9);
 8004202:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004206:	480b      	ldr	r0, [pc, #44]	; (8004234 <HAL_UART_MspDeInit+0x40>)
    __HAL_RCC_UART4_CLK_DISABLE();
 8004208:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800420c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004210:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_9);
 8004214:	f003 fdc0 	bl	8007d98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 8004218:	4807      	ldr	r0, [pc, #28]	; (8004238 <HAL_UART_MspDeInit+0x44>)
 800421a:	2101      	movs	r1, #1
 800421c:	f003 fdbc 	bl	8007d98 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004220:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
}
 8004222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004226:	f002 bf17 	b.w	8007058 <HAL_DMA_DeInit>
}
 800422a:	bd10      	pop	{r4, pc}
 800422c:	40004c00 	.word	0x40004c00
 8004230:	58024400 	.word	0x58024400
 8004234:	58022000 	.word	0x58022000
 8004238:	58020000 	.word	0x58020000

0800423c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800423c:	b510      	push	{r4, lr}
  Stat = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	4c05      	ldr	r4, [pc, #20]	; (8004258 <SD_initialize+0x1c>)
 8004242:	7023      	strb	r3, [r4, #0]

  if (sdIsInit() != true)
 8004244:	f7ff fa7e 	bl	8003744 <sdIsInit>
 8004248:	b918      	cbnz	r0, 8004252 <SD_initialize+0x16>
  {
    Stat |= STA_NOINIT;
 800424a:	7823      	ldrb	r3, [r4, #0]
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	7023      	strb	r3, [r4, #0]
  }

  return Stat;
 8004252:	7820      	ldrb	r0, [r4, #0]
}
 8004254:	bd10      	pop	{r4, pc}
 8004256:	bf00      	nop
 8004258:	24000029 	.word	0x24000029

0800425c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800425c:	b508      	push	{r3, lr}
 800425e:	4610      	mov	r0, r2
 8004260:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8004262:	f242 7310 	movw	r3, #10000	; 0x2710
 8004266:	f7ff fb4f 	bl	8003908 <sdReadBlocks>
 800426a:	f080 0001 	eor.w	r0, r0, #1
  {
    res = RES_OK;
  }

  return res;
}
 800426e:	b2c0      	uxtb	r0, r0
 8004270:	bd08      	pop	{r3, pc}

08004272 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004272:	b508      	push	{r3, lr}
 8004274:	4610      	mov	r0, r2
 8004276:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 8004278:	f242 7310 	movw	r3, #10000	; 0x2710
 800427c:	f7ff fc06 	bl	8003a8c <sdWriteBlocks>
 8004280:	f080 0001 	eor.w	r0, r0, #1
  {
    res = RES_OK;
  }

  return res;
}
 8004284:	b2c0      	uxtb	r0, r0
 8004286:	bd08      	pop	{r3, pc}

08004288 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004288:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <SD_ioctl+0x50>)
{
 800428a:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800428c:	781c      	ldrb	r4, [r3, #0]
{
 800428e:	b08b      	sub	sp, #44	; 0x2c
 8004290:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004292:	f014 0401 	ands.w	r4, r4, #1
 8004296:	d11b      	bne.n	80042d0 <SD_ioctl+0x48>

  switch (cmd)
 8004298:	2903      	cmp	r1, #3
 800429a:	d803      	bhi.n	80042a4 <SD_ioctl+0x1c>
 800429c:	e8df f001 	tbb	[pc, r1]
 80042a0:	120c061a 	.word	0x120c061a
 80042a4:	2404      	movs	r4, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
 80042a6:	4620      	mov	r0, r4
 80042a8:	b00b      	add	sp, #44	; 0x2c
 80042aa:	bd30      	pop	{r4, r5, pc}
    sdGetInfo(&sd_info);
 80042ac:	a801      	add	r0, sp, #4
 80042ae:	f7ff fae7 	bl	8003880 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 80042b2:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 80042b4:	602b      	str	r3, [r5, #0]
    break;
 80042b6:	e7f6      	b.n	80042a6 <SD_ioctl+0x1e>
    sdGetInfo(&sd_info);
 80042b8:	a801      	add	r0, sp, #4
 80042ba:	f7ff fae1 	bl	8003880 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 80042be:	9b08      	ldr	r3, [sp, #32]
 80042c0:	802b      	strh	r3, [r5, #0]
    break;
 80042c2:	e7f0      	b.n	80042a6 <SD_ioctl+0x1e>
    sdGetInfo(&sd_info);
 80042c4:	a801      	add	r0, sp, #4
 80042c6:	f7ff fadb 	bl	8003880 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 80042ca:	9b08      	ldr	r3, [sp, #32]
 80042cc:	0a5b      	lsrs	r3, r3, #9
 80042ce:	e7f1      	b.n	80042b4 <SD_ioctl+0x2c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80042d0:	2403      	movs	r4, #3
 80042d2:	e7e8      	b.n	80042a6 <SD_ioctl+0x1e>
    res = RES_OK;
 80042d4:	460c      	mov	r4, r1
 80042d6:	e7e6      	b.n	80042a6 <SD_ioctl+0x1e>
 80042d8:	24000029 	.word	0x24000029

080042dc <SD_status>:
{
 80042dc:	b510      	push	{r4, lr}
  Stat = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	4c0c      	ldr	r4, [pc, #48]	; (8004314 <SD_status+0x38>)
 80042e2:	7023      	strb	r3, [r4, #0]
  if (sdIsInit() != true)
 80042e4:	f7ff fa2e 	bl	8003744 <sdIsInit>
 80042e8:	b918      	cbnz	r0, 80042f2 <SD_status+0x16>
    Stat |= STA_NOINIT;
 80042ea:	7823      	ldrb	r3, [r4, #0]
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	7023      	strb	r3, [r4, #0]
  if (sdIsDetected() != true)
 80042f2:	f7ff fa2d 	bl	8003750 <sdIsDetected>
 80042f6:	b918      	cbnz	r0, 8004300 <SD_status+0x24>
    Stat |= STA_NODISK;
 80042f8:	7823      	ldrb	r3, [r4, #0]
 80042fa:	f043 0302 	orr.w	r3, r3, #2
 80042fe:	7023      	strb	r3, [r4, #0]
  if (sdIsReady(10) != true)
 8004300:	200a      	movs	r0, #10
 8004302:	f7ff faef 	bl	80038e4 <sdIsReady>
 8004306:	b918      	cbnz	r0, 8004310 <SD_status+0x34>
    Stat |= STA_NOINIT;
 8004308:	7823      	ldrb	r3, [r4, #0]
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	7023      	strb	r3, [r4, #0]
  return Stat;
 8004310:	7820      	ldrb	r0, [r4, #0]
}
 8004312:	bd10      	pop	{r4, pc}
 8004314:	24000029 	.word	0x24000029

08004318 <PHan_CnvCodeWan2Johab>:
  U16 hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
  lcode = WanCode & 0x0ff;

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8004318:	f3c0 2307 	ubfx	r3, r0, #8, #8
  lcode = WanCode & 0x0ff;
 800431c:	b2c0      	uxtb	r0, r0

  return wWanToJohabTable[index];
 800431e:	225e      	movs	r2, #94	; 0x5e
  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8004320:	3bb0      	subs	r3, #176	; 0xb0
 8004322:	38a1      	subs	r0, #161	; 0xa1
  return wWanToJohabTable[index];
 8004324:	fb02 0003 	mla	r0, r2, r3, r0
}
 8004328:	4b01      	ldr	r3, [pc, #4]	; (8004330 <PHan_CnvCodeWan2Johab+0x18>)
 800432a:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 800432e:	4770      	bx	lr
 8004330:	08013140 	.word	0x08013140

08004334 <PHan_HanFontLoad>:
//
//          WORK  : 
//
//----------------------------------------------------------------------------
void PHan_HanFontLoad( char *HanCode, PHAN_FONT_OBJ *FontPtr )   /* 한글 일반 폰트 생성 */
{
 8004334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004338:	8800      	ldrh	r0, [r0, #0]

  wHanCode = (U16)HanCode[0]<<8  | ((U16)HanCode[1] & 0x00FF);
  
  //printf("%x %x %x\n", HanCode[0], HanCode[1], HanCode[2] );

  wHanCode = PHan_CnvCodeWan2Johab(wHanCode);
 800433a:	bac0      	revsh	r0, r0
 800433c:	f7ff ffec 	bl	8004318 <PHan_CnvCodeWan2Johab>
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
  uJongsung  = wHanCode & 0x001F;    //Jongsung code

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8004340:	4a2b      	ldr	r2, [pc, #172]	; (80043f0 <PHan_HanFontLoad+0xbc>)
 8004342:	f3c0 2384 	ubfx	r3, r0, #10, #5
 8004346:	5cd4      	ldrb	r4, [r2, r3]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8004348:	f000 031f 	and.w	r3, r0, #31
 800434c:	4a29      	ldr	r2, [pc, #164]	; (80043f4 <PHan_HanFontLoad+0xc0>)
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 800434e:	f3c0 1044 	ubfx	r0, r0, #5, #5
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8004352:	5cd5      	ldrb	r5, [r2, r3]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8004354:	4b28      	ldr	r3, [pc, #160]	; (80043f8 <PHan_HanFontLoad+0xc4>)
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8004356:	462e      	mov	r6, r5
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8004358:	5c1b      	ldrb	r3, [r3, r0]
 800435a:	2d00      	cmp	r5, #0
 800435c:	d043      	beq.n	80043e6 <PHan_HanFontLoad+0xb2>
 800435e:	4a27      	ldr	r2, [pc, #156]	; (80043fc <PHan_HanFontLoad+0xc8>)
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8004360:	2c01      	cmp	r4, #1
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8004362:	5cd2      	ldrb	r2, [r2, r3]
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8004364:	d941      	bls.n	80043ea <PHan_HanFontLoad+0xb6>
 8004366:	f1b4 0e10 	subs.w	lr, r4, #16
 800436a:	bf18      	it	ne
 800436c:	f04f 0e01 	movne.w	lr, #1
 8004370:	2e00      	cmp	r6, #0
  uJonType = JonType[uJoongsung];
 8004372:	4823      	ldr	r0, [pc, #140]	; (8004400 <PHan_HanFontLoad+0xcc>)
 8004374:	f06f 091f 	mvn.w	r9, #31
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8004378:	bf14      	ite	ne
 800437a:	f04f 0802 	movne.w	r8, #2
 800437e:	f04f 0800 	moveq.w	r8, #0
  uJonType = JonType[uJoongsung];
 8004382:	5cc7      	ldrb	r7, [r0, r3]

  for(i = 0; i<32; i++)
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8004384:	2014      	movs	r0, #20
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8004386:	44c6      	add	lr, r8
 8004388:	f04f 0816 	mov.w	r8, #22
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 800438c:	fb12 4200 	smlabb	r2, r2, r0, r4
 8004390:	1d88      	adds	r0, r1, #6
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8004392:	fb08 330e 	mla	r3, r8, lr, r3
 8004396:	4c1b      	ldr	r4, [pc, #108]	; (8004404 <PHan_HanFontLoad+0xd0>)
 8004398:	3126      	adds	r1, #38	; 0x26
 800439a:	4686      	mov	lr, r0
 800439c:	015b      	lsls	r3, r3, #5
 800439e:	eb04 1c42 	add.w	ip, r4, r2, lsl #5
 80043a2:	fb09 f202 	mul.w	r2, r9, r2
 80043a6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80043aa:	331f      	adds	r3, #31
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 80043ac:	f81c 8b01 	ldrb.w	r8, [ip], #1
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 80043b0:	eb02 090c 	add.w	r9, r2, ip
 80043b4:	f819 9003 	ldrb.w	r9, [r9, r3]
 80043b8:	ea48 0809 	orr.w	r8, r8, r9
 80043bc:	f80e 8b01 	strb.w	r8, [lr], #1
  for(i = 0; i<32; i++)
 80043c0:	4571      	cmp	r1, lr
 80043c2:	d1f3      	bne.n	80043ac <PHan_HanFontLoad+0x78>
  }

  //combine Jongsung
  if(uJongsung)
 80043c4:	b16e      	cbz	r6, 80043e2 <PHan_HanFontLoad+0xae>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 80043c6:	231c      	movs	r3, #28
 80043c8:	fb03 5307 	mla	r3, r3, r7, r5
 80043cc:	33f8      	adds	r3, #248	; 0xf8
 80043ce:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 80043d2:	7802      	ldrb	r2, [r0, #0]
 80043d4:	f813 4b01 	ldrb.w	r4, [r3], #1
 80043d8:	4322      	orrs	r2, r4
 80043da:	f800 2b01 	strb.w	r2, [r0], #1
 80043de:	4288      	cmp	r0, r1
 80043e0:	d1f7      	bne.n	80043d2 <PHan_HanFontLoad+0x9e>
  }
}
 80043e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 80043e6:	4a08      	ldr	r2, [pc, #32]	; (8004408 <PHan_HanFontLoad+0xd4>)
 80043e8:	e7ba      	b.n	8004360 <PHan_HanFontLoad+0x2c>
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 80043ea:	f04f 0e00 	mov.w	lr, #0
 80043ee:	e7bf      	b.n	8004370 <PHan_HanFontLoad+0x3c>
 80043f0:	0800fcf0 	.word	0x0800fcf0
 80043f4:	0800fd3c 	.word	0x0800fd3c
 80043f8:	0800fd72 	.word	0x0800fd72
 80043fc:	0800fd26 	.word	0x0800fd26
 8004400:	0800fd5c 	.word	0x0800fd5c
 8004404:	0800fdc0 	.word	0x0800fdc0
 8004408:	0800fd10 	.word	0x0800fd10

0800440c <PHan_UniFontLoad>:
//
//          WORK  : 
//
//----------------------------------------------------------------------------
void PHan_UniFontLoad( char *HanCode, PHAN_FONT_OBJ *FontPtr )   /* 한글 일반 폰트 생성 */
{
 800440c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  static U16 uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  
  

  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8004410:	7883      	ldrb	r3, [r0, #2]
  

  //seperate phoneme code
  utf16 -= 0xac00;
  uJongsung  = utf16 % 28;
  utf16 /= 28;
 8004412:	251c      	movs	r5, #28
  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8004414:	7802      	ldrb	r2, [r0, #0]
  uJoongsung = utf16 % 21;
  uChosung   = utf16 / 21;
 8004416:	2715      	movs	r7, #21
  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8004418:	f003 033f 	and.w	r3, r3, #63	; 0x3f


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 800441c:	4e32      	ldr	r6, [pc, #200]	; (80044e8 <PHan_UniFontLoad+0xdc>)
  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 800441e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004422:	7842      	ldrb	r2, [r0, #1]
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8004424:	4831      	ldr	r0, [pc, #196]	; (80044ec <PHan_UniFontLoad+0xe0>)
  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8004426:	0192      	lsls	r2, r2, #6
 8004428:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
 800442c:	4313      	orrs	r3, r2
  utf16 -= 0xac00;
 800442e:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8004432:	b21b      	sxth	r3, r3
  utf16 /= 28;
 8004434:	fb93 f2f5 	sdiv	r2, r3, r5
  uChosung   = utf16 / 21;
 8004438:	fb92 f4f7 	sdiv	r4, r2, r7
  uJongsung  = utf16 % 28;
 800443c:	fb05 3312 	mls	r3, r5, r2, r3
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8004440:	5d00      	ldrb	r0, [r0, r4]
  uJoongsung = utf16 % 21;
 8004442:	fb07 2214 	mls	r2, r7, r4, r2
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8004446:	b21b      	sxth	r3, r3
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8004448:	b212      	sxth	r2, r2
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 800444a:	5cf5      	ldrb	r5, [r6, r3]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 800444c:	4b28      	ldr	r3, [pc, #160]	; (80044f0 <PHan_UniFontLoad+0xe4>)
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 800444e:	462e      	mov	r6, r5
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8004450:	5c9b      	ldrb	r3, [r3, r2]
 8004452:	2d00      	cmp	r5, #0
 8004454:	d043      	beq.n	80044de <PHan_UniFontLoad+0xd2>
 8004456:	4a27      	ldr	r2, [pc, #156]	; (80044f4 <PHan_UniFontLoad+0xe8>)
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8004458:	2801      	cmp	r0, #1
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 800445a:	5cd2      	ldrb	r2, [r2, r3]
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 800445c:	d941      	bls.n	80044e2 <PHan_UniFontLoad+0xd6>
 800445e:	f1b0 0710 	subs.w	r7, r0, #16
 8004462:	bf18      	it	ne
 8004464:	2701      	movne	r7, #1
 8004466:	2e00      	cmp	r6, #0
  uJonType = JonType[uJoongsung];
 8004468:	4c23      	ldr	r4, [pc, #140]	; (80044f8 <PHan_UniFontLoad+0xec>)
 800446a:	f06f 091f 	mvn.w	r9, #31
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 800446e:	bf14      	ite	ne
 8004470:	f04f 0802 	movne.w	r8, #2
 8004474:	f04f 0800 	moveq.w	r8, #0
  uJonType = JonType[uJoongsung];
 8004478:	f814 c003 	ldrb.w	ip, [r4, r3]

  for(i = 0; i<32; i++)
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 800447c:	2414      	movs	r4, #20
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 800447e:	4447      	add	r7, r8
 8004480:	f04f 0816 	mov.w	r8, #22
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 8004484:	fb12 0204 	smlabb	r2, r2, r4, r0
 8004488:	1d88      	adds	r0, r1, #6
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 800448a:	fb08 3307 	mla	r3, r8, r7, r3
 800448e:	4c1b      	ldr	r4, [pc, #108]	; (80044fc <PHan_UniFontLoad+0xf0>)
 8004490:	3126      	adds	r1, #38	; 0x26
 8004492:	4607      	mov	r7, r0
 8004494:	015b      	lsls	r3, r3, #5
 8004496:	eb04 1e42 	add.w	lr, r4, r2, lsl #5
 800449a:	fb09 f202 	mul.w	r2, r9, r2
 800449e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80044a2:	331f      	adds	r3, #31
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 80044a4:	f81e 8b01 	ldrb.w	r8, [lr], #1
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 80044a8:	eb02 090e 	add.w	r9, r2, lr
 80044ac:	f819 9003 	ldrb.w	r9, [r9, r3]
 80044b0:	ea48 0809 	orr.w	r8, r8, r9
 80044b4:	f807 8b01 	strb.w	r8, [r7], #1
  for(i = 0; i<32; i++)
 80044b8:	428f      	cmp	r7, r1
 80044ba:	d1f3      	bne.n	80044a4 <PHan_UniFontLoad+0x98>
  }

  //combine Jongsung
  if(uJongsung)
 80044bc:	b16e      	cbz	r6, 80044da <PHan_UniFontLoad+0xce>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 80044be:	231c      	movs	r3, #28
 80044c0:	fb03 530c 	mla	r3, r3, ip, r5
 80044c4:	33f8      	adds	r3, #248	; 0xf8
 80044c6:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 80044ca:	7802      	ldrb	r2, [r0, #0]
 80044cc:	f813 4b01 	ldrb.w	r4, [r3], #1
 80044d0:	4322      	orrs	r2, r4
 80044d2:	f800 2b01 	strb.w	r2, [r0], #1
 80044d6:	4288      	cmp	r0, r1
 80044d8:	d1f7      	bne.n	80044ca <PHan_UniFontLoad+0xbe>
  }
}
 80044da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 80044de:	4a08      	ldr	r2, [pc, #32]	; (8004500 <PHan_UniFontLoad+0xf4>)
 80044e0:	e7ba      	b.n	8004458 <PHan_UniFontLoad+0x4c>
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 80044e2:	2700      	movs	r7, #0
 80044e4:	e7bf      	b.n	8004466 <PHan_UniFontLoad+0x5a>
 80044e6:	bf00      	nop
 80044e8:	08012ae0 	.word	0x08012ae0
 80044ec:	08012ac0 	.word	0x08012ac0
 80044f0:	08012b00 	.word	0x08012b00
 80044f4:	0800fd26 	.word	0x0800fd26
 80044f8:	0800fd5c 	.word	0x0800fd5c
 80044fc:	0800fdc0 	.word	0x0800fdc0
 8004500:	0800fd10 	.word	0x0800fd10

08004504 <PHan_EngFontLoad>:
void PHan_EngFontLoad( char *HanCode, PHAN_FONT_OBJ *FontPtr ) 
{
  U16 i;
  char EngCode;

  EngCode = *HanCode;
 8004504:	7803      	ldrb	r3, [r0, #0]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.

  for ( i = 0 ; i < 16 ; i++ )
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 8004506:	3106      	adds	r1, #6
  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8004508:	3b20      	subs	r3, #32
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 800450a:	b2da      	uxtb	r2, r3
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <PHan_EngFontLoad+0x20>)
 800450e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004512:	f103 0210 	add.w	r2, r3, #16
 8004516:	f853 0b04 	ldr.w	r0, [r3], #4
 800451a:	4293      	cmp	r3, r2
 800451c:	f841 0b04 	str.w	r0, [r1], #4
 8004520:	d1f9      	bne.n	8004516 <PHan_EngFontLoad+0x12>
  }
}
 8004522:	4770      	bx	lr
 8004524:	08012b20 	.word	0x08012b20

08004528 <PHan_FontLoad>:
{
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	460d      	mov	r5, r1
 800452c:	4606      	mov	r6, r0
  memset(FontPtr->FontBuffer, 0x00, 32);
 800452e:	2220      	movs	r2, #32
 8004530:	2100      	movs	r1, #0
 8004532:	1da8      	adds	r0, r5, #6
 8004534:	f007 fe76 	bl	800c224 <memset>
  FontPtr->Code_Type = PHAN_NULL_CODE;  
 8004538:	2300      	movs	r3, #0
 800453a:	80ab      	strh	r3, [r5, #4]
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 800453c:	7833      	ldrb	r3, [r6, #0]
 800453e:	b10b      	cbz	r3, 8004544 <PHan_FontLoad+0x1c>
 8004540:	2b0a      	cmp	r3, #10
 8004542:	d105      	bne.n	8004550 <PHan_FontLoad+0x28>
    FontPtr->Code_Type = PHAN_END_CODE;
 8004544:	2404      	movs	r4, #4
    FontPtr->Size_Char = 1;
 8004546:	2301      	movs	r3, #1
    FontPtr->Code_Type = PHAN_END_CODE;
 8004548:	80ac      	strh	r4, [r5, #4]
    FontPtr->Size_Char = 1;
 800454a:	806b      	strh	r3, [r5, #2]
}
 800454c:	4620      	mov	r0, r4
 800454e:	bd70      	pop	{r4, r5, r6, pc}
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우 
 8004550:	061a      	lsls	r2, r3, #24
 8004552:	d51a      	bpl.n	800458a <PHan_FontLoad+0x62>
    char_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 8004554:	7872      	ldrb	r2, [r6, #1]
 8004556:	041b      	lsls	r3, r3, #16
 8004558:	2401      	movs	r4, #1
 800455a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800455e:	78b2      	ldrb	r2, [r6, #2]
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8004560:	80ac      	strh	r4, [r5, #4]
    char_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 8004562:	4313      	orrs	r3, r2
    if (char_code >= 0xEAB080 && char_code <= 0xED9FB0)
 8004564:	4a0d      	ldr	r2, [pc, #52]	; (800459c <PHan_FontLoad+0x74>)
 8004566:	441a      	add	r2, r3
 8004568:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <PHan_FontLoad+0x78>)
 800456a:	429a      	cmp	r2, r3
 800456c:	d806      	bhi.n	800457c <PHan_FontLoad+0x54>
      FontPtr->Size_Char = 3;
 800456e:	2303      	movs	r3, #3
      PHan_UniFontLoad( HanCode, FontPtr );
 8004570:	4629      	mov	r1, r5
 8004572:	4630      	mov	r0, r6
      FontPtr->Size_Char = 3;
 8004574:	806b      	strh	r3, [r5, #2]
      PHan_UniFontLoad( HanCode, FontPtr );
 8004576:	f7ff ff49 	bl	800440c <PHan_UniFontLoad>
 800457a:	e7e7      	b.n	800454c <PHan_FontLoad+0x24>
      FontPtr->Size_Char = 2;
 800457c:	2302      	movs	r3, #2
      PHan_HanFontLoad( HanCode, FontPtr );
 800457e:	4629      	mov	r1, r5
 8004580:	4630      	mov	r0, r6
      FontPtr->Size_Char = 2;
 8004582:	806b      	strh	r3, [r5, #2]
      PHan_HanFontLoad( HanCode, FontPtr );
 8004584:	f7ff fed6 	bl	8004334 <PHan_HanFontLoad>
 8004588:	e7e0      	b.n	800454c <PHan_FontLoad+0x24>
    FontPtr->Code_Type = PHAN_ENG_CODE;
 800458a:	2402      	movs	r4, #2
    FontPtr->Size_Char = 1;
 800458c:	2301      	movs	r3, #1
    PHan_EngFontLoad( HanCode, FontPtr );
 800458e:	4629      	mov	r1, r5
 8004590:	4630      	mov	r0, r6
    FontPtr->Code_Type = PHAN_ENG_CODE;
 8004592:	80ac      	strh	r4, [r5, #4]
    FontPtr->Size_Char = 1;
 8004594:	806b      	strh	r3, [r5, #2]
    PHan_EngFontLoad( HanCode, FontPtr );
 8004596:	f7ff ffb5 	bl	8004504 <PHan_EngFontLoad>
    return PHAN_ENG_CODE;
 800459a:	e7d7      	b.n	800454c <PHan_FontLoad+0x24>
 800459c:	ff154f80 	.word	0xff154f80
 80045a0:	0002ef30 	.word	0x0002ef30

080045a4 <hwInit>:




void hwInit(void)
{
 80045a4:	b508      	push	{r3, lr}
  bspInit();
 80045a6:	f7fc fcc5 	bl	8000f34 <bspInit>

  cliInit();
 80045aa:	f7fd fab3 	bl	8001b14 <cliInit>
  ledInit();
 80045ae:	f7fe fa29 	bl	8002a04 <ledInit>
  uartInit();
 80045b2:	f7ff fcfd 	bl	8003fb0 <uartInit>
  uartOpen(_DEF_UART1, 57600);
 80045b6:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80045ba:	2000      	movs	r0, #0
 80045bc:	f7ff fd02 	bl	8003fc4 <uartOpen>

  logPrintf("\n\n");
 80045c0:	480f      	ldr	r0, [pc, #60]	; (8004600 <hwInit+0x5c>)
 80045c2:	f007 ff9d 	bl	800c500 <puts>
  logPrintf("[ Firmware Begin... ]\r\n");
 80045c6:	480f      	ldr	r0, [pc, #60]	; (8004604 <hwInit+0x60>)
 80045c8:	f007 ff9a 	bl	800c500 <puts>
  logPrintf("Booting..Clock\t\t: %d Mhz\r\n", (int)HAL_RCC_GetSysClockFreq()/1000000);
 80045cc:	f004 fb7e 	bl	8008ccc <HAL_RCC_GetSysClockFreq>
 80045d0:	490d      	ldr	r1, [pc, #52]	; (8004608 <hwInit+0x64>)
 80045d2:	fb90 f1f1 	sdiv	r1, r0, r1
 80045d6:	480d      	ldr	r0, [pc, #52]	; (800460c <hwInit+0x68>)
 80045d8:	f007 ff0c 	bl	800c3f4 <iprintf>

  gpioInit();
 80045dc:	f7fd fe04 	bl	80021e8 <gpioInit>
  buttonInit();
 80045e0:	f7fc fe9e 	bl	8001320 <buttonInit>

  sdramInit();
 80045e4:	f7ff fcc4 	bl	8003f70 <sdramInit>
  qspiInit();
 80045e8:	f7fe feda 	bl	80033a0 <qspiInit>
  flashInit();
 80045ec:	f7fd fbf8 	bl	8001de0 <flashInit>

  sdInit();
 80045f0:	f7ff f8b8 	bl	8003764 <sdInit>
  fatfsInit();
 80045f4:	f7fd fac4 	bl	8001b80 <fatfsInit>


  lcdInit();
}
 80045f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  lcdInit();
 80045fc:	f7fd bef6 	b.w	80023ec <lcdInit>
 8004600:	0800fcad 	.word	0x0800fcad
 8004604:	0801439c 	.word	0x0801439c
 8004608:	000f4240 	.word	0x000f4240
 800460c:	080143b3 	.word	0x080143b3

08004610 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <disk_status+0x10>)
 8004612:	181a      	adds	r2, r3, r0
 8004614:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	7b10      	ldrb	r0, [r2, #12]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4718      	bx	r3
 8004620:	24000c84 	.word	0x24000c84

08004624 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <disk_initialize+0x1c>)
 8004626:	5c1a      	ldrb	r2, [r3, r0]
 8004628:	b942      	cbnz	r2, 800463c <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800462a:	2201      	movs	r2, #1
 800462c:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800462e:	181a      	adds	r2, r3, r0
 8004630:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004634:	7b10      	ldrb	r0, [r2, #12]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4718      	bx	r3
  }
  return stat;
}
 800463c:	2000      	movs	r0, #0
 800463e:	4770      	bx	lr
 8004640:	24000c84 	.word	0x24000c84

08004644 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004644:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004646:	4c05      	ldr	r4, [pc, #20]	; (800465c <disk_read+0x18>)
 8004648:	1825      	adds	r5, r4, r0
 800464a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800464e:	6860      	ldr	r0, [r4, #4]
 8004650:	6884      	ldr	r4, [r0, #8]
 8004652:	7b28      	ldrb	r0, [r5, #12]
 8004654:	46a4      	mov	ip, r4
  return res;
}
 8004656:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004658:	4760      	bx	ip
 800465a:	bf00      	nop
 800465c:	24000c84 	.word	0x24000c84

08004660 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004660:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004662:	4c05      	ldr	r4, [pc, #20]	; (8004678 <disk_write+0x18>)
 8004664:	1825      	adds	r5, r4, r0
 8004666:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800466a:	6860      	ldr	r0, [r4, #4]
 800466c:	68c4      	ldr	r4, [r0, #12]
 800466e:	7b28      	ldrb	r0, [r5, #12]
 8004670:	46a4      	mov	ip, r4
  return res;
}
 8004672:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004674:	4760      	bx	ip
 8004676:	bf00      	nop
 8004678:	24000c84 	.word	0x24000c84

0800467c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <disk_ioctl+0x18>)
{
 800467e:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004680:	181c      	adds	r4, r3, r0
 8004682:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	7b20      	ldrb	r0, [r4, #12]
 800468a:	691b      	ldr	r3, [r3, #16]
  return res;
}
 800468c:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004690:	4718      	bx	r3
 8004692:	bf00      	nop
 8004694:	24000c84 	.word	0x24000c84

08004698 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8004698:	2000      	movs	r0, #0
 800469a:	4770      	bx	lr

0800469c <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 800469c:	6800      	ldr	r0, [r0, #0]
 800469e:	4770      	bx	lr

080046a0 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80046a0:	0a0b      	lsrs	r3, r1, #8
 80046a2:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80046a4:	7043      	strb	r3, [r0, #1]
 80046a6:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80046a8:	0e09      	lsrs	r1, r1, #24
 80046aa:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80046ac:	70c1      	strb	r1, [r0, #3]
}
 80046ae:	4770      	bx	lr

080046b0 <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 80046b0:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 80046b2:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 80046b6:	4290      	cmp	r0, r2
 80046b8:	d1fb      	bne.n	80046b2 <mem_set+0x2>
}
 80046ba:	4770      	bx	lr

080046bc <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 80046bc:	4a1b      	ldr	r2, [pc, #108]	; (800472c <chk_lock+0x70>)
 80046be:	6813      	ldr	r3, [r2, #0]
{
 80046c0:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 80046c2:	b163      	cbz	r3, 80046de <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80046c4:	6804      	ldr	r4, [r0, #0]
 80046c6:	429c      	cmp	r4, r3
 80046c8:	d107      	bne.n	80046da <chk_lock+0x1e>
 80046ca:	6854      	ldr	r4, [r2, #4]
 80046cc:	6883      	ldr	r3, [r0, #8]
 80046ce:	429c      	cmp	r4, r3
 80046d0:	d103      	bne.n	80046da <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 80046d2:	6894      	ldr	r4, [r2, #8]
 80046d4:	6943      	ldr	r3, [r0, #20]
 80046d6:	429c      	cmp	r4, r3
 80046d8:	d020      	beq.n	800471c <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80046da:	2400      	movs	r4, #0
 80046dc:	e000      	b.n	80046e0 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 80046de:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 80046e0:	6913      	ldr	r3, [r2, #16]
 80046e2:	b1cb      	cbz	r3, 8004718 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80046e4:	6805      	ldr	r5, [r0, #0]
 80046e6:	42ab      	cmp	r3, r5
 80046e8:	d107      	bne.n	80046fa <chk_lock+0x3e>
 80046ea:	6955      	ldr	r5, [r2, #20]
 80046ec:	6883      	ldr	r3, [r0, #8]
 80046ee:	429d      	cmp	r5, r3
 80046f0:	d103      	bne.n	80046fa <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 80046f2:	6995      	ldr	r5, [r2, #24]
 80046f4:	6943      	ldr	r3, [r0, #20]
 80046f6:	429d      	cmp	r5, r3
 80046f8:	d015      	beq.n	8004726 <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80046fa:	b96c      	cbnz	r4, 8004718 <chk_lock+0x5c>
 80046fc:	2902      	cmp	r1, #2
 80046fe:	bf0c      	ite	eq
 8004700:	2000      	moveq	r0, #0
 8004702:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8004704:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004706:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800470a:	899b      	ldrh	r3, [r3, #12]
 800470c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004710:	bf14      	ite	ne
 8004712:	2000      	movne	r0, #0
 8004714:	2010      	moveq	r0, #16
 8004716:	e7f5      	b.n	8004704 <chk_lock+0x48>
 8004718:	2000      	movs	r0, #0
 800471a:	e7f3      	b.n	8004704 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800471c:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800471e:	2900      	cmp	r1, #0
 8004720:	d0f1      	beq.n	8004706 <chk_lock+0x4a>
 8004722:	2010      	movs	r0, #16
 8004724:	e7ee      	b.n	8004704 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004726:	2301      	movs	r3, #1
 8004728:	e7f9      	b.n	800471e <chk_lock+0x62>
 800472a:	bf00      	nop
 800472c:	24000c60 	.word	0x24000c60

08004730 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8004730:	4a1f      	ldr	r2, [pc, #124]	; (80047b0 <inc_lock+0x80>)
{
 8004732:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8004734:	6813      	ldr	r3, [r2, #0]
 8004736:	6806      	ldr	r6, [r0, #0]
 8004738:	429e      	cmp	r6, r3
 800473a:	d107      	bne.n	800474c <inc_lock+0x1c>
 800473c:	6855      	ldr	r5, [r2, #4]
 800473e:	6884      	ldr	r4, [r0, #8]
 8004740:	42a5      	cmp	r5, r4
 8004742:	d103      	bne.n	800474c <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 8004744:	6945      	ldr	r5, [r0, #20]
 8004746:	6894      	ldr	r4, [r2, #8]
 8004748:	42a5      	cmp	r5, r4
 800474a:	d022      	beq.n	8004792 <inc_lock+0x62>
		if (Files[i].fs == dp->obj.fs &&
 800474c:	6914      	ldr	r4, [r2, #16]
 800474e:	42b4      	cmp	r4, r6
 8004750:	d107      	bne.n	8004762 <inc_lock+0x32>
 8004752:	6957      	ldr	r7, [r2, #20]
 8004754:	6885      	ldr	r5, [r0, #8]
 8004756:	42af      	cmp	r7, r5
 8004758:	d103      	bne.n	8004762 <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 800475a:	6997      	ldr	r7, [r2, #24]
 800475c:	6945      	ldr	r5, [r0, #20]
 800475e:	42af      	cmp	r7, r5
 8004760:	d021      	beq.n	80047a6 <inc_lock+0x76>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004762:	b10b      	cbz	r3, 8004768 <inc_lock+0x38>
 8004764:	bb0c      	cbnz	r4, 80047aa <inc_lock+0x7a>
 8004766:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8004768:	011d      	lsls	r5, r3, #4
 800476a:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 800476e:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 8004770:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8004772:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 8004774:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 8004776:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8004778:	2000      	movs	r0, #0
 800477a:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800477c:	b981      	cbnz	r1, 80047a0 <inc_lock+0x70>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800477e:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8004782:	8989      	ldrh	r1, [r1, #12]
 8004784:	3101      	adds	r1, #1
 8004786:	b289      	uxth	r1, r1
 8004788:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 800478c:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800478e:	8191      	strh	r1, [r2, #12]
}
 8004790:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004792:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004794:	2900      	cmp	r1, #0
 8004796:	d0f2      	beq.n	800477e <inc_lock+0x4e>
 8004798:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 800479c:	8989      	ldrh	r1, [r1, #12]
 800479e:	b921      	cbnz	r1, 80047aa <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80047a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047a4:	e7f0      	b.n	8004788 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80047a6:	2301      	movs	r3, #1
 80047a8:	e7f4      	b.n	8004794 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80047aa:	2000      	movs	r0, #0
 80047ac:	e7f0      	b.n	8004790 <inc_lock+0x60>
 80047ae:	bf00      	nop
 80047b0:	24000c60 	.word	0x24000c60

080047b4 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80047b4:	3801      	subs	r0, #1
 80047b6:	2801      	cmp	r0, #1
 80047b8:	d815      	bhi.n	80047e6 <dec_lock+0x32>
		n = Files[i].ctr;
 80047ba:	4a0c      	ldr	r2, [pc, #48]	; (80047ec <dec_lock+0x38>)
 80047bc:	0101      	lsls	r1, r0, #4
 80047be:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80047c2:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80047c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c8:	d104      	bne.n	80047d4 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 80047ca:	2300      	movs	r3, #0
 80047cc:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80047ce:	2000      	movs	r0, #0
 80047d0:	5050      	str	r0, [r2, r1]
 80047d2:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0fa      	beq.n	80047ce <dec_lock+0x1a>
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 80047dc:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f5      	beq.n	80047ce <dec_lock+0x1a>
		res = FR_OK;
 80047e2:	2000      	movs	r0, #0
 80047e4:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80047e6:	2002      	movs	r0, #2
	}
	return res;
}
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	24000c60 	.word	0x24000c60

080047f0 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <clear_lock+0x18>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	4290      	cmp	r0, r2
 80047f6:	bf04      	itt	eq
 80047f8:	2200      	moveq	r2, #0
 80047fa:	601a      	streq	r2, [r3, #0]
 80047fc:	691a      	ldr	r2, [r3, #16]
 80047fe:	4290      	cmp	r0, r2
 8004800:	bf04      	itt	eq
 8004802:	2200      	moveq	r2, #0
 8004804:	611a      	streq	r2, [r3, #16]
	}
}
 8004806:	4770      	bx	lr
 8004808:	24000c60 	.word	0x24000c60

0800480c <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800480c:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 800480e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004810:	3b02      	subs	r3, #2
 8004812:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8004814:	bf83      	ittte	hi
 8004816:	8943      	ldrhhi	r3, [r0, #10]
 8004818:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 800481a:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800481e:	2000      	movls	r0, #0
}
 8004820:	4770      	bx	lr

08004822 <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004822:	6802      	ldr	r2, [r0, #0]
 8004824:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004826:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004828:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800482a:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800482c:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004830:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004832:	b130      	cbz	r0, 8004842 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8004834:	4281      	cmp	r1, r0
 8004836:	d302      	bcc.n	800483e <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8004838:	1a09      	subs	r1, r1, r0
 800483a:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800483c:	e7f8      	b.n	8004830 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800483e:	6858      	ldr	r0, [r3, #4]
 8004840:	4408      	add	r0, r1
}
 8004842:	4770      	bx	lr

08004844 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8004844:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004848:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800484a:	76cb      	strb	r3, [r1, #27]
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
 800484c:	7803      	ldrb	r3, [r0, #0]
 800484e:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004850:	bf01      	itttt	eq
 8004852:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004854:	750a      	strbeq	r2, [r1, #20]
 8004856:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8004858:	754a      	strbeq	r2, [r1, #21]
	}
}
 800485a:	4770      	bx	lr

0800485c <sum_sfn>:
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
	BYTE sum = 0;
	UINT n = 11;
 800485c:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8004860:	2200      	movs	r2, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004862:	01d3      	lsls	r3, r2, #7
 8004864:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8004868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800486c:	fa52 f383 	uxtab	r3, r2, r3
	} while (--n);
 8004870:	4288      	cmp	r0, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004872:	b2da      	uxtb	r2, r3
	} while (--n);
 8004874:	d1f5      	bne.n	8004862 <sum_sfn+0x6>
	return sum;
}
 8004876:	4610      	mov	r0, r2
 8004878:	4770      	bx	lr

0800487a <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800487a:	6803      	ldr	r3, [r0, #0]
{
 800487c:	4601      	mov	r1, r0
 800487e:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8004880:	b153      	cbz	r3, 8004898 <get_ldnumber+0x1e>
 8004882:	4618      	mov	r0, r3
 8004884:	4602      	mov	r2, r0
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004886:	f810 4b01 	ldrb.w	r4, [r0], #1
 800488a:	2c1f      	cmp	r4, #31
 800488c:	d910      	bls.n	80048b0 <get_ldnumber+0x36>
 800488e:	2c3a      	cmp	r4, #58	; 0x3a
 8004890:	d1f8      	bne.n	8004884 <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8004892:	1c58      	adds	r0, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004894:	4282      	cmp	r2, r0
 8004896:	d002      	beq.n	800489e <get_ldnumber+0x24>
	int vol = -1;
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	e007      	b.n	80048ae <get_ldnumber+0x34>
			i = *tp++ - '0';
 800489e:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80048a0:	3b30      	subs	r3, #48	; 0x30
 80048a2:	b2d8      	uxtb	r0, r3
 80048a4:	2801      	cmp	r0, #1
 80048a6:	d8f7      	bhi.n	8004898 <get_ldnumber+0x1e>
					vol = (int)i;
					*path = ++tt;
 80048a8:	3201      	adds	r2, #1
			i = *tp++ - '0';
 80048aa:	4618      	mov	r0, r3
					*path = ++tt;
 80048ac:	600a      	str	r2, [r1, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 80048ae:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
 80048b0:	2000      	movs	r0, #0
 80048b2:	e7fc      	b.n	80048ae <get_ldnumber+0x34>

080048b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80048b8:	4604      	mov	r4, r0
 80048ba:	b918      	cbnz	r0, 80048c4 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 80048bc:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80048be:	2300      	movs	r3, #0
 80048c0:	602b      	str	r3, [r5, #0]
	return res;
}
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80048c4:	6803      	ldr	r3, [r0, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f8      	beq.n	80048bc <validate+0x8>
 80048ca:	781a      	ldrb	r2, [r3, #0]
 80048cc:	2a00      	cmp	r2, #0
 80048ce:	d0f5      	beq.n	80048bc <validate+0x8>
 80048d0:	8881      	ldrh	r1, [r0, #4]
 80048d2:	88da      	ldrh	r2, [r3, #6]
 80048d4:	4291      	cmp	r1, r2
 80048d6:	d1f1      	bne.n	80048bc <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80048d8:	7858      	ldrb	r0, [r3, #1]
 80048da:	f7ff fe99 	bl	8004610 <disk_status>
 80048de:	f010 0001 	ands.w	r0, r0, #1
 80048e2:	d1eb      	bne.n	80048bc <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	e7eb      	b.n	80048c0 <validate+0xc>

080048e8 <get_fileinfo>:
{
 80048e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
 80048ec:	2500      	movs	r5, #0
	FATFS *fs = dp->obj.fs;
 80048ee:	f8d0 8000 	ldr.w	r8, [r0]
{
 80048f2:	4606      	mov	r6, r0
 80048f4:	460c      	mov	r4, r1
	fno->fname[0] = 0;		/* Invaidate file info */
 80048f6:	758d      	strb	r5, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80048f8:	69c3      	ldr	r3, [r0, #28]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d059      	beq.n	80049b2 <get_fileinfo+0xca>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80048fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004900:	3301      	adds	r3, #1
 8004902:	d00a      	beq.n	800491a <get_fileinfo+0x32>
 8004904:	f101 0716 	add.w	r7, r1, #22
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8004908:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800490c:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8004910:	2800      	cmp	r0, #0
 8004912:	d150      	bne.n	80049b6 <get_fileinfo+0xce>
			fno->fname[i] = 0;	/* Terminate the LFN */
 8004914:	4425      	add	r5, r4
 8004916:	2300      	movs	r3, #0
 8004918:	75ab      	strb	r3, [r5, #22]
		c = (TCHAR)dp->dir[i++];
 800491a:	6a31      	ldr	r1, [r6, #32]
	i = j = 0;
 800491c:	2300      	movs	r3, #0
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800491e:	7da5      	ldrb	r5, [r4, #22]
			fno->altname[j++] = '.';
 8004920:	272e      	movs	r7, #46	; 0x2e
 8004922:	1e4e      	subs	r6, r1, #1
	i = j = 0;
 8004924:	4618      	mov	r0, r3
		c = (TCHAR)dp->dir[i++];
 8004926:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 800492a:	3001      	adds	r0, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800492c:	2a20      	cmp	r2, #32
 800492e:	d026      	beq.n	800497e <get_fileinfo+0x96>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8004930:	2a05      	cmp	r2, #5
 8004932:	bf08      	it	eq
 8004934:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 8004936:	2809      	cmp	r0, #9
 8004938:	d107      	bne.n	800494a <get_fileinfo+0x62>
			if (!lfv) fno->fname[j] = '.';
 800493a:	eb04 0c03 	add.w	ip, r4, r3
 800493e:	b90d      	cbnz	r5, 8004944 <get_fileinfo+0x5c>
 8004940:	f88c 7016 	strb.w	r7, [ip, #22]
			fno->altname[j++] = '.';
 8004944:	3301      	adds	r3, #1
 8004946:	f88c 7009 	strb.w	r7, [ip, #9]
		fno->altname[j] = c;
 800494a:	eb04 0c03 	add.w	ip, r4, r3
 800494e:	f88c 2009 	strb.w	r2, [ip, #9]
		if (!lfv) {
 8004952:	b99d      	cbnz	r5, 800497c <get_fileinfo+0x94>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8004954:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 8004958:	f1be 0f19 	cmp.w	lr, #25
 800495c:	d80c      	bhi.n	8004978 <get_fileinfo+0x90>
 800495e:	2808      	cmp	r0, #8
 8004960:	f891 800c 	ldrb.w	r8, [r1, #12]
 8004964:	bf8c      	ite	hi
 8004966:	f04f 0e10 	movhi.w	lr, #16
 800496a:	f04f 0e08 	movls.w	lr, #8
 800496e:	ea18 0f0e 	tst.w	r8, lr
				c += 0x20;			/* To lower */
 8004972:	bf1c      	itt	ne
 8004974:	3220      	addne	r2, #32
 8004976:	b2d2      	uxtbne	r2, r2
			fno->fname[j] = c;
 8004978:	f88c 2016 	strb.w	r2, [ip, #22]
		j++;
 800497c:	3301      	adds	r3, #1
	while (i < 11) {		/* Copy name body and extension */
 800497e:	280b      	cmp	r0, #11
 8004980:	d1d1      	bne.n	8004926 <get_fileinfo+0x3e>
	if (!lfv) {
 8004982:	b92d      	cbnz	r5, 8004990 <get_fileinfo+0xa8>
		fno->fname[j] = 0;
 8004984:	18e2      	adds	r2, r4, r3
 8004986:	7595      	strb	r5, [r2, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8004988:	7b0a      	ldrb	r2, [r1, #12]
 800498a:	2a00      	cmp	r2, #0
 800498c:	bf08      	it	eq
 800498e:	2300      	moveq	r3, #0
	fno->altname[j] = 0;	/* Terminate the SFN */
 8004990:	4423      	add	r3, r4
 8004992:	2200      	movs	r2, #0
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8004994:	f101 001c 	add.w	r0, r1, #28
	fno->altname[j] = 0;	/* Terminate the SFN */
 8004998:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800499a:	7acb      	ldrb	r3, [r1, #11]
 800499c:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800499e:	f7ff fe7d 	bl	800469c <ld_dword>
 80049a2:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80049a4:	f101 0016 	add.w	r0, r1, #22
 80049a8:	f7ff fe78 	bl	800469c <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80049ac:	80e0      	strh	r0, [r4, #6]
 80049ae:	0c00      	lsrs	r0, r0, #16
 80049b0:	80a0      	strh	r0, [r4, #4]
}
 80049b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80049b6:	2100      	movs	r1, #0
 80049b8:	f001 fe5a 	bl	8006670 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80049bc:	b130      	cbz	r0, 80049cc <get_fileinfo+0xe4>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80049be:	3501      	adds	r5, #1
 80049c0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80049c4:	d002      	beq.n	80049cc <get_fileinfo+0xe4>
				fno->fname[i++] = (TCHAR)w;
 80049c6:	f807 0b01 	strb.w	r0, [r7], #1
 80049ca:	e79d      	b.n	8004908 <get_fileinfo+0x20>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80049cc:	2500      	movs	r5, #0
 80049ce:	e7a1      	b.n	8004914 <get_fileinfo+0x2c>

080049d0 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80049d0:	3801      	subs	r0, #1
 80049d2:	440a      	add	r2, r1
			*d++ = *s++;
 80049d4:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 80049d8:	4291      	cmp	r1, r2
			*d++ = *s++;
 80049da:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 80049de:	d1f9      	bne.n	80049d4 <mem_cpy.part.0+0x4>
}
 80049e0:	4770      	bx	lr

080049e2 <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80049e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 80049e6:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80049e8:	f100 0834 	add.w	r8, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80049ec:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80049ee:	2301      	movs	r3, #1
 80049f0:	4632      	mov	r2, r6
 80049f2:	4641      	mov	r1, r8
 80049f4:	7840      	ldrb	r0, [r0, #1]
 80049f6:	f7ff fe33 	bl	8004660 <disk_write>
 80049fa:	4605      	mov	r5, r0
 80049fc:	b9a8      	cbnz	r0, 8004a2a <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80049fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a00:	69e2      	ldr	r2, [r4, #28]
 8004a02:	1af3      	subs	r3, r6, r3
			fs->wflag = 0;
 8004a04:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d202      	bcs.n	8004a10 <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a0a:	78a7      	ldrb	r7, [r4, #2]
 8004a0c:	2f01      	cmp	r7, #1
 8004a0e:	d802      	bhi.n	8004a16 <sync_window.part.0+0x34>
}
 8004a10:	4628      	mov	r0, r5
 8004a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
 8004a16:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004a18:	4641      	mov	r1, r8
 8004a1a:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a1c:	3f01      	subs	r7, #1
					wsect += fs->fsize;
 8004a1e:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8004a20:	2301      	movs	r3, #1
 8004a22:	4632      	mov	r2, r6
 8004a24:	f7ff fe1c 	bl	8004660 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a28:	e7f0      	b.n	8004a0c <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
 8004a2a:	2501      	movs	r5, #1
 8004a2c:	e7f0      	b.n	8004a10 <sync_window.part.0+0x2e>

08004a2e <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004a2e:	78c3      	ldrb	r3, [r0, #3]
 8004a30:	b10b      	cbz	r3, 8004a36 <sync_window+0x8>
 8004a32:	f7ff bfd6 	b.w	80049e2 <sync_window.part.0>
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	4770      	bx	lr

08004a3a <move_window>:
{
 8004a3a:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004a3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 8004a3e:	4605      	mov	r5, r0
 8004a40:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004a42:	428b      	cmp	r3, r1
 8004a44:	d010      	beq.n	8004a68 <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 8004a46:	f7ff fff2 	bl	8004a2e <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004a4a:	b960      	cbnz	r0, 8004a66 <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004a4c:	4622      	mov	r2, r4
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8004a54:	7868      	ldrb	r0, [r5, #1]
 8004a56:	f7ff fdf5 	bl	8004644 <disk_read>
				res = FR_DISK_ERR;
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	bf1c      	itt	ne
 8004a5e:	f04f 34ff 	movne.w	r4, #4294967295
 8004a62:	2001      	movne	r0, #1
			fs->winsect = sector;
 8004a64:	632c      	str	r4, [r5, #48]	; 0x30
}
 8004a66:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8004a68:	2000      	movs	r0, #0
 8004a6a:	e7fc      	b.n	8004a66 <move_window+0x2c>

08004a6c <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004a6c:	2300      	movs	r3, #0
{
 8004a6e:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004a70:	70c3      	strb	r3, [r0, #3]
 8004a72:	f04f 33ff 	mov.w	r3, #4294967295
{
 8004a76:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004a78:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004a7a:	f7ff ffde 	bl	8004a3a <move_window>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	bb18      	cbnz	r0, 8004aca <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004a82:	f8b4 1232 	ldrh.w	r1, [r4, #562]	; 0x232
 8004a86:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004a8a:	4291      	cmp	r1, r2
 8004a8c:	d11f      	bne.n	8004ace <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004a8e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8004a92:	2ae9      	cmp	r2, #233	; 0xe9
 8004a94:	d005      	beq.n	8004aa2 <check_fs+0x36>
 8004a96:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004a98:	490f      	ldr	r1, [pc, #60]	; (8004ad8 <check_fs+0x6c>)
 8004a9a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8004a9e:	428a      	cmp	r2, r1
 8004aa0:	d117      	bne.n	8004ad2 <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004aa2:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 8004aa6:	4a0d      	ldr	r2, [pc, #52]	; (8004adc <check_fs+0x70>)
 8004aa8:	f7ff fdf8 	bl	800469c <ld_dword>
 8004aac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004ab0:	4290      	cmp	r0, r2
 8004ab2:	d008      	beq.n	8004ac6 <check_fs+0x5a>
	return 2;
 8004ab4:	f102 524c 	add.w	r2, r2, #855638016	; 0x33000000
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004ab8:	f104 0086 	add.w	r0, r4, #134	; 0x86
 8004abc:	f7ff fdee 	bl	800469c <ld_dword>
	return 2;
 8004ac0:	4290      	cmp	r0, r2
 8004ac2:	bf18      	it	ne
 8004ac4:	2302      	movne	r3, #2
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004aca:	2304      	movs	r3, #4
 8004acc:	e7fb      	b.n	8004ac6 <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e7f9      	b.n	8004ac6 <check_fs+0x5a>
	return 2;
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e7f7      	b.n	8004ac6 <check_fs+0x5a>
 8004ad6:	bf00      	nop
 8004ad8:	009000eb 	.word	0x009000eb
 8004adc:	00544146 	.word	0x00544146

08004ae0 <find_volume>:
{
 8004ae0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8004ae4:	2300      	movs	r3, #0
{
 8004ae6:	460f      	mov	r7, r1
 8004ae8:	4615      	mov	r5, r2
	*rfs = 0;
 8004aea:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8004aec:	f7ff fec5 	bl	800487a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004af0:	1e06      	subs	r6, r0, #0
 8004af2:	f2c0 8113 	blt.w	8004d1c <find_volume+0x23c>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004af6:	4b8c      	ldr	r3, [pc, #560]	; (8004d28 <find_volume+0x248>)
 8004af8:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004afc:	2c00      	cmp	r4, #0
 8004afe:	f000 810f 	beq.w	8004d20 <find_volume+0x240>
	*rfs = fs;							/* Return pointer to the file system object */
 8004b02:	603c      	str	r4, [r7, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004b04:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004b08:	7823      	ldrb	r3, [r4, #0]
 8004b0a:	b16b      	cbz	r3, 8004b28 <find_volume+0x48>
		stat = disk_status(fs->drv);
 8004b0c:	7860      	ldrb	r0, [r4, #1]
 8004b0e:	f7ff fd7f 	bl	8004610 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004b12:	07c1      	lsls	r1, r0, #31
 8004b14:	d408      	bmi.n	8004b28 <find_volume+0x48>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004b16:	b11d      	cbz	r5, 8004b20 <find_volume+0x40>
 8004b18:	f010 0504 	ands.w	r5, r0, #4
 8004b1c:	d000      	beq.n	8004b20 <find_volume+0x40>
				return FR_WRITE_PROTECTED;
 8004b1e:	250a      	movs	r5, #10
}
 8004b20:	4628      	mov	r0, r5
 8004b22:	b004      	add	sp, #16
 8004b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8004b28:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004b2a:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8004b2c:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004b2e:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004b30:	f7ff fd78 	bl	8004624 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004b34:	07c2      	lsls	r2, r0, #31
 8004b36:	f100 80f5 	bmi.w	8004d24 <find_volume+0x244>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004b3a:	b10d      	cbz	r5, 8004b40 <find_volume+0x60>
 8004b3c:	0743      	lsls	r3, r0, #29
 8004b3e:	d4ee      	bmi.n	8004b1e <find_volume+0x3e>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004b40:	2100      	movs	r1, #0
 8004b42:	4620      	mov	r0, r4
 8004b44:	f7ff ff92 	bl	8004a6c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004b48:	2802      	cmp	r0, #2
 8004b4a:	f040 80cc 	bne.w	8004ce6 <find_volume+0x206>
 8004b4e:	466f      	mov	r7, sp
 8004b50:	f504 73fd 	add.w	r3, r4, #506	; 0x1fa
 8004b54:	f204 213a 	addw	r1, r4, #570	; 0x23a
 8004b58:	463a      	mov	r2, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004b5a:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 8004b5e:	b110      	cbz	r0, 8004b66 <find_volume+0x86>
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff fd9b 	bl	800469c <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004b66:	3310      	adds	r3, #16
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004b68:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004b6c:	428b      	cmp	r3, r1
 8004b6e:	d1f4      	bne.n	8004b5a <find_volume+0x7a>
 8004b70:	2500      	movs	r5, #0
			bsect = br[i];
 8004b72:	f857 6b04 	ldr.w	r6, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004b76:	2e00      	cmp	r6, #0
 8004b78:	f000 80ac 	beq.w	8004cd4 <find_volume+0x1f4>
 8004b7c:	4631      	mov	r1, r6
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f7ff ff74 	bl	8004a6c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004b84:	2801      	cmp	r0, #1
 8004b86:	f200 80a6 	bhi.w	8004cd6 <find_volume+0x1f6>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004b8a:	f8b4 303f 	ldrh.w	r3, [r4, #63]	; 0x3f
 8004b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b92:	f040 80ac 	bne.w	8004cee <find_volume+0x20e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004b96:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004b9a:	b921      	cbnz	r1, 8004ba6 <find_volume+0xc6>
 8004b9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ba0:	f7ff fd7c 	bl	800469c <ld_dword>
 8004ba4:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004ba6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
		fs->fsize = fasize;
 8004baa:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004bac:	1e5a      	subs	r2, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004bae:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004bb0:	2a01      	cmp	r2, #1
 8004bb2:	f200 809c 	bhi.w	8004cee <find_volume+0x20e>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004bb6:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8004bba:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004bbc:	2d00      	cmp	r5, #0
 8004bbe:	f000 8096 	beq.w	8004cee <find_volume+0x20e>
 8004bc2:	1e6a      	subs	r2, r5, #1
 8004bc4:	422a      	tst	r2, r5
 8004bc6:	f040 8092 	bne.w	8004cee <find_volume+0x20e>
	rv = ptr[1];
 8004bca:	f8b4 8045 	ldrh.w	r8, [r4, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004bce:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004bd2:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004bd6:	f040 808a 	bne.w	8004cee <find_volume+0x20e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004bda:	f8b4 0047 	ldrh.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004bde:	b918      	cbnz	r0, 8004be8 <find_volume+0x108>
 8004be0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8004be4:	f7ff fd5a 	bl	800469c <ld_dword>
	rv = ptr[1];
 8004be8:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004bec:	2f00      	cmp	r7, #0
 8004bee:	d07e      	beq.n	8004cee <find_volume+0x20e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004bf0:	fb01 fe03 	mul.w	lr, r1, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004bf4:	eb07 1c18 	add.w	ip, r7, r8, lsr #4
 8004bf8:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004bfa:	4560      	cmp	r0, ip
 8004bfc:	d377      	bcc.n	8004cee <find_volume+0x20e>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004bfe:	eba0 020c 	sub.w	r2, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004c02:	42aa      	cmp	r2, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004c04:	fbb2 f3f5 	udiv	r3, r2, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004c08:	d371      	bcc.n	8004cee <find_volume+0x20e>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004c0a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d871      	bhi.n	8004cf6 <find_volume+0x216>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004c12:	f640 75f5 	movw	r5, #4085	; 0xff5
 8004c16:	42ab      	cmp	r3, r5
 8004c18:	bf8c      	ite	hi
 8004c1a:	2502      	movhi	r5, #2
 8004c1c:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004c1e:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004c20:	4437      	add	r7, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8004c22:	eb0c 0206 	add.w	r2, ip, r6
		if (fmt == FS_FAT32) {
 8004c26:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004c28:	61a3      	str	r3, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8004c2a:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004c2c:	6267      	str	r7, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8004c2e:	62e2      	str	r2, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8004c30:	d163      	bne.n	8004cfa <find_volume+0x21a>
	rv = rv << 8 | ptr[0];
 8004c32:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004c36:	ea52 0208 	orrs.w	r2, r2, r8
 8004c3a:	d158      	bne.n	8004cee <find_volume+0x20e>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004c3c:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004c3e:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8004c42:	f7ff fd2b 	bl	800469c <ld_dword>
 8004c46:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004c48:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004c4c:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 8004c50:	d34d      	bcc.n	8004cee <find_volume+0x20e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004c52:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004c56:	2d03      	cmp	r5, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004c58:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 8004c5c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004c60:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004c62:	d12b      	bne.n	8004cbc <find_volume+0x1dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004c64:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d127      	bne.n	8004cbc <find_volume+0x1dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004c6c:	1c71      	adds	r1, r6, #1
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f7ff fee3 	bl	8004a3a <move_window>
 8004c74:	bb10      	cbnz	r0, 8004cbc <find_volume+0x1dc>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004c76:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 8004c7a:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
 8004c7e:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d11b      	bne.n	8004cbc <find_volume+0x1dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004c84:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <find_volume+0x24c>)
 8004c86:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8004c8a:	f7ff fd07 	bl	800469c <ld_dword>
 8004c8e:	4298      	cmp	r0, r3
 8004c90:	d114      	bne.n	8004cbc <find_volume+0x1dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004c92:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8004c96:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8004c9a:	f7ff fcff 	bl	800469c <ld_dword>
 8004c9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004ca2:	3320      	adds	r3, #32
 8004ca4:	4298      	cmp	r0, r3
 8004ca6:	d109      	bne.n	8004cbc <find_volume+0x1dc>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004ca8:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8004cac:	f7ff fcf6 	bl	800469c <ld_dword>
 8004cb0:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004cb2:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8004cb6:	f7ff fcf1 	bl	800469c <ld_dword>
 8004cba:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8004cbc:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <find_volume+0x250>)
	clear_lock(fs);
 8004cbe:	4620      	mov	r0, r4
	fs->fs_type = fmt;		/* FAT sub-type */
 8004cc0:	7025      	strb	r5, [r4, #0]
	return FR_OK;
 8004cc2:	2500      	movs	r5, #0
	fs->id = ++Fsid;		/* File system mount ID */
 8004cc4:	8813      	ldrh	r3, [r2, #0]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	80e3      	strh	r3, [r4, #6]
 8004ccc:	8013      	strh	r3, [r2, #0]
	clear_lock(fs);
 8004cce:	f7ff fd8f 	bl	80047f0 <clear_lock>
	return FR_OK;
 8004cd2:	e725      	b.n	8004b20 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004cd4:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004cd6:	3501      	adds	r5, #1
 8004cd8:	2d04      	cmp	r5, #4
 8004cda:	f47f af4a 	bne.w	8004b72 <find_volume+0x92>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004cde:	2804      	cmp	r0, #4
 8004ce0:	d105      	bne.n	8004cee <find_volume+0x20e>
 8004ce2:	2501      	movs	r5, #1
 8004ce4:	e71c      	b.n	8004b20 <find_volume+0x40>
 8004ce6:	2804      	cmp	r0, #4
 8004ce8:	d0fb      	beq.n	8004ce2 <find_volume+0x202>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004cea:	2801      	cmp	r0, #1
 8004cec:	d901      	bls.n	8004cf2 <find_volume+0x212>
 8004cee:	250d      	movs	r5, #13
 8004cf0:	e716      	b.n	8004b20 <find_volume+0x40>
	bsect = 0;
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	e749      	b.n	8004b8a <find_volume+0xaa>
		fmt = FS_FAT32;
 8004cf6:	2503      	movs	r5, #3
 8004cf8:	e791      	b.n	8004c1e <find_volume+0x13e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004cfa:	f1b8 0f00 	cmp.w	r8, #0
 8004cfe:	d0f6      	beq.n	8004cee <find_volume+0x20e>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004d00:	2d02      	cmp	r5, #2
 8004d02:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004d06:	4477      	add	r7, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004d08:	bf1a      	itte	ne
 8004d0a:	18d2      	addne	r2, r2, r3
 8004d0c:	f003 0301 	andne.w	r3, r3, #1
 8004d10:	4613      	moveq	r3, r2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004d12:	62a7      	str	r7, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004d14:	bf18      	it	ne
 8004d16:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8004d1a:	e795      	b.n	8004c48 <find_volume+0x168>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004d1c:	250b      	movs	r5, #11
 8004d1e:	e6ff      	b.n	8004b20 <find_volume+0x40>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004d20:	250c      	movs	r5, #12
 8004d22:	e6fd      	b.n	8004b20 <find_volume+0x40>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004d24:	2503      	movs	r5, #3
 8004d26:	e6fb      	b.n	8004b20 <find_volume+0x40>
 8004d28:	24000c58 	.word	0x24000c58
 8004d2c:	41615252 	.word	0x41615252
 8004d30:	24000c80 	.word	0x24000c80

08004d34 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004d34:	2901      	cmp	r1, #1
{
 8004d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3a:	4606      	mov	r6, r0
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004d40:	d974      	bls.n	8004e2c <put_fat+0xf8>
 8004d42:	6983      	ldr	r3, [r0, #24]
 8004d44:	428b      	cmp	r3, r1
 8004d46:	d971      	bls.n	8004e2c <put_fat+0xf8>
		switch (fs->fs_type) {
 8004d48:	7803      	ldrb	r3, [r0, #0]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d040      	beq.n	8004dd0 <put_fat+0x9c>
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d051      	beq.n	8004df6 <put_fat+0xc2>
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d16a      	bne.n	8004e2c <put_fat+0xf8>
			bc = (UINT)clst; bc += bc / 2;
 8004d56:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d5a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004d5c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8004d60:	f7ff fe6b 	bl	8004a3a <move_window>
 8004d64:	4605      	mov	r5, r0
			if (res != FR_OK) break;
 8004d66:	bb40      	cbnz	r0, 8004dba <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004d68:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 8004d6c:	f106 0934 	add.w	r9, r6, #52	; 0x34
 8004d70:	f108 0a01 	add.w	sl, r8, #1
 8004d74:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004d78:	bf08      	it	eq
 8004d7a:	b2fb      	uxtbeq	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d7c:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004d7e:	bf1f      	itttt	ne
 8004d80:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8004d84:	f003 020f 	andne.w	r2, r3, #15
 8004d88:	013b      	lslne	r3, r7, #4
 8004d8a:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8004d8e:	bf18      	it	ne
 8004d90:	4313      	orrne	r3, r2
 8004d92:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 8004d96:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d98:	6a71      	ldr	r1, [r6, #36]	; 0x24
			fs->wflag = 1;
 8004d9a:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d9c:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8004da0:	f7ff fe4b 	bl	8004a3a <move_window>
			if (res != FR_OK) break;
 8004da4:	4605      	mov	r5, r0
 8004da6:	b940      	cbnz	r0, 8004dba <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 8004da8:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004dac:	b144      	cbz	r4, 8004dc0 <put_fat+0x8c>
 8004dae:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8004db2:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8004db6:	2301      	movs	r3, #1
 8004db8:	70f3      	strb	r3, [r6, #3]
}
 8004dba:	4628      	mov	r0, r5
 8004dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004dc0:	f819 300a 	ldrb.w	r3, [r9, sl]
 8004dc4:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8004dc8:	f023 030f 	bic.w	r3, r3, #15
 8004dcc:	431f      	orrs	r7, r3
 8004dce:	e7f0      	b.n	8004db2 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004dd0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004dd2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004dd6:	f7ff fe30 	bl	8004a3a <move_window>
			if (res != FR_OK) break;
 8004dda:	4605      	mov	r5, r0
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d1ec      	bne.n	8004dba <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004de0:	0064      	lsls	r4, r4, #1
 8004de2:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8004de6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8004dea:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004dec:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8004dee:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8004df2:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 8004df4:	e7df      	b.n	8004db6 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004df6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004df8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004dfc:	f7ff fe1d 	bl	8004a3a <move_window>
			if (res != FR_OK) break;
 8004e00:	4605      	mov	r5, r0
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d1d9      	bne.n	8004dba <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004e06:	00a4      	lsls	r4, r4, #2
 8004e08:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8004e0c:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8004e10:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8004e14:	441c      	add	r4, r3
 8004e16:	4620      	mov	r0, r4
 8004e18:	f7ff fc40 	bl	800469c <ld_dword>
 8004e1c:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004e20:	ea47 0100 	orr.w	r1, r7, r0
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7ff fc3b 	bl	80046a0 <st_dword>
 8004e2a:	e7c4      	b.n	8004db6 <put_fat+0x82>
		switch (fs->fs_type) {
 8004e2c:	2502      	movs	r5, #2
 8004e2e:	e7c4      	b.n	8004dba <put_fat+0x86>

08004e30 <sync_fs>:
{
 8004e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e32:	4604      	mov	r4, r0
	res = sync_window(fs);
 8004e34:	f7ff fdfb 	bl	8004a2e <sync_window>
 8004e38:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d142      	bne.n	8004ec4 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004e3e:	7823      	ldrb	r3, [r4, #0]
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d137      	bne.n	8004eb4 <sync_fs+0x84>
 8004e44:	7927      	ldrb	r7, [r4, #4]
 8004e46:	2f01      	cmp	r7, #1
 8004e48:	d134      	bne.n	8004eb4 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8004e4a:	f104 0634 	add.w	r6, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8004e4e:	2355      	movs	r3, #85	; 0x55
			mem_set(fs->win, 0, SS(fs));
 8004e50:	4601      	mov	r1, r0
 8004e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e56:	4630      	mov	r0, r6
 8004e58:	f7ff fc2a 	bl	80046b0 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8004e5c:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 8004e60:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
 8004e62:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8004e64:	2172      	movs	r1, #114	; 0x72
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004e66:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
 8004e6a:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8004e6e:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8004e70:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 8004e74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8004e78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8004e7c:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 8004e7e:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 8004e82:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 8004e86:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 8004e8a:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
	*ptr++ = (BYTE)val; val >>= 8;
 8004e8e:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004e92:	6961      	ldr	r1, [r4, #20]
 8004e94:	f7ff fc04 	bl	80046a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004e98:	6921      	ldr	r1, [r4, #16]
 8004e9a:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8004e9e:	f7ff fbff 	bl	80046a0 <st_dword>
			fs->winsect = fs->volbase + 1;
 8004ea2:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004ea4:	463b      	mov	r3, r7
 8004ea6:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 8004ea8:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004eaa:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8004eac:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004eae:	f7ff fbd7 	bl	8004660 <disk_write>
			fs->fsi_flag = 0;
 8004eb2:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	7860      	ldrb	r0, [r4, #1]
 8004eb8:	4611      	mov	r1, r2
 8004eba:	f7ff fbdf 	bl	800467c <disk_ioctl>
	res = sync_window(fs);
 8004ebe:	3800      	subs	r0, #0
 8004ec0:	bf18      	it	ne
 8004ec2:	2001      	movne	r0, #1
}
 8004ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ec6 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8004ec6:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8004ec8:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004eca:	bf04      	itt	eq
 8004ecc:	8a8a      	ldrheq	r2, [r1, #20]
 8004ece:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	4770      	bx	lr

08004ed6 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004ed6:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	4606      	mov	r6, r0
 8004edc:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004ede:	d94e      	bls.n	8004f7e <get_fat.isra.0+0xa8>
 8004ee0:	6983      	ldr	r3, [r0, #24]
 8004ee2:	4299      	cmp	r1, r3
 8004ee4:	d24b      	bcs.n	8004f7e <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 8004ee6:	7803      	ldrb	r3, [r0, #0]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d029      	beq.n	8004f40 <get_fat.isra.0+0x6a>
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d034      	beq.n	8004f5a <get_fat.isra.0+0x84>
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d144      	bne.n	8004f7e <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 8004ef4:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ef8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004efa:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8004efe:	f7ff fd9c 	bl	8004a3a <move_window>
 8004f02:	b110      	cbz	r0, 8004f0a <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8004f0a:	1c6f      	adds	r7, r5, #1
 8004f0c:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f10:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8004f12:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 8004f14:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f16:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8004f1a:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f1e:	f7ff fd8c 	bl	8004a3a <move_window>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d1ee      	bne.n	8004f04 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004f26:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004f2a:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8004f2c:	443e      	add	r6, r7
 8004f2e:	f896 0034 	ldrb.w	r0, [r6, #52]	; 0x34
 8004f32:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004f36:	bf4c      	ite	mi
 8004f38:	0900      	lsrmi	r0, r0, #4
 8004f3a:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004f3e:	e7e3      	b.n	8004f08 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004f40:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004f42:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004f46:	f7ff fd78 	bl	8004a3a <move_window>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d1da      	bne.n	8004f04 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004f4e:	0064      	lsls	r4, r4, #1
 8004f50:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8004f54:	4426      	add	r6, r4
 8004f56:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
			break;
 8004f58:	e7d6      	b.n	8004f08 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004f5a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004f5c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004f60:	f7ff fd6b 	bl	8004a3a <move_window>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	d1cd      	bne.n	8004f04 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004f68:	00a4      	lsls	r4, r4, #2
 8004f6a:	f106 0034 	add.w	r0, r6, #52	; 0x34
 8004f6e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8004f72:	4420      	add	r0, r4
 8004f74:	f7ff fb92 	bl	800469c <ld_dword>
 8004f78:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8004f7c:	e7c4      	b.n	8004f08 <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 8004f7e:	2001      	movs	r0, #1
	return val;
 8004f80:	e7c2      	b.n	8004f08 <get_fat.isra.0+0x32>

08004f82 <remove_chain>:
{
 8004f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f84:	460c      	mov	r4, r1
 8004f86:	4606      	mov	r6, r0
 8004f88:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
 8004f8a:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004f8c:	2c01      	cmp	r4, #1
 8004f8e:	d92c      	bls.n	8004fea <remove_chain+0x68>
 8004f90:	69ab      	ldr	r3, [r5, #24]
 8004f92:	42a3      	cmp	r3, r4
 8004f94:	d929      	bls.n	8004fea <remove_chain+0x68>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004f96:	b12a      	cbz	r2, 8004fa4 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004f98:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	f7ff fec9 	bl	8004d34 <put_fat>
		if (res != FR_OK) return res;
 8004fa2:	b940      	cbnz	r0, 8004fb6 <remove_chain+0x34>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	6830      	ldr	r0, [r6, #0]
 8004fa8:	9401      	str	r4, [sp, #4]
 8004faa:	f7ff ff94 	bl	8004ed6 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004fae:	9901      	ldr	r1, [sp, #4]
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	b910      	cbnz	r0, 8004fba <remove_chain+0x38>
	return FR_OK;
 8004fb4:	2000      	movs	r0, #0
}
 8004fb6:	b002      	add	sp, #8
 8004fb8:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004fba:	2801      	cmp	r0, #1
 8004fbc:	d015      	beq.n	8004fea <remove_chain+0x68>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004fbe:	1c43      	adds	r3, r0, #1
 8004fc0:	d015      	beq.n	8004fee <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	f7ff feb5 	bl	8004d34 <put_fat>
			if (res != FR_OK) return res;
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d1f3      	bne.n	8004fb6 <remove_chain+0x34>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004fce:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8004fd2:	1e91      	subs	r1, r2, #2
 8004fd4:	428b      	cmp	r3, r1
 8004fd6:	d205      	bcs.n	8004fe4 <remove_chain+0x62>
			fs->free_clst++;
 8004fd8:	3301      	adds	r3, #1
 8004fda:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8004fdc:	792b      	ldrb	r3, [r5, #4]
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004fe4:	42a2      	cmp	r2, r4
 8004fe6:	d8dd      	bhi.n	8004fa4 <remove_chain+0x22>
 8004fe8:	e7e4      	b.n	8004fb4 <remove_chain+0x32>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004fea:	2002      	movs	r0, #2
 8004fec:	e7e3      	b.n	8004fb6 <remove_chain+0x34>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004fee:	2001      	movs	r0, #1
 8004ff0:	e7e1      	b.n	8004fb6 <remove_chain+0x34>

08004ff2 <create_chain>:
{
 8004ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff6:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8004ff8:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8004ffa:	460f      	mov	r7, r1
 8004ffc:	b971      	cbnz	r1, 800501c <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004ffe:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005000:	b1ee      	cbz	r6, 800503e <create_chain+0x4c>
 8005002:	69ab      	ldr	r3, [r5, #24]
 8005004:	42b3      	cmp	r3, r6
 8005006:	bf98      	it	ls
 8005008:	2601      	movls	r6, #1
		ncl = scl;	/* Start cluster */
 800500a:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800500c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800500e:	69ab      	ldr	r3, [r5, #24]
 8005010:	42a3      	cmp	r3, r4
 8005012:	d817      	bhi.n	8005044 <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 8005014:	2e01      	cmp	r6, #1
 8005016:	d814      	bhi.n	8005042 <create_chain+0x50>
 8005018:	2400      	movs	r4, #0
 800501a:	e006      	b.n	800502a <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800501c:	4628      	mov	r0, r5
 800501e:	f7ff ff5a 	bl	8004ed6 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005022:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005024:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005026:	d803      	bhi.n	8005030 <create_chain+0x3e>
 8005028:	2401      	movs	r4, #1
}
 800502a:	4620      	mov	r0, r4
 800502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d030      	beq.n	8005096 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005034:	69ab      	ldr	r3, [r5, #24]
 8005036:	4283      	cmp	r3, r0
 8005038:	d8f7      	bhi.n	800502a <create_chain+0x38>
 800503a:	463e      	mov	r6, r7
 800503c:	e7e5      	b.n	800500a <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800503e:	2601      	movs	r6, #1
 8005040:	e7e3      	b.n	800500a <create_chain+0x18>
				ncl = 2;
 8005042:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005044:	4621      	mov	r1, r4
 8005046:	f8d8 0000 	ldr.w	r0, [r8]
 800504a:	f7ff ff44 	bl	8004ed6 <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 800504e:	b130      	cbz	r0, 800505e <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005050:	2801      	cmp	r0, #1
 8005052:	d0e9      	beq.n	8005028 <create_chain+0x36>
 8005054:	3001      	adds	r0, #1
 8005056:	d01e      	beq.n	8005096 <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 8005058:	42b4      	cmp	r4, r6
 800505a:	d1d7      	bne.n	800500c <create_chain+0x1a>
 800505c:	e7dc      	b.n	8005018 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800505e:	f04f 32ff 	mov.w	r2, #4294967295
 8005062:	4621      	mov	r1, r4
 8005064:	4628      	mov	r0, r5
 8005066:	f7ff fe65 	bl	8004d34 <put_fat>
		if (res == FR_OK && clst != 0) {
 800506a:	b990      	cbnz	r0, 8005092 <create_chain+0xa0>
 800506c:	b957      	cbnz	r7, 8005084 <create_chain+0x92>
		fs->last_clst = ncl;
 800506e:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005070:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8005074:	3a02      	subs	r2, #2
 8005076:	4293      	cmp	r3, r2
 8005078:	d910      	bls.n	800509c <create_chain+0xaa>
		fs->fsi_flag |= 1;
 800507a:	792b      	ldrb	r3, [r5, #4]
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	712b      	strb	r3, [r5, #4]
 8005082:	e7d2      	b.n	800502a <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005084:	4622      	mov	r2, r4
 8005086:	4639      	mov	r1, r7
 8005088:	4628      	mov	r0, r5
 800508a:	f7ff fe53 	bl	8004d34 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800508e:	2800      	cmp	r0, #0
 8005090:	d0ed      	beq.n	800506e <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005092:	2801      	cmp	r0, #1
 8005094:	d1c8      	bne.n	8005028 <create_chain+0x36>
 8005096:	f04f 34ff 	mov.w	r4, #4294967295
 800509a:	e7c6      	b.n	800502a <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800509c:	3b01      	subs	r3, #1
 800509e:	616b      	str	r3, [r5, #20]
 80050a0:	e7eb      	b.n	800507a <create_chain+0x88>

080050a2 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80050a2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 80050a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a8:	4606      	mov	r6, r0
 80050aa:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80050ac:	d301      	bcc.n	80050b2 <dir_sdi+0x10>
		return FR_INT_ERR;
 80050ae:	2002      	movs	r0, #2
}
 80050b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80050b2:	06ca      	lsls	r2, r1, #27
 80050b4:	d1fb      	bne.n	80050ae <dir_sdi+0xc>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80050b6:	6882      	ldr	r2, [r0, #8]
	FATFS *fs = dp->obj.fs;
 80050b8:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80050ba:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80050bc:	b9ca      	cbnz	r2, 80050f2 <dir_sdi+0x50>
 80050be:	782b      	ldrb	r3, [r5, #0]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <dir_sdi+0x26>
		clst = fs->dirbase;
 80050c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80050c6:	b99b      	cbnz	r3, 80050f0 <dir_sdi+0x4e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80050c8:	892b      	ldrh	r3, [r5, #8]
 80050ca:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80050ce:	d9ee      	bls.n	80050ae <dir_sdi+0xc>
		dp->sect = fs->dirbase;
 80050d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80050d2:	61f3      	str	r3, [r6, #28]
	if (!dp->sect) return FR_INT_ERR;
 80050d4:	69f3      	ldr	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 80050d6:	61b2      	str	r2, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0e8      	beq.n	80050ae <dir_sdi+0xc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80050dc:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80050e0:	3534      	adds	r5, #52	; 0x34
 80050e2:	f3c4 0408 	ubfx	r4, r4, #0, #9
	return FR_OK;
 80050e6:	2000      	movs	r0, #0
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80050e8:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80050ea:	442c      	add	r4, r5
 80050ec:	6234      	str	r4, [r6, #32]
	return FR_OK;
 80050ee:	e7df      	b.n	80050b0 <dir_sdi+0xe>
 80050f0:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80050f2:	896f      	ldrh	r7, [r5, #10]
 80050f4:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 80050f6:	42bc      	cmp	r4, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80050f8:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 80050fa:	d204      	bcs.n	8005106 <dir_sdi+0x64>
		dp->sect = clust2sect(fs, clst);
 80050fc:	4628      	mov	r0, r5
 80050fe:	f7ff fb85 	bl	800480c <clust2sect>
 8005102:	61f0      	str	r0, [r6, #28]
 8005104:	e7e6      	b.n	80050d4 <dir_sdi+0x32>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005106:	6830      	ldr	r0, [r6, #0]
 8005108:	f7ff fee5 	bl	8004ed6 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800510c:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800510e:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005110:	d006      	beq.n	8005120 <dir_sdi+0x7e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005112:	2801      	cmp	r0, #1
 8005114:	d9cb      	bls.n	80050ae <dir_sdi+0xc>
 8005116:	69ab      	ldr	r3, [r5, #24]
 8005118:	4283      	cmp	r3, r0
 800511a:	d9c8      	bls.n	80050ae <dir_sdi+0xc>
			ofs -= csz;
 800511c:	1be4      	subs	r4, r4, r7
 800511e:	e7ea      	b.n	80050f6 <dir_sdi+0x54>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005120:	2001      	movs	r0, #1
 8005122:	e7c5      	b.n	80050b0 <dir_sdi+0xe>

08005124 <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005124:	6943      	ldr	r3, [r0, #20]
{
 8005126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800512a:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800512e:	69c3      	ldr	r3, [r0, #28]
{
 8005130:	4605      	mov	r5, r0
 8005132:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005134:	b193      	cbz	r3, 800515c <dir_next+0x38>
 8005136:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 800513a:	d20f      	bcs.n	800515c <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800513c:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8005140:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005142:	f1b9 0f00 	cmp.w	r9, #0
 8005146:	d14d      	bne.n	80051e4 <dir_next+0xc0>
		dp->sect++;				/* Next sector */
 8005148:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800514a:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800514c:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800514e:	b939      	cbnz	r1, 8005160 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005150:	8923      	ldrh	r3, [r4, #8]
 8005152:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8005156:	d845      	bhi.n	80051e4 <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 8005158:	2300      	movs	r3, #0
 800515a:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800515c:	2004      	movs	r0, #4
 800515e:	e00b      	b.n	8005178 <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005160:	8967      	ldrh	r7, [r4, #10]
 8005162:	3f01      	subs	r7, #1
 8005164:	ea17 2758 	ands.w	r7, r7, r8, lsr #9
 8005168:	d13c      	bne.n	80051e4 <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800516a:	4620      	mov	r0, r4
 800516c:	f7ff feb3 	bl	8004ed6 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005170:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005172:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005174:	d802      	bhi.n	800517c <dir_next+0x58>
 8005176:	2002      	movs	r0, #2
}
 8005178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800517c:	1c42      	adds	r2, r0, #1
 800517e:	d101      	bne.n	8005184 <dir_next+0x60>
 8005180:	2001      	movs	r0, #1
 8005182:	e7f9      	b.n	8005178 <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005184:	69a3      	ldr	r3, [r4, #24]
 8005186:	4283      	cmp	r3, r0
 8005188:	d826      	bhi.n	80051d8 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 800518a:	f1ba 0f00 	cmp.w	sl, #0
 800518e:	d0e3      	beq.n	8005158 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005190:	69a9      	ldr	r1, [r5, #24]
 8005192:	4628      	mov	r0, r5
 8005194:	f7ff ff2d 	bl	8004ff2 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005198:	4606      	mov	r6, r0
 800519a:	2800      	cmp	r0, #0
 800519c:	d035      	beq.n	800520a <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800519e:	2801      	cmp	r0, #1
 80051a0:	d0e9      	beq.n	8005176 <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80051a2:	1c43      	adds	r3, r0, #1
 80051a4:	d0ec      	beq.n	8005180 <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80051a6:	4620      	mov	r0, r4
 80051a8:	f7ff fc41 	bl	8004a2e <sync_window>
 80051ac:	4601      	mov	r1, r0
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d1e6      	bne.n	8005180 <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80051b2:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80051b6:	f44f 7200 	mov.w	r2, #512	; 0x200
						fs->wflag = 1;
 80051ba:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80051be:	f7ff fa77 	bl	80046b0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80051c2:	4631      	mov	r1, r6
 80051c4:	4620      	mov	r0, r4
 80051c6:	f7ff fb21 	bl	800480c <clust2sect>
 80051ca:	6320      	str	r0, [r4, #48]	; 0x30
 80051cc:	8963      	ldrh	r3, [r4, #10]
 80051ce:	429f      	cmp	r7, r3
 80051d0:	d30f      	bcc.n	80051f2 <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 80051d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80051d4:	1bdb      	subs	r3, r3, r7
 80051d6:	6323      	str	r3, [r4, #48]	; 0x30
				dp->sect = clust2sect(fs, clst);
 80051d8:	4631      	mov	r1, r6
 80051da:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
 80051dc:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80051de:	f7ff fb15 	bl	800480c <clust2sect>
 80051e2:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80051e4:	3434      	adds	r4, #52	; 0x34
	return FR_OK;
 80051e6:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 80051e8:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80051ec:	444c      	add	r4, r9
 80051ee:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80051f0:	e7c2      	b.n	8005178 <dir_next+0x54>
						fs->wflag = 1;
 80051f2:	4620      	mov	r0, r4
 80051f4:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80051f8:	f7ff fbf3 	bl	80049e2 <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80051fc:	2800      	cmp	r0, #0
 80051fe:	d1bf      	bne.n	8005180 <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005200:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005202:	3701      	adds	r7, #1
 8005204:	3301      	adds	r3, #1
 8005206:	6323      	str	r3, [r4, #48]	; 0x30
 8005208:	e7e0      	b.n	80051cc <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800520a:	2007      	movs	r0, #7
 800520c:	e7b4      	b.n	8005178 <dir_next+0x54>
	...

08005210 <dir_find>:
{
 8005210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005214:	2100      	movs	r1, #0
{
 8005216:	b085      	sub	sp, #20
 8005218:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800521a:	f8d0 b000 	ldr.w	fp, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800521e:	f7ff ff40 	bl	80050a2 <dir_sdi>
	if (res != FR_OK) return res;
 8005222:	4606      	mov	r6, r0
 8005224:	2800      	cmp	r0, #0
 8005226:	f040 8098 	bne.w	800535a <dir_find+0x14a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800522a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800522e:	f04f 3aff 	mov.w	sl, #4294967295
 8005232:	46c1      	mov	r9, r8
 8005234:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
		res = move_window(fs, dp->sect);
 8005238:	69e1      	ldr	r1, [r4, #28]
 800523a:	4658      	mov	r0, fp
 800523c:	f7ff fbfd 	bl	8004a3a <move_window>
		if (res != FR_OK) break;
 8005240:	4606      	mov	r6, r0
 8005242:	2800      	cmp	r0, #0
 8005244:	f040 8089 	bne.w	800535a <dir_find+0x14a>
		c = dp->dir[DIR_Name];
 8005248:	6a25      	ldr	r5, [r4, #32]
 800524a:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800524c:	2f00      	cmp	r7, #0
 800524e:	f000 8088 	beq.w	8005362 <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005252:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005254:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005256:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800525a:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800525c:	d003      	beq.n	8005266 <dir_find+0x56>
 800525e:	0710      	lsls	r0, r2, #28
 8005260:	d504      	bpl.n	800526c <dir_find+0x5c>
 8005262:	2b0f      	cmp	r3, #15
 8005264:	d004      	beq.n	8005270 <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005266:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
 800526a:	e050      	b.n	800530e <dir_find+0xfe>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800526c:	2b0f      	cmp	r3, #15
 800526e:	d156      	bne.n	800531e <dir_find+0x10e>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005270:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8005274:	0659      	lsls	r1, r3, #25
 8005276:	d440      	bmi.n	80052fa <dir_find+0xea>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005278:	067a      	lsls	r2, r7, #25
 800527a:	d546      	bpl.n	800530a <dir_find+0xfa>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800527c:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800527e:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8005282:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005286:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005288:	7b6b      	ldrb	r3, [r5, #13]
 800528a:	4543      	cmp	r3, r8
 800528c:	d13f      	bne.n	800530e <dir_find+0xfe>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800528e:	8b6b      	ldrh	r3, [r5, #26]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d13c      	bne.n	800530e <dir_find+0xfe>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005294:	782e      	ldrb	r6, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005296:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005298:	f8db 300c 	ldr.w	r3, [fp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800529c:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 80052a0:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800536c <dir_find+0x15c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80052a4:	9300      	str	r3, [sp, #0]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80052a6:	230d      	movs	r3, #13
 80052a8:	3e01      	subs	r6, #1
 80052aa:	435e      	muls	r6, r3
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80052ac:	f819 3b01 	ldrb.w	r3, [r9], #1
	rv = ptr[1];
 80052b0:	5aeb      	ldrh	r3, [r5, r3]
		if (wc) {
 80052b2:	b37a      	cbz	r2, 8005314 <dir_find+0x104>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80052b4:	2efe      	cmp	r6, #254	; 0xfe
 80052b6:	d82a      	bhi.n	800530e <dir_find+0xfe>
 80052b8:	4618      	mov	r0, r3
 80052ba:	9303      	str	r3, [sp, #12]
 80052bc:	f001 f9f6 	bl	80066ac <ff_wtoupper>
 80052c0:	9b00      	ldr	r3, [sp, #0]
 80052c2:	1c71      	adds	r1, r6, #1
 80052c4:	9002      	str	r0, [sp, #8]
 80052c6:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 80052ca:	9101      	str	r1, [sp, #4]
 80052cc:	f001 f9ee 	bl	80066ac <ff_wtoupper>
 80052d0:	9a02      	ldr	r2, [sp, #8]
 80052d2:	4282      	cmp	r2, r0
 80052d4:	d11b      	bne.n	800530e <dir_find+0xfe>
 80052d6:	9b03      	ldr	r3, [sp, #12]
 80052d8:	9901      	ldr	r1, [sp, #4]
 80052da:	461a      	mov	r2, r3
 80052dc:	460e      	mov	r6, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80052de:	4b22      	ldr	r3, [pc, #136]	; (8005368 <dir_find+0x158>)
 80052e0:	4599      	cmp	r9, r3
 80052e2:	d1e3      	bne.n	80052ac <dir_find+0x9c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80052e4:	782b      	ldrb	r3, [r5, #0]
 80052e6:	065b      	lsls	r3, r3, #25
 80052e8:	d504      	bpl.n	80052f4 <dir_find+0xe4>
 80052ea:	b11a      	cbz	r2, 80052f4 <dir_find+0xe4>
 80052ec:	9b00      	ldr	r3, [sp, #0]
 80052ee:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80052f2:	b963      	cbnz	r3, 800530e <dir_find+0xfe>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80052f4:	3f01      	subs	r7, #1
 80052f6:	fa5f f987 	uxtb.w	r9, r7
		res = dir_next(dp, 0);	/* Next entry */
 80052fa:	2100      	movs	r1, #0
 80052fc:	4620      	mov	r0, r4
 80052fe:	f7ff ff11 	bl	8005124 <dir_next>
	} while (res == FR_OK);
 8005302:	4606      	mov	r6, r0
 8005304:	2800      	cmp	r0, #0
 8005306:	d097      	beq.n	8005238 <dir_find+0x28>
 8005308:	e027      	b.n	800535a <dir_find+0x14a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800530a:	45b9      	cmp	r9, r7
 800530c:	d0bc      	beq.n	8005288 <dir_find+0x78>
 800530e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8005312:	e7f2      	b.n	80052fa <dir_find+0xea>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005314:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005318:	428b      	cmp	r3, r1
 800531a:	d0e0      	beq.n	80052de <dir_find+0xce>
 800531c:	e7f7      	b.n	800530e <dir_find+0xfe>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800531e:	f1b9 0f00 	cmp.w	r9, #0
 8005322:	d104      	bne.n	800532e <dir_find+0x11e>
 8005324:	4628      	mov	r0, r5
 8005326:	f7ff fa99 	bl	800485c <sum_sfn>
 800532a:	4540      	cmp	r0, r8
 800532c:	d015      	beq.n	800535a <dir_find+0x14a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800532e:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
 8005332:	f016 0601 	ands.w	r6, r6, #1
 8005336:	d196      	bne.n	8005266 <dir_find+0x56>
 8005338:	f104 0224 	add.w	r2, r4, #36	; 0x24
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800533c:	f105 010b 	add.w	r1, r5, #11
		r = *d++ - *s++;
 8005340:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005344:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 8005348:	428d      	cmp	r5, r1
		r = *d++ - *s++;
 800534a:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 800534e:	d002      	beq.n	8005356 <dir_find+0x146>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0f5      	beq.n	8005340 <dir_find+0x130>
 8005354:	e787      	b.n	8005266 <dir_find+0x56>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005356:	2b00      	cmp	r3, #0
 8005358:	d185      	bne.n	8005266 <dir_find+0x56>
}
 800535a:	4630      	mov	r0, r6
 800535c:	b005      	add	sp, #20
 800535e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005362:	2604      	movs	r6, #4
 8005364:	e7f9      	b.n	800535a <dir_find+0x14a>
 8005366:	bf00      	nop
 8005368:	0801446b 	.word	0x0801446b
 800536c:	0801445e 	.word	0x0801445e

08005370 <dir_register>:
{
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005374:	f890 502f 	ldrb.w	r5, [r0, #47]	; 0x2f
{
 8005378:	b089      	sub	sp, #36	; 0x24
 800537a:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800537c:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
 8005380:	f040 808e 	bne.w	80054a0 <dir_register+0x130>
	FATFS *fs = dp->obj.fs;
 8005384:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005386:	68f2      	ldr	r2, [r6, #12]
 8005388:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d166      	bne.n	800545e <dir_register+0xee>
	mem_cpy(sn, dp->fn, 12);
 8005390:	f104 0724 	add.w	r7, r4, #36	; 0x24
	if (cnt) {
 8005394:	220c      	movs	r2, #12
 8005396:	a805      	add	r0, sp, #20
 8005398:	4639      	mov	r1, r7
 800539a:	f7ff fb19 	bl	80049d0 <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800539e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80053a2:	07db      	lsls	r3, r3, #31
 80053a4:	f140 8085 	bpl.w	80054b2 <dir_register+0x142>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80053a8:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
 80053aa:	f04f 0a01 	mov.w	sl, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80053ae:	f8df 8234 	ldr.w	r8, [pc, #564]	; 80055e4 <dir_register+0x274>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80053b2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80053b6:	220b      	movs	r2, #11
 80053b8:	a905      	add	r1, sp, #20
 80053ba:	4638      	mov	r0, r7
 80053bc:	f8d6 900c 	ldr.w	r9, [r6, #12]
	if (cnt) {
 80053c0:	f7ff fb06 	bl	80049d0 <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80053c4:	f1ba 0f05 	cmp.w	sl, #5
 80053c8:	d959      	bls.n	800547e <dir_register+0x10e>
 80053ca:	f1a9 0102 	sub.w	r1, r9, #2
 80053ce:	4653      	mov	r3, sl
		while (*lfn) {	/* Create a CRC */
 80053d0:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	d144      	bne.n	8005462 <dir_register+0xf2>
 80053d8:	f10d 0013 	add.w	r0, sp, #19
 80053dc:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 80053de:	f003 0c0f 	and.w	ip, r3, #15
		ns[i--] = c;
 80053e2:	3a01      	subs	r2, #1
		c = (BYTE)((seq % 16) + '0');
 80053e4:	f10c 0130 	add.w	r1, ip, #48	; 0x30
		if (c > '9') c += 7;
 80053e8:	2939      	cmp	r1, #57	; 0x39
 80053ea:	bf88      	it	hi
 80053ec:	f10c 0137 	addhi.w	r1, ip, #55	; 0x37
	} while (seq);
 80053f0:	2b0f      	cmp	r3, #15
		ns[i--] = c;
 80053f2:	f800 1901 	strb.w	r1, [r0], #-1
		seq /= 16;
 80053f6:	ea4f 1113 	mov.w	r1, r3, lsr #4
	} while (seq);
 80053fa:	d842      	bhi.n	8005482 <dir_register+0x112>
	ns[i] = '~';
 80053fc:	f102 0320 	add.w	r3, r2, #32
 8005400:	217e      	movs	r1, #126	; 0x7e
 8005402:	446b      	add	r3, sp
 8005404:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005408:	4639      	mov	r1, r7
 800540a:	2300      	movs	r3, #0
 800540c:	429a      	cmp	r2, r3
 800540e:	d005      	beq.n	800541c <dir_register+0xac>
 8005410:	f811 0b01 	ldrb.w	r0, [r1], #1
 8005414:	f103 0c01 	add.w	ip, r3, #1
 8005418:	2820      	cmp	r0, #32
 800541a:	d134      	bne.n	8005486 <dir_register+0x116>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800541c:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8005420:	2a07      	cmp	r2, #7
 8005422:	f103 0301 	add.w	r3, r3, #1
 8005426:	bf97      	itett	ls
 8005428:	f102 0120 	addls.w	r1, r2, #32
 800542c:	2120      	movhi	r1, #32
 800542e:	3201      	addls	r2, #1
 8005430:	4469      	addls	r1, sp
 8005432:	bf98      	it	ls
 8005434:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
	} while (j < 8);
 8005438:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800543a:	54c1      	strb	r1, [r0, r3]
	} while (j < 8);
 800543c:	d9f0      	bls.n	8005420 <dir_register+0xb0>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800543e:	4620      	mov	r0, r4
 8005440:	f7ff fee6 	bl	8005210 <dir_find>
 8005444:	4681      	mov	r9, r0
			if (res != FR_OK) break;
 8005446:	bb70      	cbnz	r0, 80054a6 <dir_register+0x136>
		for (n = 1; n < 100; n++) {
 8005448:	f10a 0a01 	add.w	sl, sl, #1
 800544c:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8005450:	d1b1      	bne.n	80053b6 <dir_register+0x46>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005452:	f04f 0907 	mov.w	r9, #7
}
 8005456:	4648      	mov	r0, r9
 8005458:	b009      	add	sp, #36	; 0x24
 800545a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800545e:	3501      	adds	r5, #1
 8005460:	e792      	b.n	8005388 <dir_register+0x18>
 8005462:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 8005464:	f002 0c01 	and.w	ip, r2, #1
				wc >>= 1;
 8005468:	0852      	lsrs	r2, r2, #1
				sr = (sr << 1) + (wc & 1);
 800546a:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800546e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005472:	bf18      	it	ne
 8005474:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8005478:	3801      	subs	r0, #1
 800547a:	d1f3      	bne.n	8005464 <dir_register+0xf4>
 800547c:	e7a8      	b.n	80053d0 <dir_register+0x60>
 800547e:	4653      	mov	r3, sl
 8005480:	e7aa      	b.n	80053d8 <dir_register+0x68>
		seq /= 16;
 8005482:	460b      	mov	r3, r1
 8005484:	e7ab      	b.n	80053de <dir_register+0x6e>
 8005486:	4663      	mov	r3, ip
 8005488:	e7c0      	b.n	800540c <dir_register+0x9c>
				n = 0;					/* Not a blank entry. Restart to search */
 800548a:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
 800548c:	2101      	movs	r1, #1
 800548e:	4620      	mov	r0, r4
 8005490:	f7ff fe48 	bl	8005124 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005494:	4681      	mov	r9, r0
 8005496:	b308      	cbz	r0, 80054dc <dir_register+0x16c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005498:	f1b9 0f04 	cmp.w	r9, #4
 800549c:	d0d9      	beq.n	8005452 <dir_register+0xe2>
 800549e:	e7da      	b.n	8005456 <dir_register+0xe6>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80054a0:	f04f 0906 	mov.w	r9, #6
 80054a4:	e7d7      	b.n	8005456 <dir_register+0xe6>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80054a6:	2804      	cmp	r0, #4
 80054a8:	d1d5      	bne.n	8005456 <dir_register+0xe6>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80054aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80054ae:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80054b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
	res = dir_sdi(dp, 0);
 80054b6:	2100      	movs	r1, #0
 80054b8:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 80054ba:	f8d4 a000 	ldr.w	sl, [r4]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80054be:	079b      	lsls	r3, r3, #30
 80054c0:	bf45      	ittet	mi
 80054c2:	350c      	addmi	r5, #12
 80054c4:	230d      	movmi	r3, #13
 80054c6:	2501      	movpl	r5, #1
 80054c8:	fbb5 f5f3 	udivmi	r5, r5, r3
 80054cc:	bf48      	it	mi
 80054ce:	3501      	addmi	r5, #1
	res = dir_sdi(dp, 0);
 80054d0:	f7ff fde7 	bl	80050a2 <dir_sdi>
	if (res == FR_OK) {
 80054d4:	4681      	mov	r9, r0
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d1de      	bne.n	8005498 <dir_register+0x128>
		n = 0;
 80054da:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
 80054dc:	69e1      	ldr	r1, [r4, #28]
 80054de:	4650      	mov	r0, sl
 80054e0:	f7ff faab 	bl	8004a3a <move_window>
			if (res != FR_OK) break;
 80054e4:	4681      	mov	r9, r0
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d1d6      	bne.n	8005498 <dir_register+0x128>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80054ea:	6a23      	ldr	r3, [r4, #32]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2be5      	cmp	r3, #229	; 0xe5
 80054f0:	d001      	beq.n	80054f6 <dir_register+0x186>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1c9      	bne.n	800548a <dir_register+0x11a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80054f6:	f108 0801 	add.w	r8, r8, #1
 80054fa:	4545      	cmp	r5, r8
 80054fc:	d1c6      	bne.n	800548c <dir_register+0x11c>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80054fe:	3d01      	subs	r5, #1
 8005500:	d055      	beq.n	80055ae <dir_register+0x23e>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005502:	6961      	ldr	r1, [r4, #20]
 8005504:	4620      	mov	r0, r4
 8005506:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 800550a:	f7ff fdca 	bl	80050a2 <dir_sdi>
		if (res == FR_OK) {
 800550e:	4681      	mov	r9, r0
 8005510:	2800      	cmp	r0, #0
 8005512:	d1a0      	bne.n	8005456 <dir_register+0xe6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005514:	f64f 78ff 	movw	r8, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005518:	4638      	mov	r0, r7
 800551a:	f7ff f99f 	bl	800485c <sum_sfn>
 800551e:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
 8005520:	69e1      	ldr	r1, [r4, #28]
 8005522:	4630      	mov	r0, r6
 8005524:	f7ff fa89 	bl	8004a3a <move_window>
 8005528:	4681      	mov	r9, r0
				if (res != FR_OK) break;
 800552a:	2800      	cmp	r0, #0
 800552c:	d193      	bne.n	8005456 <dir_register+0xe6>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800552e:	6a23      	ldr	r3, [r4, #32]
 8005530:	b2e9      	uxtb	r1, r5
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005532:	9a01      	ldr	r2, [sp, #4]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005534:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005538:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800553c:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800553e:	f04f 020f 	mov.w	r2, #15
 8005542:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 80055e8 <dir_register+0x278>
 8005546:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005548:	1e4a      	subs	r2, r1, #1
	dir[LDIR_Type] = 0;
 800554a:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800554c:	fb0c f202 	mul.w	r2, ip, r2
	s = wc = 0;
 8005550:	4684      	mov	ip, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8005552:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 8005554:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005556:	4540      	cmp	r0, r8
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005558:	f81a 9b01 	ldrb.w	r9, [sl], #1
	} while (++s < 13);
 800555c:	f10c 0c01 	add.w	ip, ip, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005560:	bf18      	it	ne
 8005562:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005566:	eb03 0b09 	add.w	fp, r3, r9
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800556a:	bf18      	it	ne
 800556c:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800556e:	f803 0009 	strb.w	r0, [r3, r9]
 8005572:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005576:	2800      	cmp	r0, #0
 8005578:	bf08      	it	eq
 800557a:	4640      	moveq	r0, r8
	} while (++s < 13);
 800557c:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 8005580:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
 8005584:	d1e7      	bne.n	8005556 <dir_register+0x1e6>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005586:	4540      	cmp	r0, r8
 8005588:	d002      	beq.n	8005590 <dir_register+0x220>
 800558a:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 800558e:	b90a      	cbnz	r2, 8005594 <dir_register+0x224>
 8005590:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005594:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 8005596:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8005598:	2100      	movs	r1, #0
 800559a:	4620      	mov	r0, r4
				fs->wflag = 1;
 800559c:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800559e:	f7ff fdc1 	bl	8005124 <dir_next>
			} while (res == FR_OK && --nent);
 80055a2:	4681      	mov	r9, r0
 80055a4:	2800      	cmp	r0, #0
 80055a6:	f47f af56 	bne.w	8005456 <dir_register+0xe6>
 80055aa:	3d01      	subs	r5, #1
 80055ac:	d1b8      	bne.n	8005520 <dir_register+0x1b0>
		res = move_window(fs, dp->sect);
 80055ae:	69e1      	ldr	r1, [r4, #28]
 80055b0:	4630      	mov	r0, r6
 80055b2:	f7ff fa42 	bl	8004a3a <move_window>
		if (res == FR_OK) {
 80055b6:	4681      	mov	r9, r0
 80055b8:	2800      	cmp	r0, #0
 80055ba:	f47f af4c 	bne.w	8005456 <dir_register+0xe6>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80055be:	4601      	mov	r1, r0
 80055c0:	2220      	movs	r2, #32
 80055c2:	6a20      	ldr	r0, [r4, #32]
 80055c4:	f7ff f874 	bl	80046b0 <mem_set>
	if (cnt) {
 80055c8:	220b      	movs	r2, #11
 80055ca:	4639      	mov	r1, r7
 80055cc:	6a20      	ldr	r0, [r4, #32]
 80055ce:	f7ff f9ff 	bl	80049d0 <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80055d2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80055d6:	6a22      	ldr	r2, [r4, #32]
 80055d8:	f003 0318 	and.w	r3, r3, #24
 80055dc:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 80055de:	2301      	movs	r3, #1
 80055e0:	70f3      	strb	r3, [r6, #3]
 80055e2:	e738      	b.n	8005456 <dir_register+0xe6>
 80055e4:	00011021 	.word	0x00011021
 80055e8:	0801445e 	.word	0x0801445e

080055ec <dir_read.constprop.0>:
FRESULT dir_read (
 80055ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 80055f0:	27ff      	movs	r7, #255	; 0xff
FRESULT dir_read (
 80055f2:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 80055f4:	f8d0 8000 	ldr.w	r8, [r0]
	FRESULT res = FR_NO_FILE;
 80055f8:	2504      	movs	r5, #4
	BYTE ord = 0xFF, sum = 0xFF;
 80055fa:	463c      	mov	r4, r7
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80055fc:	f64f 79ff 	movw	r9, #65535	; 0xffff
	while (dp->sect) {
 8005600:	69f1      	ldr	r1, [r6, #28]
 8005602:	b911      	cbnz	r1, 800560a <dir_read.constprop.0+0x1e>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005604:	2d00      	cmp	r5, #0
 8005606:	d05f      	beq.n	80056c8 <dir_read.constprop.0+0xdc>
 8005608:	e04f      	b.n	80056aa <dir_read.constprop.0+0xbe>
		res = move_window(fs, dp->sect);
 800560a:	4640      	mov	r0, r8
 800560c:	f7ff fa15 	bl	8004a3a <move_window>
		if (res != FR_OK) break;
 8005610:	4605      	mov	r5, r0
 8005612:	2800      	cmp	r0, #0
 8005614:	d149      	bne.n	80056aa <dir_read.constprop.0+0xbe>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005616:	6a30      	ldr	r0, [r6, #32]
 8005618:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) {
 800561a:	2b00      	cmp	r3, #0
 800561c:	d05c      	beq.n	80056d8 <dir_read.constprop.0+0xec>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800561e:	7ac2      	ldrb	r2, [r0, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005620:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005622:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005626:	71b2      	strb	r2, [r6, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005628:	d044      	beq.n	80056b4 <dir_read.constprop.0+0xc8>
 800562a:	2b2e      	cmp	r3, #46	; 0x2e
 800562c:	d042      	beq.n	80056b4 <dir_read.constprop.0+0xc8>
 800562e:	f022 0120 	bic.w	r1, r2, #32
 8005632:	2908      	cmp	r1, #8
 8005634:	d03e      	beq.n	80056b4 <dir_read.constprop.0+0xc8>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005636:	2a0f      	cmp	r2, #15
 8005638:	d141      	bne.n	80056be <dir_read.constprop.0+0xd2>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800563a:	0659      	lsls	r1, r3, #25
 800563c:	d538      	bpl.n	80056b0 <dir_read.constprop.0+0xc4>
						c &= (BYTE)~LLEF; ord = c;
 800563e:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8005642:	6973      	ldr	r3, [r6, #20]
						sum = dp->dir[LDIR_Chksum];
 8005644:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
 8005646:	6333      	str	r3, [r6, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005648:	7b43      	ldrb	r3, [r0, #13]
 800564a:	42bb      	cmp	r3, r7
 800564c:	d132      	bne.n	80056b4 <dir_read.constprop.0+0xc8>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800564e:	8b42      	ldrh	r2, [r0, #26]
 8005650:	bb82      	cbnz	r2, 80056b4 <dir_read.constprop.0+0xc8>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005652:	7803      	ldrb	r3, [r0, #0]
 8005654:	210d      	movs	r1, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005656:	f8d8 500c 	ldr.w	r5, [r8, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800565a:	f04f 0e01 	mov.w	lr, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800565e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005662:	f8df c078 	ldr.w	ip, [pc, #120]	; 80056dc <dir_read.constprop.0+0xf0>
 8005666:	3b01      	subs	r3, #1
 8005668:	434b      	muls	r3, r1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800566a:	f81c 1b01 	ldrb.w	r1, [ip], #1
	rv = ptr[1];
 800566e:	5a41      	ldrh	r1, [r0, r1]
		if (wc) {
 8005670:	f1be 0f00 	cmp.w	lr, #0
 8005674:	d020      	beq.n	80056b8 <dir_read.constprop.0+0xcc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005676:	2bfe      	cmp	r3, #254	; 0xfe
 8005678:	d81c      	bhi.n	80056b4 <dir_read.constprop.0+0xc8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800567a:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
 800567e:	468e      	mov	lr, r1
 8005680:	3301      	adds	r3, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005682:	3201      	adds	r2, #1
 8005684:	2a0d      	cmp	r2, #13
 8005686:	d1f0      	bne.n	800566a <dir_read.constprop.0+0x7e>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8005688:	7802      	ldrb	r2, [r0, #0]
 800568a:	0652      	lsls	r2, r2, #25
 800568c:	d504      	bpl.n	8005698 <dir_read.constprop.0+0xac>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800568e:	2bfe      	cmp	r3, #254	; 0xfe
 8005690:	d810      	bhi.n	80056b4 <dir_read.constprop.0+0xc8>
		lfnbuf[i] = 0;
 8005692:	2200      	movs	r2, #0
 8005694:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005698:	3c01      	subs	r4, #1
 800569a:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
 800569c:	2100      	movs	r1, #0
 800569e:	4630      	mov	r0, r6
 80056a0:	f7ff fd40 	bl	8005124 <dir_next>
		if (res != FR_OK) break;
 80056a4:	4605      	mov	r5, r0
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d0aa      	beq.n	8005600 <dir_read.constprop.0+0x14>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80056aa:	2300      	movs	r3, #0
 80056ac:	61f3      	str	r3, [r6, #28]
 80056ae:	e00c      	b.n	80056ca <dir_read.constprop.0+0xde>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80056b0:	42a3      	cmp	r3, r4
 80056b2:	d0c9      	beq.n	8005648 <dir_read.constprop.0+0x5c>
 80056b4:	24ff      	movs	r4, #255	; 0xff
 80056b6:	e7f1      	b.n	800569c <dir_read.constprop.0+0xb0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80056b8:	4549      	cmp	r1, r9
 80056ba:	d0e2      	beq.n	8005682 <dir_read.constprop.0+0x96>
 80056bc:	e7fa      	b.n	80056b4 <dir_read.constprop.0+0xc8>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80056be:	b93c      	cbnz	r4, 80056d0 <dir_read.constprop.0+0xe4>
 80056c0:	f7ff f8cc 	bl	800485c <sum_sfn>
 80056c4:	42b8      	cmp	r0, r7
 80056c6:	d103      	bne.n	80056d0 <dir_read.constprop.0+0xe4>
		res = move_window(fs, dp->sect);
 80056c8:	2500      	movs	r5, #0
}
 80056ca:	4628      	mov	r0, r5
 80056cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80056d0:	f04f 33ff 	mov.w	r3, #4294967295
 80056d4:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80056d6:	e7f8      	b.n	80056ca <dir_read.constprop.0+0xde>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80056d8:	2504      	movs	r5, #4
 80056da:	e7e6      	b.n	80056aa <dir_read.constprop.0+0xbe>
 80056dc:	0801445e 	.word	0x0801445e

080056e0 <follow_path>:
{
 80056e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 80056e6:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80056ea:	4689      	mov	r9, r1
 80056ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056f0:	2b2f      	cmp	r3, #47	; 0x2f
 80056f2:	d0fa      	beq.n	80056ea <follow_path+0xa>
 80056f4:	2b5c      	cmp	r3, #92	; 0x5c
 80056f6:	d0f8      	beq.n	80056ea <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 80056f8:	2100      	movs	r1, #0
 80056fa:	60b1      	str	r1, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80056fc:	f899 3000 	ldrb.w	r3, [r9]
 8005700:	2b1f      	cmp	r3, #31
 8005702:	f200 80af 	bhi.w	8005864 <follow_path+0x184>
		dp->fn[NSFLAG] = NS_NONAME;
 8005706:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8005708:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
 800570a:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
 800570e:	b003      	add	sp, #12
 8005710:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8005714:	f7ff bcc5 	b.w	80050a2 <dir_sdi>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005718:	3401      	adds	r4, #1
 800571a:	e0b6      	b.n	800588a <follow_path+0x1aa>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800571c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	d00c      	beq.n	800573e <follow_path+0x5e>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005724:	2101      	movs	r1, #1
 8005726:	f000 ffa3 	bl	8006670 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800572a:	b140      	cbz	r0, 800573e <follow_path+0x5e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800572c:	287f      	cmp	r0, #127	; 0x7f
 800572e:	9b00      	ldr	r3, [sp, #0]
 8005730:	d807      	bhi.n	8005742 <follow_path+0x62>
 8005732:	497f      	ldr	r1, [pc, #508]	; (8005930 <follow_path+0x250>)
	while (*str && *str != chr) str++;
 8005734:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005738:	b11a      	cbz	r2, 8005742 <follow_path+0x62>
 800573a:	4290      	cmp	r0, r2
 800573c:	d1fa      	bne.n	8005734 <follow_path+0x54>
				cf |= NS_LOSS | NS_LFN; break;
 800573e:	2006      	movs	r0, #6
 8005740:	e04d      	b.n	80057de <follow_path+0xfe>
		w = p[si++];					/* Get a character */
 8005742:	4627      	mov	r7, r4
		lfn[di++] = w;					/* Store the Unicode character */
 8005744:	f828 0f02 	strh.w	r0, [r8, #2]!
		w = p[si++];					/* Get a character */
 8005748:	e095      	b.n	8005876 <follow_path+0x196>
		w = lfn[di - 1];
 800574a:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
		if (w != ' ' && w != '.') break;
 800574e:	2b20      	cmp	r3, #32
 8005750:	d002      	beq.n	8005758 <follow_path+0x78>
 8005752:	2b2e      	cmp	r3, #46	; 0x2e
 8005754:	f040 80a9 	bne.w	80058aa <follow_path+0x1ca>
		di--;
 8005758:	3f01      	subs	r7, #1
 800575a:	e0a3      	b.n	80058a4 <follow_path+0x1c4>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800575c:	3101      	adds	r1, #1
 800575e:	e0b1      	b.n	80058c4 <follow_path+0x1e4>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005760:	4543      	cmp	r3, r8
 8005762:	d205      	bcs.n	8005770 <follow_path+0x90>
 8005764:	42ba      	cmp	r2, r7
 8005766:	d149      	bne.n	80057fc <follow_path+0x11c>
			if (ni == 11) {				/* Long extension */
 8005768:	f1b8 0f0b 	cmp.w	r8, #11
 800576c:	d13f      	bne.n	80057ee <follow_path+0x10e>
 800576e:	e002      	b.n	8005776 <follow_path+0x96>
 8005770:	f1b8 0f0b 	cmp.w	r8, #11
 8005774:	d136      	bne.n	80057e4 <follow_path+0x104>
				cf |= NS_LOSS | NS_LFN; break;
 8005776:	f044 0403 	orr.w	r4, r4, #3
 800577a:	f04f 080b 	mov.w	r8, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800577e:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8005782:	2be5      	cmp	r3, #229	; 0xe5
 8005784:	bf04      	itt	eq
 8005786:	2305      	moveq	r3, #5
 8005788:	f886 3024 	strbeq.w	r3, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800578c:	f1b8 0f08 	cmp.w	r8, #8
 8005790:	bf04      	itt	eq
 8005792:	00ad      	lsleq	r5, r5, #2
 8005794:	b2ed      	uxtbeq	r5, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005796:	f005 030c 	and.w	r3, r5, #12
 800579a:	2b0c      	cmp	r3, #12
 800579c:	d003      	beq.n	80057a6 <follow_path+0xc6>
 800579e:	f005 0203 	and.w	r2, r5, #3
 80057a2:	2a03      	cmp	r2, #3
 80057a4:	d101      	bne.n	80057aa <follow_path+0xca>
 80057a6:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80057aa:	07a1      	lsls	r1, r4, #30
 80057ac:	d409      	bmi.n	80057c2 <follow_path+0xe2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80057ae:	f005 0503 	and.w	r5, r5, #3
 80057b2:	2d01      	cmp	r5, #1
 80057b4:	bf08      	it	eq
 80057b6:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	bf08      	it	eq
 80057be:	f044 0408 	orreq.w	r4, r4, #8
			res = dir_find(dp);				/* Find an object with the segment name */
 80057c2:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80057c4:	f886 402f 	strb.w	r4, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80057c8:	f7ff fd22 	bl	8005210 <dir_find>
			ns = dp->fn[NSFLAG];
 80057cc:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80057d0:	b3c0      	cbz	r0, 8005844 <follow_path+0x164>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80057d2:	2804      	cmp	r0, #4
 80057d4:	d103      	bne.n	80057de <follow_path+0xfe>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80057d6:	f013 0f04 	tst.w	r3, #4
 80057da:	bf08      	it	eq
 80057dc:	2005      	moveq	r0, #5
}
 80057de:	b003      	add	sp, #12
 80057e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80057e4:	42ba      	cmp	r2, r7
 80057e6:	d002      	beq.n	80057ee <follow_path+0x10e>
 80057e8:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 80057ec:	d8c7      	bhi.n	800577e <follow_path+0x9e>
			b <<= 2; continue;
 80057ee:	00ad      	lsls	r5, r5, #2
 80057f0:	463a      	mov	r2, r7
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80057f2:	f04f 080b 	mov.w	r8, #11
 80057f6:	2308      	movs	r3, #8
			b <<= 2; continue;
 80057f8:	b2ed      	uxtb	r5, r5
 80057fa:	e088      	b.n	800590e <follow_path+0x22e>
		if (w >= 0x80) {				/* Non ASCII character */
 80057fc:	287f      	cmp	r0, #127	; 0x7f
 80057fe:	d90e      	bls.n	800581e <follow_path+0x13e>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005800:	2100      	movs	r1, #0
			cf |= NS_LFN;				/* Force create LFN entry */
 8005802:	f044 0402 	orr.w	r4, r4, #2
 8005806:	e9cd 2300 	strd	r2, r3, [sp]
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800580a:	f000 ff31 	bl	8006670 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800580e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005812:	b160      	cbz	r0, 800582e <follow_path+0x14e>
 8005814:	4947      	ldr	r1, [pc, #284]	; (8005934 <follow_path+0x254>)
 8005816:	4408      	add	r0, r1
 8005818:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800581c:	b138      	cbz	r0, 800582e <follow_path+0x14e>
	while (*str && *str != chr) str++;
 800581e:	f8df c118 	ldr.w	ip, [pc, #280]	; 8005938 <follow_path+0x258>
 8005822:	f81c 1b01 	ldrb.w	r1, [ip], #1
 8005826:	2900      	cmp	r1, #0
 8005828:	d075      	beq.n	8005916 <follow_path+0x236>
 800582a:	4281      	cmp	r1, r0
 800582c:	d1f9      	bne.n	8005822 <follow_path+0x142>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800582e:	f044 0403 	orr.w	r4, r4, #3
 8005832:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8005834:	18f1      	adds	r1, r6, r3
 8005836:	3301      	adds	r3, #1
 8005838:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 800583c:	e067      	b.n	800590e <follow_path+0x22e>
					b |= 2;
 800583e:	f045 0502 	orr.w	r5, r5, #2
 8005842:	e7f7      	b.n	8005834 <follow_path+0x154>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005844:	075a      	lsls	r2, r3, #29
 8005846:	d4ca      	bmi.n	80057de <follow_path+0xfe>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005848:	79b3      	ldrb	r3, [r6, #6]
 800584a:	06db      	lsls	r3, r3, #27
 800584c:	d561      	bpl.n	8005912 <follow_path+0x232>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800584e:	6971      	ldr	r1, [r6, #20]
 8005850:	f10b 0334 	add.w	r3, fp, #52	; 0x34
 8005854:	f89b 0000 	ldrb.w	r0, [fp]
 8005858:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800585c:	4419      	add	r1, r3
 800585e:	f7ff fb32 	bl	8004ec6 <ld_clust.isra.0>
 8005862:	60b0      	str	r0, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005864:	6833      	ldr	r3, [r6, #0]
 8005866:	2700      	movs	r7, #0
 8005868:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800586c:	f109 33ff 	add.w	r3, r9, #4294967295
 8005870:	f1aa 0502 	sub.w	r5, sl, #2
 8005874:	46a8      	mov	r8, r5
		w = p[si++];					/* Get a character */
 8005876:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800587a:	1c7c      	adds	r4, r7, #1
		if (w < ' ') break;				/* Break if end of the path name */
 800587c:	281f      	cmp	r0, #31
 800587e:	d90c      	bls.n	800589a <follow_path+0x1ba>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005880:	282f      	cmp	r0, #47	; 0x2f
 8005882:	d002      	beq.n	800588a <follow_path+0x1aa>
 8005884:	285c      	cmp	r0, #92	; 0x5c
 8005886:	f47f af49 	bne.w	800571c <follow_path+0x3c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800588a:	f819 3004 	ldrb.w	r3, [r9, r4]
 800588e:	2b2f      	cmp	r3, #47	; 0x2f
 8005890:	f43f af42 	beq.w	8005718 <follow_path+0x38>
 8005894:	2b5c      	cmp	r3, #92	; 0x5c
 8005896:	f43f af3f 	beq.w	8005718 <follow_path+0x38>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800589a:	2820      	cmp	r0, #32
	*path = &p[si];						/* Return pointer to the next segment */
 800589c:	44a1      	add	r9, r4
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800589e:	bf34      	ite	cc
 80058a0:	2404      	movcc	r4, #4
 80058a2:	2400      	movcs	r4, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80058a4:	2f00      	cmp	r7, #0
 80058a6:	f47f af50 	bne.w	800574a <follow_path+0x6a>
	lfn[di] = 0;						/* LFN is created */
 80058aa:	2300      	movs	r3, #0
 80058ac:	f82a 3017 	strh.w	r3, [sl, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80058b0:	2f00      	cmp	r7, #0
 80058b2:	f43f af44 	beq.w	800573e <follow_path+0x5e>
	mem_set(dp->fn, ' ', 11);
 80058b6:	2120      	movs	r1, #32
 80058b8:	220b      	movs	r2, #11
 80058ba:	f106 0024 	add.w	r0, r6, #36	; 0x24
 80058be:	f7fe fef7 	bl	80046b0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80058c2:	4619      	mov	r1, r3
 80058c4:	f83a 3011 	ldrh.w	r3, [sl, r1, lsl #1]
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	f43f af47 	beq.w	800575c <follow_path+0x7c>
 80058ce:	2b2e      	cmp	r3, #46	; 0x2e
 80058d0:	f43f af44 	beq.w	800575c <follow_path+0x7c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80058d4:	b109      	cbz	r1, 80058da <follow_path+0x1fa>
 80058d6:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80058da:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
 80058de:	2b2e      	cmp	r3, #46	; 0x2e
 80058e0:	d001      	beq.n	80058e6 <follow_path+0x206>
 80058e2:	3f01      	subs	r7, #1
 80058e4:	d1f9      	bne.n	80058da <follow_path+0x1fa>
		dp->fn[i++] = (BYTE)w;
 80058e6:	2300      	movs	r3, #0
 80058e8:	f04f 0808 	mov.w	r8, #8
 80058ec:	461d      	mov	r5, r3
		w = lfn[si++];					/* Get an LFN character */
 80058ee:	f83a 0011 	ldrh.w	r0, [sl, r1, lsl #1]
 80058f2:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 80058f4:	2800      	cmp	r0, #0
 80058f6:	f43f af42 	beq.w	800577e <follow_path+0x9e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80058fa:	2820      	cmp	r0, #32
 80058fc:	d005      	beq.n	800590a <follow_path+0x22a>
 80058fe:	282e      	cmp	r0, #46	; 0x2e
 8005900:	f47f af2e 	bne.w	8005760 <follow_path+0x80>
 8005904:	42ba      	cmp	r2, r7
 8005906:	f43f af2f 	beq.w	8005768 <follow_path+0x88>
			cf |= NS_LOSS | NS_LFN; continue;
 800590a:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 800590e:	4611      	mov	r1, r2
 8005910:	e7ed      	b.n	80058ee <follow_path+0x20e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005912:	2005      	movs	r0, #5
	return res;
 8005914:	e763      	b.n	80057de <follow_path+0xfe>
				if (IsUpper(w)) {		/* ASCII large capital */
 8005916:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800591a:	2919      	cmp	r1, #25
 800591c:	d98f      	bls.n	800583e <follow_path+0x15e>
					if (IsLower(w)) {	/* ASCII small capital */
 800591e:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8005922:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8005924:	bf9e      	ittt	ls
 8005926:	3820      	subls	r0, #32
 8005928:	f045 0501 	orrls.w	r5, r5, #1
 800592c:	b280      	uxthls	r0, r0
 800592e:	e781      	b.n	8005834 <follow_path+0x154>
 8005930:	080143ce 	.word	0x080143ce
 8005934:	080143de 	.word	0x080143de
 8005938:	080143d7 	.word	0x080143d7

0800593c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800593c:	b530      	push	{r4, r5, lr}
 800593e:	b085      	sub	sp, #20
 8005940:	4614      	mov	r4, r2
 8005942:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005946:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 8005948:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 800594a:	f7fe ff96 	bl	800487a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800594e:	1e01      	subs	r1, r0, #0
 8005950:	db17      	blt.n	8005982 <f_mount+0x46>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005952:	4d0e      	ldr	r5, [pc, #56]	; (800598c <f_mount+0x50>)
 8005954:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]

	if (cfs) {
 8005958:	b118      	cbz	r0, 8005962 <f_mount+0x26>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800595a:	f7fe ff49 	bl	80047f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800595e:	2300      	movs	r3, #0
 8005960:	7003      	strb	r3, [r0, #0]
	}

	if (fs) {
 8005962:	9801      	ldr	r0, [sp, #4]
 8005964:	b108      	cbz	r0, 800596a <f_mount+0x2e>
		fs->fs_type = 0;				/* Clear new fs object */
 8005966:	2300      	movs	r3, #0
 8005968:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800596a:	f845 0021 	str.w	r0, [r5, r1, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800596e:	b130      	cbz	r0, 800597e <f_mount+0x42>
 8005970:	2c01      	cmp	r4, #1
 8005972:	d108      	bne.n	8005986 <f_mount+0x4a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005974:	2200      	movs	r2, #0
 8005976:	a901      	add	r1, sp, #4
 8005978:	4668      	mov	r0, sp
 800597a:	f7ff f8b1 	bl	8004ae0 <find_volume>
	LEAVE_FF(fs, res);
}
 800597e:	b005      	add	sp, #20
 8005980:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8005982:	200b      	movs	r0, #11
 8005984:	e7fb      	b.n	800597e <f_mount+0x42>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005986:	2000      	movs	r0, #0
 8005988:	e7f9      	b.n	800597e <f_mount+0x42>
 800598a:	bf00      	nop
 800598c:	24000c58 	.word	0x24000c58

08005990 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005994:	b091      	sub	sp, #68	; 0x44
 8005996:	4690      	mov	r8, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005998:	4605      	mov	r5, r0
{
 800599a:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 800599c:	2800      	cmp	r0, #0
 800599e:	f000 8108 	beq.w	8005bb2 <f_open+0x222>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80059a2:	f002 063f 	and.w	r6, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80059a6:	a902      	add	r1, sp, #8
 80059a8:	a801      	add	r0, sp, #4
 80059aa:	4632      	mov	r2, r6
 80059ac:	f7ff f898 	bl	8004ae0 <find_volume>
	if (res == FR_OK) {
 80059b0:	2800      	cmp	r0, #0
 80059b2:	f040 80fc 	bne.w	8005bae <f_open+0x21e>
		dj.obj.fs = fs;
 80059b6:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
 80059b8:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
 80059bc:	9303      	str	r3, [sp, #12]
		INIT_NAMBUF(fs);
 80059be:	f000 fe52 	bl	8006666 <ff_memalloc>
 80059c2:	4607      	mov	r7, r0
 80059c4:	2800      	cmp	r0, #0
 80059c6:	f000 80f6 	beq.w	8005bb6 <f_open+0x226>
 80059ca:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 80059cc:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 80059ce:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80059d0:	a803      	add	r0, sp, #12
 80059d2:	f7ff fe85 	bl	80056e0 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80059d6:	4604      	mov	r4, r0
 80059d8:	b960      	cbnz	r0, 80059f4 <f_open+0x64>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80059da:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 80059de:	2b00      	cmp	r3, #0
 80059e0:	db60      	blt.n	8005aa4 <f_open+0x114>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80059e2:	f016 0f3e 	tst.w	r6, #62	; 0x3e
 80059e6:	a803      	add	r0, sp, #12
 80059e8:	bf14      	ite	ne
 80059ea:	2101      	movne	r1, #1
 80059ec:	2100      	moveq	r1, #0
 80059ee:	f7fe fe65 	bl	80046bc <chk_lock>
 80059f2:	4604      	mov	r4, r0
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80059f4:	f018 0f1c 	tst.w	r8, #28
 80059f8:	d076      	beq.n	8005ae8 <f_open+0x158>
			if (res != FR_OK) {					/* No file, create new */
 80059fa:	2c00      	cmp	r4, #0
 80059fc:	d054      	beq.n	8005aa8 <f_open+0x118>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80059fe:	2c04      	cmp	r4, #4
 8005a00:	d146      	bne.n	8005a90 <f_open+0x100>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a02:	4b6e      	ldr	r3, [pc, #440]	; (8005bbc <f_open+0x22c>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	b11a      	cbz	r2, 8005a10 <f_open+0x80>
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f040 80c9 	bne.w	8005ba2 <f_open+0x212>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005a10:	a803      	add	r0, sp, #12
 8005a12:	f7ff fcad 	bl	8005370 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005a16:	4604      	mov	r4, r0
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d139      	bne.n	8005a90 <f_open+0x100>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005a1c:	f046 0608 	orr.w	r6, r6, #8
				dw = GET_FATTIME();
 8005a20:	f7fe fe3a 	bl	8004698 <get_fattime>
 8005a24:	4601      	mov	r1, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005a26:	9000      	str	r0, [sp, #0]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005a28:	2220      	movs	r2, #32
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005a2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005a2c:	300e      	adds	r0, #14
 8005a2e:	f7fe fe37 	bl	80046a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005a32:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005a34:	9900      	ldr	r1, [sp, #0]
 8005a36:	3016      	adds	r0, #22
 8005a38:	f7fe fe32 	bl	80046a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005a3e:	9c02      	ldr	r4, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005a40:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005a42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a44:	7820      	ldrb	r0, [r4, #0]
 8005a46:	f7ff fa3e 	bl	8004ec6 <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005a4a:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005a4c:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f7fe fef8 	bl	8004844 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005a54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8005a56:	2200      	movs	r2, #0
					fs->wflag = 1;
 8005a58:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8005a5a:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a5c:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a5e:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8005a60:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8005a62:	9b02      	ldr	r3, [sp, #8]
 8005a64:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005a66:	f1b8 0f00 	cmp.w	r8, #0
 8005a6a:	d028      	beq.n	8005abe <f_open+0x12e>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 8005a6c:	4641      	mov	r1, r8
 8005a6e:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 8005a70:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8005a74:	f7ff fa85 	bl	8004f82 <remove_chain>
						if (res == FR_OK) {
 8005a78:	4604      	mov	r4, r0
 8005a7a:	b948      	cbnz	r0, 8005a90 <f_open+0x100>
							res = move_window(fs, dw);
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	9802      	ldr	r0, [sp, #8]
 8005a80:	f7fe ffdb 	bl	8004a3a <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005a84:	f108 33ff 	add.w	r3, r8, #4294967295
 8005a88:	9a02      	ldr	r2, [sp, #8]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8005a8a:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005a8c:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
 8005a8e:	b1b0      	cbz	r0, 8005abe <f_open+0x12e>
				}
			}
#endif
		}

		FREE_NAMBUF();
 8005a90:	4638      	mov	r0, r7
 8005a92:	f000 fdea 	bl	800666a <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005a96:	b10c      	cbz	r4, 8005a9c <f_open+0x10c>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	b011      	add	sp, #68	; 0x44
 8005aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				res = FR_INVALID_NAME;
 8005aa4:	2406      	movs	r4, #6
 8005aa6:	e7a5      	b.n	80059f4 <f_open+0x64>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005aa8:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8005aac:	f013 0f11 	tst.w	r3, #17
 8005ab0:	d125      	bne.n	8005afe <f_open+0x16e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005ab2:	f018 0f04 	tst.w	r8, #4
 8005ab6:	d176      	bne.n	8005ba6 <f_open+0x216>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005ab8:	f018 0f08 	tst.w	r8, #8
 8005abc:	d1b0      	bne.n	8005a20 <f_open+0x90>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005abe:	0730      	lsls	r0, r6, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005ac0:	9b02      	ldr	r3, [sp, #8]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ac2:	a803      	add	r0, sp, #12
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				mode |= FA_MODIFIED;
 8005ac6:	bf48      	it	mi
 8005ac8:	f046 0640 	orrmi.w	r6, r6, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005acc:	626b      	str	r3, [r5, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ace:	f016 0ffe 	tst.w	r6, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8005ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ad4:	bf14      	ite	ne
 8005ad6:	2101      	movne	r1, #1
 8005ad8:	2100      	moveq	r1, #0
			fp->dir_ptr = dj.dir;
 8005ada:	62ab      	str	r3, [r5, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005adc:	f7fe fe28 	bl	8004730 <inc_lock>
 8005ae0:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005ae2:	b970      	cbnz	r0, 8005b02 <f_open+0x172>
 8005ae4:	2402      	movs	r4, #2
 8005ae6:	e7d3      	b.n	8005a90 <f_open+0x100>
			if (res == FR_OK) {					/* Following succeeded */
 8005ae8:	2c00      	cmp	r4, #0
 8005aea:	d1d1      	bne.n	8005a90 <f_open+0x100>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005aec:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8005af0:	06da      	lsls	r2, r3, #27
 8005af2:	d45a      	bmi.n	8005baa <f_open+0x21a>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005af4:	f018 0f02 	tst.w	r8, #2
 8005af8:	d0e1      	beq.n	8005abe <f_open+0x12e>
 8005afa:	07dc      	lsls	r4, r3, #31
 8005afc:	d5df      	bpl.n	8005abe <f_open+0x12e>
					res = FR_DENIED;
 8005afe:	2407      	movs	r4, #7
 8005b00:	e7c6      	b.n	8005a90 <f_open+0x100>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005b02:	9c02      	ldr	r4, [sp, #8]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005b04:	f105 0830 	add.w	r8, r5, #48	; 0x30
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005b08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b0a:	7820      	ldrb	r0, [r4, #0]
 8005b0c:	f7ff f9db 	bl	8004ec6 <ld_clust.isra.0>
 8005b10:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005b12:	f101 001c 	add.w	r0, r1, #28
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005b16:	2100      	movs	r1, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005b18:	f7fe fdc0 	bl	800469c <ld_dword>
			fp->obj.id = fs->id;
 8005b1c:	88e3      	ldrh	r3, [r4, #6]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005b22:	60e8      	str	r0, [r5, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005b24:	62e9      	str	r1, [r5, #44]	; 0x2c
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005b26:	4640      	mov	r0, r8
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005b28:	602c      	str	r4, [r5, #0]
			fp->obj.id = fs->id;
 8005b2a:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 8005b2c:	752e      	strb	r6, [r5, #20]
			fp->err = 0;			/* Clear error flag */
 8005b2e:	7569      	strb	r1, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005b30:	6229      	str	r1, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005b32:	61a9      	str	r1, [r5, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005b34:	f7fe fdbc 	bl	80046b0 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005b38:	06b2      	lsls	r2, r6, #26
 8005b3a:	d401      	bmi.n	8005b40 <f_open+0x1b0>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005b3c:	2400      	movs	r4, #0
 8005b3e:	e7a7      	b.n	8005a90 <f_open+0x100>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005b40:	68ee      	ldr	r6, [r5, #12]
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	d0fa      	beq.n	8005b3c <f_open+0x1ac>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005b46:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005b48:	68a9      	ldr	r1, [r5, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005b4a:	895c      	ldrh	r4, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005b4c:	61ae      	str	r6, [r5, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005b4e:	0264      	lsls	r4, r4, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005b50:	42b4      	cmp	r4, r6
 8005b52:	d319      	bcc.n	8005b88 <f_open+0x1f8>
 8005b54:	2400      	movs	r4, #0
				fp->clust = clst;
 8005b56:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005b58:	2c00      	cmp	r4, #0
 8005b5a:	d199      	bne.n	8005a90 <f_open+0x100>
 8005b5c:	f3c6 0308 	ubfx	r3, r6, #0, #9
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0eb      	beq.n	8005b3c <f_open+0x1ac>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005b64:	9c02      	ldr	r4, [sp, #8]
 8005b66:	4620      	mov	r0, r4
 8005b68:	f7fe fe50 	bl	800480c <clust2sect>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d0b9      	beq.n	8005ae4 <f_open+0x154>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005b70:	eb00 2256 	add.w	r2, r0, r6, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	4641      	mov	r1, r8
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005b78:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005b7a:	7860      	ldrb	r0, [r4, #1]
 8005b7c:	f7fe fd62 	bl	8004644 <disk_read>
						res = FR_DENIED;
 8005b80:	1e04      	subs	r4, r0, #0
 8005b82:	bf18      	it	ne
 8005b84:	2401      	movne	r4, #1
 8005b86:	e783      	b.n	8005a90 <f_open+0x100>
					clst = get_fat(&fp->obj, clst);
 8005b88:	6828      	ldr	r0, [r5, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005b8a:	1b36      	subs	r6, r6, r4
					clst = get_fat(&fp->obj, clst);
 8005b8c:	f7ff f9a3 	bl	8004ed6 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8005b90:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8005b92:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8005b94:	d903      	bls.n	8005b9e <f_open+0x20e>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005b96:	1c43      	adds	r3, r0, #1
 8005b98:	d1da      	bne.n	8005b50 <f_open+0x1c0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005b9a:	2401      	movs	r4, #1
 8005b9c:	e7db      	b.n	8005b56 <f_open+0x1c6>
					if (clst <= 1) res = FR_INT_ERR;
 8005b9e:	2402      	movs	r4, #2
 8005ba0:	e7d9      	b.n	8005b56 <f_open+0x1c6>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005ba2:	2412      	movs	r4, #18
 8005ba4:	e774      	b.n	8005a90 <f_open+0x100>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005ba6:	2408      	movs	r4, #8
 8005ba8:	e772      	b.n	8005a90 <f_open+0x100>
					res = FR_NO_FILE;
 8005baa:	2404      	movs	r4, #4
 8005bac:	e770      	b.n	8005a90 <f_open+0x100>
 8005bae:	4604      	mov	r4, r0
 8005bb0:	e772      	b.n	8005a98 <f_open+0x108>
	if (!fp) return FR_INVALID_OBJECT;
 8005bb2:	2409      	movs	r4, #9
 8005bb4:	e772      	b.n	8005a9c <f_open+0x10c>
		INIT_NAMBUF(fs);
 8005bb6:	2411      	movs	r4, #17
 8005bb8:	e770      	b.n	8005a9c <f_open+0x10c>
 8005bba:	bf00      	nop
 8005bbc:	24000c60 	.word	0x24000c60

08005bc0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	b087      	sub	sp, #28
 8005bc6:	4616      	mov	r6, r2
 8005bc8:	4689      	mov	r9, r1
 8005bca:	4604      	mov	r4, r0
 8005bcc:	9301      	str	r3, [sp, #4]
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8005bce:	2300      	movs	r3, #0
 8005bd0:	9a01      	ldr	r2, [sp, #4]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005bd2:	a905      	add	r1, sp, #20
	*br = 0;	/* Clear read byte counter */
 8005bd4:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005bd6:	f7fe fe6d 	bl	80048b4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005bda:	4605      	mov	r5, r0
 8005bdc:	bb18      	cbnz	r0, 8005c26 <f_read+0x66>
 8005bde:	7d65      	ldrb	r5, [r4, #21]
 8005be0:	bb0d      	cbnz	r5, 8005c26 <f_read+0x66>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005be2:	7d23      	ldrb	r3, [r4, #20]
 8005be4:	f013 0301 	ands.w	r3, r3, #1
 8005be8:	9302      	str	r3, [sp, #8]
 8005bea:	f000 8099 	beq.w	8005d20 <f_read+0x160>
	remain = fp->obj.objsize - fp->fptr;
 8005bee:	68e2      	ldr	r2, [r4, #12]
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005bf0:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	remain = fp->obj.objsize - fp->fptr;
 8005bf4:	69a3      	ldr	r3, [r4, #24]
 8005bf6:	1ad2      	subs	r2, r2, r3
 8005bf8:	4296      	cmp	r6, r2
 8005bfa:	bf28      	it	cs
 8005bfc:	4616      	movcs	r6, r2
	for ( ;  btr;								/* Repeat until all data read */
 8005bfe:	b196      	cbz	r6, 8005c26 <f_read+0x66>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005c00:	69a1      	ldr	r1, [r4, #24]
 8005c02:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d17c      	bne.n	8005d04 <f_read+0x144>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005c0a:	9b05      	ldr	r3, [sp, #20]
 8005c0c:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8005c10:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {					/* On the cluster boundary? */
 8005c14:	ea18 2851 	ands.w	r8, r8, r1, lsr #9
 8005c18:	d11b      	bne.n	8005c52 <f_read+0x92>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005c1a:	b941      	cbnz	r1, 8005c2e <f_read+0x6e>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005c1c:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005c1e:	2801      	cmp	r0, #1
 8005c20:	d810      	bhi.n	8005c44 <f_read+0x84>
 8005c22:	2502      	movs	r5, #2
 8005c24:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8005c26:	4628      	mov	r0, r5
 8005c28:	b007      	add	sp, #28
 8005c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8005c2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005c30:	b11b      	cbz	r3, 8005c3a <f_read+0x7a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005c32:	4620      	mov	r0, r4
 8005c34:	f7fe fdf5 	bl	8004822 <clmt_clust>
 8005c38:	e7f1      	b.n	8005c1e <f_read+0x5e>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005c3a:	69e1      	ldr	r1, [r4, #28]
 8005c3c:	6820      	ldr	r0, [r4, #0]
 8005c3e:	f7ff f94a 	bl	8004ed6 <get_fat.isra.0>
 8005c42:	e7ec      	b.n	8005c1e <f_read+0x5e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d103      	bne.n	8005c50 <f_read+0x90>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	9d02      	ldr	r5, [sp, #8]
 8005c4c:	7563      	strb	r3, [r4, #21]
 8005c4e:	e7ea      	b.n	8005c26 <f_read+0x66>
				fp->clust = clst;				/* Update current cluster */
 8005c50:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005c52:	f8dd b014 	ldr.w	fp, [sp, #20]
 8005c56:	69e1      	ldr	r1, [r4, #28]
 8005c58:	4658      	mov	r0, fp
 8005c5a:	f7fe fdd7 	bl	800480c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d0df      	beq.n	8005c22 <f_read+0x62>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005c62:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8005c66:	eb08 0700 	add.w	r7, r8, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005c6a:	d32e      	bcc.n	8005cca <f_read+0x10a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005c6c:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8005c70:	eb08 2156 	add.w	r1, r8, r6, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005c74:	0a73      	lsrs	r3, r6, #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005c76:	f89b 0001 	ldrb.w	r0, [fp, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005c7a:	4291      	cmp	r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005c7c:	4649      	mov	r1, r9
					cc = fs->csize - csect;
 8005c7e:	bf88      	it	hi
 8005c80:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005c84:	463a      	mov	r2, r7
 8005c86:	9303      	str	r3, [sp, #12]
 8005c88:	f7fe fcdc 	bl	8004644 <disk_read>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d1db      	bne.n	8005c48 <f_read+0x88>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005c90:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	2a00      	cmp	r2, #0
 8005c98:	da0b      	bge.n	8005cb2 <f_read+0xf2>
 8005c9a:	6a20      	ldr	r0, [r4, #32]
 8005c9c:	1bc0      	subs	r0, r0, r7
 8005c9e:	4298      	cmp	r0, r3
 8005ca0:	d207      	bcs.n	8005cb2 <f_read+0xf2>
	if (cnt) {
 8005ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca6:	4651      	mov	r1, sl
 8005ca8:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8005cac:	f7fe fe90 	bl	80049d0 <mem_cpy.part.0>
 8005cb0:	9b03      	ldr	r3, [sp, #12]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005cb2:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005cb4:	69a3      	ldr	r3, [r4, #24]
 8005cb6:	44b9      	add	r9, r7
 8005cb8:	9a01      	ldr	r2, [sp, #4]
 8005cba:	1bf6      	subs	r6, r6, r7
 8005cbc:	443b      	add	r3, r7
 8005cbe:	61a3      	str	r3, [r4, #24]
 8005cc0:	9b01      	ldr	r3, [sp, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	443b      	add	r3, r7
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	e799      	b.n	8005bfe <f_read+0x3e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005cca:	6a22      	ldr	r2, [r4, #32]
 8005ccc:	42ba      	cmp	r2, r7
 8005cce:	d018      	beq.n	8005d02 <f_read+0x142>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005cd0:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	da0b      	bge.n	8005cf0 <f_read+0x130>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4651      	mov	r1, sl
 8005cdc:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8005ce0:	f7fe fcbe 	bl	8004660 <disk_write>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d1af      	bne.n	8005c48 <f_read+0x88>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005ce8:	7d23      	ldrb	r3, [r4, #20]
 8005cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cee:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005cf0:	9805      	ldr	r0, [sp, #20]
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	463a      	mov	r2, r7
 8005cf6:	4651      	mov	r1, sl
 8005cf8:	7840      	ldrb	r0, [r0, #1]
 8005cfa:	f7fe fca3 	bl	8004644 <disk_read>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d1a2      	bne.n	8005c48 <f_read+0x88>
			fp->sect = sect;
 8005d02:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005d04:	69a1      	ldr	r1, [r4, #24]
 8005d06:	4648      	mov	r0, r9
 8005d08:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005d0c:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005d10:	4451      	add	r1, sl
 8005d12:	42b7      	cmp	r7, r6
 8005d14:	bf28      	it	cs
 8005d16:	4637      	movcs	r7, r6
	if (cnt) {
 8005d18:	463a      	mov	r2, r7
 8005d1a:	f7fe fe59 	bl	80049d0 <mem_cpy.part.0>
}
 8005d1e:	e7c9      	b.n	8005cb4 <f_read+0xf4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005d20:	2507      	movs	r5, #7
 8005d22:	e780      	b.n	8005c26 <f_read+0x66>

08005d24 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d28:	4699      	mov	r9, r3
 8005d2a:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8005d2c:	2300      	movs	r3, #0
{
 8005d2e:	4688      	mov	r8, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005d30:	a903      	add	r1, sp, #12
{
 8005d32:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
 8005d34:	f8c9 3000 	str.w	r3, [r9]
{
 8005d38:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005d3a:	f7fe fdbb 	bl	80048b4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005d3e:	4605      	mov	r5, r0
 8005d40:	bb50      	cbnz	r0, 8005d98 <f_write+0x74>
 8005d42:	7d65      	ldrb	r5, [r4, #21]
 8005d44:	bb45      	cbnz	r5, 8005d98 <f_write+0x74>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005d46:	7d23      	ldrb	r3, [r4, #20]
 8005d48:	079a      	lsls	r2, r3, #30
 8005d4a:	f140 80af 	bpl.w	8005eac <f_write+0x188>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005d4e:	69a3      	ldr	r3, [r4, #24]
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005d50:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005d54:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005d56:	bf28      	it	cs
 8005d58:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
 8005d5a:	b1ce      	cbz	r6, 8005d90 <f_write+0x6c>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005d5c:	69a1      	ldr	r1, [r4, #24]
 8005d5e:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f040 8090 	bne.w	8005e88 <f_write+0x164>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005d68:	9b03      	ldr	r3, [sp, #12]
 8005d6a:	895f      	ldrh	r7, [r3, #10]
 8005d6c:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8005d6e:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8005d72:	d124      	bne.n	8005dbe <f_write+0x9a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005d74:	b931      	cbnz	r1, 8005d84 <f_write+0x60>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005d76:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8005d78:	b9a0      	cbnz	r0, 8005da4 <f_write+0x80>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005d7a:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f7ff f938 	bl	8004ff2 <create_chain>
 8005d82:	e004      	b.n	8005d8e <f_write+0x6a>
					if (fp->cltbl) {
 8005d84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005d86:	b15b      	cbz	r3, 8005da0 <f_write+0x7c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f7fe fd4a 	bl	8004822 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005d8e:	b948      	cbnz	r0, 8005da4 <f_write+0x80>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005d90:	7d23      	ldrb	r3, [r4, #20]
 8005d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d96:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 8005d98:	4628      	mov	r0, r5
 8005d9a:	b005      	add	sp, #20
 8005d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005da0:	69e1      	ldr	r1, [r4, #28]
 8005da2:	e7eb      	b.n	8005d7c <f_write+0x58>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005da4:	2801      	cmp	r0, #1
 8005da6:	d102      	bne.n	8005dae <f_write+0x8a>
 8005da8:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005daa:	7565      	strb	r5, [r4, #21]
 8005dac:	e7f4      	b.n	8005d98 <f_write+0x74>
 8005dae:	1c43      	adds	r3, r0, #1
 8005db0:	d101      	bne.n	8005db6 <f_write+0x92>
 8005db2:	2501      	movs	r5, #1
 8005db4:	e7f9      	b.n	8005daa <f_write+0x86>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005db6:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8005db8:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005dba:	b903      	cbnz	r3, 8005dbe <f_write+0x9a>
 8005dbc:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005dbe:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	da0c      	bge.n	8005de0 <f_write+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005dc6:	9803      	ldr	r0, [sp, #12]
 8005dc8:	2301      	movs	r3, #1
 8005dca:	6a22      	ldr	r2, [r4, #32]
 8005dcc:	4651      	mov	r1, sl
 8005dce:	7840      	ldrb	r0, [r0, #1]
 8005dd0:	f7fe fc46 	bl	8004660 <disk_write>
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	d1ec      	bne.n	8005db2 <f_write+0x8e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005dd8:	7d23      	ldrb	r3, [r4, #20]
 8005dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dde:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005de0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005de4:	69e1      	ldr	r1, [r4, #28]
 8005de6:	4658      	mov	r0, fp
 8005de8:	f7fe fd10 	bl	800480c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d0db      	beq.n	8005da8 <f_write+0x84>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005df0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8005df4:	eb07 0200 	add.w	r2, r7, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005df8:	d334      	bcc.n	8005e64 <f_write+0x140>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005dfa:	f8bb 100a 	ldrh.w	r1, [fp, #10]
 8005dfe:	eb07 2056 	add.w	r0, r7, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005e02:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005e04:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005e06:	f89b 0001 	ldrb.w	r0, [fp, #1]
					cc = fs->csize - csect;
 8005e0a:	bf88      	it	hi
 8005e0c:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005e0e:	4641      	mov	r1, r8
 8005e10:	e9cd 2300 	strd	r2, r3, [sp]
 8005e14:	f7fe fc24 	bl	8004660 <disk_write>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1ca      	bne.n	8005db2 <f_write+0x8e>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005e1c:	6a21      	ldr	r1, [r4, #32]
 8005e1e:	9a00      	ldr	r2, [sp, #0]
 8005e20:	9b01      	ldr	r3, [sp, #4]
 8005e22:	1a89      	subs	r1, r1, r2
 8005e24:	4299      	cmp	r1, r3
 8005e26:	d20c      	bcs.n	8005e42 <f_write+0x11e>
 8005e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e2c:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 8005e30:	4650      	mov	r0, sl
 8005e32:	9300      	str	r3, [sp, #0]
	if (cnt) {
 8005e34:	f7fe fdcc 	bl	80049d0 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005e38:	7d22      	ldrb	r2, [r4, #20]
 8005e3a:	9b00      	ldr	r3, [sp, #0]
 8005e3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e40:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005e42:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005e44:	69a3      	ldr	r3, [r4, #24]
 8005e46:	44b8      	add	r8, r7
 8005e48:	68e2      	ldr	r2, [r4, #12]
 8005e4a:	1bf6      	subs	r6, r6, r7
 8005e4c:	443b      	add	r3, r7
 8005e4e:	61a3      	str	r3, [r4, #24]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	bf2c      	ite	cs
 8005e54:	60e2      	strcs	r2, [r4, #12]
 8005e56:	60e3      	strcc	r3, [r4, #12]
 8005e58:	f8d9 3000 	ldr.w	r3, [r9]
 8005e5c:	443b      	add	r3, r7
 8005e5e:	f8c9 3000 	str.w	r3, [r9]
 8005e62:	e77a      	b.n	8005d5a <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005e64:	6a23      	ldr	r3, [r4, #32]
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00d      	beq.n	8005e86 <f_write+0x162>
 8005e6a:	68e1      	ldr	r1, [r4, #12]
 8005e6c:	69a3      	ldr	r3, [r4, #24]
 8005e6e:	4299      	cmp	r1, r3
 8005e70:	d909      	bls.n	8005e86 <f_write+0x162>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005e72:	2301      	movs	r3, #1
 8005e74:	4651      	mov	r1, sl
 8005e76:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8005e7a:	9200      	str	r2, [sp, #0]
 8005e7c:	f7fe fbe2 	bl	8004644 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8005e80:	9a00      	ldr	r2, [sp, #0]
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d195      	bne.n	8005db2 <f_write+0x8e>
			fp->sect = sect;
 8005e86:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005e88:	69a0      	ldr	r0, [r4, #24]
 8005e8a:	4641      	mov	r1, r8
 8005e8c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005e90:	f5c0 7700 	rsb	r7, r0, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005e94:	4450      	add	r0, sl
 8005e96:	42b7      	cmp	r7, r6
 8005e98:	bf28      	it	cs
 8005e9a:	4637      	movcs	r7, r6
	if (cnt) {
 8005e9c:	463a      	mov	r2, r7
 8005e9e:	f7fe fd97 	bl	80049d0 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8005ea2:	7d23      	ldrb	r3, [r4, #20]
 8005ea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ea8:	7523      	strb	r3, [r4, #20]
 8005eaa:	e7cb      	b.n	8005e44 <f_write+0x120>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005eac:	2507      	movs	r5, #7
 8005eae:	e773      	b.n	8005d98 <f_write+0x74>

08005eb0 <putc_bfd>:
{
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005eb0:	290a      	cmp	r1, #10
{
 8005eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	460e      	mov	r6, r1
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005eb8:	d102      	bne.n	8005ec0 <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 8005eba:	210d      	movs	r1, #13
 8005ebc:	f7ff fff8 	bl	8005eb0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8005ec0:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	db14      	blt.n	8005ef0 <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005ec6:	1c5d      	adds	r5, r3, #1
 8005ec8:	4423      	add	r3, r4
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005eca:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8005ecc:	731e      	strb	r6, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005ece:	dd0b      	ble.n	8005ee8 <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005ed0:	ab01      	add	r3, sp, #4
 8005ed2:	462a      	mov	r2, r5
 8005ed4:	f104 010c 	add.w	r1, r4, #12
 8005ed8:	6820      	ldr	r0, [r4, #0]
 8005eda:	f7ff ff23 	bl	8005d24 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005ede:	9b01      	ldr	r3, [sp, #4]
 8005ee0:	1b5d      	subs	r5, r3, r5
 8005ee2:	bf18      	it	ne
 8005ee4:	f04f 35ff 	movne.w	r5, #4294967295
	}
	pb->idx = i;
	pb->nchr++;
 8005ee8:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 8005eea:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 8005eec:	3301      	adds	r3, #1
 8005eee:	60a3      	str	r3, [r4, #8]
}
 8005ef0:	b002      	add	sp, #8
 8005ef2:	bd70      	pop	{r4, r5, r6, pc}

08005ef4 <putc_flush>:
	putbuff* pb
)
{
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005ef4:	6842      	ldr	r2, [r0, #4]
 8005ef6:	2a00      	cmp	r2, #0
{
 8005ef8:	b513      	push	{r0, r1, r4, lr}
 8005efa:	4604      	mov	r4, r0
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005efc:	da03      	bge.n	8005f06 <putc_flush+0x12>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
		&& (UINT)pb->idx == nw) return pb->nchr;
	return EOF;
 8005efe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005f02:	b002      	add	sp, #8
 8005f04:	bd10      	pop	{r4, pc}
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8005f06:	f100 010c 	add.w	r1, r0, #12
 8005f0a:	ab01      	add	r3, sp, #4
 8005f0c:	6800      	ldr	r0, [r0, #0]
 8005f0e:	f7ff ff09 	bl	8005d24 <f_write>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d1f3      	bne.n	8005efe <putc_flush+0xa>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8005f16:	6862      	ldr	r2, [r4, #4]
 8005f18:	9b01      	ldr	r3, [sp, #4]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d1ef      	bne.n	8005efe <putc_flush+0xa>
 8005f1e:	68a0      	ldr	r0, [r4, #8]
 8005f20:	e7ef      	b.n	8005f02 <putc_flush+0xe>

08005f22 <f_sync>:
{
 8005f22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005f24:	a901      	add	r1, sp, #4
{
 8005f26:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005f28:	f7fe fcc4 	bl	80048b4 <validate>
	if (res == FR_OK) {
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d13b      	bne.n	8005faa <f_sync+0x88>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005f32:	7d2b      	ldrb	r3, [r5, #20]
 8005f34:	f013 0440 	ands.w	r4, r3, #64	; 0x40
 8005f38:	d037      	beq.n	8005faa <f_sync+0x88>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005f3a:	061b      	lsls	r3, r3, #24
 8005f3c:	d50c      	bpl.n	8005f58 <f_sync+0x36>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005f3e:	9801      	ldr	r0, [sp, #4]
 8005f40:	2301      	movs	r3, #1
 8005f42:	6a2a      	ldr	r2, [r5, #32]
 8005f44:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8005f48:	7840      	ldrb	r0, [r0, #1]
 8005f4a:	f7fe fb89 	bl	8004660 <disk_write>
 8005f4e:	bb78      	cbnz	r0, 8005fb0 <f_sync+0x8e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005f50:	7d2b      	ldrb	r3, [r5, #20]
 8005f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f56:	752b      	strb	r3, [r5, #20]
			tm = GET_FATTIME();				/* Modified time */
 8005f58:	f7fe fb9e 	bl	8004698 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8005f5c:	6a69      	ldr	r1, [r5, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8005f5e:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8005f60:	9801      	ldr	r0, [sp, #4]
 8005f62:	f7fe fd6a 	bl	8004a3a <move_window>
				if (res == FR_OK) {
 8005f66:	4604      	mov	r4, r0
 8005f68:	b9f8      	cbnz	r0, 8005faa <f_sync+0x88>
					dir = fp->dir_ptr;
 8005f6a:	6aae      	ldr	r6, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005f6c:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005f6e:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005f70:	f043 0320 	orr.w	r3, r3, #32
 8005f74:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005f76:	68aa      	ldr	r2, [r5, #8]
 8005f78:	6828      	ldr	r0, [r5, #0]
 8005f7a:	f7fe fc63 	bl	8004844 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005f7e:	68e9      	ldr	r1, [r5, #12]
 8005f80:	f106 001c 	add.w	r0, r6, #28
 8005f84:	f7fe fb8c 	bl	80046a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005f88:	4639      	mov	r1, r7
 8005f8a:	f106 0016 	add.w	r0, r6, #22
 8005f8e:	f7fe fb87 	bl	80046a0 <st_dword>
					fs->wflag = 1;
 8005f92:	2301      	movs	r3, #1
 8005f94:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f96:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 8005f98:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 8005f9a:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005f9c:	f7fe ff48 	bl	8004e30 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005fa0:	7d2b      	ldrb	r3, [r5, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005fa2:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa8:	752b      	strb	r3, [r5, #20]
}
 8005faa:	4620      	mov	r0, r4
 8005fac:	b003      	add	sp, #12
 8005fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005fb0:	2401      	movs	r4, #1
 8005fb2:	e7fa      	b.n	8005faa <f_sync+0x88>

08005fb4 <f_close>:
{
 8005fb4:	b513      	push	{r0, r1, r4, lr}
 8005fb6:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8005fb8:	f7ff ffb3 	bl	8005f22 <f_sync>
	if (res == FR_OK)
 8005fbc:	b948      	cbnz	r0, 8005fd2 <f_close+0x1e>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005fbe:	a901      	add	r1, sp, #4
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f7fe fc77 	bl	80048b4 <validate>
		if (res == FR_OK) {
 8005fc6:	b920      	cbnz	r0, 8005fd2 <f_close+0x1e>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005fc8:	6920      	ldr	r0, [r4, #16]
 8005fca:	f7fe fbf3 	bl	80047b4 <dec_lock>
			if (res == FR_OK)
 8005fce:	b900      	cbnz	r0, 8005fd2 <f_close+0x1e>
				fp->obj.fs = 0;			/* Invalidate file object */
 8005fd0:	6020      	str	r0, [r4, #0]
}
 8005fd2:	b002      	add	sp, #8
 8005fd4:	bd10      	pop	{r4, pc}

08005fd6 <f_lseek>:
{
 8005fd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	460d      	mov	r5, r1
 8005fde:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8005fe0:	a903      	add	r1, sp, #12
 8005fe2:	f7fe fc67 	bl	80048b4 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	b9e8      	cbnz	r0, 8006026 <f_lseek+0x50>
 8005fea:	7d66      	ldrb	r6, [r4, #21]
	if (res != FR_OK) LEAVE_FF(fs, res);
 8005fec:	b9de      	cbnz	r6, 8006026 <f_lseek+0x50>
	if (fp->cltbl) {	/* Fast seek */
 8005fee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d07b      	beq.n	80060ec <f_lseek+0x116>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8005ff4:	1c6a      	adds	r2, r5, #1
 8005ff6:	d139      	bne.n	800606c <f_lseek+0x96>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8005ff8:	461d      	mov	r5, r3
			cl = fp->obj.sclust;		/* Origin of the chain */
 8005ffa:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8005ffe:	2702      	movs	r7, #2
 8006000:	f855 bb04 	ldr.w	fp, [r5], #4
			if (cl) {
 8006004:	f1b8 0f00 	cmp.w	r8, #0
 8006008:	d028      	beq.n	800605c <f_lseek+0x86>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800600a:	4640      	mov	r0, r8
 800600c:	f04f 0a00 	mov.w	sl, #0
						cl = get_fat(&fp->obj, cl);
 8006010:	4601      	mov	r1, r0
 8006012:	4681      	mov	r9, r0
 8006014:	6820      	ldr	r0, [r4, #0]
						pcl = cl; ncl++;
 8006016:	f10a 0a01 	add.w	sl, sl, #1
						cl = get_fat(&fp->obj, cl);
 800601a:	f7fe ff5c 	bl	8004ed6 <get_fat.isra.0>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800601e:	2801      	cmp	r0, #1
 8006020:	d807      	bhi.n	8006032 <f_lseek+0x5c>
 8006022:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006024:	7566      	strb	r6, [r4, #21]
}
 8006026:	4630      	mov	r0, r6
 8006028:	b005      	add	sp, #20
 800602a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602e:	4680      	mov	r8, r0
 8006030:	e7eb      	b.n	800600a <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006032:	1c43      	adds	r3, r0, #1
 8006034:	d101      	bne.n	800603a <f_lseek+0x64>
 8006036:	2601      	movs	r6, #1
 8006038:	e7f4      	b.n	8006024 <f_lseek+0x4e>
					} while (cl == pcl + 1);
 800603a:	f109 0901 	add.w	r9, r9, #1
 800603e:	4581      	cmp	r9, r0
 8006040:	d0e6      	beq.n	8006010 <f_lseek+0x3a>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006042:	3702      	adds	r7, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006044:	45bb      	cmp	fp, r7
						*tbl++ = ncl; *tbl++ = tcl;
 8006046:	bf21      	itttt	cs
 8006048:	462b      	movcs	r3, r5
 800604a:	f843 ab08 	strcs.w	sl, [r3], #8
 800604e:	f8c5 8004 	strcs.w	r8, [r5, #4]
 8006052:	461d      	movcs	r5, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006054:	9b03      	ldr	r3, [sp, #12]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	4283      	cmp	r3, r0
 800605a:	d8e8      	bhi.n	800602e <f_lseek+0x58>
			*fp->cltbl = ulen;	/* Number of items used */
 800605c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if (ulen <= tlen) {
 800605e:	455f      	cmp	r7, fp
			*fp->cltbl = ulen;	/* Number of items used */
 8006060:	601f      	str	r7, [r3, #0]
			if (ulen <= tlen) {
 8006062:	f200 80c3 	bhi.w	80061ec <f_lseek+0x216>
				*tbl = 0;		/* Terminate table */
 8006066:	2300      	movs	r3, #0
 8006068:	602b      	str	r3, [r5, #0]
 800606a:	e7dc      	b.n	8006026 <f_lseek+0x50>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800606c:	68e7      	ldr	r7, [r4, #12]
 800606e:	42af      	cmp	r7, r5
 8006070:	bf28      	it	cs
 8006072:	462f      	movcs	r7, r5
			fp->fptr = ofs;				/* Set file pointer */
 8006074:	61a7      	str	r7, [r4, #24]
			if (ofs) {
 8006076:	2f00      	cmp	r7, #0
 8006078:	d0d5      	beq.n	8006026 <f_lseek+0x50>
				fp->clust = clmt_clust(fp, ofs - 1);
 800607a:	1e7d      	subs	r5, r7, #1
 800607c:	4620      	mov	r0, r4
 800607e:	4629      	mov	r1, r5
 8006080:	f7fe fbcf 	bl	8004822 <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
 8006084:	f8dd 800c 	ldr.w	r8, [sp, #12]
				fp->clust = clmt_clust(fp, ofs - 1);
 8006088:	4601      	mov	r1, r0
 800608a:	61e0      	str	r0, [r4, #28]
				dsc = clust2sect(fs, fp->clust);
 800608c:	4640      	mov	r0, r8
 800608e:	f7fe fbbd 	bl	800480c <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006092:	2800      	cmp	r0, #0
 8006094:	d0c5      	beq.n	8006022 <f_lseek+0x4c>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006096:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800609a:	2f00      	cmp	r7, #0
 800609c:	d0c3      	beq.n	8006026 <f_lseek+0x50>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800609e:	f8b8 100a 	ldrh.w	r1, [r8, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80060a2:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80060a4:	3901      	subs	r1, #1
 80060a6:	ea01 2155 	and.w	r1, r1, r5, lsr #9
 80060aa:	180d      	adds	r5, r1, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80060ac:	42aa      	cmp	r2, r5
 80060ae:	d0ba      	beq.n	8006026 <f_lseek+0x50>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80060b0:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80060b4:	f104 0130 	add.w	r1, r4, #48	; 0x30
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	da0c      	bge.n	80060d6 <f_lseek+0x100>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80060bc:	2301      	movs	r3, #1
 80060be:	f898 0001 	ldrb.w	r0, [r8, #1]
 80060c2:	9101      	str	r1, [sp, #4]
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80060c4:	f7fe facc 	bl	8004660 <disk_write>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d1b4      	bne.n	8006036 <f_lseek+0x60>
				fp->flag &= (BYTE)~FA_DIRTY;
 80060cc:	7d23      	ldrb	r3, [r4, #20]
 80060ce:	9901      	ldr	r1, [sp, #4]
 80060d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d4:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80060d6:	9803      	ldr	r0, [sp, #12]
 80060d8:	2301      	movs	r3, #1
 80060da:	462a      	mov	r2, r5
 80060dc:	7840      	ldrb	r0, [r0, #1]
 80060de:	f7fe fab1 	bl	8004644 <disk_read>
 80060e2:	4606      	mov	r6, r0
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d1a6      	bne.n	8006036 <f_lseek+0x60>
			fp->sect = nsect;
 80060e8:	6225      	str	r5, [r4, #32]
 80060ea:	e79c      	b.n	8006026 <f_lseek+0x50>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80060ec:	68e3      	ldr	r3, [r4, #12]
 80060ee:	42ab      	cmp	r3, r5
 80060f0:	d204      	bcs.n	80060fc <f_lseek+0x126>
 80060f2:	7d22      	ldrb	r2, [r4, #20]
 80060f4:	f012 0f02 	tst.w	r2, #2
 80060f8:	bf08      	it	eq
 80060fa:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 80060fc:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 80060fe:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 8006100:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 8006102:	b9ed      	cbnz	r5, 8006140 <f_lseek+0x16a>
		fp->fptr = nsect = 0;
 8006104:	2500      	movs	r5, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8006106:	68e2      	ldr	r2, [r4, #12]
 8006108:	69a3      	ldr	r3, [r4, #24]
 800610a:	4293      	cmp	r3, r2
			fp->flag |= FA_MODIFIED;
 800610c:	bf84      	itt	hi
 800610e:	7d22      	ldrbhi	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 8006110:	60e3      	strhi	r3, [r4, #12]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8006112:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
 8006116:	bf84      	itt	hi
 8006118:	f042 0240 	orrhi.w	r2, r2, #64	; 0x40
 800611c:	7522      	strbhi	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800611e:	2b00      	cmp	r3, #0
 8006120:	d081      	beq.n	8006026 <f_lseek+0x50>
 8006122:	6a22      	ldr	r2, [r4, #32]
 8006124:	42aa      	cmp	r2, r5
 8006126:	f43f af7e 	beq.w	8006026 <f_lseek+0x50>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800612a:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800612e:	f104 0130 	add.w	r1, r4, #48	; 0x30
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8006132:	2b00      	cmp	r3, #0
 8006134:	dacf      	bge.n	80060d6 <f_lseek+0x100>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006136:	9803      	ldr	r0, [sp, #12]
 8006138:	2301      	movs	r3, #1
 800613a:	9101      	str	r1, [sp, #4]
 800613c:	7840      	ldrb	r0, [r0, #1]
 800613e:	e7c1      	b.n	80060c4 <f_lseek+0xee>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006140:	9a03      	ldr	r2, [sp, #12]
 8006142:	8957      	ldrh	r7, [r2, #10]
 8006144:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 8006146:	b30b      	cbz	r3, 800618c <f_lseek+0x1b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006148:	3b01      	subs	r3, #1
 800614a:	1e6a      	subs	r2, r5, #1
 800614c:	fbb3 f1f7 	udiv	r1, r3, r7
 8006150:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 8006154:	428a      	cmp	r2, r1
 8006156:	d319      	bcc.n	800618c <f_lseek+0x1b6>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006158:	427a      	negs	r2, r7
				clst = fp->clust;
 800615a:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800615c:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 800615e:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006160:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
 8006162:	2900      	cmp	r1, #0
 8006164:	d0ce      	beq.n	8006104 <f_lseek+0x12e>
				while (ofs > bcs) {						/* Cluster following loop */
 8006166:	42bd      	cmp	r5, r7
					ofs -= bcs; fp->fptr += bcs;
 8006168:	69a3      	ldr	r3, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 800616a:	d81e      	bhi.n	80061aa <f_lseek+0x1d4>
				fp->fptr += ofs;
 800616c:	69a3      	ldr	r3, [r4, #24]
 800616e:	442b      	add	r3, r5
 8006170:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8006172:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0c4      	beq.n	8006104 <f_lseek+0x12e>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800617a:	9803      	ldr	r0, [sp, #12]
 800617c:	f7fe fb46 	bl	800480c <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006180:	2800      	cmp	r0, #0
 8006182:	f43f af4e 	beq.w	8006022 <f_lseek+0x4c>
					nsect += (DWORD)(ofs / SS(fs));
 8006186:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 800618a:	e7bc      	b.n	8006106 <f_lseek+0x130>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800618c:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800618e:	b951      	cbnz	r1, 80061a6 <f_lseek+0x1d0>
					clst = create_chain(&fp->obj, 0);
 8006190:	4620      	mov	r0, r4
 8006192:	f7fe ff2e 	bl	8004ff2 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006196:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 8006198:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800619a:	f43f af42 	beq.w	8006022 <f_lseek+0x4c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800619e:	1c48      	adds	r0, r1, #1
 80061a0:	f43f af49 	beq.w	8006036 <f_lseek+0x60>
					fp->obj.sclust = clst;
 80061a4:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 80061a6:	61e1      	str	r1, [r4, #28]
 80061a8:	e7db      	b.n	8006162 <f_lseek+0x18c>
					ofs -= bcs; fp->fptr += bcs;
 80061aa:	443b      	add	r3, r7
 80061ac:	eba5 0807 	sub.w	r8, r5, r7
 80061b0:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80061b2:	7d23      	ldrb	r3, [r4, #20]
 80061b4:	079a      	lsls	r2, r3, #30
 80061b6:	d506      	bpl.n	80061c6 <f_lseek+0x1f0>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80061b8:	4620      	mov	r0, r4
 80061ba:	f7fe ff1a 	bl	8004ff2 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 80061be:	4605      	mov	r5, r0
 80061c0:	b928      	cbnz	r0, 80061ce <f_lseek+0x1f8>
 80061c2:	4601      	mov	r1, r0
 80061c4:	e7d2      	b.n	800616c <f_lseek+0x196>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80061c6:	6820      	ldr	r0, [r4, #0]
 80061c8:	f7fe fe85 	bl	8004ed6 <get_fat.isra.0>
 80061cc:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80061ce:	1c6b      	adds	r3, r5, #1
 80061d0:	f43f af31 	beq.w	8006036 <f_lseek+0x60>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80061d4:	2d01      	cmp	r5, #1
 80061d6:	f67f af24 	bls.w	8006022 <f_lseek+0x4c>
 80061da:	9b03      	ldr	r3, [sp, #12]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	42ab      	cmp	r3, r5
 80061e0:	f67f af1f 	bls.w	8006022 <f_lseek+0x4c>
					fp->clust = clst;
 80061e4:	4629      	mov	r1, r5
 80061e6:	61e5      	str	r5, [r4, #28]
					ofs -= bcs; fp->fptr += bcs;
 80061e8:	4645      	mov	r5, r8
 80061ea:	e7bc      	b.n	8006166 <f_lseek+0x190>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80061ec:	2611      	movs	r6, #17
 80061ee:	e71a      	b.n	8006026 <f_lseek+0x50>

080061f0 <f_opendir>:
{
 80061f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (!dp) return FR_INVALID_OBJECT;
 80061f2:	4605      	mov	r5, r0
{
 80061f4:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d049      	beq.n	800628e <f_opendir+0x9e>
	res = find_volume(&path, &fs, 0);
 80061fa:	2200      	movs	r2, #0
 80061fc:	a903      	add	r1, sp, #12
 80061fe:	a801      	add	r0, sp, #4
 8006200:	f7fe fc6e 	bl	8004ae0 <find_volume>
	if (res == FR_OK) {
 8006204:	4604      	mov	r4, r0
 8006206:	2800      	cmp	r0, #0
 8006208:	d136      	bne.n	8006278 <f_opendir+0x88>
		obj->fs = fs;
 800620a:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 800620c:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
 8006210:	602b      	str	r3, [r5, #0]
		INIT_NAMBUF(fs);
 8006212:	f000 fa28 	bl	8006666 <ff_memalloc>
 8006216:	4606      	mov	r6, r0
 8006218:	2800      	cmp	r0, #0
 800621a:	d03a      	beq.n	8006292 <f_opendir+0xa2>
 800621c:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800621e:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8006220:	60d8      	str	r0, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006222:	4628      	mov	r0, r5
 8006224:	f7ff fa5c 	bl	80056e0 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8006228:	4604      	mov	r4, r0
 800622a:	b9f8      	cbnz	r0, 800626c <f_opendir+0x7c>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800622c:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 8006230:	2b00      	cmp	r3, #0
 8006232:	db08      	blt.n	8006246 <f_opendir+0x56>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8006234:	79ab      	ldrb	r3, [r5, #6]
 8006236:	06db      	lsls	r3, r3, #27
 8006238:	d525      	bpl.n	8006286 <f_opendir+0x96>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	6a29      	ldr	r1, [r5, #32]
 800623e:	7818      	ldrb	r0, [r3, #0]
 8006240:	f7fe fe41 	bl	8004ec6 <ld_clust.isra.0>
 8006244:	60a8      	str	r0, [r5, #8]
				obj->id = fs->id;
 8006246:	9b03      	ldr	r3, [sp, #12]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8006248:	2100      	movs	r1, #0
 800624a:	4628      	mov	r0, r5
				obj->id = fs->id;
 800624c:	88db      	ldrh	r3, [r3, #6]
 800624e:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8006250:	f7fe ff27 	bl	80050a2 <dir_sdi>
				if (res == FR_OK) {
 8006254:	4604      	mov	r4, r0
 8006256:	b948      	cbnz	r0, 800626c <f_opendir+0x7c>
					if (obj->sclust) {
 8006258:	68ab      	ldr	r3, [r5, #8]
 800625a:	b193      	cbz	r3, 8006282 <f_opendir+0x92>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800625c:	4601      	mov	r1, r0
 800625e:	4628      	mov	r0, r5
 8006260:	f7fe fa66 	bl	8004730 <inc_lock>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8006264:	2800      	cmp	r0, #0
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8006266:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8006268:	bf08      	it	eq
 800626a:	2412      	moveq	r4, #18
		FREE_NAMBUF();
 800626c:	4630      	mov	r0, r6
 800626e:	f000 f9fc 	bl	800666a <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8006272:	2c04      	cmp	r4, #4
 8006274:	d009      	beq.n	800628a <f_opendir+0x9a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8006276:	b10c      	cbz	r4, 800627c <f_opendir+0x8c>
 8006278:	2300      	movs	r3, #0
 800627a:	602b      	str	r3, [r5, #0]
}
 800627c:	4620      	mov	r0, r4
 800627e:	b004      	add	sp, #16
 8006280:	bd70      	pop	{r4, r5, r6, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
 8006282:	6128      	str	r0, [r5, #16]
 8006284:	e7f2      	b.n	800626c <f_opendir+0x7c>
					res = FR_NO_PATH;
 8006286:	2405      	movs	r4, #5
 8006288:	e7f0      	b.n	800626c <f_opendir+0x7c>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800628a:	2405      	movs	r4, #5
 800628c:	e7f4      	b.n	8006278 <f_opendir+0x88>
	if (!dp) return FR_INVALID_OBJECT;
 800628e:	2409      	movs	r4, #9
 8006290:	e7f4      	b.n	800627c <f_opendir+0x8c>
		INIT_NAMBUF(fs);
 8006292:	2411      	movs	r4, #17
 8006294:	e7f2      	b.n	800627c <f_opendir+0x8c>

08006296 <f_closedir>:
{
 8006296:	b537      	push	{r0, r1, r2, r4, r5, lr}
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8006298:	a901      	add	r1, sp, #4
{
 800629a:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800629c:	f7fe fb0a 	bl	80048b4 <validate>
	if (res == FR_OK) {
 80062a0:	4604      	mov	r4, r0
 80062a2:	b918      	cbnz	r0, 80062ac <f_closedir+0x16>
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80062a4:	6928      	ldr	r0, [r5, #16]
 80062a6:	b920      	cbnz	r0, 80062b2 <f_closedir+0x1c>
			dp->obj.fs = 0;			/* Invalidate directory object */
 80062a8:	2300      	movs	r3, #0
 80062aa:	602b      	str	r3, [r5, #0]
}
 80062ac:	4620      	mov	r0, r4
 80062ae:	b003      	add	sp, #12
 80062b0:	bd30      	pop	{r4, r5, pc}
			res = dec_lock(dp->obj.lockid);
 80062b2:	f7fe fa7f 	bl	80047b4 <dec_lock>
		if (res == FR_OK)
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d0f6      	beq.n	80062a8 <f_closedir+0x12>
 80062ba:	4604      	mov	r4, r0
 80062bc:	e7f6      	b.n	80062ac <f_closedir+0x16>

080062be <f_readdir>:
{
 80062be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80062c2:	460f      	mov	r7, r1
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80062c4:	a901      	add	r1, sp, #4
{
 80062c6:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80062c8:	f7fe faf4 	bl	80048b4 <validate>
	if (res == FR_OK) {
 80062cc:	4604      	mov	r4, r0
 80062ce:	b928      	cbnz	r0, 80062dc <f_readdir+0x1e>
		if (!fno) {
 80062d0:	b947      	cbnz	r7, 80062e4 <f_readdir+0x26>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80062d2:	4601      	mov	r1, r0
 80062d4:	4628      	mov	r0, r5
 80062d6:	f7fe fee4 	bl	80050a2 <dir_sdi>
 80062da:	4604      	mov	r4, r0
}
 80062dc:	4620      	mov	r0, r4
 80062de:	b002      	add	sp, #8
 80062e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			INIT_NAMBUF(fs);
 80062e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80062e8:	f000 f9bd 	bl	8006666 <ff_memalloc>
 80062ec:	4606      	mov	r6, r0
 80062ee:	b1c8      	cbz	r0, 8006324 <f_readdir+0x66>
 80062f0:	9b01      	ldr	r3, [sp, #4]
 80062f2:	60d8      	str	r0, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 80062f4:	4628      	mov	r0, r5
 80062f6:	f7ff f979 	bl	80055ec <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 80062fa:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 80062fe:	4604      	mov	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
 8006300:	d10c      	bne.n	800631c <f_readdir+0x5e>
				get_fileinfo(dp, fno);		/* Get the object information */
 8006302:	4639      	mov	r1, r7
 8006304:	4628      	mov	r0, r5
 8006306:	f7fe faef 	bl	80048e8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800630a:	4641      	mov	r1, r8
 800630c:	4628      	mov	r0, r5
 800630e:	f7fe ff09 	bl	8005124 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8006312:	2804      	cmp	r0, #4
				res = dir_next(dp, 0);		/* Increment index for next */
 8006314:	4604      	mov	r4, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8006316:	bf14      	ite	ne
 8006318:	4604      	movne	r4, r0
 800631a:	2400      	moveq	r4, #0
			FREE_NAMBUF();
 800631c:	4630      	mov	r0, r6
 800631e:	f000 f9a4 	bl	800666a <ff_memfree>
 8006322:	e7db      	b.n	80062dc <f_readdir+0x1e>
			INIT_NAMBUF(fs);
 8006324:	2411      	movs	r4, #17
 8006326:	e7d9      	b.n	80062dc <f_readdir+0x1e>

08006328 <f_getfree>:
{
 8006328:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800632c:	460f      	mov	r7, r1
 800632e:	9001      	str	r0, [sp, #4]
 8006330:	4615      	mov	r5, r2
	res = find_volume(&path, &fs, 0);
 8006332:	a903      	add	r1, sp, #12
 8006334:	2200      	movs	r2, #0
 8006336:	a801      	add	r0, sp, #4
 8006338:	f7fe fbd2 	bl	8004ae0 <find_volume>
	if (res == FR_OK) {
 800633c:	4604      	mov	r4, r0
 800633e:	b940      	cbnz	r0, 8006352 <f_getfree+0x2a>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006340:	9e03      	ldr	r6, [sp, #12]
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006342:	e9d6 3805 	ldrd	r3, r8, [r6, #20]
		*fatfs = fs;				/* Return ptr to the fs object */
 8006346:	602e      	str	r6, [r5, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006348:	f1a8 0202 	sub.w	r2, r8, #2
 800634c:	4293      	cmp	r3, r2
 800634e:	d804      	bhi.n	800635a <f_getfree+0x32>
			*nclst = fs->free_clst;
 8006350:	603b      	str	r3, [r7, #0]
}
 8006352:	4620      	mov	r0, r4
 8006354:	b004      	add	sp, #16
 8006356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800635a:	7833      	ldrb	r3, [r6, #0]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d11a      	bne.n	8006396 <f_getfree+0x6e>
				clst = 2; obj.fs = fs;
 8006360:	f04f 0802 	mov.w	r8, #2
			nfree = 0;
 8006364:	4605      	mov	r5, r0
					stat = get_fat(&obj, clst);
 8006366:	4641      	mov	r1, r8
 8006368:	4630      	mov	r0, r6
 800636a:	f7fe fdb4 	bl	8004ed6 <get_fat.isra.0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800636e:	1c43      	adds	r3, r0, #1
 8006370:	d038      	beq.n	80063e4 <f_getfree+0xbc>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006372:	2801      	cmp	r0, #1
 8006374:	d038      	beq.n	80063e8 <f_getfree+0xc0>
					if (stat == 0) nfree++;
 8006376:	b900      	cbnz	r0, 800637a <f_getfree+0x52>
 8006378:	3501      	adds	r5, #1
				} while (++clst < fs->n_fatent);
 800637a:	9b03      	ldr	r3, [sp, #12]
 800637c:	f108 0801 	add.w	r8, r8, #1
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	4543      	cmp	r3, r8
 8006384:	d8ef      	bhi.n	8006366 <f_getfree+0x3e>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006386:	9b03      	ldr	r3, [sp, #12]
			*nclst = nfree;			/* Return the free clusters */
 8006388:	603d      	str	r5, [r7, #0]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800638a:	791a      	ldrb	r2, [r3, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800638c:	615d      	str	r5, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	711a      	strb	r2, [r3, #4]
 8006394:	e7dd      	b.n	8006352 <f_getfree+0x2a>
					clst = fs->n_fatent; sect = fs->fatbase;
 8006396:	6a71      	ldr	r1, [r6, #36]	; 0x24
					i = 0; p = 0;
 8006398:	4603      	mov	r3, r0
 800639a:	4602      	mov	r2, r0
			nfree = 0;
 800639c:	4605      	mov	r5, r0
						if (i == 0) {
 800639e:	b94a      	cbnz	r2, 80063b4 <f_getfree+0x8c>
							res = move_window(fs, sect++);
 80063a0:	9803      	ldr	r0, [sp, #12]
 80063a2:	1c4e      	adds	r6, r1, #1
 80063a4:	f7fe fb49 	bl	8004a3a <move_window>
							if (res != FR_OK) break;
 80063a8:	bb00      	cbnz	r0, 80063ec <f_getfree+0xc4>
							p = fs->win;
 80063aa:	9b03      	ldr	r3, [sp, #12]
							res = move_window(fs, sect++);
 80063ac:	4631      	mov	r1, r6
							i = SS(fs);
 80063ae:	f44f 7200 	mov.w	r2, #512	; 0x200
							p = fs->win;
 80063b2:	3334      	adds	r3, #52	; 0x34
						if (fs->fs_type == FS_FAT16) {
 80063b4:	9803      	ldr	r0, [sp, #12]
 80063b6:	7800      	ldrb	r0, [r0, #0]
 80063b8:	2802      	cmp	r0, #2
 80063ba:	d108      	bne.n	80063ce <f_getfree+0xa6>
							if (ld_word(p) == 0) nfree++;
 80063bc:	8818      	ldrh	r0, [r3, #0]
 80063be:	b900      	cbnz	r0, 80063c2 <f_getfree+0x9a>
 80063c0:	3501      	adds	r5, #1
							p += 2; i -= 2;
 80063c2:	3302      	adds	r3, #2
 80063c4:	3a02      	subs	r2, #2
					} while (--clst);
 80063c6:	f1b8 0801 	subs.w	r8, r8, #1
 80063ca:	d1e8      	bne.n	800639e <f_getfree+0x76>
 80063cc:	e7db      	b.n	8006386 <f_getfree+0x5e>
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80063ce:	4618      	mov	r0, r3
							p += 4; i -= 4;
 80063d0:	3a04      	subs	r2, #4
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80063d2:	f7fe f963 	bl	800469c <ld_dword>
 80063d6:	f030 4070 	bics.w	r0, r0, #4026531840	; 0xf0000000
							p += 4; i -= 4;
 80063da:	f103 0304 	add.w	r3, r3, #4
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80063de:	bf08      	it	eq
 80063e0:	3501      	addeq	r5, #1
							p += 4; i -= 4;
 80063e2:	e7f0      	b.n	80063c6 <f_getfree+0x9e>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80063e4:	2401      	movs	r4, #1
 80063e6:	e7ce      	b.n	8006386 <f_getfree+0x5e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80063e8:	2402      	movs	r4, #2
 80063ea:	e7cc      	b.n	8006386 <f_getfree+0x5e>
 80063ec:	4604      	mov	r4, r0
 80063ee:	e7ca      	b.n	8006386 <f_getfree+0x5e>

080063f0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80063f0:	b40e      	push	{r1, r2, r3}
 80063f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f6:	b09e      	sub	sp, #120	; 0x78
	pb->nchr = pb->idx = 0;
 80063f8:	2100      	movs	r1, #0
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
			w = w * 10 + c - '0';
 80063fa:	f04f 080a 	mov.w	r8, #10
{
 80063fe:	aa27      	add	r2, sp, #156	; 0x9c
	pb->fp = fp;
 8006400:	900b      	str	r0, [sp, #44]	; 0x2c
{
 8006402:	f852 3b04 	ldr.w	r3, [r2], #4
	pb->nchr = pb->idx = 0;
 8006406:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
	va_start(arp, fmt);
 800640a:	9202      	str	r2, [sp, #8]
		c = *fmt++;
 800640c:	7819      	ldrb	r1, [r3, #0]
		if (c == 0) break;			/* End of string */
 800640e:	2900      	cmp	r1, #0
 8006410:	f000 80fc 	beq.w	800660c <f_printf+0x21c>
		if (c != '%') {				/* Non escape character */
 8006414:	2925      	cmp	r1, #37	; 0x25
 8006416:	d004      	beq.n	8006422 <f_printf+0x32>
		c = *fmt++;
 8006418:	1c5d      	adds	r5, r3, #1

		case 'X' :					/* Hexdecimal */
			r = 16; break;

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800641a:	a80b      	add	r0, sp, #44	; 0x2c
 800641c:	f7ff fd48 	bl	8005eb0 <putc_bfd>
 8006420:	e0d9      	b.n	80065d6 <f_printf+0x1e6>
		c = *fmt++;
 8006422:	7859      	ldrb	r1, [r3, #1]
		if (c == '0') {				/* Flag: '0' padding */
 8006424:	2930      	cmp	r1, #48	; 0x30
 8006426:	d104      	bne.n	8006432 <f_printf+0x42>
			f = 1; c = *fmt++;
 8006428:	1cdd      	adds	r5, r3, #3
 800642a:	7899      	ldrb	r1, [r3, #2]
 800642c:	2301      	movs	r3, #1
		w = f = 0;
 800642e:	2700      	movs	r7, #0
 8006430:	e00a      	b.n	8006448 <f_printf+0x58>
			if (c == '-') {			/* Flag: left justified */
 8006432:	292d      	cmp	r1, #45	; 0x2d
 8006434:	d12d      	bne.n	8006492 <f_printf+0xa2>
				f = 2; c = *fmt++;
 8006436:	1cdd      	adds	r5, r3, #3
 8006438:	7899      	ldrb	r1, [r3, #2]
 800643a:	2302      	movs	r3, #2
 800643c:	e7f7      	b.n	800642e <f_printf+0x3e>
			w = w * 10 + c - '0';
 800643e:	fb08 1707 	mla	r7, r8, r7, r1
			c = *fmt++;
 8006442:	f815 1b01 	ldrb.w	r1, [r5], #1
			w = w * 10 + c - '0';
 8006446:	3f30      	subs	r7, #48	; 0x30
		while (IsDigit(c)) {		/* Precision */
 8006448:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800644c:	2a09      	cmp	r2, #9
 800644e:	d9f6      	bls.n	800643e <f_printf+0x4e>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8006450:	f001 02df 	and.w	r2, r1, #223	; 0xdf
 8006454:	2a4c      	cmp	r2, #76	; 0x4c
			f |= 4; c = *fmt++;
 8006456:	bf04      	itt	eq
 8006458:	f815 1b01 	ldrbeq.w	r1, [r5], #1
 800645c:	f043 0304 	orreq.w	r3, r3, #4
		if (!c) break;
 8006460:	2900      	cmp	r1, #0
 8006462:	f000 80d3 	beq.w	800660c <f_printf+0x21c>
		if (IsLower(d)) d -= 0x20;
 8006466:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 800646a:	2a19      	cmp	r2, #25
 800646c:	bf96      	itet	ls
 800646e:	f1a1 0220 	subls.w	r2, r1, #32
 8006472:	460a      	movhi	r2, r1
 8006474:	b2d2      	uxtbls	r2, r2
		switch (d) {				/* Type is... */
 8006476:	2a58      	cmp	r2, #88	; 0x58
 8006478:	d8cf      	bhi.n	800641a <f_printf+0x2a>
 800647a:	2a4e      	cmp	r2, #78	; 0x4e
 800647c:	d80c      	bhi.n	8006498 <f_printf+0xa8>
 800647e:	2a43      	cmp	r2, #67	; 0x43
 8006480:	f000 80b1 	beq.w	80065e6 <f_printf+0x1f6>
 8006484:	2a44      	cmp	r2, #68	; 0x44
 8006486:	f000 80b5 	beq.w	80065f4 <f_printf+0x204>
 800648a:	2a42      	cmp	r2, #66	; 0x42
 800648c:	d1c5      	bne.n	800641a <f_printf+0x2a>
			r = 2; break;
 800648e:	2402      	movs	r4, #2
 8006490:	e01f      	b.n	80064d2 <f_printf+0xe2>
		c = *fmt++;
 8006492:	1c9d      	adds	r5, r3, #2
		w = f = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	e7ca      	b.n	800642e <f_printf+0x3e>
		switch (d) {				/* Type is... */
 8006498:	f1a2 004f 	sub.w	r0, r2, #79	; 0x4f
 800649c:	2809      	cmp	r0, #9
 800649e:	d8bc      	bhi.n	800641a <f_printf+0x2a>
 80064a0:	a401      	add	r4, pc, #4	; (adr r4, 80064a8 <f_printf+0xb8>)
 80064a2:	f854 f020 	ldr.w	pc, [r4, r0, lsl #2]
 80064a6:	bf00      	nop
 80064a8:	080064d1 	.word	0x080064d1
 80064ac:	0800641b 	.word	0x0800641b
 80064b0:	0800641b 	.word	0x0800641b
 80064b4:	0800641b 	.word	0x0800641b
 80064b8:	08006583 	.word	0x08006583
 80064bc:	0800641b 	.word	0x0800641b
 80064c0:	080065f5 	.word	0x080065f5
 80064c4:	0800641b 	.word	0x0800641b
 80064c8:	0800641b 	.word	0x0800641b
 80064cc:	080065f1 	.word	0x080065f1
			r = 8; break;
 80064d0:	2408      	movs	r4, #8
			p = va_arg(arp, TCHAR*);
 80064d2:	9802      	ldr	r0, [sp, #8]
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80064d4:	2a44      	cmp	r2, #68	; 0x44
 80064d6:	f100 0604 	add.w	r6, r0, #4
 80064da:	9602      	str	r6, [sp, #8]
 80064dc:	6800      	ldr	r0, [r0, #0]
 80064de:	d104      	bne.n	80064ea <f_printf+0xfa>
		if (d == 'D' && (v & 0x80000000)) {
 80064e0:	2800      	cmp	r0, #0
			v = 0 - v;
 80064e2:	bfbc      	itt	lt
 80064e4:	4240      	neglt	r0, r0
			f |= 8;
 80064e6:	f043 0308 	orrlt.w	r3, r3, #8
		}
		i = 0;
 80064ea:	2978      	cmp	r1, #120	; 0x78
 80064ec:	f10d 0c0c 	add.w	ip, sp, #12
 80064f0:	f04f 0100 	mov.w	r1, #0
 80064f4:	bf0c      	ite	eq
 80064f6:	f04f 0e27 	moveq.w	lr, #39	; 0x27
 80064fa:	f04f 0e07 	movne.w	lr, #7
 80064fe:	46e1      	mov	r9, ip
		do {
			d = (TCHAR)(v % r); v /= r;
 8006500:	4682      	mov	sl, r0
 8006502:	fbb0 fbf4 	udiv	fp, r0, r4
 8006506:	fb04 061b 	mls	r6, r4, fp, r0
 800650a:	4658      	mov	r0, fp
 800650c:	b2f2      	uxtb	r2, r6
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800650e:	2e09      	cmp	r6, #9
			str[i++] = d + '0';
 8006510:	f101 0601 	add.w	r6, r1, #1
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8006514:	bf84      	itt	hi
 8006516:	4472      	addhi	r2, lr
 8006518:	b2d2      	uxtbhi	r2, r2
		} while (v && i < sizeof str / sizeof str[0]);
 800651a:	4554      	cmp	r4, sl
			str[i++] = d + '0';
 800651c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8006520:	f80c 2b01 	strb.w	r2, [ip], #1
		} while (v && i < sizeof str / sizeof str[0]);
 8006524:	d802      	bhi.n	800652c <f_printf+0x13c>
 8006526:	2e20      	cmp	r6, #32
 8006528:	d166      	bne.n	80065f8 <f_printf+0x208>
 800652a:	211f      	movs	r1, #31
		if (f & 8) str[i++] = '-';
 800652c:	071a      	lsls	r2, r3, #28
 800652e:	d507      	bpl.n	8006540 <f_printf+0x150>
 8006530:	f106 0278 	add.w	r2, r6, #120	; 0x78
 8006534:	eb0d 0602 	add.w	r6, sp, r2
 8006538:	222d      	movs	r2, #45	; 0x2d
 800653a:	f806 2c6c 	strb.w	r2, [r6, #-108]
 800653e:	1c8e      	adds	r6, r1, #2
		j = i; d = (f & 1) ? '0' : ' ';
 8006540:	f013 0f01 	tst.w	r3, #1
 8006544:	46b3      	mov	fp, r6
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8006546:	f003 0402 	and.w	r4, r3, #2
		j = i; d = (f & 1) ? '0' : ' ';
 800654a:	bf14      	ite	ne
 800654c:	f04f 0a30 	movne.w	sl, #48	; 0x30
 8006550:	f04f 0a20 	moveq.w	sl, #32
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8006554:	f10b 0301 	add.w	r3, fp, #1
 8006558:	b914      	cbnz	r4, 8006560 <f_printf+0x170>
 800655a:	45bb      	cmp	fp, r7
 800655c:	d34e      	bcc.n	80065fc <f_printf+0x20c>
 800655e:	469b      	mov	fp, r3
		do {
			putc_bfd(&pb, str[--i]);
 8006560:	3e01      	subs	r6, #1
 8006562:	a80b      	add	r0, sp, #44	; 0x2c
 8006564:	f819 1006 	ldrb.w	r1, [r9, r6]
 8006568:	f7ff fca2 	bl	8005eb0 <putc_bfd>
		} while (i);
 800656c:	2e00      	cmp	r6, #0
 800656e:	d1f7      	bne.n	8006560 <f_printf+0x170>
		while (j++ < w) putc_bfd(&pb, d);
 8006570:	455f      	cmp	r7, fp
 8006572:	d930      	bls.n	80065d6 <f_printf+0x1e6>
 8006574:	4651      	mov	r1, sl
 8006576:	a80b      	add	r0, sp, #44	; 0x2c
 8006578:	f10b 0b01 	add.w	fp, fp, #1
 800657c:	f7ff fc98 	bl	8005eb0 <putc_bfd>
 8006580:	e7f6      	b.n	8006570 <f_printf+0x180>
			p = va_arg(arp, TCHAR*);
 8006582:	9a02      	ldr	r2, [sp, #8]
			for (j = 0; p[j]; j++) ;
 8006584:	f04f 0900 	mov.w	r9, #0
			p = va_arg(arp, TCHAR*);
 8006588:	1d11      	adds	r1, r2, #4
 800658a:	6816      	ldr	r6, [r2, #0]
 800658c:	9102      	str	r1, [sp, #8]
			for (j = 0; p[j]; j++) ;
 800658e:	f816 2009 	ldrb.w	r2, [r6, r9]
 8006592:	464c      	mov	r4, r9
 8006594:	f109 0901 	add.w	r9, r9, #1
 8006598:	2a00      	cmp	r2, #0
 800659a:	d1f8      	bne.n	800658e <f_printf+0x19e>
			if (!(f & 2)) {
 800659c:	0799      	lsls	r1, r3, #30
 800659e:	d40f      	bmi.n	80065c0 <f_printf+0x1d0>
 80065a0:	46a2      	mov	sl, r4
 80065a2:	e005      	b.n	80065b0 <f_printf+0x1c0>
				while (j++ < w) putc_bfd(&pb, ' ');
 80065a4:	f10a 0a01 	add.w	sl, sl, #1
 80065a8:	2120      	movs	r1, #32
 80065aa:	a80b      	add	r0, sp, #44	; 0x2c
 80065ac:	f7ff fc80 	bl	8005eb0 <putc_bfd>
 80065b0:	4557      	cmp	r7, sl
 80065b2:	d8f7      	bhi.n	80065a4 <f_printf+0x1b4>
 80065b4:	1b3b      	subs	r3, r7, r4
 80065b6:	42bc      	cmp	r4, r7
 80065b8:	bf88      	it	hi
 80065ba:	2300      	movhi	r3, #0
 80065bc:	eb03 0409 	add.w	r4, r3, r9
 80065c0:	3e01      	subs	r6, #1
 80065c2:	e002      	b.n	80065ca <f_printf+0x1da>
			while (*p) putc_bfd(&pb, *p++);
 80065c4:	a80b      	add	r0, sp, #44	; 0x2c
 80065c6:	f7ff fc73 	bl	8005eb0 <putc_bfd>
 80065ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065ce:	2900      	cmp	r1, #0
 80065d0:	d1f8      	bne.n	80065c4 <f_printf+0x1d4>
			while (j++ < w) putc_bfd(&pb, ' ');
 80065d2:	42a7      	cmp	r7, r4
 80065d4:	d801      	bhi.n	80065da <f_printf+0x1ea>
{
 80065d6:	462b      	mov	r3, r5
 80065d8:	e718      	b.n	800640c <f_printf+0x1c>
			while (j++ < w) putc_bfd(&pb, ' ');
 80065da:	2120      	movs	r1, #32
 80065dc:	a80b      	add	r0, sp, #44	; 0x2c
 80065de:	3401      	adds	r4, #1
 80065e0:	f7ff fc66 	bl	8005eb0 <putc_bfd>
 80065e4:	e7f5      	b.n	80065d2 <f_printf+0x1e2>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80065e6:	9b02      	ldr	r3, [sp, #8]
 80065e8:	1d1a      	adds	r2, r3, #4
 80065ea:	7819      	ldrb	r1, [r3, #0]
 80065ec:	9202      	str	r2, [sp, #8]
 80065ee:	e714      	b.n	800641a <f_printf+0x2a>
			r = 16; break;
 80065f0:	2410      	movs	r4, #16
 80065f2:	e76e      	b.n	80064d2 <f_printf+0xe2>
		switch (d) {				/* Type is... */
 80065f4:	240a      	movs	r4, #10
 80065f6:	e76c      	b.n	80064d2 <f_printf+0xe2>
 80065f8:	4631      	mov	r1, r6
 80065fa:	e781      	b.n	8006500 <f_printf+0x110>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80065fc:	4651      	mov	r1, sl
 80065fe:	a80b      	add	r0, sp, #44	; 0x2c
 8006600:	9301      	str	r3, [sp, #4]
 8006602:	f7ff fc55 	bl	8005eb0 <putc_bfd>
 8006606:	9b01      	ldr	r3, [sp, #4]
 8006608:	469b      	mov	fp, r3
 800660a:	e7a3      	b.n	8006554 <f_printf+0x164>
	}

	va_end(arp);

	return putc_flush(&pb);
 800660c:	a80b      	add	r0, sp, #44	; 0x2c
 800660e:	f7ff fc71 	bl	8005ef4 <putc_flush>
}
 8006612:	b01e      	add	sp, #120	; 0x78
 8006614:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006618:	b003      	add	sp, #12
 800661a:	4770      	bx	lr

0800661c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800661c:	4b0f      	ldr	r3, [pc, #60]	; (800665c <FATFS_LinkDriverEx+0x40>)
{
 800661e:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8006620:	7b9c      	ldrb	r4, [r3, #14]
 8006622:	2c01      	cmp	r4, #1
 8006624:	d817      	bhi.n	8006656 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006626:	7b9d      	ldrb	r5, [r3, #14]
 8006628:	2400      	movs	r4, #0
 800662a:	b2ed      	uxtb	r5, r5
 800662c:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800662e:	7b9d      	ldrb	r5, [r3, #14]
 8006630:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006634:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8006636:	7b98      	ldrb	r0, [r3, #14]
 8006638:	4418      	add	r0, r3
 800663a:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
 800663c:	7b9a      	ldrb	r2, [r3, #14]
 800663e:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8006640:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8006642:	b2c0      	uxtb	r0, r0
 8006644:	7398      	strb	r0, [r3, #14]
    path[1] = ':';
 8006646:	233a      	movs	r3, #58	; 0x3a
    path[2] = '/';
    path[3] = 0;
 8006648:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 800664a:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800664c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800664e:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8006650:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 8006652:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 8006654:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8006656:	2001      	movs	r0, #1
 8006658:	e7fc      	b.n	8006654 <FATFS_LinkDriverEx+0x38>
 800665a:	bf00      	nop
 800665c:	24000c84 	.word	0x24000c84

08006660 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8006660:	2200      	movs	r2, #0
 8006662:	f7ff bfdb 	b.w	800661c <FATFS_LinkDriverEx>

08006666 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8006666:	f005 bda5 	b.w	800c1b4 <malloc>

0800666a <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800666a:	f005 bdab 	b.w	800c1c4 <free>
	...

08006670 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006670:	287f      	cmp	r0, #127	; 0x7f
{
 8006672:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 8006674:	d906      	bls.n	8006684 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006676:	b131      	cbz	r1, 8006686 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006678:	28ff      	cmp	r0, #255	; 0xff
 800667a:	d812      	bhi.n	80066a2 <ff_convert+0x32>
 800667c:	3880      	subs	r0, #128	; 0x80
 800667e:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <ff_convert+0x38>)
 8006680:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8006684:	bd10      	pop	{r4, pc}
 8006686:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <ff_convert+0x38>)
				if (chr == Tbl[c]) break;
 8006688:	f832 4b02 	ldrh.w	r4, [r2], #2
 800668c:	b28b      	uxth	r3, r1
 800668e:	4284      	cmp	r4, r0
 8006690:	d003      	beq.n	800669a <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8006692:	3101      	adds	r1, #1
 8006694:	2980      	cmp	r1, #128	; 0x80
 8006696:	d1f7      	bne.n	8006688 <ff_convert+0x18>
 8006698:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
 800669a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800669e:	b2c0      	uxtb	r0, r0
 80066a0:	e7f0      	b.n	8006684 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80066a2:	2000      	movs	r0, #0
 80066a4:	e7ee      	b.n	8006684 <ff_convert+0x14>
 80066a6:	bf00      	nop
 80066a8:	0801446c 	.word	0x0801446c

080066ac <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80066ac:	4b1e      	ldr	r3, [pc, #120]	; (8006728 <ff_wtoupper+0x7c>)
 80066ae:	4a1f      	ldr	r2, [pc, #124]	; (800672c <ff_wtoupper+0x80>)
 80066b0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80066b4:	bf28      	it	cs
 80066b6:	4613      	movcs	r3, r2
{
 80066b8:	b570      	push	{r4, r5, r6, lr}
 80066ba:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 80066bc:	f831 3c04 	ldrh.w	r3, [r1, #-4]
		if (!bc || chr < bc) break;
 80066c0:	460a      	mov	r2, r1
 80066c2:	b1ab      	cbz	r3, 80066f0 <ff_wtoupper+0x44>
 80066c4:	4298      	cmp	r0, r3
 80066c6:	d313      	bcc.n	80066f0 <ff_wtoupper+0x44>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80066c8:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 80066cc:	0a25      	lsrs	r5, r4, #8
 80066ce:	b2e6      	uxtb	r6, r4
		if (chr < bc + nc) {	/* In the block? */
 80066d0:	fa53 f484 	uxtab	r4, r3, r4
 80066d4:	42a0      	cmp	r0, r4
 80066d6:	da21      	bge.n	800671c <ff_wtoupper+0x70>
			switch (cmd) {
 80066d8:	2d08      	cmp	r5, #8
 80066da:	d809      	bhi.n	80066f0 <ff_wtoupper+0x44>
 80066dc:	e8df f005 	tbb	[pc, r5]
 80066e0:	110f0905 	.word	0x110f0905
 80066e4:	19171513 	.word	0x19171513
 80066e8:	1b          	.byte	0x1b
 80066e9:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80066ea:	1ac0      	subs	r0, r0, r3
 80066ec:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
 80066f0:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80066f2:	1ac3      	subs	r3, r0, r3
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80066fa:	b280      	uxth	r0, r0
 80066fc:	e7f8      	b.n	80066f0 <ff_wtoupper+0x44>
			case 2: chr -= 16; break;				/* Shift -16 */
 80066fe:	3810      	subs	r0, #16
 8006700:	e7fb      	b.n	80066fa <ff_wtoupper+0x4e>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006702:	3820      	subs	r0, #32
 8006704:	e7f9      	b.n	80066fa <ff_wtoupper+0x4e>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006706:	3830      	subs	r0, #48	; 0x30
 8006708:	e7f7      	b.n	80066fa <ff_wtoupper+0x4e>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800670a:	381a      	subs	r0, #26
 800670c:	e7f5      	b.n	80066fa <ff_wtoupper+0x4e>
			case 6:	chr += 8; break;				/* Shift +8 */
 800670e:	3008      	adds	r0, #8
 8006710:	e7f3      	b.n	80066fa <ff_wtoupper+0x4e>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006712:	3850      	subs	r0, #80	; 0x50
 8006714:	e7f1      	b.n	80066fa <ff_wtoupper+0x4e>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006716:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800671a:	e7ee      	b.n	80066fa <ff_wtoupper+0x4e>
		if (!cmd) p += nc;
 800671c:	3104      	adds	r1, #4
 800671e:	2d00      	cmp	r5, #0
 8006720:	d1cc      	bne.n	80066bc <ff_wtoupper+0x10>
 8006722:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 8006726:	e7c8      	b.n	80066ba <ff_wtoupper+0xe>
 8006728:	0801456c 	.word	0x0801456c
 800672c:	0801475e 	.word	0x0801475e

08006730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006730:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006732:	4b0f      	ldr	r3, [pc, #60]	; (8006770 <HAL_InitTick+0x40>)
{
 8006734:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8006736:	7818      	ldrb	r0, [r3, #0]
 8006738:	b908      	cbnz	r0, 800673e <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 800673a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800673c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800673e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006742:	4a0c      	ldr	r2, [pc, #48]	; (8006774 <HAL_InitTick+0x44>)
 8006744:	fbb3 f3f0 	udiv	r3, r3, r0
 8006748:	6810      	ldr	r0, [r2, #0]
 800674a:	fbb0 f0f3 	udiv	r0, r0, r3
 800674e:	f000 f8d3 	bl	80068f8 <HAL_SYSTICK_Config>
 8006752:	4604      	mov	r4, r0
 8006754:	2800      	cmp	r0, #0
 8006756:	d1f0      	bne.n	800673a <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006758:	2d0f      	cmp	r5, #15
 800675a:	d8ee      	bhi.n	800673a <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800675c:	4602      	mov	r2, r0
 800675e:	4629      	mov	r1, r5
 8006760:	f04f 30ff 	mov.w	r0, #4294967295
 8006764:	f000 f874 	bl	8006850 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006768:	4b03      	ldr	r3, [pc, #12]	; (8006778 <HAL_InitTick+0x48>)
 800676a:	4620      	mov	r0, r4
 800676c:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 800676e:	e7e5      	b.n	800673c <HAL_InitTick+0xc>
 8006770:	2400002a 	.word	0x2400002a
 8006774:	24000000 	.word	0x24000000
 8006778:	2400002c 	.word	0x2400002c

0800677c <HAL_Init>:
{
 800677c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800677e:	2003      	movs	r0, #3
 8006780:	f000 f854 	bl	800682c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006784:	f002 faa2 	bl	8008ccc <HAL_RCC_GetSysClockFreq>
 8006788:	490f      	ldr	r1, [pc, #60]	; (80067c8 <HAL_Init+0x4c>)
 800678a:	4a10      	ldr	r2, [pc, #64]	; (80067cc <HAL_Init+0x50>)
 800678c:	698b      	ldr	r3, [r1, #24]
 800678e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006792:	5cd3      	ldrb	r3, [r2, r3]
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800679a:	698b      	ldr	r3, [r1, #24]
 800679c:	f003 030f 	and.w	r3, r3, #15
 80067a0:	5cd3      	ldrb	r3, [r2, r3]
 80067a2:	4a0b      	ldr	r2, [pc, #44]	; (80067d0 <HAL_Init+0x54>)
 80067a4:	f003 031f 	and.w	r3, r3, #31
 80067a8:	fa20 f303 	lsr.w	r3, r0, r3
 80067ac:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80067ae:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <HAL_Init+0x58>)
 80067b0:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80067b2:	2000      	movs	r0, #0
 80067b4:	f7ff ffbc 	bl	8006730 <HAL_InitTick>
 80067b8:	4604      	mov	r4, r0
 80067ba:	b918      	cbnz	r0, 80067c4 <HAL_Init+0x48>
  HAL_MspInit();
 80067bc:	f7fa fc32 	bl	8001024 <HAL_MspInit>
}
 80067c0:	4620      	mov	r0, r4
 80067c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80067c4:	2401      	movs	r4, #1
 80067c6:	e7fb      	b.n	80067c0 <HAL_Init+0x44>
 80067c8:	58024400 	.word	0x58024400
 80067cc:	0800f5fd 	.word	0x0800f5fd
 80067d0:	24000004 	.word	0x24000004
 80067d4:	24000000 	.word	0x24000000

080067d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80067d8:	4a03      	ldr	r2, [pc, #12]	; (80067e8 <HAL_IncTick+0x10>)
 80067da:	4b04      	ldr	r3, [pc, #16]	; (80067ec <HAL_IncTick+0x14>)
 80067dc:	6811      	ldr	r1, [r2, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	440b      	add	r3, r1
 80067e2:	6013      	str	r3, [r2, #0]
}
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	24000c94 	.word	0x24000c94
 80067ec:	2400002a 	.word	0x2400002a

080067f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80067f0:	4b01      	ldr	r3, [pc, #4]	; (80067f8 <HAL_GetTick+0x8>)
 80067f2:	6818      	ldr	r0, [r3, #0]
}
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	24000c94 	.word	0x24000c94

080067fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006800:	f7ff fff6 	bl	80067f0 <HAL_GetTick>
 8006804:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006806:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006808:	bf1e      	ittt	ne
 800680a:	4b04      	ldrne	r3, [pc, #16]	; (800681c <HAL_Delay+0x20>)
 800680c:	781b      	ldrbne	r3, [r3, #0]
 800680e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006810:	f7ff ffee 	bl	80067f0 <HAL_GetTick>
 8006814:	1b43      	subs	r3, r0, r5
 8006816:	42a3      	cmp	r3, r4
 8006818:	d3fa      	bcc.n	8006810 <HAL_Delay+0x14>
  {
  }
}
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	2400002a 	.word	0x2400002a

08006820 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006820:	4b01      	ldr	r3, [pc, #4]	; (8006828 <HAL_GetREVID+0x8>)
 8006822:	6818      	ldr	r0, [r3, #0]
}
 8006824:	0c00      	lsrs	r0, r0, #16
 8006826:	4770      	bx	lr
 8006828:	5c001000 	.word	0x5c001000

0800682c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800682c:	4907      	ldr	r1, [pc, #28]	; (800684c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800682e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006830:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006832:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006836:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800683a:	0412      	lsls	r2, r2, #16
 800683c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800683e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006848:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800684a:	4770      	bx	lr
 800684c:	e000ed00 	.word	0xe000ed00

08006850 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006850:	4b16      	ldr	r3, [pc, #88]	; (80068ac <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006852:	b530      	push	{r4, r5, lr}
 8006854:	68dc      	ldr	r4, [r3, #12]
 8006856:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800685a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800685e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006860:	2d04      	cmp	r5, #4
 8006862:	bf28      	it	cs
 8006864:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006866:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006868:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800686c:	bf8c      	ite	hi
 800686e:	3c03      	subhi	r4, #3
 8006870:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006872:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8006876:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006878:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800687c:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006880:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006884:	fa01 f104 	lsl.w	r1, r1, r4
 8006888:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800688c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006890:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8006892:	db06      	blt.n	80068a2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006894:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006898:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800689c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80068a0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068a2:	f000 000f 	and.w	r0, r0, #15
 80068a6:	4a02      	ldr	r2, [pc, #8]	; (80068b0 <HAL_NVIC_SetPriority+0x60>)
 80068a8:	5413      	strb	r3, [r2, r0]
 80068aa:	e7f9      	b.n	80068a0 <HAL_NVIC_SetPriority+0x50>
 80068ac:	e000ed00 	.word	0xe000ed00
 80068b0:	e000ed14 	.word	0xe000ed14

080068b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80068b4:	2800      	cmp	r0, #0
 80068b6:	db08      	blt.n	80068ca <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068b8:	0942      	lsrs	r2, r0, #5
 80068ba:	2301      	movs	r3, #1
 80068bc:	f000 001f 	and.w	r0, r0, #31
 80068c0:	fa03 f000 	lsl.w	r0, r3, r0
 80068c4:	4b01      	ldr	r3, [pc, #4]	; (80068cc <HAL_NVIC_EnableIRQ+0x18>)
 80068c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80068ca:	4770      	bx	lr
 80068cc:	e000e100 	.word	0xe000e100

080068d0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80068d0:	2800      	cmp	r0, #0
 80068d2:	db0d      	blt.n	80068f0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068d4:	0943      	lsrs	r3, r0, #5
 80068d6:	2201      	movs	r2, #1
 80068d8:	f000 001f 	and.w	r0, r0, #31
 80068dc:	3320      	adds	r3, #32
 80068de:	fa02 f000 	lsl.w	r0, r2, r0
 80068e2:	4a04      	ldr	r2, [pc, #16]	; (80068f4 <HAL_NVIC_DisableIRQ+0x24>)
 80068e4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80068e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80068ec:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	e000e100 	.word	0xe000e100

080068f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068f8:	3801      	subs	r0, #1
 80068fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80068fe:	d20b      	bcs.n	8006918 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006900:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006904:	4a05      	ldr	r2, [pc, #20]	; (800691c <HAL_SYSTICK_Config+0x24>)
 8006906:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006908:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800690a:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800690c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006910:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006912:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006914:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006916:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006918:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800691a:	4770      	bx	lr
 800691c:	e000ed00 	.word	0xe000ed00

08006920 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006920:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006924:	4b04      	ldr	r3, [pc, #16]	; (8006938 <HAL_MPU_Disable+0x18>)
 8006926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006928:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800692c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800692e:	2200      	movs	r2, #0
 8006930:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	e000ed00 	.word	0xe000ed00

0800693c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800693c:	4b06      	ldr	r3, [pc, #24]	; (8006958 <HAL_MPU_Enable+0x1c>)
 800693e:	f040 0001 	orr.w	r0, r0, #1
 8006942:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006948:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800694c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800694e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006952:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006956:	4770      	bx	lr
 8006958:	e000ed00 	.word	0xe000ed00

0800695c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800695c:	7843      	ldrb	r3, [r0, #1]
 800695e:	4a14      	ldr	r2, [pc, #80]	; (80069b0 <HAL_MPU_ConfigRegion+0x54>)
{
 8006960:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8006962:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8006966:	7801      	ldrb	r1, [r0, #0]
 8006968:	b1e9      	cbz	r1, 80069a6 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800696a:	6843      	ldr	r3, [r0, #4]
 800696c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006970:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006972:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006974:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006976:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800697a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800697c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800697e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006982:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006984:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006988:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800698a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800698e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006990:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006994:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006996:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800699a:	7a01      	ldrb	r1, [r0, #8]
 800699c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80069a0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80069a4:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80069a6:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80069aa:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 80069ae:	e7f9      	b.n	80069a4 <HAL_MPU_ConfigRegion+0x48>
 80069b0:	e000ed00 	.word	0xe000ed00

080069b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069b6:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8006b34 <DMA_SetConfig+0x180>
 80069ba:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069bc:	6d87      	ldr	r7, [r0, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069be:	4564      	cmp	r4, ip
 80069c0:	d045      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 80069c2:	4d59      	ldr	r5, [pc, #356]	; (8006b28 <DMA_SetConfig+0x174>)
 80069c4:	42ac      	cmp	r4, r5
 80069c6:	d042      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 80069c8:	3518      	adds	r5, #24
 80069ca:	42ac      	cmp	r4, r5
 80069cc:	d03f      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 80069ce:	3518      	adds	r5, #24
 80069d0:	42ac      	cmp	r4, r5
 80069d2:	d03c      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 80069d4:	3518      	adds	r5, #24
 80069d6:	42ac      	cmp	r4, r5
 80069d8:	d039      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 80069da:	3518      	adds	r5, #24
 80069dc:	42ac      	cmp	r4, r5
 80069de:	d036      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 80069e0:	3518      	adds	r5, #24
 80069e2:	42ac      	cmp	r4, r5
 80069e4:	d033      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 80069e6:	3518      	adds	r5, #24
 80069e8:	42ac      	cmp	r4, r5
 80069ea:	d030      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 80069ec:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80069f0:	42ac      	cmp	r4, r5
 80069f2:	d02c      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 80069f4:	3518      	adds	r5, #24
 80069f6:	42ac      	cmp	r4, r5
 80069f8:	d029      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 80069fa:	3518      	adds	r5, #24
 80069fc:	42ac      	cmp	r4, r5
 80069fe:	d026      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 8006a00:	3518      	adds	r5, #24
 8006a02:	42ac      	cmp	r4, r5
 8006a04:	d023      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 8006a06:	3518      	adds	r5, #24
 8006a08:	42ac      	cmp	r4, r5
 8006a0a:	d020      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 8006a0c:	3518      	adds	r5, #24
 8006a0e:	42ac      	cmp	r4, r5
 8006a10:	d01d      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 8006a12:	3518      	adds	r5, #24
 8006a14:	42ac      	cmp	r4, r5
 8006a16:	d01a      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 8006a18:	3518      	adds	r5, #24
 8006a1a:	42ac      	cmp	r4, r5
 8006a1c:	d017      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 8006a1e:	4d43      	ldr	r5, [pc, #268]	; (8006b2c <DMA_SetConfig+0x178>)
 8006a20:	42ac      	cmp	r4, r5
 8006a22:	d014      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 8006a24:	3514      	adds	r5, #20
 8006a26:	42ac      	cmp	r4, r5
 8006a28:	d011      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 8006a2a:	3514      	adds	r5, #20
 8006a2c:	42ac      	cmp	r4, r5
 8006a2e:	d00e      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 8006a30:	3514      	adds	r5, #20
 8006a32:	42ac      	cmp	r4, r5
 8006a34:	d00b      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 8006a36:	3514      	adds	r5, #20
 8006a38:	42ac      	cmp	r4, r5
 8006a3a:	d008      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 8006a3c:	3514      	adds	r5, #20
 8006a3e:	42ac      	cmp	r4, r5
 8006a40:	d005      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 8006a42:	3514      	adds	r5, #20
 8006a44:	42ac      	cmp	r4, r5
 8006a46:	d002      	beq.n	8006a4e <DMA_SetConfig+0x9a>
 8006a48:	3514      	adds	r5, #20
 8006a4a:	42ac      	cmp	r4, r5
 8006a4c:	d167      	bne.n	8006b1e <DMA_SetConfig+0x16a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a4e:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	; 0x64
 8006a52:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006a54:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8006a56:	b115      	cbz	r5, 8006a5e <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a58:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	; 0x70
 8006a5c:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a5e:	4564      	cmp	r4, ip
 8006a60:	d037      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006a62:	4d31      	ldr	r5, [pc, #196]	; (8006b28 <DMA_SetConfig+0x174>)
 8006a64:	42ac      	cmp	r4, r5
 8006a66:	d034      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006a68:	3518      	adds	r5, #24
 8006a6a:	42ac      	cmp	r4, r5
 8006a6c:	d031      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006a6e:	3518      	adds	r5, #24
 8006a70:	42ac      	cmp	r4, r5
 8006a72:	d02e      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006a74:	3518      	adds	r5, #24
 8006a76:	42ac      	cmp	r4, r5
 8006a78:	d02b      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006a7a:	3518      	adds	r5, #24
 8006a7c:	42ac      	cmp	r4, r5
 8006a7e:	d028      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006a80:	3518      	adds	r5, #24
 8006a82:	42ac      	cmp	r4, r5
 8006a84:	d025      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006a86:	3518      	adds	r5, #24
 8006a88:	42ac      	cmp	r4, r5
 8006a8a:	d022      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006a8c:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8006a90:	42ac      	cmp	r4, r5
 8006a92:	d01e      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006a94:	3518      	adds	r5, #24
 8006a96:	42ac      	cmp	r4, r5
 8006a98:	d01b      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006a9a:	3518      	adds	r5, #24
 8006a9c:	42ac      	cmp	r4, r5
 8006a9e:	d018      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006aa0:	3518      	adds	r5, #24
 8006aa2:	42ac      	cmp	r4, r5
 8006aa4:	d015      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006aa6:	3518      	adds	r5, #24
 8006aa8:	42ac      	cmp	r4, r5
 8006aaa:	d012      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006aac:	3518      	adds	r5, #24
 8006aae:	42ac      	cmp	r4, r5
 8006ab0:	d00f      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006ab2:	3518      	adds	r5, #24
 8006ab4:	42ac      	cmp	r4, r5
 8006ab6:	d00c      	beq.n	8006ad2 <DMA_SetConfig+0x11e>
 8006ab8:	3518      	adds	r5, #24
 8006aba:	42ac      	cmp	r4, r5
 8006abc:	d009      	beq.n	8006ad2 <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006abe:	4d1b      	ldr	r5, [pc, #108]	; (8006b2c <DMA_SetConfig+0x178>)
 8006ac0:	42ac      	cmp	r4, r5
 8006ac2:	d117      	bne.n	8006af4 <DMA_SetConfig+0x140>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ac4:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8006ac6:	f005 061f 	and.w	r6, r5, #31
 8006aca:	2501      	movs	r5, #1
 8006acc:	40b5      	lsls	r5, r6
 8006ace:	607d      	str	r5, [r7, #4]
 8006ad0:	e009      	b.n	8006ae6 <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ad2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8006ad4:	f005 061f 	and.w	r6, r5, #31
 8006ad8:	253f      	movs	r5, #63	; 0x3f
 8006ada:	40b5      	lsls	r5, r6
 8006adc:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ade:	6825      	ldr	r5, [r4, #0]
 8006ae0:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8006ae4:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006ae6:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ae8:	6883      	ldr	r3, [r0, #8]
 8006aea:	2b40      	cmp	r3, #64	; 0x40
 8006aec:	d118      	bne.n	8006b20 <DMA_SetConfig+0x16c>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006aee:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006af0:	60e1      	str	r1, [r4, #12]
 8006af2:	e014      	b.n	8006b1e <DMA_SetConfig+0x16a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006af4:	4d0e      	ldr	r5, [pc, #56]	; (8006b30 <DMA_SetConfig+0x17c>)
 8006af6:	42ac      	cmp	r4, r5
 8006af8:	d0e4      	beq.n	8006ac4 <DMA_SetConfig+0x110>
 8006afa:	3514      	adds	r5, #20
 8006afc:	42ac      	cmp	r4, r5
 8006afe:	d0e1      	beq.n	8006ac4 <DMA_SetConfig+0x110>
 8006b00:	3514      	adds	r5, #20
 8006b02:	42ac      	cmp	r4, r5
 8006b04:	d0de      	beq.n	8006ac4 <DMA_SetConfig+0x110>
 8006b06:	3514      	adds	r5, #20
 8006b08:	42ac      	cmp	r4, r5
 8006b0a:	d0db      	beq.n	8006ac4 <DMA_SetConfig+0x110>
 8006b0c:	3514      	adds	r5, #20
 8006b0e:	42ac      	cmp	r4, r5
 8006b10:	d0d8      	beq.n	8006ac4 <DMA_SetConfig+0x110>
 8006b12:	3514      	adds	r5, #20
 8006b14:	42ac      	cmp	r4, r5
 8006b16:	d0d5      	beq.n	8006ac4 <DMA_SetConfig+0x110>
 8006b18:	3514      	adds	r5, #20
 8006b1a:	42ac      	cmp	r4, r5
 8006b1c:	d0d2      	beq.n	8006ac4 <DMA_SetConfig+0x110>
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006b20:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006b22:	60e2      	str	r2, [r4, #12]
}
 8006b24:	e7fb      	b.n	8006b1e <DMA_SetConfig+0x16a>
 8006b26:	bf00      	nop
 8006b28:	40020028 	.word	0x40020028
 8006b2c:	58025408 	.word	0x58025408
 8006b30:	5802541c 	.word	0x5802541c
 8006b34:	40020010 	.word	0x40020010

08006b38 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b38:	6803      	ldr	r3, [r0, #0]
 8006b3a:	4a24      	ldr	r2, [pc, #144]	; (8006bcc <DMA_CalcBaseAndBitshift+0x94>)
 8006b3c:	4293      	cmp	r3, r2
{
 8006b3e:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b40:	d032      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b42:	3218      	adds	r2, #24
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d02f      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b48:	3218      	adds	r2, #24
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d02c      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b4e:	3218      	adds	r2, #24
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d029      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b54:	3218      	adds	r2, #24
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d026      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b5a:	3218      	adds	r2, #24
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d023      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b60:	3218      	adds	r2, #24
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d020      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b66:	3218      	adds	r2, #24
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d01d      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b6c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d019      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b74:	3218      	adds	r2, #24
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d016      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b7a:	3218      	adds	r2, #24
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d013      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b80:	3218      	adds	r2, #24
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d010      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b86:	3218      	adds	r2, #24
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00d      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b8c:	3218      	adds	r2, #24
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00a      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b92:	3218      	adds	r2, #24
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d007      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
 8006b98:	3218      	adds	r2, #24
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d004      	beq.n	8006ba8 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006b9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006ba2:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8006ba4:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8006ba6:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006ba8:	b2d9      	uxtb	r1, r3
 8006baa:	2218      	movs	r2, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006bac:	4c08      	ldr	r4, [pc, #32]	; (8006bd0 <DMA_CalcBaseAndBitshift+0x98>)
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006bb2:	3910      	subs	r1, #16
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006bb4:	f023 0303 	bic.w	r3, r3, #3
    if (stream_number > 3U)
 8006bb8:	295f      	cmp	r1, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006bba:	fbb1 f2f2 	udiv	r2, r1, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006bbe:	f002 0207 	and.w	r2, r2, #7
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006bc2:	bf88      	it	hi
 8006bc4:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006bc6:	5ca2      	ldrb	r2, [r4, r2]
 8006bc8:	65c2      	str	r2, [r0, #92]	; 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006bca:	e7ea      	b.n	8006ba2 <DMA_CalcBaseAndBitshift+0x6a>
 8006bcc:	40020010 	.word	0x40020010
 8006bd0:	0801481a 	.word	0x0801481a

08006bd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006bd4:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006bd6:	491f      	ldr	r1, [pc, #124]	; (8006c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006bd8:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006bda:	428a      	cmp	r2, r1
 8006bdc:	d024      	beq.n	8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006bde:	3114      	adds	r1, #20
 8006be0:	428a      	cmp	r2, r1
 8006be2:	d021      	beq.n	8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006be4:	3114      	adds	r1, #20
 8006be6:	428a      	cmp	r2, r1
 8006be8:	d01e      	beq.n	8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006bea:	3114      	adds	r1, #20
 8006bec:	428a      	cmp	r2, r1
 8006bee:	d01b      	beq.n	8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006bf0:	3114      	adds	r1, #20
 8006bf2:	428a      	cmp	r2, r1
 8006bf4:	d018      	beq.n	8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006bf6:	3114      	adds	r1, #20
 8006bf8:	428a      	cmp	r2, r1
 8006bfa:	d015      	beq.n	8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006bfc:	3114      	adds	r1, #20
 8006bfe:	428a      	cmp	r2, r1
 8006c00:	d012      	beq.n	8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006c02:	3114      	adds	r1, #20
 8006c04:	428a      	cmp	r2, r1
 8006c06:	d00f      	beq.n	8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c08:	2118      	movs	r1, #24
 8006c0a:	3b10      	subs	r3, #16
 8006c0c:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006c10:	4911      	ldr	r1, [pc, #68]	; (8006c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8006c12:	4411      	add	r1, r2
 8006c14:	29a8      	cmp	r1, #168	; 0xa8
 8006c16:	d91a      	bls.n	8006c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006c18:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8006c1c:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
 8006c20:	0092      	lsls	r2, r2, #2
 8006c22:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c24:	4a0d      	ldr	r2, [pc, #52]	; (8006c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8006c26:	e00a      	b.n	8006c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006c28:	2214      	movs	r2, #20
 8006c2a:	3b08      	subs	r3, #8
 8006c2c:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006c30:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 8006c34:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
 8006c38:	0092      	lsls	r2, r2, #2
 8006c3a:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006c3c:	4a08      	ldr	r2, [pc, #32]	; (8006c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c3e:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c42:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c44:	2201      	movs	r2, #1
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 8006c4c:	4770      	bx	lr
      stream_number += 8U;
 8006c4e:	3308      	adds	r3, #8
 8006c50:	e7e2      	b.n	8006c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 8006c52:	bf00      	nop
 8006c54:	58025408 	.word	0x58025408
 8006c58:	bffdfbf0 	.word	0xbffdfbf0
 8006c5c:	40020880 	.word	0x40020880
 8006c60:	58025880 	.word	0x58025880

08006c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c64:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006c66:	1e51      	subs	r1, r2, #1
 8006c68:	2907      	cmp	r1, #7
{
 8006c6a:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006c6c:	d821      	bhi.n	8006cb2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006c6e:	6803      	ldr	r3, [r0, #0]
 8006c70:	4c13      	ldr	r4, [pc, #76]	; (8006cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 8006c72:	42a3      	cmp	r3, r4
 8006c74:	d01e      	beq.n	8006cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006c76:	3414      	adds	r4, #20
 8006c78:	42a3      	cmp	r3, r4
 8006c7a:	d01b      	beq.n	8006cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006c7c:	3414      	adds	r4, #20
 8006c7e:	42a3      	cmp	r3, r4
 8006c80:	d018      	beq.n	8006cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006c82:	3414      	adds	r4, #20
 8006c84:	42a3      	cmp	r3, r4
 8006c86:	d015      	beq.n	8006cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006c88:	3414      	adds	r4, #20
 8006c8a:	42a3      	cmp	r3, r4
 8006c8c:	d012      	beq.n	8006cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006c8e:	3414      	adds	r4, #20
 8006c90:	42a3      	cmp	r3, r4
 8006c92:	d00f      	beq.n	8006cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006c94:	3414      	adds	r4, #20
 8006c96:	42a3      	cmp	r3, r4
 8006c98:	d00c      	beq.n	8006cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006c9a:	3414      	adds	r4, #20
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	d009      	beq.n	8006cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ca0:	4b08      	ldr	r3, [pc, #32]	; (8006cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ca8:	4b07      	ldr	r3, [pc, #28]	; (8006cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006caa:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006cac:	2301      	movs	r3, #1
 8006cae:	408b      	lsls	r3, r1
 8006cb0:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 8006cb2:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006cb4:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006cbc:	4b04      	ldr	r3, [pc, #16]	; (8006cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8006cbe:	e7f4      	b.n	8006caa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x46>
 8006cc0:	58025408 	.word	0x58025408
 8006cc4:	1000823f 	.word	0x1000823f
 8006cc8:	40020940 	.word	0x40020940
 8006ccc:	1600963f 	.word	0x1600963f
 8006cd0:	58025940 	.word	0x58025940

08006cd4 <HAL_DMA_Init>:
{
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006cd8:	f7ff fd8a 	bl	80067f0 <HAL_GetTick>
 8006cdc:	4606      	mov	r6, r0
  if(hdma == NULL)
 8006cde:	2c00      	cmp	r4, #0
 8006ce0:	f000 80e6 	beq.w	8006eb0 <HAL_DMA_Init+0x1dc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	4d84      	ldr	r5, [pc, #528]	; (8006ef8 <HAL_DMA_Init+0x224>)
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	d06a      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006cec:	4a83      	ldr	r2, [pc, #524]	; (8006efc <HAL_DMA_Init+0x228>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d067      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006cf2:	3218      	adds	r2, #24
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d064      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006cf8:	3218      	adds	r2, #24
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d061      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006cfe:	3218      	adds	r2, #24
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d05e      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006d04:	3218      	adds	r2, #24
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d05b      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006d0a:	3218      	adds	r2, #24
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d058      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006d10:	3218      	adds	r2, #24
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d055      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006d16:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d051      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006d1e:	3218      	adds	r2, #24
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d04e      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006d24:	3218      	adds	r2, #24
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d04b      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006d2a:	3218      	adds	r2, #24
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d048      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006d30:	3218      	adds	r2, #24
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d045      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006d36:	3218      	adds	r2, #24
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d042      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006d3c:	3218      	adds	r2, #24
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d03f      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
 8006d42:	3218      	adds	r2, #24
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d03c      	beq.n	8006dc2 <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006d48:	4a6d      	ldr	r2, [pc, #436]	; (8006f00 <HAL_DMA_Init+0x22c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	f040 8159 	bne.w	8007002 <HAL_DMA_Init+0x32e>
    __HAL_UNLOCK(hdma);
 8006d50:	2200      	movs	r2, #0
 8006d52:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d56:	2202      	movs	r2, #2
 8006d58:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006d5c:	68a2      	ldr	r2, [r4, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006d5e:	6819      	ldr	r1, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006d60:	2a40      	cmp	r2, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006d62:	f421 31ff 	bic.w	r1, r1, #130560	; 0x1fe00
 8006d66:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006d6a:	f000 8168 	beq.w	800703e <HAL_DMA_Init+0x36a>
 8006d6e:	2a80      	cmp	r2, #128	; 0x80
 8006d70:	bf0c      	ite	eq
 8006d72:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8006d76:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006d78:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 8006d7c:	08d2      	lsrs	r2, r2, #3
 8006d7e:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006d82:	6966      	ldr	r6, [r4, #20]
 8006d84:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006d88:	69a6      	ldr	r6, [r4, #24]
 8006d8a:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006d8e:	69e6      	ldr	r6, [r4, #28]
 8006d90:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006d94:	6a26      	ldr	r6, [r4, #32]
 8006d96:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8006d9a:	430a      	orrs	r2, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006d9c:	4302      	orrs	r2, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d9e:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006da0:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006da2:	4a58      	ldr	r2, [pc, #352]	; (8006f04 <HAL_DMA_Init+0x230>)
 8006da4:	441a      	add	r2, r3
 8006da6:	2314      	movs	r3, #20
 8006da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dac:	0092      	lsls	r2, r2, #2
 8006dae:	65e2      	str	r2, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006db0:	f7ff fec2 	bl	8006b38 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006db4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006db6:	f003 021f 	and.w	r2, r3, #31
 8006dba:	2301      	movs	r3, #1
 8006dbc:	4093      	lsls	r3, r2
 8006dbe:	6043      	str	r3, [r0, #4]
 8006dc0:	e0b6      	b.n	8006f30 <HAL_DMA_Init+0x25c>
    __HAL_UNLOCK(hdma);
 8006dc2:	2200      	movs	r2, #0
    __HAL_DMA_DISABLE(hdma);
 8006dc4:	42ab      	cmp	r3, r5
    __HAL_UNLOCK(hdma);
 8006dc6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8006dca:	f04f 0202 	mov.w	r2, #2
 8006dce:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8006dd2:	d01e      	beq.n	8006e12 <HAL_DMA_Init+0x13e>
 8006dd4:	4a49      	ldr	r2, [pc, #292]	; (8006efc <HAL_DMA_Init+0x228>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d01b      	beq.n	8006e12 <HAL_DMA_Init+0x13e>
 8006dda:	3218      	adds	r2, #24
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d018      	beq.n	8006e12 <HAL_DMA_Init+0x13e>
 8006de0:	3218      	adds	r2, #24
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d015      	beq.n	8006e12 <HAL_DMA_Init+0x13e>
 8006de6:	3218      	adds	r2, #24
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d012      	beq.n	8006e12 <HAL_DMA_Init+0x13e>
 8006dec:	3218      	adds	r2, #24
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00f      	beq.n	8006e12 <HAL_DMA_Init+0x13e>
 8006df2:	3218      	adds	r2, #24
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00c      	beq.n	8006e12 <HAL_DMA_Init+0x13e>
 8006df8:	3218      	adds	r2, #24
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d009      	beq.n	8006e12 <HAL_DMA_Init+0x13e>
 8006dfe:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d005      	beq.n	8006e12 <HAL_DMA_Init+0x13e>
 8006e06:	3218      	adds	r2, #24
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d002      	beq.n	8006e12 <HAL_DMA_Init+0x13e>
 8006e0c:	3218      	adds	r2, #24
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d0ff      	beq.n	8006e12 <HAL_DMA_Init+0x13e>
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	f022 0201 	bic.w	r2, r2, #1
 8006e18:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e1a:	6821      	ldr	r1, [r4, #0]
 8006e1c:	680b      	ldr	r3, [r1, #0]
 8006e1e:	07db      	lsls	r3, r3, #31
 8006e20:	d43c      	bmi.n	8006e9c <HAL_DMA_Init+0x1c8>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006e22:	680b      	ldr	r3, [r1, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e24:	4e38      	ldr	r6, [pc, #224]	; (8006f08 <HAL_DMA_Init+0x234>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e26:	69a0      	ldr	r0, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e28:	401e      	ands	r6, r3
    registerValue |=  hdma->Init.Direction           |
 8006e2a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8006e2e:	4313      	orrs	r3, r2
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e30:	6922      	ldr	r2, [r4, #16]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	6962      	ldr	r2, [r4, #20]
 8006e36:	4313      	orrs	r3, r2
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e38:	69e2      	ldr	r2, [r4, #28]
 8006e3a:	4303      	orrs	r3, r0
 8006e3c:	4313      	orrs	r3, r2
            hdma->Init.Mode                | hdma->Init.Priority;
 8006e3e:	6a22      	ldr	r2, [r4, #32]
 8006e40:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006e42:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e46:	2e04      	cmp	r6, #4
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006e48:	bf02      	ittt	eq
 8006e4a:	e9d4 270b 	ldrdeq	r2, r7, [r4, #44]	; 0x2c
 8006e4e:	433a      	orreq	r2, r7
 8006e50:	4313      	orreq	r3, r2
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006e52:	4a2e      	ldr	r2, [pc, #184]	; (8006f0c <HAL_DMA_Init+0x238>)
 8006e54:	6812      	ldr	r2, [r2, #0]
 8006e56:	0c12      	lsrs	r2, r2, #16
 8006e58:	0412      	lsls	r2, r2, #16
 8006e5a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8006e5e:	d307      	bcc.n	8006e70 <HAL_DMA_Init+0x19c>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006e60:	6862      	ldr	r2, [r4, #4]
 8006e62:	f1a2 0729 	sub.w	r7, r2, #41	; 0x29
 8006e66:	2f1f      	cmp	r7, #31
 8006e68:	d924      	bls.n	8006eb4 <HAL_DMA_Init+0x1e0>
 8006e6a:	3a4f      	subs	r2, #79	; 0x4f
 8006e6c:	2a03      	cmp	r2, #3
 8006e6e:	d925      	bls.n	8006ebc <HAL_DMA_Init+0x1e8>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006e70:	600b      	str	r3, [r1, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e72:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006e74:	694b      	ldr	r3, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006e76:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8006e7a:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e7e:	d14d      	bne.n	8006f1c <HAL_DMA_Init+0x248>
      registerValue |= hdma->Init.FIFOThreshold;
 8006e80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006e82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8006e84:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006e86:	2e00      	cmp	r6, #0
 8006e88:	d048      	beq.n	8006f1c <HAL_DMA_Init+0x248>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e8a:	b9d0      	cbnz	r0, 8006ec2 <HAL_DMA_Init+0x1ee>
    switch (hdma->Init.FIFOThreshold)
 8006e8c:	2a01      	cmp	r2, #1
 8006e8e:	d029      	beq.n	8006ee4 <HAL_DMA_Init+0x210>
 8006e90:	f032 0202 	bics.w	r2, r2, #2
 8006e94:	d142      	bne.n	8006f1c <HAL_DMA_Init+0x248>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e96:	01f2      	lsls	r2, r6, #7
 8006e98:	d540      	bpl.n	8006f1c <HAL_DMA_Init+0x248>
 8006e9a:	e026      	b.n	8006eea <HAL_DMA_Init+0x216>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e9c:	f7ff fca8 	bl	80067f0 <HAL_GetTick>
 8006ea0:	1b80      	subs	r0, r0, r6
 8006ea2:	2805      	cmp	r0, #5
 8006ea4:	d9b9      	bls.n	8006e1a <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ea6:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006ea8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8006eb0:	2001      	movs	r0, #1
 8006eb2:	e01f      	b.n	8006ef4 <HAL_DMA_Init+0x220>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006eb4:	4a16      	ldr	r2, [pc, #88]	; (8006f10 <HAL_DMA_Init+0x23c>)
 8006eb6:	40fa      	lsrs	r2, r7
 8006eb8:	07d7      	lsls	r7, r2, #31
 8006eba:	d5d9      	bpl.n	8006e70 <HAL_DMA_Init+0x19c>
        registerValue |= DMA_SxCR_TRBUFF;
 8006ebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ec0:	e7d6      	b.n	8006e70 <HAL_DMA_Init+0x19c>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006ec2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8006ec6:	d125      	bne.n	8006f14 <HAL_DMA_Init+0x240>
    switch (hdma->Init.FIFOThreshold)
 8006ec8:	2a03      	cmp	r2, #3
 8006eca:	d827      	bhi.n	8006f1c <HAL_DMA_Init+0x248>
 8006ecc:	a001      	add	r0, pc, #4	; (adr r0, 8006ed4 <HAL_DMA_Init+0x200>)
 8006ece:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8006ed2:	bf00      	nop
 8006ed4:	08006eeb 	.word	0x08006eeb
 8006ed8:	08006e97 	.word	0x08006e97
 8006edc:	08006eeb 	.word	0x08006eeb
 8006ee0:	08006ee5 	.word	0x08006ee5
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ee4:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8006ee8:	d118      	bne.n	8006f1c <HAL_DMA_Init+0x248>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006eea:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8006eec:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006eee:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8006ef0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8006ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	40020010 	.word	0x40020010
 8006efc:	40020028 	.word	0x40020028
 8006f00:	58025408 	.word	0x58025408
 8006f04:	a7fdabf8 	.word	0xa7fdabf8
 8006f08:	fe10803f 	.word	0xfe10803f
 8006f0c:	5c001000 	.word	0x5c001000
 8006f10:	c3c0003f 	.word	0xc3c0003f
    switch (hdma->Init.FIFOThreshold)
 8006f14:	2a02      	cmp	r2, #2
 8006f16:	d9e8      	bls.n	8006eea <HAL_DMA_Init+0x216>
 8006f18:	2a03      	cmp	r2, #3
 8006f1a:	d0bc      	beq.n	8006e96 <HAL_DMA_Init+0x1c2>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006f1c:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f7ff fe0a 	bl	8006b38 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f24:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006f26:	f003 021f 	and.w	r2, r3, #31
 8006f2a:	233f      	movs	r3, #63	; 0x3f
 8006f2c:	4093      	lsls	r3, r2
 8006f2e:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	42ab      	cmp	r3, r5
 8006f34:	d045      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f36:	4a45      	ldr	r2, [pc, #276]	; (800704c <HAL_DMA_Init+0x378>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d042      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f3c:	3218      	adds	r2, #24
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d03f      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f42:	3218      	adds	r2, #24
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d03c      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f48:	3218      	adds	r2, #24
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d039      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f4e:	3218      	adds	r2, #24
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d036      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f54:	3218      	adds	r2, #24
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d033      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f5a:	3218      	adds	r2, #24
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d030      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f60:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d02c      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f68:	3218      	adds	r2, #24
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d029      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f6e:	3218      	adds	r2, #24
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d026      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f74:	3218      	adds	r2, #24
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d023      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f7a:	3218      	adds	r2, #24
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d020      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f80:	3218      	adds	r2, #24
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d01d      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f86:	3218      	adds	r2, #24
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d01a      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f8c:	3218      	adds	r2, #24
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d017      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f92:	4a2f      	ldr	r2, [pc, #188]	; (8007050 <HAL_DMA_Init+0x37c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d014      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f98:	3214      	adds	r2, #20
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d011      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006f9e:	3214      	adds	r2, #20
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00e      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006fa4:	3214      	adds	r2, #20
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00b      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006faa:	3214      	adds	r2, #20
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d008      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006fb0:	3214      	adds	r2, #20
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d005      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006fb6:	3214      	adds	r2, #20
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d002      	beq.n	8006fc2 <HAL_DMA_Init+0x2ee>
 8006fbc:	3214      	adds	r2, #20
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d119      	bne.n	8006ff6 <HAL_DMA_Init+0x322>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	2500      	movs	r5, #0
 8006fc6:	f7ff fe05 	bl	8006bd4 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006fca:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006fcc:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006fce:	2b80      	cmp	r3, #128	; 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006fd0:	bf04      	itt	eq
 8006fd2:	2300      	moveq	r3, #0
 8006fd4:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006fd6:	6863      	ldr	r3, [r4, #4]
 8006fd8:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006fda:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006fdc:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006fde:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fe0:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
 8006fe4:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006fe6:	d82c      	bhi.n	8007042 <HAL_DMA_Init+0x36e>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006fe8:	f7ff fe3c 	bl	8006c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006fec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006fee:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ff0:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8006ff4:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ff6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006ff8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ffa:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8006ffc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8007000:	e778      	b.n	8006ef4 <HAL_DMA_Init+0x220>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007002:	4a14      	ldr	r2, [pc, #80]	; (8007054 <HAL_DMA_Init+0x380>)
 8007004:	4293      	cmp	r3, r2
 8007006:	f43f aea3 	beq.w	8006d50 <HAL_DMA_Init+0x7c>
 800700a:	3214      	adds	r2, #20
 800700c:	4293      	cmp	r3, r2
 800700e:	f43f ae9f 	beq.w	8006d50 <HAL_DMA_Init+0x7c>
 8007012:	3214      	adds	r2, #20
 8007014:	4293      	cmp	r3, r2
 8007016:	f43f ae9b 	beq.w	8006d50 <HAL_DMA_Init+0x7c>
 800701a:	3214      	adds	r2, #20
 800701c:	4293      	cmp	r3, r2
 800701e:	f43f ae97 	beq.w	8006d50 <HAL_DMA_Init+0x7c>
 8007022:	3214      	adds	r2, #20
 8007024:	4293      	cmp	r3, r2
 8007026:	f43f ae93 	beq.w	8006d50 <HAL_DMA_Init+0x7c>
 800702a:	3214      	adds	r2, #20
 800702c:	4293      	cmp	r3, r2
 800702e:	f43f ae8f 	beq.w	8006d50 <HAL_DMA_Init+0x7c>
 8007032:	3214      	adds	r2, #20
 8007034:	4293      	cmp	r3, r2
 8007036:	f43f ae8b 	beq.w	8006d50 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800703a:	2340      	movs	r3, #64	; 0x40
 800703c:	e734      	b.n	8006ea8 <HAL_DMA_Init+0x1d4>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800703e:	2010      	movs	r0, #16
 8007040:	e69a      	b.n	8006d78 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 8007042:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007046:	6765      	str	r5, [r4, #116]	; 0x74
 8007048:	e7d5      	b.n	8006ff6 <HAL_DMA_Init+0x322>
 800704a:	bf00      	nop
 800704c:	40020028 	.word	0x40020028
 8007050:	58025408 	.word	0x58025408
 8007054:	5802541c 	.word	0x5802541c

08007058 <HAL_DMA_DeInit>:
{
 8007058:	b510      	push	{r4, lr}
  if(hdma == NULL)
 800705a:	4604      	mov	r4, r0
 800705c:	b908      	cbnz	r0, 8007062 <HAL_DMA_DeInit+0xa>
    return HAL_ERROR;
 800705e:	2001      	movs	r0, #1
}
 8007060:	bd10      	pop	{r4, pc}
  __HAL_DMA_DISABLE(hdma);
 8007062:	6803      	ldr	r3, [r0, #0]
 8007064:	4965      	ldr	r1, [pc, #404]	; (80071fc <HAL_DMA_DeInit+0x1a4>)
 8007066:	428b      	cmp	r3, r1
 8007068:	d02d      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 800706a:	4a65      	ldr	r2, [pc, #404]	; (8007200 <HAL_DMA_DeInit+0x1a8>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d02a      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 8007070:	3218      	adds	r2, #24
 8007072:	4293      	cmp	r3, r2
 8007074:	d027      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 8007076:	3218      	adds	r2, #24
 8007078:	4293      	cmp	r3, r2
 800707a:	d024      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 800707c:	3218      	adds	r2, #24
 800707e:	4293      	cmp	r3, r2
 8007080:	d021      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 8007082:	3218      	adds	r2, #24
 8007084:	4293      	cmp	r3, r2
 8007086:	d01e      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 8007088:	3218      	adds	r2, #24
 800708a:	4293      	cmp	r3, r2
 800708c:	d01b      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 800708e:	3218      	adds	r2, #24
 8007090:	4293      	cmp	r3, r2
 8007092:	d018      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 8007094:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007098:	4293      	cmp	r3, r2
 800709a:	d014      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 800709c:	3218      	adds	r2, #24
 800709e:	4293      	cmp	r3, r2
 80070a0:	d011      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 80070a2:	3218      	adds	r2, #24
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00e      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 80070a8:	3218      	adds	r2, #24
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d00b      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 80070ae:	3218      	adds	r2, #24
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d008      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 80070b4:	3218      	adds	r2, #24
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d005      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 80070ba:	3218      	adds	r2, #24
 80070bc:	4293      	cmp	r3, r2
 80070be:	d002      	beq.n	80070c6 <HAL_DMA_DeInit+0x6e>
 80070c0:	3218      	adds	r2, #24
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d13d      	bne.n	8007142 <HAL_DMA_DeInit+0xea>
 80070c6:	681a      	ldr	r2, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070c8:	428b      	cmp	r3, r1
  __HAL_DMA_DISABLE(hdma);
 80070ca:	f022 0201 	bic.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070d0:	d14e      	bne.n	8007170 <HAL_DMA_DeInit+0x118>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80070d2:	2200      	movs	r2, #0
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070d4:	4620      	mov	r0, r4
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80070d6:	601a      	str	r2, [r3, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80070d8:	605a      	str	r2, [r3, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80070da:	609a      	str	r2, [r3, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 80070dc:	60da      	str	r2, [r3, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80070de:	611a      	str	r2, [r3, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80070e0:	2221      	movs	r2, #33	; 0x21
 80070e2:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070e4:	f7ff fd28 	bl	8006b38 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80070ea:	f003 021f 	and.w	r2, r3, #31
 80070ee:	233f      	movs	r3, #63	; 0x3f
 80070f0:	4093      	lsls	r3, r2
 80070f2:	6083      	str	r3, [r0, #8]
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80070f4:	4620      	mov	r0, r4
 80070f6:	f7ff fd6d 	bl	8006bd4 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->DMAmuxChannel != 0U)
 80070fa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80070fc:	b123      	cbz	r3, 8007108 <HAL_DMA_DeInit+0xb0>
      hdma->DMAmuxChannel->CCR = 0U;
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007102:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 8007106:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007108:	6863      	ldr	r3, [r4, #4]
 800710a:	3b01      	subs	r3, #1
 800710c:	2b07      	cmp	r3, #7
 800710e:	d808      	bhi.n	8007122 <HAL_DMA_DeInit+0xca>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007110:	4620      	mov	r0, r4
 8007112:	f7ff fda7 	bl	8006c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007116:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800711c:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8007120:	605a      	str	r2, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8007122:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007124:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007126:	6760      	str	r0, [r4, #116]	; 0x74
  hdma->State = HAL_DMA_STATE_RESET;
 8007128:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800712c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->DMAmuxRequestGenStatus = 0U;
 8007130:	e9c4 001b 	strd	r0, r0, [r4, #108]	; 0x6c
  hdma->XferHalfCpltCallback   = NULL;
 8007134:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8007138:	e9c4 0011 	strd	r0, r0, [r4, #68]	; 0x44
  hdma->XferAbortCallback      = NULL;
 800713c:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  return HAL_OK;
 8007140:	e78e      	b.n	8007060 <HAL_DMA_DeInit+0x8>
  __HAL_DMA_DISABLE(hdma);
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	f022 0201 	bic.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800714a:	4a2e      	ldr	r2, [pc, #184]	; (8007204 <HAL_DMA_DeInit+0x1ac>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d13e      	bne.n	80071ce <HAL_DMA_DeInit+0x176>
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8007150:	2200      	movs	r2, #0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007152:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8007154:	601a      	str	r2, [r3, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8007156:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8007158:	609a      	str	r2, [r3, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800715a:	60da      	str	r2, [r3, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800715c:	611a      	str	r2, [r3, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800715e:	f7ff fceb 	bl	8006b38 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007162:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007164:	f003 021f 	and.w	r2, r3, #31
 8007168:	2301      	movs	r3, #1
 800716a:	4093      	lsls	r3, r2
 800716c:	6043      	str	r3, [r0, #4]
 800716e:	e7c1      	b.n	80070f4 <HAL_DMA_DeInit+0x9c>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007170:	4a23      	ldr	r2, [pc, #140]	; (8007200 <HAL_DMA_DeInit+0x1a8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d0ad      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 8007176:	3218      	adds	r2, #24
 8007178:	4293      	cmp	r3, r2
 800717a:	d0aa      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 800717c:	3218      	adds	r2, #24
 800717e:	4293      	cmp	r3, r2
 8007180:	d0a7      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 8007182:	3218      	adds	r2, #24
 8007184:	4293      	cmp	r3, r2
 8007186:	d0a4      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 8007188:	3218      	adds	r2, #24
 800718a:	4293      	cmp	r3, r2
 800718c:	d0a1      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 800718e:	3218      	adds	r2, #24
 8007190:	4293      	cmp	r3, r2
 8007192:	d09e      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 8007194:	3218      	adds	r2, #24
 8007196:	4293      	cmp	r3, r2
 8007198:	d09b      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 800719a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800719e:	4293      	cmp	r3, r2
 80071a0:	d097      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 80071a2:	3218      	adds	r2, #24
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d094      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 80071a8:	3218      	adds	r2, #24
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d091      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 80071ae:	3218      	adds	r2, #24
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d08e      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 80071b4:	3218      	adds	r2, #24
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d08b      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 80071ba:	3218      	adds	r2, #24
 80071bc:	4293      	cmp	r3, r2
 80071be:	d088      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 80071c0:	3218      	adds	r2, #24
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d085      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 80071c6:	3218      	adds	r2, #24
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d082      	beq.n	80070d2 <HAL_DMA_DeInit+0x7a>
 80071cc:	e7bd      	b.n	800714a <HAL_DMA_DeInit+0xf2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80071ce:	4a0e      	ldr	r2, [pc, #56]	; (8007208 <HAL_DMA_DeInit+0x1b0>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d0bd      	beq.n	8007150 <HAL_DMA_DeInit+0xf8>
 80071d4:	3214      	adds	r2, #20
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d0ba      	beq.n	8007150 <HAL_DMA_DeInit+0xf8>
 80071da:	3214      	adds	r2, #20
 80071dc:	4293      	cmp	r3, r2
 80071de:	d0b7      	beq.n	8007150 <HAL_DMA_DeInit+0xf8>
 80071e0:	3214      	adds	r2, #20
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d0b4      	beq.n	8007150 <HAL_DMA_DeInit+0xf8>
 80071e6:	3214      	adds	r2, #20
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d0b1      	beq.n	8007150 <HAL_DMA_DeInit+0xf8>
 80071ec:	3214      	adds	r2, #20
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d0ae      	beq.n	8007150 <HAL_DMA_DeInit+0xf8>
 80071f2:	3214      	adds	r2, #20
 80071f4:	4293      	cmp	r3, r2
 80071f6:	f47f af32 	bne.w	800705e <HAL_DMA_DeInit+0x6>
 80071fa:	e7a9      	b.n	8007150 <HAL_DMA_DeInit+0xf8>
 80071fc:	40020010 	.word	0x40020010
 8007200:	40020028 	.word	0x40020028
 8007204:	58025408 	.word	0x58025408
 8007208:	5802541c 	.word	0x5802541c

0800720c <HAL_DMA_Start_IT>:
{
 800720c:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 800720e:	2800      	cmp	r0, #0
 8007210:	f000 810b 	beq.w	800742a <HAL_DMA_Start_IT+0x21e>
  __HAL_LOCK(hdma);
 8007214:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8007218:	2c01      	cmp	r4, #1
 800721a:	f000 8108 	beq.w	800742e <HAL_DMA_Start_IT+0x222>
 800721e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8007220:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
 8007224:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8007226:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800722a:	f04f 0500 	mov.w	r5, #0
 800722e:	f040 80f7 	bne.w	8007420 <HAL_DMA_Start_IT+0x214>
    hdma->State = HAL_DMA_STATE_BUSY;
 8007232:	2402      	movs	r4, #2
 8007234:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8007238:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800723a:	6545      	str	r5, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800723c:	4d7d      	ldr	r5, [pc, #500]	; (8007434 <HAL_DMA_Start_IT+0x228>)
 800723e:	42ac      	cmp	r4, r5
 8007240:	d01e      	beq.n	8007280 <HAL_DMA_Start_IT+0x74>
 8007242:	4e7d      	ldr	r6, [pc, #500]	; (8007438 <HAL_DMA_Start_IT+0x22c>)
 8007244:	42b4      	cmp	r4, r6
 8007246:	d01b      	beq.n	8007280 <HAL_DMA_Start_IT+0x74>
 8007248:	3618      	adds	r6, #24
 800724a:	42b4      	cmp	r4, r6
 800724c:	d018      	beq.n	8007280 <HAL_DMA_Start_IT+0x74>
 800724e:	3618      	adds	r6, #24
 8007250:	42b4      	cmp	r4, r6
 8007252:	d015      	beq.n	8007280 <HAL_DMA_Start_IT+0x74>
 8007254:	3618      	adds	r6, #24
 8007256:	42b4      	cmp	r4, r6
 8007258:	d012      	beq.n	8007280 <HAL_DMA_Start_IT+0x74>
 800725a:	3618      	adds	r6, #24
 800725c:	42b4      	cmp	r4, r6
 800725e:	d00f      	beq.n	8007280 <HAL_DMA_Start_IT+0x74>
 8007260:	3618      	adds	r6, #24
 8007262:	42b4      	cmp	r4, r6
 8007264:	d00c      	beq.n	8007280 <HAL_DMA_Start_IT+0x74>
 8007266:	3618      	adds	r6, #24
 8007268:	42b4      	cmp	r4, r6
 800726a:	d009      	beq.n	8007280 <HAL_DMA_Start_IT+0x74>
 800726c:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8007270:	42b4      	cmp	r4, r6
 8007272:	d005      	beq.n	8007280 <HAL_DMA_Start_IT+0x74>
 8007274:	3618      	adds	r6, #24
 8007276:	42b4      	cmp	r4, r6
 8007278:	d002      	beq.n	8007280 <HAL_DMA_Start_IT+0x74>
 800727a:	3618      	adds	r6, #24
 800727c:	42b4      	cmp	r4, r6
 800727e:	d0ff      	beq.n	8007280 <HAL_DMA_Start_IT+0x74>
 8007280:	6826      	ldr	r6, [r4, #0]
 8007282:	f026 0601 	bic.w	r6, r6, #1
 8007286:	6026      	str	r6, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007288:	f7ff fb94 	bl	80069b4 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800728c:	6803      	ldr	r3, [r0, #0]
 800728e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007290:	42ab      	cmp	r3, r5
 8007292:	d053      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 8007294:	4a68      	ldr	r2, [pc, #416]	; (8007438 <HAL_DMA_Start_IT+0x22c>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d050      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 800729a:	3218      	adds	r2, #24
 800729c:	4293      	cmp	r3, r2
 800729e:	d04d      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 80072a0:	3218      	adds	r2, #24
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d04a      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 80072a6:	3218      	adds	r2, #24
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d047      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 80072ac:	3218      	adds	r2, #24
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d044      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 80072b2:	3218      	adds	r2, #24
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d041      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 80072b8:	3218      	adds	r2, #24
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d03e      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 80072be:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d03a      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 80072c6:	3218      	adds	r2, #24
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d037      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 80072cc:	3218      	adds	r2, #24
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d034      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 80072d2:	3218      	adds	r2, #24
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d031      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 80072d8:	3218      	adds	r2, #24
 80072da:	4293      	cmp	r3, r2
 80072dc:	d02e      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 80072de:	3218      	adds	r2, #24
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d02b      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 80072e4:	3218      	adds	r2, #24
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d028      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
 80072ea:	3218      	adds	r2, #24
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d025      	beq.n	800733c <HAL_DMA_Start_IT+0x130>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	f022 020e 	bic.w	r2, r2, #14
 80072f6:	f042 020a 	orr.w	r2, r2, #10
 80072fa:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80072fc:	2900      	cmp	r1, #0
 80072fe:	d156      	bne.n	80073ae <HAL_DMA_Start_IT+0x1a2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007300:	4a4e      	ldr	r2, [pc, #312]	; (800743c <HAL_DMA_Start_IT+0x230>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d027      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 8007306:	4a4e      	ldr	r2, [pc, #312]	; (8007440 <HAL_DMA_Start_IT+0x234>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d024      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 800730c:	3214      	adds	r2, #20
 800730e:	4293      	cmp	r3, r2
 8007310:	d021      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 8007312:	3214      	adds	r2, #20
 8007314:	4293      	cmp	r3, r2
 8007316:	d01e      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 8007318:	3214      	adds	r2, #20
 800731a:	4293      	cmp	r3, r2
 800731c:	d01b      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 800731e:	3214      	adds	r2, #20
 8007320:	4293      	cmp	r3, r2
 8007322:	d018      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 8007324:	3214      	adds	r2, #20
 8007326:	4293      	cmp	r3, r2
 8007328:	d015      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 800732a:	3214      	adds	r2, #20
 800732c:	4293      	cmp	r3, r2
 800732e:	d012      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
    __HAL_DMA_ENABLE(hdma);
 8007330:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007332:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8007334:	f042 0201 	orr.w	r2, r2, #1
 8007338:	601a      	str	r2, [r3, #0]
}
 800733a:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	f022 021e 	bic.w	r2, r2, #30
 8007342:	f042 0216 	orr.w	r2, r2, #22
 8007346:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8007348:	b119      	cbz	r1, 8007352 <HAL_DMA_Start_IT+0x146>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	f042 0208 	orr.w	r2, r2, #8
 8007350:	601a      	str	r2, [r3, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007352:	42ab      	cmp	r3, r5
 8007354:	d130      	bne.n	80073b8 <HAL_DMA_Start_IT+0x1ac>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007356:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8007358:	6811      	ldr	r1, [r2, #0]
 800735a:	03c9      	lsls	r1, r1, #15
 800735c:	d45b      	bmi.n	8007416 <HAL_DMA_Start_IT+0x20a>
      if(hdma->DMAmuxRequestGen != 0U)
 800735e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8007360:	b11a      	cbz	r2, 800736a <HAL_DMA_Start_IT+0x15e>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007362:	6811      	ldr	r1, [r2, #0]
 8007364:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007368:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800736a:	42ab      	cmp	r3, r5
 800736c:	d0e0      	beq.n	8007330 <HAL_DMA_Start_IT+0x124>
 800736e:	4a32      	ldr	r2, [pc, #200]	; (8007438 <HAL_DMA_Start_IT+0x22c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d0dd      	beq.n	8007330 <HAL_DMA_Start_IT+0x124>
 8007374:	3218      	adds	r2, #24
 8007376:	4293      	cmp	r3, r2
 8007378:	d0da      	beq.n	8007330 <HAL_DMA_Start_IT+0x124>
 800737a:	3218      	adds	r2, #24
 800737c:	4293      	cmp	r3, r2
 800737e:	d0d7      	beq.n	8007330 <HAL_DMA_Start_IT+0x124>
 8007380:	3218      	adds	r2, #24
 8007382:	4293      	cmp	r3, r2
 8007384:	d0d4      	beq.n	8007330 <HAL_DMA_Start_IT+0x124>
 8007386:	3218      	adds	r2, #24
 8007388:	4293      	cmp	r3, r2
 800738a:	d0d1      	beq.n	8007330 <HAL_DMA_Start_IT+0x124>
 800738c:	3218      	adds	r2, #24
 800738e:	4293      	cmp	r3, r2
 8007390:	d0ce      	beq.n	8007330 <HAL_DMA_Start_IT+0x124>
 8007392:	3218      	adds	r2, #24
 8007394:	4293      	cmp	r3, r2
 8007396:	d0cb      	beq.n	8007330 <HAL_DMA_Start_IT+0x124>
 8007398:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800739c:	4293      	cmp	r3, r2
 800739e:	d0c7      	beq.n	8007330 <HAL_DMA_Start_IT+0x124>
 80073a0:	3218      	adds	r2, #24
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d0c4      	beq.n	8007330 <HAL_DMA_Start_IT+0x124>
 80073a6:	3218      	adds	r2, #24
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d0c1      	beq.n	8007330 <HAL_DMA_Start_IT+0x124>
 80073ac:	e7c0      	b.n	8007330 <HAL_DMA_Start_IT+0x124>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	f042 0204 	orr.w	r2, r2, #4
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	e7a3      	b.n	8007300 <HAL_DMA_Start_IT+0xf4>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073b8:	4a1f      	ldr	r2, [pc, #124]	; (8007438 <HAL_DMA_Start_IT+0x22c>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d0cb      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 80073be:	3218      	adds	r2, #24
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d0c8      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 80073c4:	3218      	adds	r2, #24
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d0c5      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 80073ca:	3218      	adds	r2, #24
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d0c2      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 80073d0:	3218      	adds	r2, #24
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d0bf      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 80073d6:	3218      	adds	r2, #24
 80073d8:	4293      	cmp	r3, r2
 80073da:	d0bc      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 80073dc:	3218      	adds	r2, #24
 80073de:	4293      	cmp	r3, r2
 80073e0:	d0b9      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 80073e2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d0b5      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 80073ea:	3218      	adds	r2, #24
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d0b2      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 80073f0:	3218      	adds	r2, #24
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d0af      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 80073f6:	3218      	adds	r2, #24
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d0ac      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 80073fc:	3218      	adds	r2, #24
 80073fe:	4293      	cmp	r3, r2
 8007400:	d0a9      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 8007402:	3218      	adds	r2, #24
 8007404:	4293      	cmp	r3, r2
 8007406:	d0a6      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 8007408:	3218      	adds	r2, #24
 800740a:	4293      	cmp	r3, r2
 800740c:	d0a3      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 800740e:	3218      	adds	r2, #24
 8007410:	4293      	cmp	r3, r2
 8007412:	d0a0      	beq.n	8007356 <HAL_DMA_Start_IT+0x14a>
 8007414:	e774      	b.n	8007300 <HAL_DMA_Start_IT+0xf4>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007416:	6811      	ldr	r1, [r2, #0]
 8007418:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800741c:	6011      	str	r1, [r2, #0]
 800741e:	e79e      	b.n	800735e <HAL_DMA_Start_IT+0x152>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007420:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8007424:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007428:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800742a:	2001      	movs	r0, #1
 800742c:	e785      	b.n	800733a <HAL_DMA_Start_IT+0x12e>
  __HAL_LOCK(hdma);
 800742e:	2002      	movs	r0, #2
 8007430:	e783      	b.n	800733a <HAL_DMA_Start_IT+0x12e>
 8007432:	bf00      	nop
 8007434:	40020010 	.word	0x40020010
 8007438:	40020028 	.word	0x40020028
 800743c:	58025408 	.word	0x58025408
 8007440:	5802541c 	.word	0x5802541c

08007444 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8007444:	2300      	movs	r3, #0
{
 8007446:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 800744a:	9301      	str	r3, [sp, #4]
{
 800744c:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800744e:	4b29      	ldr	r3, [pc, #164]	; (80074f4 <HAL_DMA_IRQHandler+0xb0>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007450:	4e29      	ldr	r6, [pc, #164]	; (80074f8 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8007452:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007454:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007456:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007458:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 800745a:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 800745e:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007462:	d04f      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 8007464:	4a25      	ldr	r2, [pc, #148]	; (80074fc <HAL_DMA_IRQHandler+0xb8>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d04c      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 800746a:	3218      	adds	r2, #24
 800746c:	4293      	cmp	r3, r2
 800746e:	d049      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 8007470:	3218      	adds	r2, #24
 8007472:	4293      	cmp	r3, r2
 8007474:	d046      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 8007476:	3218      	adds	r2, #24
 8007478:	4293      	cmp	r3, r2
 800747a:	d043      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 800747c:	3218      	adds	r2, #24
 800747e:	4293      	cmp	r3, r2
 8007480:	d040      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 8007482:	3218      	adds	r2, #24
 8007484:	4293      	cmp	r3, r2
 8007486:	d03d      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 8007488:	3218      	adds	r2, #24
 800748a:	4293      	cmp	r3, r2
 800748c:	d03a      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 800748e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007492:	4293      	cmp	r3, r2
 8007494:	d036      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 8007496:	3218      	adds	r2, #24
 8007498:	4293      	cmp	r3, r2
 800749a:	d033      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 800749c:	3218      	adds	r2, #24
 800749e:	4293      	cmp	r3, r2
 80074a0:	d030      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 80074a2:	3218      	adds	r2, #24
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d02d      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 80074a8:	3218      	adds	r2, #24
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d02a      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 80074ae:	3218      	adds	r2, #24
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d027      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 80074b4:	3218      	adds	r2, #24
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d024      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
 80074ba:	3218      	adds	r2, #24
 80074bc:	4293      	cmp	r3, r2
 80074be:	d021      	beq.n	8007504 <HAL_DMA_IRQHandler+0xc0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80074c0:	4a0f      	ldr	r2, [pc, #60]	; (8007500 <HAL_DMA_IRQHandler+0xbc>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	f040 820c 	bne.w	80078e0 <HAL_DMA_IRQHandler+0x49c>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80074c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80074ca:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80074cc:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80074ce:	f001 011f 	and.w	r1, r1, #31
 80074d2:	4088      	lsls	r0, r1
 80074d4:	ea10 0f0c 	tst.w	r0, ip
 80074d8:	f000 8229 	beq.w	800792e <HAL_DMA_IRQHandler+0x4ea>
 80074dc:	0756      	lsls	r6, r2, #29
 80074de:	f140 8226 	bpl.w	800792e <HAL_DMA_IRQHandler+0x4ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074e2:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80074e4:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074e6:	f140 821a 	bpl.w	800791e <HAL_DMA_IRQHandler+0x4da>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80074ea:	03d3      	lsls	r3, r2, #15
 80074ec:	f100 821d 	bmi.w	800792a <HAL_DMA_IRQHandler+0x4e6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80074f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80074f2:	e180      	b.n	80077f6 <HAL_DMA_IRQHandler+0x3b2>
 80074f4:	24000000 	.word	0x24000000
 80074f8:	40020010 	.word	0x40020010
 80074fc:	40020028 	.word	0x40020028
 8007500:	58025408 	.word	0x58025408
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007504:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007506:	2008      	movs	r0, #8
 8007508:	f002 021f 	and.w	r2, r2, #31
 800750c:	4090      	lsls	r0, r2
 800750e:	ea10 0f08 	tst.w	r0, r8
 8007512:	d03d      	beq.n	8007590 <HAL_DMA_IRQHandler+0x14c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007514:	42b3      	cmp	r3, r6
 8007516:	d02e      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 8007518:	4985      	ldr	r1, [pc, #532]	; (8007730 <HAL_DMA_IRQHandler+0x2ec>)
 800751a:	428b      	cmp	r3, r1
 800751c:	d02b      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 800751e:	3118      	adds	r1, #24
 8007520:	428b      	cmp	r3, r1
 8007522:	d028      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 8007524:	3118      	adds	r1, #24
 8007526:	428b      	cmp	r3, r1
 8007528:	d025      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 800752a:	3118      	adds	r1, #24
 800752c:	428b      	cmp	r3, r1
 800752e:	d022      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 8007530:	3118      	adds	r1, #24
 8007532:	428b      	cmp	r3, r1
 8007534:	d01f      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 8007536:	3118      	adds	r1, #24
 8007538:	428b      	cmp	r3, r1
 800753a:	d01c      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 800753c:	3118      	adds	r1, #24
 800753e:	428b      	cmp	r3, r1
 8007540:	d019      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 8007542:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007546:	428b      	cmp	r3, r1
 8007548:	d015      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 800754a:	3118      	adds	r1, #24
 800754c:	428b      	cmp	r3, r1
 800754e:	d012      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 8007550:	3118      	adds	r1, #24
 8007552:	428b      	cmp	r3, r1
 8007554:	d00f      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 8007556:	3118      	adds	r1, #24
 8007558:	428b      	cmp	r3, r1
 800755a:	d00c      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 800755c:	3118      	adds	r1, #24
 800755e:	428b      	cmp	r3, r1
 8007560:	d009      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 8007562:	3118      	adds	r1, #24
 8007564:	428b      	cmp	r3, r1
 8007566:	d006      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 8007568:	3118      	adds	r1, #24
 800756a:	428b      	cmp	r3, r1
 800756c:	d003      	beq.n	8007576 <HAL_DMA_IRQHandler+0x132>
 800756e:	3118      	adds	r1, #24
 8007570:	428b      	cmp	r3, r1
 8007572:	f040 80c2 	bne.w	80076fa <HAL_DMA_IRQHandler+0x2b6>
 8007576:	6819      	ldr	r1, [r3, #0]
 8007578:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800757c:	b141      	cbz	r1, 8007590 <HAL_DMA_IRQHandler+0x14c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800757e:	6819      	ldr	r1, [r3, #0]
 8007580:	f021 0104 	bic.w	r1, r1, #4
 8007584:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007586:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007588:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800758a:	f041 0101 	orr.w	r1, r1, #1
 800758e:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007590:	fa28 f102 	lsr.w	r1, r8, r2
 8007594:	07c8      	lsls	r0, r1, #31
 8007596:	d534      	bpl.n	8007602 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007598:	42b3      	cmp	r3, r6
 800759a:	d02e      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 800759c:	4964      	ldr	r1, [pc, #400]	; (8007730 <HAL_DMA_IRQHandler+0x2ec>)
 800759e:	428b      	cmp	r3, r1
 80075a0:	d02b      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 80075a2:	3118      	adds	r1, #24
 80075a4:	428b      	cmp	r3, r1
 80075a6:	d028      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 80075a8:	3118      	adds	r1, #24
 80075aa:	428b      	cmp	r3, r1
 80075ac:	d025      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 80075ae:	3118      	adds	r1, #24
 80075b0:	428b      	cmp	r3, r1
 80075b2:	d022      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 80075b4:	3118      	adds	r1, #24
 80075b6:	428b      	cmp	r3, r1
 80075b8:	d01f      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 80075ba:	3118      	adds	r1, #24
 80075bc:	428b      	cmp	r3, r1
 80075be:	d01c      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 80075c0:	3118      	adds	r1, #24
 80075c2:	428b      	cmp	r3, r1
 80075c4:	d019      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 80075c6:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80075ca:	428b      	cmp	r3, r1
 80075cc:	d015      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 80075ce:	3118      	adds	r1, #24
 80075d0:	428b      	cmp	r3, r1
 80075d2:	d012      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 80075d4:	3118      	adds	r1, #24
 80075d6:	428b      	cmp	r3, r1
 80075d8:	d00f      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 80075da:	3118      	adds	r1, #24
 80075dc:	428b      	cmp	r3, r1
 80075de:	d00c      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 80075e0:	3118      	adds	r1, #24
 80075e2:	428b      	cmp	r3, r1
 80075e4:	d009      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 80075e6:	3118      	adds	r1, #24
 80075e8:	428b      	cmp	r3, r1
 80075ea:	d006      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 80075ec:	3118      	adds	r1, #24
 80075ee:	428b      	cmp	r3, r1
 80075f0:	d003      	beq.n	80075fa <HAL_DMA_IRQHandler+0x1b6>
 80075f2:	3118      	adds	r1, #24
 80075f4:	428b      	cmp	r3, r1
 80075f6:	f040 8084 	bne.w	8007702 <HAL_DMA_IRQHandler+0x2be>
 80075fa:	6959      	ldr	r1, [r3, #20]
 80075fc:	0609      	lsls	r1, r1, #24
 80075fe:	f100 8082 	bmi.w	8007706 <HAL_DMA_IRQHandler+0x2c2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007602:	2104      	movs	r1, #4
 8007604:	4091      	lsls	r1, r2
 8007606:	ea11 0f08 	tst.w	r1, r8
 800760a:	d032      	beq.n	8007672 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800760c:	42b3      	cmp	r3, r6
 800760e:	d02d      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 8007610:	4847      	ldr	r0, [pc, #284]	; (8007730 <HAL_DMA_IRQHandler+0x2ec>)
 8007612:	4283      	cmp	r3, r0
 8007614:	d02a      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 8007616:	3018      	adds	r0, #24
 8007618:	4283      	cmp	r3, r0
 800761a:	d027      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 800761c:	3018      	adds	r0, #24
 800761e:	4283      	cmp	r3, r0
 8007620:	d024      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 8007622:	3018      	adds	r0, #24
 8007624:	4283      	cmp	r3, r0
 8007626:	d021      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 8007628:	3018      	adds	r0, #24
 800762a:	4283      	cmp	r3, r0
 800762c:	d01e      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 800762e:	3018      	adds	r0, #24
 8007630:	4283      	cmp	r3, r0
 8007632:	d01b      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 8007634:	3018      	adds	r0, #24
 8007636:	4283      	cmp	r3, r0
 8007638:	d018      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 800763a:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800763e:	4283      	cmp	r3, r0
 8007640:	d014      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 8007642:	3018      	adds	r0, #24
 8007644:	4283      	cmp	r3, r0
 8007646:	d011      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 8007648:	3018      	adds	r0, #24
 800764a:	4283      	cmp	r3, r0
 800764c:	d00e      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 800764e:	3018      	adds	r0, #24
 8007650:	4283      	cmp	r3, r0
 8007652:	d00b      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 8007654:	3018      	adds	r0, #24
 8007656:	4283      	cmp	r3, r0
 8007658:	d008      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 800765a:	3018      	adds	r0, #24
 800765c:	4283      	cmp	r3, r0
 800765e:	d005      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 8007660:	3018      	adds	r0, #24
 8007662:	4283      	cmp	r3, r0
 8007664:	d002      	beq.n	800766c <HAL_DMA_IRQHandler+0x228>
 8007666:	3018      	adds	r0, #24
 8007668:	4283      	cmp	r3, r0
 800766a:	d154      	bne.n	8007716 <HAL_DMA_IRQHandler+0x2d2>
 800766c:	6818      	ldr	r0, [r3, #0]
 800766e:	0780      	lsls	r0, r0, #30
 8007670:	d453      	bmi.n	800771a <HAL_DMA_IRQHandler+0x2d6>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007672:	2110      	movs	r1, #16
 8007674:	fa01 f202 	lsl.w	r2, r1, r2
 8007678:	ea12 0f08 	tst.w	r2, r8
 800767c:	d05e      	beq.n	800773c <HAL_DMA_IRQHandler+0x2f8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800767e:	42b3      	cmp	r3, r6
 8007680:	d02d      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 8007682:	492b      	ldr	r1, [pc, #172]	; (8007730 <HAL_DMA_IRQHandler+0x2ec>)
 8007684:	428b      	cmp	r3, r1
 8007686:	d02a      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 8007688:	3118      	adds	r1, #24
 800768a:	428b      	cmp	r3, r1
 800768c:	d027      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 800768e:	3118      	adds	r1, #24
 8007690:	428b      	cmp	r3, r1
 8007692:	d024      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 8007694:	3118      	adds	r1, #24
 8007696:	428b      	cmp	r3, r1
 8007698:	d021      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 800769a:	3118      	adds	r1, #24
 800769c:	428b      	cmp	r3, r1
 800769e:	d01e      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 80076a0:	3118      	adds	r1, #24
 80076a2:	428b      	cmp	r3, r1
 80076a4:	d01b      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 80076a6:	3118      	adds	r1, #24
 80076a8:	428b      	cmp	r3, r1
 80076aa:	d018      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 80076ac:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80076b0:	428b      	cmp	r3, r1
 80076b2:	d014      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 80076b4:	3118      	adds	r1, #24
 80076b6:	428b      	cmp	r3, r1
 80076b8:	d011      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 80076ba:	3118      	adds	r1, #24
 80076bc:	428b      	cmp	r3, r1
 80076be:	d00e      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 80076c0:	3118      	adds	r1, #24
 80076c2:	428b      	cmp	r3, r1
 80076c4:	d00b      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 80076c6:	3118      	adds	r1, #24
 80076c8:	428b      	cmp	r3, r1
 80076ca:	d008      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 80076cc:	3118      	adds	r1, #24
 80076ce:	428b      	cmp	r3, r1
 80076d0:	d005      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 80076d2:	3118      	adds	r1, #24
 80076d4:	428b      	cmp	r3, r1
 80076d6:	d002      	beq.n	80076de <HAL_DMA_IRQHandler+0x29a>
 80076d8:	3118      	adds	r1, #24
 80076da:	428b      	cmp	r3, r1
 80076dc:	d123      	bne.n	8007726 <HAL_DMA_IRQHandler+0x2e2>
 80076de:	6819      	ldr	r1, [r3, #0]
 80076e0:	f011 0f08 	tst.w	r1, #8
 80076e4:	d02a      	beq.n	800773c <HAL_DMA_IRQHandler+0x2f8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076e6:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	0350      	lsls	r0, r2, #13
 80076ec:	f140 808b 	bpl.w	8007806 <HAL_DMA_IRQHandler+0x3c2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	0319      	lsls	r1, r3, #12
 80076f4:	d41e      	bmi.n	8007734 <HAL_DMA_IRQHandler+0x2f0>
          if(hdma->XferHalfCpltCallback != NULL)
 80076f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076f8:	e01d      	b.n	8007736 <HAL_DMA_IRQHandler+0x2f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80076fa:	6819      	ldr	r1, [r3, #0]
 80076fc:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8007700:	e73c      	b.n	800757c <HAL_DMA_IRQHandler+0x138>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007702:	6819      	ldr	r1, [r3, #0]
 8007704:	e77d      	b.n	8007602 <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007706:	2101      	movs	r1, #1
 8007708:	4091      	lsls	r1, r2
 800770a:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800770c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800770e:	f041 0102 	orr.w	r1, r1, #2
 8007712:	6561      	str	r1, [r4, #84]	; 0x54
 8007714:	e775      	b.n	8007602 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007716:	6819      	ldr	r1, [r3, #0]
 8007718:	e7ab      	b.n	8007672 <HAL_DMA_IRQHandler+0x22e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800771a:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800771c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800771e:	f041 0104 	orr.w	r1, r1, #4
 8007722:	6561      	str	r1, [r4, #84]	; 0x54
 8007724:	e7a5      	b.n	8007672 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007726:	6819      	ldr	r1, [r3, #0]
 8007728:	f011 0f04 	tst.w	r1, #4
 800772c:	e7da      	b.n	80076e4 <HAL_DMA_IRQHandler+0x2a0>
 800772e:	bf00      	nop
 8007730:	40020028 	.word	0x40020028
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007734:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8007736:	b10b      	cbz	r3, 800773c <HAL_DMA_IRQHandler+0x2f8>
            hdma->XferHalfCpltCallback(hdma);
 8007738:	4620      	mov	r0, r4
 800773a:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800773c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800773e:	2120      	movs	r1, #32
 8007740:	f002 021f 	and.w	r2, r2, #31
 8007744:	4091      	lsls	r1, r2
 8007746:	ea11 0f08 	tst.w	r1, r8
 800774a:	d073      	beq.n	8007834 <HAL_DMA_IRQHandler+0x3f0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	42b3      	cmp	r3, r6
 8007750:	d02d      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 8007752:	488f      	ldr	r0, [pc, #572]	; (8007990 <HAL_DMA_IRQHandler+0x54c>)
 8007754:	4283      	cmp	r3, r0
 8007756:	d02a      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 8007758:	3018      	adds	r0, #24
 800775a:	4283      	cmp	r3, r0
 800775c:	d027      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 800775e:	3018      	adds	r0, #24
 8007760:	4283      	cmp	r3, r0
 8007762:	d024      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 8007764:	3018      	adds	r0, #24
 8007766:	4283      	cmp	r3, r0
 8007768:	d021      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 800776a:	3018      	adds	r0, #24
 800776c:	4283      	cmp	r3, r0
 800776e:	d01e      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 8007770:	3018      	adds	r0, #24
 8007772:	4283      	cmp	r3, r0
 8007774:	d01b      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 8007776:	3018      	adds	r0, #24
 8007778:	4283      	cmp	r3, r0
 800777a:	d018      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 800777c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8007780:	4283      	cmp	r3, r0
 8007782:	d014      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 8007784:	3018      	adds	r0, #24
 8007786:	4283      	cmp	r3, r0
 8007788:	d011      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 800778a:	3018      	adds	r0, #24
 800778c:	4283      	cmp	r3, r0
 800778e:	d00e      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 8007790:	3018      	adds	r0, #24
 8007792:	4283      	cmp	r3, r0
 8007794:	d00b      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 8007796:	3018      	adds	r0, #24
 8007798:	4283      	cmp	r3, r0
 800779a:	d008      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 800779c:	3018      	adds	r0, #24
 800779e:	4283      	cmp	r3, r0
 80077a0:	d005      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 80077a2:	3018      	adds	r0, #24
 80077a4:	4283      	cmp	r3, r0
 80077a6:	d002      	beq.n	80077ae <HAL_DMA_IRQHandler+0x36a>
 80077a8:	3018      	adds	r0, #24
 80077aa:	4283      	cmp	r3, r0
 80077ac:	d134      	bne.n	8007818 <HAL_DMA_IRQHandler+0x3d4>
 80077ae:	6818      	ldr	r0, [r3, #0]
 80077b0:	f010 0f10 	tst.w	r0, #16
 80077b4:	d03e      	beq.n	8007834 <HAL_DMA_IRQHandler+0x3f0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077b6:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80077b8:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 80077bc:	2904      	cmp	r1, #4
 80077be:	d12f      	bne.n	8007820 <HAL_DMA_IRQHandler+0x3dc>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077c0:	6819      	ldr	r1, [r3, #0]
 80077c2:	f021 0116 	bic.w	r1, r1, #22
 80077c6:	6019      	str	r1, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80077c8:	6959      	ldr	r1, [r3, #20]
 80077ca:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80077ce:	6159      	str	r1, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077d0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80077d2:	b909      	cbnz	r1, 80077d8 <HAL_DMA_IRQHandler+0x394>
 80077d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80077d6:	b119      	cbz	r1, 80077e0 <HAL_DMA_IRQHandler+0x39c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80077d8:	6819      	ldr	r1, [r3, #0]
 80077da:	f021 0108 	bic.w	r1, r1, #8
 80077de:	6019      	str	r1, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077e0:	233f      	movs	r3, #63	; 0x3f
 80077e2:	fa03 f202 	lsl.w	r2, r3, r2
          __HAL_UNLOCK(hdma);
 80077e6:	2300      	movs	r3, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077e8:	60aa      	str	r2, [r5, #8]
          __HAL_UNLOCK(hdma);
 80077ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80077ee:	2301      	movs	r3, #1
 80077f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80077f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 808e 	beq.w	8007918 <HAL_DMA_IRQHandler+0x4d4>
        hdma->XferErrorCallback(hdma);
 80077fc:	4620      	mov	r0, r4
}
 80077fe:	b002      	add	sp, #8
 8007800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8007804:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	05d2      	lsls	r2, r2, #23
 800780a:	f53f af74 	bmi.w	80076f6 <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	f022 0208 	bic.w	r2, r2, #8
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	e76e      	b.n	80076f6 <HAL_DMA_IRQHandler+0x2b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	f010 0f02 	tst.w	r0, #2
 800781e:	e7c9      	b.n	80077b4 <HAL_DMA_IRQHandler+0x370>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	0355      	lsls	r5, r2, #13
 8007824:	d54d      	bpl.n	80078c2 <HAL_DMA_IRQHandler+0x47e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	0318      	lsls	r0, r3, #12
 800782a:	d457      	bmi.n	80078dc <HAL_DMA_IRQHandler+0x498>
            if(hdma->XferM1CpltCallback != NULL)
 800782c:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 800782e:	b10b      	cbz	r3, 8007834 <HAL_DMA_IRQHandler+0x3f0>
            hdma->XferCpltCallback(hdma);
 8007830:	4620      	mov	r0, r4
 8007832:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007834:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007836:	2b00      	cmp	r3, #0
 8007838:	d06e      	beq.n	8007918 <HAL_DMA_IRQHandler+0x4d4>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800783a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800783c:	07d9      	lsls	r1, r3, #31
 800783e:	d53e      	bpl.n	80078be <HAL_DMA_IRQHandler+0x47a>
        hdma->State = HAL_DMA_STATE_ABORT;
 8007840:	2304      	movs	r3, #4
 8007842:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	42b3      	cmp	r3, r6
 800784a:	d01e      	beq.n	800788a <HAL_DMA_IRQHandler+0x446>
 800784c:	4a50      	ldr	r2, [pc, #320]	; (8007990 <HAL_DMA_IRQHandler+0x54c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d01b      	beq.n	800788a <HAL_DMA_IRQHandler+0x446>
 8007852:	3218      	adds	r2, #24
 8007854:	4293      	cmp	r3, r2
 8007856:	d018      	beq.n	800788a <HAL_DMA_IRQHandler+0x446>
 8007858:	3218      	adds	r2, #24
 800785a:	4293      	cmp	r3, r2
 800785c:	d015      	beq.n	800788a <HAL_DMA_IRQHandler+0x446>
 800785e:	3218      	adds	r2, #24
 8007860:	4293      	cmp	r3, r2
 8007862:	d012      	beq.n	800788a <HAL_DMA_IRQHandler+0x446>
 8007864:	3218      	adds	r2, #24
 8007866:	4293      	cmp	r3, r2
 8007868:	d00f      	beq.n	800788a <HAL_DMA_IRQHandler+0x446>
 800786a:	3218      	adds	r2, #24
 800786c:	4293      	cmp	r3, r2
 800786e:	d00c      	beq.n	800788a <HAL_DMA_IRQHandler+0x446>
 8007870:	3218      	adds	r2, #24
 8007872:	4293      	cmp	r3, r2
 8007874:	d009      	beq.n	800788a <HAL_DMA_IRQHandler+0x446>
 8007876:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800787a:	4293      	cmp	r3, r2
 800787c:	d005      	beq.n	800788a <HAL_DMA_IRQHandler+0x446>
 800787e:	3218      	adds	r2, #24
 8007880:	4293      	cmp	r3, r2
 8007882:	d002      	beq.n	800788a <HAL_DMA_IRQHandler+0x446>
 8007884:	3218      	adds	r2, #24
 8007886:	4293      	cmp	r3, r2
 8007888:	d0ff      	beq.n	800788a <HAL_DMA_IRQHandler+0x446>
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	f022 0201 	bic.w	r2, r2, #1
 8007890:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007892:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007896:	fbb7 f7f2 	udiv	r7, r7, r2
          if (++count > timeout)
 800789a:	9a01      	ldr	r2, [sp, #4]
 800789c:	3201      	adds	r2, #1
 800789e:	42ba      	cmp	r2, r7
 80078a0:	9201      	str	r2, [sp, #4]
 80078a2:	d802      	bhi.n	80078aa <HAL_DMA_IRQHandler+0x466>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	07d2      	lsls	r2, r2, #31
 80078a8:	d4f7      	bmi.n	800789a <HAL_DMA_IRQHandler+0x456>
        __HAL_UNLOCK(hdma);
 80078aa:	2200      	movs	r2, #0
 80078ac:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	07df      	lsls	r7, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80078b4:	bf4c      	ite	mi
 80078b6:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80078b8:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 80078ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 80078be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80078c0:	e799      	b.n	80077f6 <HAL_DMA_IRQHandler+0x3b2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80078c8:	d108      	bne.n	80078dc <HAL_DMA_IRQHandler+0x498>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80078ca:	6819      	ldr	r1, [r3, #0]
 80078cc:	f021 0110 	bic.w	r1, r1, #16
 80078d0:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80078d2:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 80078d4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80078d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 80078dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078de:	e7a6      	b.n	800782e <HAL_DMA_IRQHandler+0x3ea>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80078e0:	4a2c      	ldr	r2, [pc, #176]	; (8007994 <HAL_DMA_IRQHandler+0x550>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	f43f adf0 	beq.w	80074c8 <HAL_DMA_IRQHandler+0x84>
 80078e8:	3214      	adds	r2, #20
 80078ea:	4293      	cmp	r3, r2
 80078ec:	f43f adec 	beq.w	80074c8 <HAL_DMA_IRQHandler+0x84>
 80078f0:	3214      	adds	r2, #20
 80078f2:	4293      	cmp	r3, r2
 80078f4:	f43f ade8 	beq.w	80074c8 <HAL_DMA_IRQHandler+0x84>
 80078f8:	3214      	adds	r2, #20
 80078fa:	4293      	cmp	r3, r2
 80078fc:	f43f ade4 	beq.w	80074c8 <HAL_DMA_IRQHandler+0x84>
 8007900:	3214      	adds	r2, #20
 8007902:	4293      	cmp	r3, r2
 8007904:	f43f ade0 	beq.w	80074c8 <HAL_DMA_IRQHandler+0x84>
 8007908:	3214      	adds	r2, #20
 800790a:	4293      	cmp	r3, r2
 800790c:	f43f addc 	beq.w	80074c8 <HAL_DMA_IRQHandler+0x84>
 8007910:	3214      	adds	r2, #20
 8007912:	4293      	cmp	r3, r2
 8007914:	f43f add8 	beq.w	80074c8 <HAL_DMA_IRQHandler+0x84>
}
 8007918:	b002      	add	sp, #8
 800791a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800791e:	0697      	lsls	r7, r2, #26
 8007920:	d403      	bmi.n	800792a <HAL_DMA_IRQHandler+0x4e6>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	f022 0204 	bic.w	r2, r2, #4
 8007928:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800792a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800792c:	e763      	b.n	80077f6 <HAL_DMA_IRQHandler+0x3b2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800792e:	2002      	movs	r0, #2
 8007930:	4088      	lsls	r0, r1
 8007932:	ea10 0f0c 	tst.w	r0, ip
 8007936:	d016      	beq.n	8007966 <HAL_DMA_IRQHandler+0x522>
 8007938:	0796      	lsls	r6, r2, #30
 800793a:	d514      	bpl.n	8007966 <HAL_DMA_IRQHandler+0x522>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800793c:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800793e:	0410      	lsls	r0, r2, #16
 8007940:	d503      	bpl.n	800794a <HAL_DMA_IRQHandler+0x506>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007942:	03d1      	lsls	r1, r2, #15
 8007944:	d40d      	bmi.n	8007962 <HAL_DMA_IRQHandler+0x51e>
          if(hdma->XferM1CpltCallback != NULL)
 8007946:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007948:	e755      	b.n	80077f6 <HAL_DMA_IRQHandler+0x3b2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800794a:	f012 0220 	ands.w	r2, r2, #32
 800794e:	d108      	bne.n	8007962 <HAL_DMA_IRQHandler+0x51e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007950:	6819      	ldr	r1, [r3, #0]
 8007952:	f021 010a 	bic.w	r1, r1, #10
 8007956:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8007958:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800795a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800795e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8007962:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007964:	e747      	b.n	80077f6 <HAL_DMA_IRQHandler+0x3b2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007966:	2008      	movs	r0, #8
 8007968:	4088      	lsls	r0, r1
 800796a:	ea10 0f0c 	tst.w	r0, ip
 800796e:	d0d3      	beq.n	8007918 <HAL_DMA_IRQHandler+0x4d4>
 8007970:	0712      	lsls	r2, r2, #28
 8007972:	d5d1      	bpl.n	8007918 <HAL_DMA_IRQHandler+0x4d4>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	f022 020e 	bic.w	r2, r2, #14
 800797a:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800797c:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800797e:	2200      	movs	r2, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007980:	fa03 f101 	lsl.w	r1, r3, r1
 8007984:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007986:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8007988:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 800798c:	e795      	b.n	80078ba <HAL_DMA_IRQHandler+0x476>
 800798e:	bf00      	nop
 8007990:	40020028 	.word	0x40020028
 8007994:	5802541c 	.word	0x5802541c

08007998 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8007998:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <HAL_FLASH_Unlock+0x1c>)
 800799a:	68d8      	ldr	r0, [r3, #12]
 800799c:	f010 0001 	ands.w	r0, r0, #1
 80079a0:	d007      	beq.n	80079b2 <HAL_FLASH_Unlock+0x1a>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80079a2:	4a05      	ldr	r2, [pc, #20]	; (80079b8 <HAL_FLASH_Unlock+0x20>)
 80079a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80079a6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80079aa:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80079ac:	68d8      	ldr	r0, [r3, #12]
 80079ae:	f000 0001 	and.w	r0, r0, #1
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
}
 80079b2:	4770      	bx	lr
 80079b4:	52002000 	.word	0x52002000
 80079b8:	45670123 	.word	0x45670123

080079bc <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80079bc:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <HAL_FLASH_Lock+0x14>)
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	f042 0201 	orr.w	r2, r2, #1
 80079c4:	60da      	str	r2, [r3, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80079c6:	68d8      	ldr	r0, [r3, #12]
 80079c8:	43c0      	mvns	r0, r0
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
}
 80079ca:	f000 0001 	and.w	r0, r0, #1
 80079ce:	4770      	bx	lr
 80079d0:	52002000 	.word	0x52002000

080079d4 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80079d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
  uint32_t errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80079d8:	4d17      	ldr	r5, [pc, #92]	; (8007a38 <FLASH_WaitForLastOperation+0x64>)
{
 80079da:	4606      	mov	r6, r0
 80079dc:	460f      	mov	r7, r1
  uint32_t errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80079de:	692c      	ldr	r4, [r5, #16]
  uint32_t tickstart = HAL_GetTick();
 80079e0:	f7fe ff06 	bl	80067f0 <HAL_GetTick>
 80079e4:	4680      	mov	r8, r0
  uint32_t errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80079e6:	f024 4468 	bic.w	r4, r4, #3892314112	; 0xe8000000
 80079ea:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
 80079ee:	0c64      	lsrs	r4, r4, #17
 80079f0:	0464      	lsls	r4, r4, #17
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80079f2:	692b      	ldr	r3, [r5, #16]
 80079f4:	075a      	lsls	r2, r3, #29
 80079f6:	d409      	bmi.n	8007a0c <FLASH_WaitForLastOperation+0x38>
      }
    }
  }

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80079f8:	b1a4      	cbz	r4, 8007a24 <FLASH_WaitForLastOperation+0x50>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80079fa:	4a10      	ldr	r2, [pc, #64]	; (8007a3c <FLASH_WaitForLastOperation+0x68>)
 80079fc:	6993      	ldr	r3, [r2, #24]
 80079fe:	4323      	orrs	r3, r4
 8007a00:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8007a02:	616c      	str	r4, [r5, #20]

    return HAL_ERROR;
 8007a04:	2401      	movs	r4, #1
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
}
 8007a06:	4620      	mov	r0, r4
 8007a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8007a0c:	1c71      	adds	r1, r6, #1
 8007a0e:	d0f0      	beq.n	80079f2 <FLASH_WaitForLastOperation+0x1e>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a10:	f7fe feee 	bl	80067f0 <HAL_GetTick>
 8007a14:	eba0 0008 	sub.w	r0, r0, r8
 8007a18:	42b0      	cmp	r0, r6
 8007a1a:	d801      	bhi.n	8007a20 <FLASH_WaitForLastOperation+0x4c>
 8007a1c:	2e00      	cmp	r6, #0
 8007a1e:	d1e8      	bne.n	80079f2 <FLASH_WaitForLastOperation+0x1e>
        return HAL_TIMEOUT;
 8007a20:	2403      	movs	r4, #3
 8007a22:	e7f0      	b.n	8007a06 <FLASH_WaitForLastOperation+0x32>
  if(Bank == FLASH_BANK_1)
 8007a24:	2f01      	cmp	r7, #1
 8007a26:	d1ee      	bne.n	8007a06 <FLASH_WaitForLastOperation+0x32>
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8007a28:	692b      	ldr	r3, [r5, #16]
 8007a2a:	03db      	lsls	r3, r3, #15
 8007a2c:	d5eb      	bpl.n	8007a06 <FLASH_WaitForLastOperation+0x32>
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8007a2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a32:	616b      	str	r3, [r5, #20]
 8007a34:	e7e7      	b.n	8007a06 <FLASH_WaitForLastOperation+0x32>
 8007a36:	bf00      	nop
 8007a38:	52002000 	.word	0x52002000
 8007a3c:	24000c98 	.word	0x24000c98

08007a40 <HAL_FLASH_Program>:
{
 8007a40:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 8007a42:	4c1b      	ldr	r4, [pc, #108]	; (8007ab0 <HAL_FLASH_Program+0x70>)
{
 8007a44:	460d      	mov	r5, r1
 8007a46:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8007a48:	7d23      	ldrb	r3, [r4, #20]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d02c      	beq.n	8007aa8 <HAL_FLASH_Program+0x68>
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8007a4e:	f105 4378 	add.w	r3, r5, #4160749568	; 0xf8000000
  __HAL_LOCK(&pFlash);
 8007a52:	2101      	movs	r1, #1
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8007a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
  __HAL_LOCK(&pFlash);
 8007a58:	7521      	strb	r1, [r4, #20]
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8007a5a:	d227      	bcs.n	8007aac <HAL_FLASH_Program+0x6c>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007a5c:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8007a5e:	f24c 3050 	movw	r0, #50000	; 0xc350
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007a62:	61a3      	str	r3, [r4, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8007a64:	f7ff ffb6 	bl	80079d4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8007a68:	b9d8      	cbnz	r0, 8007aa2 <HAL_FLASH_Program+0x62>
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8007a6a:	4a12      	ldr	r2, [pc, #72]	; (8007ab4 <HAL_FLASH_Program+0x74>)
 8007a6c:	68d3      	ldr	r3, [r2, #12]
 8007a6e:	f043 0302 	orr.w	r3, r3, #2
 8007a72:	60d3      	str	r3, [r2, #12]
 8007a74:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8007a78:	f3bf 8f4f 	dsb	sy
        *dest_addr = *src_addr;
 8007a7c:	5833      	ldr	r3, [r6, r0]
 8007a7e:	502b      	str	r3, [r5, r0]
     } while (row_index != 0U);
 8007a80:	3004      	adds	r0, #4
 8007a82:	2820      	cmp	r0, #32
 8007a84:	d1fa      	bne.n	8007a7c <HAL_FLASH_Program+0x3c>
  __ASM volatile ("isb 0xF":::"memory");
 8007a86:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8007a8a:	f3bf 8f4f 	dsb	sy
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8007a8e:	2101      	movs	r1, #1
 8007a90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a94:	f7ff ff9e 	bl	80079d4 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8007a98:	4a06      	ldr	r2, [pc, #24]	; (8007ab4 <HAL_FLASH_Program+0x74>)
 8007a9a:	68d3      	ldr	r3, [r2, #12]
 8007a9c:	f023 0302 	bic.w	r3, r3, #2
 8007aa0:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(&pFlash);
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	7523      	strb	r3, [r4, #20]
}
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8007aa8:	2002      	movs	r0, #2
 8007aaa:	e7fc      	b.n	8007aa6 <HAL_FLASH_Program+0x66>
    return HAL_ERROR;
 8007aac:	4608      	mov	r0, r1
 8007aae:	e7fa      	b.n	8007aa6 <HAL_FLASH_Program+0x66>
 8007ab0:	24000c98 	.word	0x24000c98
 8007ab4:	52002000 	.word	0x52002000

08007ab8 <FLASH_MassErase>:
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007ab8:	07cb      	lsls	r3, r1, #31
 8007aba:	d50b      	bpl.n	8007ad4 <FLASH_MassErase+0x1c>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8007abc:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <FLASH_MassErase+0x20>)
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007ac4:	60da      	str	r2, [r3, #12]
      FLASH->CR1 |=  VoltageRange;
 8007ac6:	68da      	ldr	r2, [r3, #12]
 8007ac8:	4310      	orrs	r0, r2
 8007aca:	60d8      	str	r0, [r3, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	f042 0288 	orr.w	r2, r2, #136	; 0x88
 8007ad2:	60da      	str	r2, [r3, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	52002000 	.word	0x52002000

08007adc <FLASH_Erase_Sector>:
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007adc:	07cb      	lsls	r3, r1, #31
 8007ade:	d50b      	bpl.n	8007af8 <FLASH_Erase_Sector+0x1c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8007ae0:	4906      	ldr	r1, [pc, #24]	; (8007afc <FLASH_Erase_Sector+0x20>)
 8007ae2:	68cb      	ldr	r3, [r1, #12]
 8007ae4:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8007ae8:	60cb      	str	r3, [r1, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8007aea:	68cb      	ldr	r3, [r1, #12]
 8007aec:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8007af0:	4302      	orrs	r2, r0
 8007af2:	f042 0284 	orr.w	r2, r2, #132	; 0x84
 8007af6:	60ca      	str	r2, [r1, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	52002000 	.word	0x52002000

08007b00 <HAL_FLASHEx_Erase>:
{
 8007b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8007b04:	4e2c      	ldr	r6, [pc, #176]	; (8007bb8 <HAL_FLASHEx_Erase+0xb8>)
{
 8007b06:	4605      	mov	r5, r0
 8007b08:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 8007b0a:	7d33      	ldrb	r3, [r6, #20]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d051      	beq.n	8007bb4 <HAL_FLASHEx_Erase+0xb4>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007b10:	2300      	movs	r3, #0
  __HAL_LOCK(&pFlash);
 8007b12:	2401      	movs	r4, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007b14:	61b3      	str	r3, [r6, #24]
  __HAL_LOCK(&pFlash);
 8007b16:	7534      	strb	r4, [r6, #20]
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007b18:	6843      	ldr	r3, [r0, #4]
 8007b1a:	07d9      	lsls	r1, r3, #31
 8007b1c:	d40e      	bmi.n	8007b3c <HAL_FLASHEx_Erase+0x3c>
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007b1e:	682c      	ldr	r4, [r5, #0]
 8007b20:	2c01      	cmp	r4, #1
 8007b22:	d122      	bne.n	8007b6a <HAL_FLASHEx_Erase+0x6a>
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8007b24:	6869      	ldr	r1, [r5, #4]
 8007b26:	6928      	ldr	r0, [r5, #16]
 8007b28:	f7ff ffc6 	bl	8007ab8 <FLASH_MassErase>
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007b2c:	686b      	ldr	r3, [r5, #4]
 8007b2e:	07da      	lsls	r2, r3, #31
 8007b30:	d40d      	bmi.n	8007b4e <HAL_FLASHEx_Erase+0x4e>
{
 8007b32:	2000      	movs	r0, #0
  __HAL_UNLOCK(&pFlash);
 8007b34:	2300      	movs	r3, #0
 8007b36:	7533      	strb	r3, [r6, #20]
}
 8007b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007b42:	f7ff ff47 	bl	80079d4 <FLASH_WaitForLastOperation>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d0e9      	beq.n	8007b1e <HAL_FLASHEx_Erase+0x1e>
      status = HAL_ERROR;
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	e7f2      	b.n	8007b34 <HAL_FLASHEx_Erase+0x34>
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8007b4e:	4621      	mov	r1, r4
 8007b50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007b54:	f7ff ff3e 	bl	80079d4 <FLASH_WaitForLastOperation>
        FLASH->CR1 &= (~FLASH_CR_BER);
 8007b58:	4a18      	ldr	r2, [pc, #96]	; (8007bbc <HAL_FLASHEx_Erase+0xbc>)
          status = HAL_ERROR;
 8007b5a:	3800      	subs	r0, #0
        FLASH->CR1 &= (~FLASH_CR_BER);
 8007b5c:	68d3      	ldr	r3, [r2, #12]
          status = HAL_ERROR;
 8007b5e:	bf18      	it	ne
 8007b60:	2001      	movne	r0, #1
        FLASH->CR1 &= (~FLASH_CR_BER);
 8007b62:	f023 0308 	bic.w	r3, r3, #8
 8007b66:	60d3      	str	r3, [r2, #12]
 8007b68:	e7e4      	b.n	8007b34 <HAL_FLASHEx_Erase+0x34>
      *SectorError = 0xFFFFFFFFU;
 8007b6a:	f04f 33ff 	mov.w	r3, #4294967295
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8007b6e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8007bbc <HAL_FLASHEx_Erase+0xbc>
 8007b72:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8007bc0 <HAL_FLASHEx_Erase+0xc0>
      *SectorError = 0xFFFFFFFFU;
 8007b76:	603b      	str	r3, [r7, #0]
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8007b78:	68ac      	ldr	r4, [r5, #8]
 8007b7a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8007b7e:	4413      	add	r3, r2
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	d9d6      	bls.n	8007b32 <HAL_FLASHEx_Erase+0x32>
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8007b84:	692a      	ldr	r2, [r5, #16]
 8007b86:	4620      	mov	r0, r4
 8007b88:	6869      	ldr	r1, [r5, #4]
 8007b8a:	f7ff ffa7 	bl	8007adc <FLASH_Erase_Sector>
        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007b8e:	686b      	ldr	r3, [r5, #4]
 8007b90:	07db      	lsls	r3, r3, #31
 8007b92:	d50d      	bpl.n	8007bb0 <HAL_FLASHEx_Erase+0xb0>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8007b94:	2101      	movs	r1, #1
 8007b96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007b9a:	f7ff ff1b 	bl	80079d4 <FLASH_WaitForLastOperation>
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8007b9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ba2:	ea03 0309 	and.w	r3, r3, r9
 8007ba6:	f8c8 300c 	str.w	r3, [r8, #12]
        if(status != HAL_OK)
 8007baa:	b108      	cbz	r0, 8007bb0 <HAL_FLASHEx_Erase+0xb0>
          *SectorError = sector_index;
 8007bac:	603c      	str	r4, [r7, #0]
          break;
 8007bae:	e7c1      	b.n	8007b34 <HAL_FLASHEx_Erase+0x34>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8007bb0:	3401      	adds	r4, #1
 8007bb2:	e7e2      	b.n	8007b7a <HAL_FLASHEx_Erase+0x7a>
  __HAL_LOCK(&pFlash);
 8007bb4:	2002      	movs	r0, #2
 8007bb6:	e7bf      	b.n	8007b38 <HAL_FLASHEx_Erase+0x38>
 8007bb8:	24000c98 	.word	0x24000c98
 8007bbc:	52002000 	.word	0x52002000
 8007bc0:	fffff8fb 	.word	0xfffff8fb

08007bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007bc8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bca:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8007d90 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007bce:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007bd2:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8007d94 <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bd6:	680a      	ldr	r2, [r1, #0]
 8007bd8:	fa32 f503 	lsrs.w	r5, r2, r3
 8007bdc:	d102      	bne.n	8007be4 <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  }
}
 8007bde:	b003      	add	sp, #12
 8007be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007be4:	f04f 0c01 	mov.w	ip, #1
 8007be8:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8007bec:	ea1c 0202 	ands.w	r2, ip, r2
 8007bf0:	f000 80b7 	beq.w	8007d62 <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007bf4:	684d      	ldr	r5, [r1, #4]
 8007bf6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007bfa:	2603      	movs	r6, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007bfc:	f025 0a10 	bic.w	sl, r5, #16
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c00:	fa06 f60e 	lsl.w	r6, r6, lr
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c04:	f10a 37ff 	add.w	r7, sl, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c08:	43f6      	mvns	r6, r6
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c0a:	2f01      	cmp	r7, #1
 8007c0c:	d811      	bhi.n	8007c32 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8007c0e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c10:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c14:	68cf      	ldr	r7, [r1, #12]
 8007c16:	fa07 f70e 	lsl.w	r7, r7, lr
 8007c1a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8007c1e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8007c20:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c22:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007c26:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8007c2a:	409f      	lsls	r7, r3
 8007c2c:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8007c30:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8007c32:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c34:	f1ba 0f02 	cmp.w	sl, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c38:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c3c:	688f      	ldr	r7, [r1, #8]
 8007c3e:	fa07 f70e 	lsl.w	r7, r7, lr
 8007c42:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 8007c46:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c48:	d116      	bne.n	8007c78 <HAL_GPIO_Init+0xb4>
        temp = GPIOx->AFR[position >> 3U];
 8007c4a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c4e:	f003 0b07 	and.w	fp, r3, #7
 8007c52:	f04f 0c0f 	mov.w	ip, #15
 8007c56:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8007c5a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8007c5e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c62:	fa0c fc0b 	lsl.w	ip, ip, fp
 8007c66:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c6a:	690f      	ldr	r7, [r1, #16]
 8007c6c:	fa07 f70b 	lsl.w	r7, r7, fp
 8007c70:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8007c74:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8007c78:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c7a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c7c:	f005 0703 	and.w	r7, r5, #3
 8007c80:	fa07 f70e 	lsl.w	r7, r7, lr
 8007c84:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8007c86:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007c88:	00ee      	lsls	r6, r5, #3
 8007c8a:	d56a      	bpl.n	8007d62 <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c8c:	f8d8 60f4 	ldr.w	r6, [r8, #244]	; 0xf4
 8007c90:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c94:	f003 0c03 	and.w	ip, r3, #3
 8007c98:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c9c:	f046 0602 	orr.w	r6, r6, #2
 8007ca0:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ca4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ca8:	f8c8 60f4 	str.w	r6, [r8, #244]	; 0xf4
 8007cac:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8007cb0:	f8d8 60f4 	ldr.w	r6, [r8, #244]	; 0xf4
 8007cb4:	f006 0602 	and.w	r6, r6, #2
 8007cb8:	9601      	str	r6, [sp, #4]
 8007cba:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007cbc:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 8007cc0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007cc4:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007cc8:	4e30      	ldr	r6, [pc, #192]	; (8007d8c <HAL_GPIO_Init+0x1c8>)
 8007cca:	42b0      	cmp	r0, r6
 8007ccc:	d04b      	beq.n	8007d66 <HAL_GPIO_Init+0x1a2>
 8007cce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007cd2:	42b0      	cmp	r0, r6
 8007cd4:	d049      	beq.n	8007d6a <HAL_GPIO_Init+0x1a6>
 8007cd6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007cda:	42b0      	cmp	r0, r6
 8007cdc:	d047      	beq.n	8007d6e <HAL_GPIO_Init+0x1aa>
 8007cde:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007ce2:	42b0      	cmp	r0, r6
 8007ce4:	d045      	beq.n	8007d72 <HAL_GPIO_Init+0x1ae>
 8007ce6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007cea:	42b0      	cmp	r0, r6
 8007cec:	d043      	beq.n	8007d76 <HAL_GPIO_Init+0x1b2>
 8007cee:	4548      	cmp	r0, r9
 8007cf0:	d043      	beq.n	8007d7a <HAL_GPIO_Init+0x1b6>
 8007cf2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007cf6:	42b0      	cmp	r0, r6
 8007cf8:	d041      	beq.n	8007d7e <HAL_GPIO_Init+0x1ba>
 8007cfa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007cfe:	42b0      	cmp	r0, r6
 8007d00:	d03f      	beq.n	8007d82 <HAL_GPIO_Init+0x1be>
 8007d02:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007d06:	42b0      	cmp	r0, r6
 8007d08:	d03d      	beq.n	8007d86 <HAL_GPIO_Init+0x1c2>
 8007d0a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007d0e:	42b0      	cmp	r0, r6
 8007d10:	bf0c      	ite	eq
 8007d12:	2609      	moveq	r6, #9
 8007d14:	260a      	movne	r6, #10
 8007d16:	fa06 f60c 	lsl.w	r6, r6, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007d1a:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d1e:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d22:	60be      	str	r6, [r7, #8]
        temp &= ~(iocurrent);
 8007d24:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI_CurrentCPU->IMR1;
 8007d28:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8007d2c:	bf0c      	ite	eq
 8007d2e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8007d30:	4316      	orrne	r6, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007d32:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI_CurrentCPU->IMR1 = temp;
 8007d36:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        temp = EXTI_CurrentCPU->EMR1;
 8007d3a:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8007d3e:	bf0c      	ite	eq
 8007d40:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8007d42:	4316      	orrne	r6, r2
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d44:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        EXTI_CurrentCPU->EMR1 = temp;
 8007d48:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        temp = EXTI->RTSR1;
 8007d4c:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 8007d4e:	bf0c      	ite	eq
 8007d50:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8007d52:	4316      	orrne	r6, r2
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d54:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR1 = temp;
 8007d56:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 8007d58:	6866      	ldr	r6, [r4, #4]
        temp &= ~(iocurrent);
 8007d5a:	bf54      	ite	pl
 8007d5c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8007d5e:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8007d60:	6066      	str	r6, [r4, #4]
    position++;
 8007d62:	3301      	adds	r3, #1
 8007d64:	e737      	b.n	8007bd6 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d66:	2600      	movs	r6, #0
 8007d68:	e7d5      	b.n	8007d16 <HAL_GPIO_Init+0x152>
 8007d6a:	2601      	movs	r6, #1
 8007d6c:	e7d3      	b.n	8007d16 <HAL_GPIO_Init+0x152>
 8007d6e:	2602      	movs	r6, #2
 8007d70:	e7d1      	b.n	8007d16 <HAL_GPIO_Init+0x152>
 8007d72:	2603      	movs	r6, #3
 8007d74:	e7cf      	b.n	8007d16 <HAL_GPIO_Init+0x152>
 8007d76:	2604      	movs	r6, #4
 8007d78:	e7cd      	b.n	8007d16 <HAL_GPIO_Init+0x152>
 8007d7a:	2605      	movs	r6, #5
 8007d7c:	e7cb      	b.n	8007d16 <HAL_GPIO_Init+0x152>
 8007d7e:	2606      	movs	r6, #6
 8007d80:	e7c9      	b.n	8007d16 <HAL_GPIO_Init+0x152>
 8007d82:	2607      	movs	r6, #7
 8007d84:	e7c7      	b.n	8007d16 <HAL_GPIO_Init+0x152>
 8007d86:	2608      	movs	r6, #8
 8007d88:	e7c5      	b.n	8007d16 <HAL_GPIO_Init+0x152>
 8007d8a:	bf00      	nop
 8007d8c:	58020000 	.word	0x58020000
 8007d90:	58024400 	.word	0x58024400
 8007d94:	58021400 	.word	0x58021400

08007d98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007d9c:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007d9e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8007ecc <HAL_GPIO_DeInit+0x134>
 8007da2:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8007ed0 <HAL_GPIO_DeInit+0x138>
 8007da6:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8007ed4 <HAL_GPIO_DeInit+0x13c>
 8007daa:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007ed8 <HAL_GPIO_DeInit+0x140>
  while ((GPIO_Pin >> position) != 0x00U)
 8007dae:	fa31 f302 	lsrs.w	r3, r1, r2
 8007db2:	d101      	bne.n	8007db8 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8007db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007db8:	2301      	movs	r3, #1
 8007dba:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 8007dbe:	ea1c 0601 	ands.w	r6, ip, r1
 8007dc2:	d06d      	beq.n	8007ea0 <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007dc4:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007dc8:	f002 0703 	and.w	r7, r2, #3
 8007dcc:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007dce:	4b3e      	ldr	r3, [pc, #248]	; (8007ec8 <HAL_GPIO_DeInit+0x130>)
 8007dd0:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007dd4:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007dd6:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007dd8:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007ddc:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007de0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007de4:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007de8:	d05c      	beq.n	8007ea4 <HAL_GPIO_DeInit+0x10c>
 8007dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dee:	4298      	cmp	r0, r3
 8007df0:	d05a      	beq.n	8007ea8 <HAL_GPIO_DeInit+0x110>
 8007df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df6:	4298      	cmp	r0, r3
 8007df8:	d058      	beq.n	8007eac <HAL_GPIO_DeInit+0x114>
 8007dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dfe:	4298      	cmp	r0, r3
 8007e00:	d056      	beq.n	8007eb0 <HAL_GPIO_DeInit+0x118>
 8007e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e06:	4298      	cmp	r0, r3
 8007e08:	d054      	beq.n	8007eb4 <HAL_GPIO_DeInit+0x11c>
 8007e0a:	4540      	cmp	r0, r8
 8007e0c:	d054      	beq.n	8007eb8 <HAL_GPIO_DeInit+0x120>
 8007e0e:	4548      	cmp	r0, r9
 8007e10:	d054      	beq.n	8007ebc <HAL_GPIO_DeInit+0x124>
 8007e12:	4550      	cmp	r0, sl
 8007e14:	d054      	beq.n	8007ec0 <HAL_GPIO_DeInit+0x128>
 8007e16:	4558      	cmp	r0, fp
 8007e18:	d054      	beq.n	8007ec4 <HAL_GPIO_DeInit+0x12c>
 8007e1a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8007e1e:	4298      	cmp	r0, r3
 8007e20:	bf0c      	ite	eq
 8007e22:	2309      	moveq	r3, #9
 8007e24:	230a      	movne	r3, #10
 8007e26:	40bb      	lsls	r3, r7
 8007e28:	4573      	cmp	r3, lr
 8007e2a:	d119      	bne.n	8007e60 <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e30:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 8007e34:	ea27 0706 	bic.w	r7, r7, r6
 8007e38:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007e3c:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8007e40:	ea27 0706 	bic.w	r7, r7, r6
 8007e44:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8007e48:	681f      	ldr	r7, [r3, #0]
 8007e4a:	ea27 0706 	bic.w	r7, r7, r6
 8007e4e:	601f      	str	r7, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8007e50:	685f      	ldr	r7, [r3, #4]
 8007e52:	ea27 0606 	bic.w	r6, r7, r6
 8007e56:	605e      	str	r6, [r3, #4]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007e58:	68a3      	ldr	r3, [r4, #8]
 8007e5a:	ea23 0305 	bic.w	r3, r3, r5
 8007e5e:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007e60:	2503      	movs	r5, #3
 8007e62:	0053      	lsls	r3, r2, #1
 8007e64:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007e66:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007e6a:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007e6e:	260f      	movs	r6, #15
 8007e70:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007e72:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007e74:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007e76:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007e78:	fa22 f405 	lsr.w	r4, r2, r5
 8007e7c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8007e80:	6a25      	ldr	r5, [r4, #32]
 8007e82:	ea25 0606 	bic.w	r6, r5, r6
 8007e86:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e88:	68c4      	ldr	r4, [r0, #12]
 8007e8a:	ea24 0403 	bic.w	r4, r4, r3
 8007e8e:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e90:	6844      	ldr	r4, [r0, #4]
 8007e92:	ea24 040c 	bic.w	r4, r4, ip
 8007e96:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007e98:	6884      	ldr	r4, [r0, #8]
 8007e9a:	ea24 0303 	bic.w	r3, r4, r3
 8007e9e:	6083      	str	r3, [r0, #8]
    position++;
 8007ea0:	3201      	adds	r2, #1
 8007ea2:	e784      	b.n	8007dae <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e7be      	b.n	8007e26 <HAL_GPIO_DeInit+0x8e>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e7bc      	b.n	8007e26 <HAL_GPIO_DeInit+0x8e>
 8007eac:	2302      	movs	r3, #2
 8007eae:	e7ba      	b.n	8007e26 <HAL_GPIO_DeInit+0x8e>
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e7b8      	b.n	8007e26 <HAL_GPIO_DeInit+0x8e>
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	e7b6      	b.n	8007e26 <HAL_GPIO_DeInit+0x8e>
 8007eb8:	2305      	movs	r3, #5
 8007eba:	e7b4      	b.n	8007e26 <HAL_GPIO_DeInit+0x8e>
 8007ebc:	2306      	movs	r3, #6
 8007ebe:	e7b2      	b.n	8007e26 <HAL_GPIO_DeInit+0x8e>
 8007ec0:	2307      	movs	r3, #7
 8007ec2:	e7b0      	b.n	8007e26 <HAL_GPIO_DeInit+0x8e>
 8007ec4:	2308      	movs	r3, #8
 8007ec6:	e7ae      	b.n	8007e26 <HAL_GPIO_DeInit+0x8e>
 8007ec8:	58020000 	.word	0x58020000
 8007ecc:	58021400 	.word	0x58021400
 8007ed0:	58021800 	.word	0x58021800
 8007ed4:	58021c00 	.word	0x58021c00
 8007ed8:	58022000 	.word	0x58022000

08007edc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007edc:	6903      	ldr	r3, [r0, #16]
 8007ede:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007ee0:	bf14      	ite	ne
 8007ee2:	2001      	movne	r0, #1
 8007ee4:	2000      	moveq	r0, #0
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ee8:	b10a      	cbz	r2, 8007eee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007eea:	6181      	str	r1, [r0, #24]
  }
}
 8007eec:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007eee:	0409      	lsls	r1, r1, #16
 8007ef0:	e7fb      	b.n	8007eea <HAL_GPIO_WritePin+0x2>

08007ef2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007ef2:	6943      	ldr	r3, [r0, #20]
 8007ef4:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ef8:	bf08      	it	eq
 8007efa:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8007efc:	6181      	str	r1, [r0, #24]
  }
}
 8007efe:	4770      	bx	lr

08007f00 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007f00:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007f02:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f04:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007f08:	3284      	adds	r2, #132	; 0x84
 8007f0a:	1883      	adds	r3, r0, r2
{
 8007f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007f10:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f12:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007f16:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007f18:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007f1c:	684c      	ldr	r4, [r1, #4]
 8007f1e:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007f22:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007f26:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007f2a:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007f2c:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f2e:	68c5      	ldr	r5, [r0, #12]
 8007f30:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8007f34:	443d      	add	r5, r7
 8007f36:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007f3a:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f3c:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007f3e:	68c5      	ldr	r5, [r0, #12]
 8007f40:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8007f44:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007f46:	689d      	ldr	r5, [r3, #8]
 8007f48:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8007f4c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007f4e:	688d      	ldr	r5, [r1, #8]
 8007f50:	68c7      	ldr	r7, [r0, #12]
 8007f52:	3501      	adds	r5, #1
 8007f54:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8007f58:	443d      	add	r5, r7
 8007f5a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007f5e:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007f60:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007f62:	691d      	ldr	r5, [r3, #16]
 8007f64:	f025 0507 	bic.w	r5, r5, #7
 8007f68:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007f6a:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007f6c:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007f6e:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007f72:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007f76:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007f7a:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8007f7e:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8007f82:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8007f86:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8007f8a:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007f8c:	695d      	ldr	r5, [r3, #20]
 8007f8e:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007f92:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007f94:	694d      	ldr	r5, [r1, #20]
 8007f96:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007f98:	69dd      	ldr	r5, [r3, #28]
 8007f9a:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8007f9e:	f025 0507 	bic.w	r5, r5, #7
 8007fa2:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007fa4:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8007fa8:	433d      	orrs	r5, r7
 8007faa:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007fac:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007fae:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007fb0:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007fb4:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007fb6:	b31e      	cbz	r6, 8008000 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007fb8:	2e01      	cmp	r6, #1
 8007fba:	d023      	beq.n	8008004 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007fbc:	1eb5      	subs	r5, r6, #2
 8007fbe:	2d02      	cmp	r5, #2
 8007fc0:	d922      	bls.n	8008008 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8007fc2:	2e07      	cmp	r6, #7
 8007fc4:	bf0c      	ite	eq
 8007fc6:	2502      	moveq	r5, #2
 8007fc8:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007fca:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007fcc:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007fd0:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007fd4:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007fd6:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007fd8:	3407      	adds	r4, #7
 8007fda:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007fdc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007fde:	436e      	muls	r6, r5
 8007fe0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8007fe4:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007fe6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8007fe8:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8007fec:	f024 0407 	bic.w	r4, r4, #7
 8007ff0:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007ff2:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007ff4:	5883      	ldr	r3, [r0, r2]
 8007ff6:	f043 0301 	orr.w	r3, r3, #1
 8007ffa:	5083      	str	r3, [r0, r2]
}
 8007ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8008000:	2504      	movs	r5, #4
 8008002:	e7e2      	b.n	8007fca <LTDC_SetConfig+0xca>
    tmp = 3U;
 8008004:	2503      	movs	r5, #3
 8008006:	e7e0      	b.n	8007fca <LTDC_SetConfig+0xca>
    tmp = 2U;
 8008008:	2502      	movs	r5, #2
 800800a:	e7de      	b.n	8007fca <LTDC_SetConfig+0xca>

0800800c <HAL_LTDC_Init>:
{
 800800c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800800e:	4604      	mov	r4, r0
 8008010:	2800      	cmp	r0, #0
 8008012:	d063      	beq.n	80080dc <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008014:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8008018:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800801c:	b91b      	cbnz	r3, 8008026 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800801e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8008022:	f7fa fea3 	bl	8002d6c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008026:	2302      	movs	r3, #2
 8008028:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	699a      	ldr	r2, [r3, #24]
 8008030:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008034:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008036:	6999      	ldr	r1, [r3, #24]
 8008038:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800803c:	4302      	orrs	r2, r0
 800803e:	68e0      	ldr	r0, [r4, #12]
 8008040:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008042:	6920      	ldr	r0, [r4, #16]
 8008044:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008046:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008048:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800804a:	4925      	ldr	r1, [pc, #148]	; (80080e0 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800804c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800804e:	689a      	ldr	r2, [r3, #8]
 8008050:	400a      	ands	r2, r1
 8008052:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008054:	689a      	ldr	r2, [r3, #8]
 8008056:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800805a:	69a0      	ldr	r0, [r4, #24]
 800805c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800805e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008060:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008062:	68da      	ldr	r2, [r3, #12]
 8008064:	400a      	ands	r2, r1
 8008066:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008068:	68da      	ldr	r2, [r3, #12]
 800806a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800806e:	6a20      	ldr	r0, [r4, #32]
 8008070:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008072:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008074:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008076:	691a      	ldr	r2, [r3, #16]
 8008078:	400a      	ands	r2, r1
 800807a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800807c:	691a      	ldr	r2, [r3, #16]
 800807e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008082:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008084:	4302      	orrs	r2, r0
 8008086:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008088:	695a      	ldr	r2, [r3, #20]
 800808a:	4011      	ands	r1, r2
 800808c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800808e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008090:	695a      	ldr	r2, [r3, #20]
 8008092:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008096:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008098:	430a      	orrs	r2, r1
 800809a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800809c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800809e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80080a2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80080a6:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80080aa:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80080ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80080ae:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80080b2:	430a      	orrs	r2, r1
 80080b4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80080b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80080bc:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80080be:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80080c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080c2:	f042 0206 	orr.w	r2, r2, #6
 80080c6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80080c8:	699a      	ldr	r2, [r3, #24]
 80080ca:	f042 0201 	orr.w	r2, r2, #1
 80080ce:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80080d0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80080d2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80080d6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80080da:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80080dc:	2001      	movs	r0, #1
 80080de:	e7fc      	b.n	80080da <HAL_LTDC_Init+0xce>
 80080e0:	f000f800 	.word	0xf000f800

080080e4 <HAL_LTDC_DeInit>:
{
 80080e4:	b510      	push	{r4, lr}
 80080e6:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc);
 80080e8:	f7fa feda 	bl	8002ea0 <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80080ec:	2000      	movs	r0, #0
 80080ee:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  __HAL_UNLOCK(hltdc);
 80080f2:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_RESET;
 80080f6:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
}
 80080fa:	bd10      	pop	{r4, pc}

080080fc <HAL_LTDC_ErrorCallback>:
 80080fc:	4770      	bx	lr

080080fe <HAL_LTDC_ReloadEventCallback>:
 80080fe:	4770      	bx	lr

08008100 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008100:	6803      	ldr	r3, [r0, #0]
{
 8008102:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008104:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8008106:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008108:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800810a:	0772      	lsls	r2, r6, #29
 800810c:	d514      	bpl.n	8008138 <HAL_LTDC_IRQHandler+0x38>
 800810e:	0769      	lsls	r1, r5, #29
 8008110:	d512      	bpl.n	8008138 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008114:	f022 0204 	bic.w	r2, r2, #4
 8008118:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800811a:	2204      	movs	r2, #4
 800811c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800811e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8008122:	f043 0301 	orr.w	r3, r3, #1
 8008126:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800812a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800812c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8008130:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008134:	f7ff ffe2 	bl	80080fc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008138:	07b2      	lsls	r2, r6, #30
 800813a:	d516      	bpl.n	800816a <HAL_LTDC_IRQHandler+0x6a>
 800813c:	07ab      	lsls	r3, r5, #30
 800813e:	d514      	bpl.n	800816a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008140:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8008142:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008146:	f022 0202 	bic.w	r2, r2, #2
 800814a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800814c:	2202      	movs	r2, #2
 800814e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008150:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8008154:	4313      	orrs	r3, r2
 8008156:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800815a:	2304      	movs	r3, #4
 800815c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8008160:	2300      	movs	r3, #0
 8008162:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008166:	f7ff ffc9 	bl	80080fc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800816a:	07f0      	lsls	r0, r6, #31
 800816c:	d510      	bpl.n	8008190 <HAL_LTDC_IRQHandler+0x90>
 800816e:	07e9      	lsls	r1, r5, #31
 8008170:	d50e      	bpl.n	8008190 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008172:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8008174:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008178:	f022 0201 	bic.w	r2, r2, #1
 800817c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800817e:	2201      	movs	r2, #1
 8008180:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8008182:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8008184:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8008188:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800818c:	f7fa fdd4 	bl	8002d38 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008190:	0732      	lsls	r2, r6, #28
 8008192:	d511      	bpl.n	80081b8 <HAL_LTDC_IRQHandler+0xb8>
 8008194:	072b      	lsls	r3, r5, #28
 8008196:	d50f      	bpl.n	80081b8 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008198:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800819a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800819c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800819e:	f022 0208 	bic.w	r2, r2, #8
 80081a2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80081a4:	2208      	movs	r2, #8
 80081a6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80081a8:	2301      	movs	r3, #1
 80081aa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80081ae:	2300      	movs	r3, #0
 80081b0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80081b4:	f7ff ffa3 	bl	80080fe <HAL_LTDC_ReloadEventCallback>
}
 80081b8:	bd70      	pop	{r4, r5, r6, pc}

080081ba <HAL_LTDC_ConfigLayer>:
{
 80081ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80081be:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80081c2:	4606      	mov	r6, r0
 80081c4:	460f      	mov	r7, r1
 80081c6:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	f04f 0002 	mov.w	r0, #2
 80081ce:	d01f      	beq.n	8008210 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80081d0:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80081d2:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80081d6:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80081d8:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80081dc:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80081e0:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80081e4:	3438      	adds	r4, #56	; 0x38
 80081e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081f2:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80081f4:	4630      	mov	r0, r6
 80081f6:	4662      	mov	r2, ip
 80081f8:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80081fa:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80081fc:	f7ff fe80 	bl	8007f00 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008200:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8008202:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008204:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008208:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800820c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8008210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008214 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8008214:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8008218:	2b01      	cmp	r3, #1
 800821a:	f04f 0302 	mov.w	r3, #2
 800821e:	d012      	beq.n	8008246 <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008220:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008224:	6803      	ldr	r3, [r0, #0]
 8008226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008228:	f022 0201 	bic.w	r2, r2, #1
 800822c:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800822e:	4a07      	ldr	r2, [pc, #28]	; (800824c <HAL_LTDC_ProgramLineEvent+0x38>)
 8008230:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8008232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008234:	f042 0201 	orr.w	r2, r2, #1
 8008238:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800823a:	2301      	movs	r3, #1
 800823c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8008240:	2300      	movs	r3, #0
 8008242:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8008246:	4618      	mov	r0, r3
}
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	50001000 	.word	0x50001000

08008250 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008250:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008252:	4c10      	ldr	r4, [pc, #64]	; (8008294 <HAL_PWREx_ConfigSupply+0x44>)
 8008254:	68e3      	ldr	r3, [r4, #12]
 8008256:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800825a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800825c:	d105      	bne.n	800826a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800825e:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008262:	1a18      	subs	r0, r3, r0
 8008264:	bf18      	it	ne
 8008266:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008268:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800826a:	f023 0307 	bic.w	r3, r3, #7
 800826e:	4318      	orrs	r0, r3
 8008270:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8008272:	f7fe fabd 	bl	80067f0 <HAL_GetTick>
 8008276:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008278:	6863      	ldr	r3, [r4, #4]
 800827a:	049b      	lsls	r3, r3, #18
 800827c:	d501      	bpl.n	8008282 <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 800827e:	2000      	movs	r0, #0
 8008280:	e7f2      	b.n	8008268 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008282:	f7fe fab5 	bl	80067f0 <HAL_GetTick>
 8008286:	1b40      	subs	r0, r0, r5
 8008288:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800828c:	d9f4      	bls.n	8008278 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 800828e:	2001      	movs	r0, #1
 8008290:	e7ea      	b.n	8008268 <HAL_PWREx_ConfigSupply+0x18>
 8008292:	bf00      	nop
 8008294:	58024800 	.word	0x58024800

08008298 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800829c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800829e:	b136      	cbz	r6, 80082ae <QSPI_Config+0x16>
 80082a0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 80082a4:	d003      	beq.n	80082ae <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80082a6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80082a8:	6804      	ldr	r4, [r0, #0]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80082ae:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80082b2:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80082b6:	f1b9 0f00 	cmp.w	r9, #0
 80082ba:	d04f      	beq.n	800835c <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80082bc:	694b      	ldr	r3, [r1, #20]
 80082be:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80082c2:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80082c4:	f8d1 a000 	ldr.w	sl, [r1]
 80082c8:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 80082cc:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 80082d0:	ea49 0902 	orr.w	r9, r9, r2
 80082d4:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80082d8:	b335      	cbz	r5, 8008328 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80082da:	688b      	ldr	r3, [r1, #8]
 80082dc:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80082e0:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80082e2:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80082e4:	b19f      	cbz	r7, 800830e <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80082e6:	ea4a 0307 	orr.w	r3, sl, r7
 80082ea:	4323      	orrs	r3, r4
 80082ec:	68cc      	ldr	r4, [r1, #12]
 80082ee:	ea43 0308 	orr.w	r3, r3, r8
 80082f2:	ea43 030e 	orr.w	r3, r3, lr
 80082f6:	4333      	orrs	r3, r6
 80082f8:	4323      	orrs	r3, r4
 80082fa:	ea43 030c 	orr.w	r3, r3, ip
 80082fe:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008300:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008304:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008306:	d00d      	beq.n	8008324 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008308:	684b      	ldr	r3, [r1, #4]
 800830a:	6183      	str	r3, [r0, #24]
 800830c:	e00a      	b.n	8008324 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800830e:	ea4a 0304 	orr.w	r3, sl, r4
 8008312:	ea43 0308 	orr.w	r3, r3, r8
 8008316:	ea43 030e 	orr.w	r3, r3, lr
 800831a:	4333      	orrs	r3, r6
 800831c:	ea43 030c 	orr.w	r3, r3, ip
 8008320:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008322:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008328:	b16f      	cbz	r7, 8008346 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800832a:	ea4a 0307 	orr.w	r3, sl, r7
 800832e:	4323      	orrs	r3, r4
 8008330:	68cc      	ldr	r4, [r1, #12]
 8008332:	ea43 0308 	orr.w	r3, r3, r8
 8008336:	ea43 030e 	orr.w	r3, r3, lr
 800833a:	4323      	orrs	r3, r4
 800833c:	ea43 030c 	orr.w	r3, r3, ip
 8008340:	ea43 0309 	orr.w	r3, r3, r9
 8008344:	e7dc      	b.n	8008300 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008346:	ea4a 0304 	orr.w	r3, sl, r4
 800834a:	ea43 0308 	orr.w	r3, r3, r8
 800834e:	ea43 030e 	orr.w	r3, r3, lr
 8008352:	ea43 030c 	orr.w	r3, r3, ip
 8008356:	ea43 0309 	orr.w	r3, r3, r9
 800835a:	e7e2      	b.n	8008322 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800835c:	b365      	cbz	r5, 80083b8 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800835e:	6804      	ldr	r4, [r0, #0]
 8008360:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008362:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008364:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008366:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800836a:	694e      	ldr	r6, [r1, #20]
 800836c:	ea43 0502 	orr.w	r5, r3, r2
 8008370:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8008374:	04b6      	lsls	r6, r6, #18
 8008376:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800837a:	b1a7      	cbz	r7, 80083a6 <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800837c:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800837e:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008382:	ea40 0008 	orr.w	r0, r0, r8
 8008386:	ea43 0300 	orr.w	r3, r3, r0
 800838a:	68c8      	ldr	r0, [r1, #12]
 800838c:	ea43 030c 	orr.w	r3, r3, ip
 8008390:	ea43 0300 	orr.w	r3, r3, r0
 8008394:	ea43 0306 	orr.w	r3, r3, r6
 8008398:	ea43 0305 	orr.w	r3, r3, r5
 800839c:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800839e:	d0c1      	beq.n	8008324 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80083a0:	684b      	ldr	r3, [r1, #4]
 80083a2:	61a3      	str	r3, [r4, #24]
 80083a4:	e7be      	b.n	8008324 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80083a6:	ea40 0008 	orr.w	r0, r0, r8
 80083aa:	4303      	orrs	r3, r0
 80083ac:	ea43 030c 	orr.w	r3, r3, ip
 80083b0:	4333      	orrs	r3, r6
 80083b2:	432b      	orrs	r3, r5
 80083b4:	6163      	str	r3, [r4, #20]
 80083b6:	e7b5      	b.n	8008324 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80083b8:	b17f      	cbz	r7, 80083da <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80083ba:	ea46 0307 	orr.w	r3, r6, r7
 80083be:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80083c0:	6800      	ldr	r0, [r0, #0]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	4323      	orrs	r3, r4
 80083c6:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80083c8:	4323      	orrs	r3, r4
 80083ca:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80083cc:	4323      	orrs	r3, r4
 80083ce:	68cc      	ldr	r4, [r1, #12]
 80083d0:	4323      	orrs	r3, r4
 80083d2:	694c      	ldr	r4, [r1, #20]
 80083d4:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80083d8:	e792      	b.n	8008300 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80083da:	2e00      	cmp	r6, #0
 80083dc:	d0a2      	beq.n	8008324 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80083de:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80083e0:	6800      	ldr	r0, [r0, #0]
 80083e2:	4333      	orrs	r3, r6
 80083e4:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80083e6:	431a      	orrs	r2, r3
 80083e8:	694b      	ldr	r3, [r1, #20]
 80083ea:	4332      	orrs	r2, r6
 80083ec:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80083ee:	4332      	orrs	r2, r6
 80083f0:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 80083f4:	6142      	str	r2, [r0, #20]
}
 80083f6:	e795      	b.n	8008324 <QSPI_Config+0x8c>

080083f8 <QSPI_WaitFlagStateUntilTimeout>:
{
 80083f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008400:	4604      	mov	r4, r0
 8008402:	460e      	mov	r6, r1
 8008404:	4615      	mov	r5, r2
 8008406:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008408:	6822      	ldr	r2, [r4, #0]
 800840a:	6893      	ldr	r3, [r2, #8]
 800840c:	4233      	tst	r3, r6
 800840e:	bf14      	ite	ne
 8008410:	2301      	movne	r3, #1
 8008412:	2300      	moveq	r3, #0
 8008414:	42ab      	cmp	r3, r5
 8008416:	d101      	bne.n	800841c <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8008418:	2000      	movs	r0, #0
 800841a:	e012      	b.n	8008442 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800841c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008420:	d0f3      	beq.n	800840a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008422:	f7fe f9e5 	bl	80067f0 <HAL_GetTick>
 8008426:	1bc0      	subs	r0, r0, r7
 8008428:	4540      	cmp	r0, r8
 800842a:	d802      	bhi.n	8008432 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800842c:	f1b8 0f00 	cmp.w	r8, #0
 8008430:	d1ea      	bne.n	8008408 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008432:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008434:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008436:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800843a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800843c:	f043 0301 	orr.w	r3, r3, #1
 8008440:	6463      	str	r3, [r4, #68]	; 0x44
}
 8008442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008448 <HAL_QSPI_Init>:
{
 8008448:	b530      	push	{r4, r5, lr}
 800844a:	4604      	mov	r4, r0
 800844c:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800844e:	f7fe f9cf 	bl	80067f0 <HAL_GetTick>
 8008452:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8008454:	2c00      	cmp	r4, #0
 8008456:	d040      	beq.n	80084da <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008458:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800845c:	b93a      	cbnz	r2, 800846e <HAL_QSPI_Init+0x26>
 800845e:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8008460:	4620      	mov	r0, r4
 8008462:	f7fa ffcd 	bl	8003400 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8008466:	f241 3288 	movw	r2, #5000	; 0x1388
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800846e:	6820      	ldr	r0, [r4, #0]
 8008470:	68a1      	ldr	r1, [r4, #8]
 8008472:	6802      	ldr	r2, [r0, #0]
 8008474:	3901      	subs	r1, #1
 8008476:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800847a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800847e:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008480:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008482:	4620      	mov	r0, r4
 8008484:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008486:	9200      	str	r2, [sp, #0]
 8008488:	2200      	movs	r2, #0
 800848a:	f7ff ffb5 	bl	80083f8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800848e:	bb10      	cbnz	r0, 80084d6 <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008490:	6822      	ldr	r2, [r4, #0]
 8008492:	69e5      	ldr	r5, [r4, #28]
 8008494:	68e3      	ldr	r3, [r4, #12]
 8008496:	6811      	ldr	r1, [r2, #0]
 8008498:	432b      	orrs	r3, r5
 800849a:	6a25      	ldr	r5, [r4, #32]
 800849c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80084a0:	432b      	orrs	r3, r5
 80084a2:	6865      	ldr	r5, [r4, #4]
 80084a4:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 80084a8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80084ac:	430b      	orrs	r3, r1
 80084ae:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80084b0:	6855      	ldr	r5, [r2, #4]
 80084b2:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80084b6:	430b      	orrs	r3, r1
 80084b8:	6921      	ldr	r1, [r4, #16]
 80084ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80084be:	4908      	ldr	r1, [pc, #32]	; (80084e0 <HAL_QSPI_Init+0x98>)
 80084c0:	4029      	ands	r1, r5
 80084c2:	430b      	orrs	r3, r1
 80084c4:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80084c6:	6813      	ldr	r3, [r2, #0]
 80084c8:	f043 0301 	orr.w	r3, r3, #1
 80084cc:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80084ce:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80084d0:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80084d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80084d6:	b005      	add	sp, #20
 80084d8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80084da:	2001      	movs	r0, #1
 80084dc:	e7fb      	b.n	80084d6 <HAL_QSPI_Init+0x8e>
 80084de:	bf00      	nop
 80084e0:	ffe0f8fe 	.word	0xffe0f8fe

080084e4 <HAL_QSPI_DeInit>:
{
 80084e4:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 80084e6:	4604      	mov	r4, r0
 80084e8:	b158      	cbz	r0, 8008502 <HAL_QSPI_DeInit+0x1e>
  __HAL_QSPI_DISABLE(hqspi);
 80084ea:	6802      	ldr	r2, [r0, #0]
 80084ec:	6813      	ldr	r3, [r2, #0]
 80084ee:	f023 0301 	bic.w	r3, r3, #1
 80084f2:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 80084f4:	f7fa ffe4 	bl	80034c0 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80084f8:	2000      	movs	r0, #0
 80084fa:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 80084fc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
}
 8008500:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008502:	2001      	movs	r0, #1
 8008504:	e7fc      	b.n	8008500 <HAL_QSPI_DeInit+0x1c>

08008506 <HAL_QSPI_Command>:
{
 8008506:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800850a:	4604      	mov	r4, r0
 800850c:	b085      	sub	sp, #20
 800850e:	4617      	mov	r7, r2
 8008510:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8008512:	f7fe f96d 	bl	80067f0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008516:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800851a:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800851c:	2a01      	cmp	r2, #1
 800851e:	d033      	beq.n	8008588 <HAL_QSPI_Command+0x82>
 8008520:	2201      	movs	r2, #1
 8008522:	2602      	movs	r6, #2
 8008524:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008528:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800852c:	2a01      	cmp	r2, #1
 800852e:	fa5f f882 	uxtb.w	r8, r2
 8008532:	d127      	bne.n	8008584 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008534:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008536:	9003      	str	r0, [sp, #12]
 8008538:	2120      	movs	r1, #32
 800853a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800853c:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800853e:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8008540:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008544:	f7ff ff58 	bl	80083f8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8008548:	4605      	mov	r5, r0
 800854a:	b9a0      	cbnz	r0, 8008576 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800854c:	4602      	mov	r2, r0
 800854e:	4649      	mov	r1, r9
 8008550:	4620      	mov	r0, r4
 8008552:	f7ff fea1 	bl	8008298 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8008556:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800855a:	9b03      	ldr	r3, [sp, #12]
 800855c:	b94a      	cbnz	r2, 8008572 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800855e:	4642      	mov	r2, r8
 8008560:	4631      	mov	r1, r6
 8008562:	4620      	mov	r0, r4
 8008564:	9700      	str	r7, [sp, #0]
 8008566:	f7ff ff47 	bl	80083f8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800856a:	4605      	mov	r5, r0
 800856c:	b918      	cbnz	r0, 8008576 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8008572:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008576:	2300      	movs	r3, #0
 8008578:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800857c:	4628      	mov	r0, r5
 800857e:	b005      	add	sp, #20
 8008580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8008584:	4635      	mov	r5, r6
 8008586:	e7f6      	b.n	8008576 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8008588:	2502      	movs	r5, #2
 800858a:	e7f7      	b.n	800857c <HAL_QSPI_Command+0x76>

0800858c <HAL_QSPI_Transmit>:
{
 800858c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800858e:	4604      	mov	r4, r0
 8008590:	b085      	sub	sp, #20
 8008592:	4616      	mov	r6, r2
 8008594:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8008596:	f7fe f92b 	bl	80067f0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800859a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800859e:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80085a0:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 80085a2:	2a01      	cmp	r2, #1
 80085a4:	d049      	beq.n	800863a <HAL_QSPI_Transmit+0xae>
 80085a6:	2201      	movs	r2, #1
 80085a8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80085ac:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80085b0:	2a01      	cmp	r2, #1
 80085b2:	b2d0      	uxtb	r0, r2
 80085b4:	d13f      	bne.n	8008636 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80085b6:	2200      	movs	r2, #0
 80085b8:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80085ba:	2f00      	cmp	r7, #0
 80085bc:	d036      	beq.n	800862c <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80085be:	2212      	movs	r2, #18
 80085c0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80085c4:	692a      	ldr	r2, [r5, #16]
 80085c6:	3201      	adds	r2, #1
 80085c8:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80085ca:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80085cc:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80085ce:	3201      	adds	r2, #1
 80085d0:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80085d2:	696a      	ldr	r2, [r5, #20]
 80085d4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80085d8:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80085da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80085dc:	b98a      	cbnz	r2, 8008602 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80085de:	2201      	movs	r2, #1
 80085e0:	2102      	movs	r1, #2
 80085e2:	4620      	mov	r0, r4
 80085e4:	9600      	str	r6, [sp, #0]
 80085e6:	f7ff ff07 	bl	80083f8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80085ea:	b910      	cbnz	r0, 80085f2 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	2202      	movs	r2, #2
 80085f0:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80085f2:	2301      	movs	r3, #1
 80085f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80085f8:	2300      	movs	r3, #0
 80085fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80085fe:	b005      	add	sp, #20
 8008600:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8008602:	2201      	movs	r2, #1
 8008604:	2104      	movs	r1, #4
 8008606:	4620      	mov	r0, r4
 8008608:	9600      	str	r6, [sp, #0]
 800860a:	9303      	str	r3, [sp, #12]
 800860c:	f7ff fef4 	bl	80083f8 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8008610:	2800      	cmp	r0, #0
 8008612:	d1ee      	bne.n	80085f2 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008614:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8008616:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008618:	7812      	ldrb	r2, [r2, #0]
 800861a:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 800861e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008620:	3201      	adds	r2, #1
 8008622:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8008624:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008626:	3a01      	subs	r2, #1
 8008628:	62e2      	str	r2, [r4, #44]	; 0x2c
 800862a:	e7d6      	b.n	80085da <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800862c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800862e:	f043 0308 	orr.w	r3, r3, #8
 8008632:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8008634:	e7e0      	b.n	80085f8 <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 8008636:	2002      	movs	r0, #2
 8008638:	e7de      	b.n	80085f8 <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 800863a:	2002      	movs	r0, #2
 800863c:	e7df      	b.n	80085fe <HAL_QSPI_Transmit+0x72>

0800863e <HAL_QSPI_Receive>:
{
 800863e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008640:	4604      	mov	r4, r0
 8008642:	b085      	sub	sp, #20
 8008644:	4616      	mov	r6, r2
 8008646:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8008648:	f7fe f8d2 	bl	80067f0 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800864c:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800864e:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8008650:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8008654:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008658:	2a01      	cmp	r2, #1
 800865a:	d04d      	beq.n	80086f8 <HAL_QSPI_Receive+0xba>
 800865c:	2201      	movs	r2, #1
 800865e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008662:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008666:	2a01      	cmp	r2, #1
 8008668:	b2d0      	uxtb	r0, r2
 800866a:	d143      	bne.n	80086f4 <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800866c:	2200      	movs	r2, #0
 800866e:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8008670:	2f00      	cmp	r7, #0
 8008672:	d03a      	beq.n	80086ea <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8008674:	2222      	movs	r2, #34	; 0x22
 8008676:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800867a:	692a      	ldr	r2, [r5, #16]
 800867c:	3201      	adds	r2, #1
 800867e:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008680:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8008682:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008684:	3201      	adds	r2, #1
 8008686:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8008688:	6969      	ldr	r1, [r5, #20]
 800868a:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800868e:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8008692:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8008694:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8008698:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800869a:	b98a      	cbnz	r2, 80086c0 <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800869c:	2201      	movs	r2, #1
 800869e:	2102      	movs	r1, #2
 80086a0:	4620      	mov	r0, r4
 80086a2:	9600      	str	r6, [sp, #0]
 80086a4:	f7ff fea8 	bl	80083f8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80086a8:	b910      	cbnz	r0, 80086b0 <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	2202      	movs	r2, #2
 80086ae:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80086b0:	2301      	movs	r3, #1
 80086b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80086b6:	2300      	movs	r3, #0
 80086b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80086bc:	b005      	add	sp, #20
 80086be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80086c0:	2201      	movs	r2, #1
 80086c2:	2106      	movs	r1, #6
 80086c4:	4620      	mov	r0, r4
 80086c6:	9600      	str	r6, [sp, #0]
 80086c8:	9303      	str	r3, [sp, #12]
 80086ca:	f7ff fe95 	bl	80083f8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80086ce:	2800      	cmp	r0, #0
 80086d0:	d1ee      	bne.n	80086b0 <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80086d2:	f895 1020 	ldrb.w	r1, [r5, #32]
 80086d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80086d8:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80086da:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 80086dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80086de:	3201      	adds	r2, #1
 80086e0:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80086e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80086e4:	3a01      	subs	r2, #1
 80086e6:	63a2      	str	r2, [r4, #56]	; 0x38
 80086e8:	e7d6      	b.n	8008698 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80086ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80086ec:	f043 0308 	orr.w	r3, r3, #8
 80086f0:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80086f2:	e7e0      	b.n	80086b6 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 80086f4:	2002      	movs	r0, #2
 80086f6:	e7de      	b.n	80086b6 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 80086f8:	2002      	movs	r0, #2
 80086fa:	e7df      	b.n	80086bc <HAL_QSPI_Receive+0x7e>

080086fc <HAL_QSPI_AutoPolling>:
{
 80086fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008700:	4604      	mov	r4, r0
 8008702:	4615      	mov	r5, r2
 8008704:	461e      	mov	r6, r3
 8008706:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8008708:	f7fe f872 	bl	80067f0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800870c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008710:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8008712:	2a01      	cmp	r2, #1
 8008714:	d040      	beq.n	8008798 <HAL_QSPI_AutoPolling+0x9c>
 8008716:	2201      	movs	r2, #1
 8008718:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800871c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008720:	2a01      	cmp	r2, #1
 8008722:	b2d7      	uxtb	r7, r2
 8008724:	d136      	bne.n	8008794 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008726:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008728:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800872a:	9003      	str	r0, [sp, #12]
 800872c:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800872e:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008730:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008732:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008736:	2120      	movs	r1, #32
 8008738:	f7ff fe5e 	bl	80083f8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800873c:	bb20      	cbnz	r0, 8008788 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800873e:	6821      	ldr	r1, [r4, #0]
 8008740:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008742:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8008744:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8008746:	686a      	ldr	r2, [r5, #4]
 8008748:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800874a:	68aa      	ldr	r2, [r5, #8]
 800874c:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800874e:	680a      	ldr	r2, [r1, #0]
 8008750:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8008754:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008756:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008758:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800875c:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800875e:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8008760:	68ea      	ldr	r2, [r5, #12]
 8008762:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008766:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800876a:	f7ff fd95 	bl	8008298 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800876e:	9b03      	ldr	r3, [sp, #12]
 8008770:	463a      	mov	r2, r7
 8008772:	2108      	movs	r1, #8
 8008774:	4620      	mov	r0, r4
 8008776:	9600      	str	r6, [sp, #0]
 8008778:	f7ff fe3e 	bl	80083f8 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800877c:	b920      	cbnz	r0, 8008788 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	2208      	movs	r2, #8
 8008782:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8008784:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008788:	2300      	movs	r3, #0
 800878a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800878e:	b004      	add	sp, #16
 8008790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8008794:	2002      	movs	r0, #2
 8008796:	e7f7      	b.n	8008788 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8008798:	2002      	movs	r0, #2
 800879a:	e7f8      	b.n	800878e <HAL_QSPI_AutoPolling+0x92>

0800879c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800879e:	4604      	mov	r4, r0
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d074      	beq.n	800888e <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087a4:	6803      	ldr	r3, [r0, #0]
 80087a6:	07d8      	lsls	r0, r3, #31
 80087a8:	d45e      	bmi.n	8008868 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	0799      	lsls	r1, r3, #30
 80087ae:	f100 80b0 	bmi.w	8008912 <HAL_RCC_OscConfig+0x176>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	06da      	lsls	r2, r3, #27
 80087b6:	d527      	bpl.n	8008808 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087b8:	4ba1      	ldr	r3, [pc, #644]	; (8008a40 <HAL_RCC_OscConfig+0x2a4>)
 80087ba:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087be:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80087c2:	2a08      	cmp	r2, #8
 80087c4:	d007      	beq.n	80087d6 <HAL_RCC_OscConfig+0x3a>
 80087c6:	2a18      	cmp	r2, #24
 80087c8:	f040 810e 	bne.w	80089e8 <HAL_RCC_OscConfig+0x24c>
 80087cc:	f001 0203 	and.w	r2, r1, #3
 80087d0:	2a01      	cmp	r2, #1
 80087d2:	f040 8109 	bne.w	80089e8 <HAL_RCC_OscConfig+0x24c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	05db      	lsls	r3, r3, #23
 80087da:	d502      	bpl.n	80087e2 <HAL_RCC_OscConfig+0x46>
 80087dc:	69e3      	ldr	r3, [r4, #28]
 80087de:	2b80      	cmp	r3, #128	; 0x80
 80087e0:	d155      	bne.n	800888e <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087e2:	f7fe f81d 	bl	8006820 <HAL_GetREVID>
 80087e6:	f241 0303 	movw	r3, #4099	; 0x1003
 80087ea:	6a21      	ldr	r1, [r4, #32]
 80087ec:	4298      	cmp	r0, r3
 80087ee:	4b94      	ldr	r3, [pc, #592]	; (8008a40 <HAL_RCC_OscConfig+0x2a4>)
 80087f0:	f200 80f3 	bhi.w	80089da <HAL_RCC_OscConfig+0x23e>
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	2920      	cmp	r1, #32
 80087f8:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 80087fc:	bf0c      	ite	eq
 80087fe:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8008802:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8008806:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	0719      	lsls	r1, r3, #28
 800880c:	f100 812e 	bmi.w	8008a6c <HAL_RCC_OscConfig+0x2d0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	069a      	lsls	r2, r3, #26
 8008814:	f100 814f 	bmi.w	8008ab6 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	075d      	lsls	r5, r3, #29
 800881c:	d51e      	bpl.n	800885c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800881e:	4d89      	ldr	r5, [pc, #548]	; (8008a44 <HAL_RCC_OscConfig+0x2a8>)
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008826:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008828:	f7fd ffe2 	bl	80067f0 <HAL_GetTick>
 800882c:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800882e:	682b      	ldr	r3, [r5, #0]
 8008830:	05da      	lsls	r2, r3, #23
 8008832:	f140 8165 	bpl.w	8008b00 <HAL_RCC_OscConfig+0x364>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008836:	68a3      	ldr	r3, [r4, #8]
 8008838:	4d81      	ldr	r5, [pc, #516]	; (8008a40 <HAL_RCC_OscConfig+0x2a4>)
 800883a:	2b01      	cmp	r3, #1
 800883c:	f040 8167 	bne.w	8008b0e <HAL_RCC_OscConfig+0x372>
 8008840:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008842:	f043 0301 	orr.w	r3, r3, #1
 8008846:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008848:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800884c:	f7fd ffd0 	bl	80067f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008850:	4e7b      	ldr	r6, [pc, #492]	; (8008a40 <HAL_RCC_OscConfig+0x2a4>)
      tickstart = HAL_GetTick();
 8008852:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008854:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008856:	079b      	lsls	r3, r3, #30
 8008858:	f140 817f 	bpl.w	8008b5a <HAL_RCC_OscConfig+0x3be>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800885c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800885e:	2900      	cmp	r1, #0
 8008860:	f040 8182 	bne.w	8008b68 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8008864:	2000      	movs	r0, #0
 8008866:	e02a      	b.n	80088be <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008868:	4b75      	ldr	r3, [pc, #468]	; (8008a40 <HAL_RCC_OscConfig+0x2a4>)
 800886a:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800886c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800886e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008872:	2a10      	cmp	r2, #16
 8008874:	d005      	beq.n	8008882 <HAL_RCC_OscConfig+0xe6>
 8008876:	2a18      	cmp	r2, #24
 8008878:	d10b      	bne.n	8008892 <HAL_RCC_OscConfig+0xf6>
 800887a:	f001 0203 	and.w	r2, r1, #3
 800887e:	2a02      	cmp	r2, #2
 8008880:	d107      	bne.n	8008892 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	039a      	lsls	r2, r3, #14
 8008886:	d590      	bpl.n	80087aa <HAL_RCC_OscConfig+0xe>
 8008888:	6863      	ldr	r3, [r4, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d18d      	bne.n	80087aa <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800888e:	2001      	movs	r0, #1
 8008890:	e015      	b.n	80088be <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008892:	6862      	ldr	r2, [r4, #4]
 8008894:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008898:	d112      	bne.n	80088c0 <HAL_RCC_OscConfig+0x124>
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80088a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80088a2:	f7fd ffa5 	bl	80067f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088a6:	4e66      	ldr	r6, [pc, #408]	; (8008a40 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80088a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088aa:	6833      	ldr	r3, [r6, #0]
 80088ac:	039b      	lsls	r3, r3, #14
 80088ae:	f53f af7c 	bmi.w	80087aa <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088b2:	f7fd ff9d 	bl	80067f0 <HAL_GetTick>
 80088b6:	1b40      	subs	r0, r0, r5
 80088b8:	2864      	cmp	r0, #100	; 0x64
 80088ba:	d9f6      	bls.n	80088aa <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 80088bc:	2003      	movs	r0, #3
}
 80088be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088c0:	4d5f      	ldr	r5, [pc, #380]	; (8008a40 <HAL_RCC_OscConfig+0x2a4>)
 80088c2:	682b      	ldr	r3, [r5, #0]
 80088c4:	b99a      	cbnz	r2, 80088ee <HAL_RCC_OscConfig+0x152>
 80088c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80088d4:	f7fd ff8c 	bl	80067f0 <HAL_GetTick>
 80088d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80088da:	682b      	ldr	r3, [r5, #0]
 80088dc:	039f      	lsls	r7, r3, #14
 80088de:	f57f af64 	bpl.w	80087aa <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088e2:	f7fd ff85 	bl	80067f0 <HAL_GetTick>
 80088e6:	1b80      	subs	r0, r0, r6
 80088e8:	2864      	cmp	r0, #100	; 0x64
 80088ea:	d9f6      	bls.n	80088da <HAL_RCC_OscConfig+0x13e>
 80088ec:	e7e6      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088ee:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80088f2:	d107      	bne.n	8008904 <HAL_RCC_OscConfig+0x168>
 80088f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088f8:	602b      	str	r3, [r5, #0]
 80088fa:	682b      	ldr	r3, [r5, #0]
 80088fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008900:	602b      	str	r3, [r5, #0]
 8008902:	e7ce      	b.n	80088a2 <HAL_RCC_OscConfig+0x106>
 8008904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008908:	602b      	str	r3, [r5, #0]
 800890a:	682b      	ldr	r3, [r5, #0]
 800890c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008910:	e7f6      	b.n	8008900 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008912:	4b4b      	ldr	r3, [pc, #300]	; (8008a40 <HAL_RCC_OscConfig+0x2a4>)
 8008914:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008916:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008918:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 800891c:	d003      	beq.n	8008926 <HAL_RCC_OscConfig+0x18a>
 800891e:	2a18      	cmp	r2, #24
 8008920:	d11f      	bne.n	8008962 <HAL_RCC_OscConfig+0x1c6>
 8008922:	078e      	lsls	r6, r1, #30
 8008924:	d11d      	bne.n	8008962 <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	075d      	lsls	r5, r3, #29
 800892a:	d502      	bpl.n	8008932 <HAL_RCC_OscConfig+0x196>
 800892c:	68e3      	ldr	r3, [r4, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0ad      	beq.n	800888e <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008932:	f7fd ff75 	bl	8006820 <HAL_GetREVID>
 8008936:	f241 0303 	movw	r3, #4099	; 0x1003
 800893a:	6921      	ldr	r1, [r4, #16]
 800893c:	4298      	cmp	r0, r3
 800893e:	4b40      	ldr	r3, [pc, #256]	; (8008a40 <HAL_RCC_OscConfig+0x2a4>)
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	d809      	bhi.n	8008958 <HAL_RCC_OscConfig+0x1bc>
 8008944:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8008948:	2940      	cmp	r1, #64	; 0x40
 800894a:	bf0c      	ite	eq
 800894c:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 8008950:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 8008954:	605a      	str	r2, [r3, #4]
 8008956:	e72c      	b.n	80087b2 <HAL_RCC_OscConfig+0x16>
 8008958:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800895c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008960:	e7f8      	b.n	8008954 <HAL_RCC_OscConfig+0x1b8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008962:	68e1      	ldr	r1, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008964:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008966:	b339      	cbz	r1, 80089b8 <HAL_RCC_OscConfig+0x21c>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008968:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800896c:	4d34      	ldr	r5, [pc, #208]	; (8008a40 <HAL_RCC_OscConfig+0x2a4>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800896e:	430a      	orrs	r2, r1
 8008970:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008972:	f7fd ff3d 	bl	80067f0 <HAL_GetTick>
 8008976:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008978:	682b      	ldr	r3, [r5, #0]
 800897a:	0758      	lsls	r0, r3, #29
 800897c:	d511      	bpl.n	80089a2 <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800897e:	f7fd ff4f 	bl	8006820 <HAL_GetREVID>
 8008982:	f241 0303 	movw	r3, #4099	; 0x1003
 8008986:	6922      	ldr	r2, [r4, #16]
 8008988:	4298      	cmp	r0, r3
 800898a:	686b      	ldr	r3, [r5, #4]
 800898c:	d80f      	bhi.n	80089ae <HAL_RCC_OscConfig+0x212>
 800898e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008992:	2a40      	cmp	r2, #64	; 0x40
 8008994:	bf0c      	ite	eq
 8008996:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800899a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800899e:	606b      	str	r3, [r5, #4]
 80089a0:	e707      	b.n	80087b2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089a2:	f7fd ff25 	bl	80067f0 <HAL_GetTick>
 80089a6:	1b80      	subs	r0, r0, r6
 80089a8:	2802      	cmp	r0, #2
 80089aa:	d9e5      	bls.n	8008978 <HAL_RCC_OscConfig+0x1dc>
 80089ac:	e786      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089ae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80089b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80089b6:	e7f2      	b.n	800899e <HAL_RCC_OscConfig+0x202>
        __HAL_RCC_HSI_DISABLE();
 80089b8:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089bc:	4e20      	ldr	r6, [pc, #128]	; (8008a40 <HAL_RCC_OscConfig+0x2a4>)
        __HAL_RCC_HSI_DISABLE();
 80089be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80089c0:	f7fd ff16 	bl	80067f0 <HAL_GetTick>
 80089c4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089c6:	6833      	ldr	r3, [r6, #0]
 80089c8:	0759      	lsls	r1, r3, #29
 80089ca:	f57f aef2 	bpl.w	80087b2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089ce:	f7fd ff0f 	bl	80067f0 <HAL_GetTick>
 80089d2:	1b40      	subs	r0, r0, r5
 80089d4:	2802      	cmp	r0, #2
 80089d6:	d9f6      	bls.n	80089c6 <HAL_RCC_OscConfig+0x22a>
 80089d8:	e770      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 80089e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80089e4:	60da      	str	r2, [r3, #12]
 80089e6:	e70f      	b.n	8008808 <HAL_RCC_OscConfig+0x6c>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80089e8:	69e2      	ldr	r2, [r4, #28]
 80089ea:	b36a      	cbz	r2, 8008a48 <HAL_RCC_OscConfig+0x2ac>
        __HAL_RCC_CSI_ENABLE();
 80089ec:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089ee:	4d14      	ldr	r5, [pc, #80]	; (8008a40 <HAL_RCC_OscConfig+0x2a4>)
        __HAL_RCC_CSI_ENABLE();
 80089f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80089f6:	f7fd fefb 	bl	80067f0 <HAL_GetTick>
 80089fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	05df      	lsls	r7, r3, #23
 8008a00:	d511      	bpl.n	8008a26 <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a02:	f7fd ff0d 	bl	8006820 <HAL_GetREVID>
 8008a06:	f241 0303 	movw	r3, #4099	; 0x1003
 8008a0a:	6a22      	ldr	r2, [r4, #32]
 8008a0c:	4298      	cmp	r0, r3
 8008a0e:	d810      	bhi.n	8008a32 <HAL_RCC_OscConfig+0x296>
 8008a10:	686b      	ldr	r3, [r5, #4]
 8008a12:	2a20      	cmp	r2, #32
 8008a14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a18:	bf0c      	ite	eq
 8008a1a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8008a1e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8008a22:	606b      	str	r3, [r5, #4]
 8008a24:	e6f0      	b.n	8008808 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008a26:	f7fd fee3 	bl	80067f0 <HAL_GetTick>
 8008a2a:	1b80      	subs	r0, r0, r6
 8008a2c:	2802      	cmp	r0, #2
 8008a2e:	d9e5      	bls.n	80089fc <HAL_RCC_OscConfig+0x260>
 8008a30:	e744      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a32:	68eb      	ldr	r3, [r5, #12]
 8008a34:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008a38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008a3c:	60eb      	str	r3, [r5, #12]
 8008a3e:	e6e3      	b.n	8008808 <HAL_RCC_OscConfig+0x6c>
 8008a40:	58024400 	.word	0x58024400
 8008a44:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8008a48:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a4a:	4e9f      	ldr	r6, [pc, #636]	; (8008cc8 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_CSI_DISABLE();
 8008a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a50:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008a52:	f7fd fecd 	bl	80067f0 <HAL_GetTick>
 8008a56:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a58:	6833      	ldr	r3, [r6, #0]
 8008a5a:	05d8      	lsls	r0, r3, #23
 8008a5c:	f57f aed4 	bpl.w	8008808 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008a60:	f7fd fec6 	bl	80067f0 <HAL_GetTick>
 8008a64:	1b40      	subs	r0, r0, r5
 8008a66:	2802      	cmp	r0, #2
 8008a68:	d9f6      	bls.n	8008a58 <HAL_RCC_OscConfig+0x2bc>
 8008a6a:	e727      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a6c:	6963      	ldr	r3, [r4, #20]
 8008a6e:	4d96      	ldr	r5, [pc, #600]	; (8008cc8 <HAL_RCC_OscConfig+0x52c>)
 8008a70:	b183      	cbz	r3, 8008a94 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 8008a72:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008a74:	f043 0301 	orr.w	r3, r3, #1
 8008a78:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008a7a:	f7fd feb9 	bl	80067f0 <HAL_GetTick>
 8008a7e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a80:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008a82:	079b      	lsls	r3, r3, #30
 8008a84:	f53f aec4 	bmi.w	8008810 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a88:	f7fd feb2 	bl	80067f0 <HAL_GetTick>
 8008a8c:	1b80      	subs	r0, r0, r6
 8008a8e:	2802      	cmp	r0, #2
 8008a90:	d9f6      	bls.n	8008a80 <HAL_RCC_OscConfig+0x2e4>
 8008a92:	e713      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 8008a94:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008a96:	f023 0301 	bic.w	r3, r3, #1
 8008a9a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008a9c:	f7fd fea8 	bl	80067f0 <HAL_GetTick>
 8008aa0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008aa2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008aa4:	079f      	lsls	r7, r3, #30
 8008aa6:	f57f aeb3 	bpl.w	8008810 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008aaa:	f7fd fea1 	bl	80067f0 <HAL_GetTick>
 8008aae:	1b80      	subs	r0, r0, r6
 8008ab0:	2802      	cmp	r0, #2
 8008ab2:	d9f6      	bls.n	8008aa2 <HAL_RCC_OscConfig+0x306>
 8008ab4:	e702      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008ab6:	69a3      	ldr	r3, [r4, #24]
 8008ab8:	4d83      	ldr	r5, [pc, #524]	; (8008cc8 <HAL_RCC_OscConfig+0x52c>)
 8008aba:	b183      	cbz	r3, 8008ade <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 8008abc:	682b      	ldr	r3, [r5, #0]
 8008abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ac2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008ac4:	f7fd fe94 	bl	80067f0 <HAL_GetTick>
 8008ac8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008aca:	682b      	ldr	r3, [r5, #0]
 8008acc:	0498      	lsls	r0, r3, #18
 8008ace:	f53f aea3 	bmi.w	8008818 <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008ad2:	f7fd fe8d 	bl	80067f0 <HAL_GetTick>
 8008ad6:	1b80      	subs	r0, r0, r6
 8008ad8:	2802      	cmp	r0, #2
 8008ada:	d9f6      	bls.n	8008aca <HAL_RCC_OscConfig+0x32e>
 8008adc:	e6ee      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 8008ade:	682b      	ldr	r3, [r5, #0]
 8008ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ae4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008ae6:	f7fd fe83 	bl	80067f0 <HAL_GetTick>
 8008aea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	0499      	lsls	r1, r3, #18
 8008af0:	f57f ae92 	bpl.w	8008818 <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008af4:	f7fd fe7c 	bl	80067f0 <HAL_GetTick>
 8008af8:	1b80      	subs	r0, r0, r6
 8008afa:	2802      	cmp	r0, #2
 8008afc:	d9f6      	bls.n	8008aec <HAL_RCC_OscConfig+0x350>
 8008afe:	e6dd      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b00:	f7fd fe76 	bl	80067f0 <HAL_GetTick>
 8008b04:	1b80      	subs	r0, r0, r6
 8008b06:	2864      	cmp	r0, #100	; 0x64
 8008b08:	f67f ae91 	bls.w	800882e <HAL_RCC_OscConfig+0x92>
 8008b0c:	e6d6      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b0e:	b9b3      	cbnz	r3, 8008b3e <HAL_RCC_OscConfig+0x3a2>
 8008b10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b12:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b16:	f023 0301 	bic.w	r3, r3, #1
 8008b1a:	672b      	str	r3, [r5, #112]	; 0x70
 8008b1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008b1e:	f023 0304 	bic.w	r3, r3, #4
 8008b22:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008b24:	f7fd fe64 	bl	80067f0 <HAL_GetTick>
 8008b28:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008b2a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008b2c:	0798      	lsls	r0, r3, #30
 8008b2e:	f57f ae95 	bpl.w	800885c <HAL_RCC_OscConfig+0xc0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b32:	f7fd fe5d 	bl	80067f0 <HAL_GetTick>
 8008b36:	1b80      	subs	r0, r0, r6
 8008b38:	42b8      	cmp	r0, r7
 8008b3a:	d9f6      	bls.n	8008b2a <HAL_RCC_OscConfig+0x38e>
 8008b3c:	e6be      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b3e:	2b05      	cmp	r3, #5
 8008b40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008b42:	d103      	bne.n	8008b4c <HAL_RCC_OscConfig+0x3b0>
 8008b44:	f043 0304 	orr.w	r3, r3, #4
 8008b48:	672b      	str	r3, [r5, #112]	; 0x70
 8008b4a:	e679      	b.n	8008840 <HAL_RCC_OscConfig+0xa4>
 8008b4c:	f023 0301 	bic.w	r3, r3, #1
 8008b50:	672b      	str	r3, [r5, #112]	; 0x70
 8008b52:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008b54:	f023 0304 	bic.w	r3, r3, #4
 8008b58:	e675      	b.n	8008846 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b5a:	f7fd fe49 	bl	80067f0 <HAL_GetTick>
 8008b5e:	1b40      	subs	r0, r0, r5
 8008b60:	42b8      	cmp	r0, r7
 8008b62:	f67f ae77 	bls.w	8008854 <HAL_RCC_OscConfig+0xb8>
 8008b66:	e6a9      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008b68:	4d57      	ldr	r5, [pc, #348]	; (8008cc8 <HAL_RCC_OscConfig+0x52c>)
 8008b6a:	692b      	ldr	r3, [r5, #16]
 8008b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b70:	2b18      	cmp	r3, #24
 8008b72:	d07a      	beq.n	8008c6a <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 8008b74:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b76:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8008b78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b7c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b7e:	d167      	bne.n	8008c50 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 8008b80:	f7fd fe36 	bl	80067f0 <HAL_GetTick>
 8008b84:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b86:	682b      	ldr	r3, [r5, #0]
 8008b88:	0199      	lsls	r1, r3, #6
 8008b8a:	d45b      	bmi.n	8008c44 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008b8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008b90:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8008b94:	f023 0303 	bic.w	r3, r3, #3
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008b9c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008ba0:	62ab      	str	r3, [r5, #40]	; 0x28
 8008ba2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ba4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	3a01      	subs	r2, #1
 8008baa:	025b      	lsls	r3, r3, #9
 8008bac:	0412      	lsls	r2, r2, #16
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008bb8:	3a01      	subs	r2, #1
 8008bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008bc2:	3a01      	subs	r2, #1
 8008bc4:	0612      	lsls	r2, r2, #24
 8008bc6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008bce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008bd0:	f023 0301 	bic.w	r3, r3, #1
 8008bd4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008bd6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008bd8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008be2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008be6:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008be8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008bea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008bec:	f023 030c 	bic.w	r3, r3, #12
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008bf4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008bf6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008bf8:	f023 0302 	bic.w	r3, r3, #2
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008c00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c06:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c08:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c0e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008c10:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008c12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c16:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8008c18:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008c1a:	f043 0301 	orr.w	r3, r3, #1
 8008c1e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008c28:	f7fd fde2 	bl	80067f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c2c:	4d26      	ldr	r5, [pc, #152]	; (8008cc8 <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 8008c2e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	019a      	lsls	r2, r3, #6
 8008c34:	f53f ae16 	bmi.w	8008864 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c38:	f7fd fdda 	bl	80067f0 <HAL_GetTick>
 8008c3c:	1b00      	subs	r0, r0, r4
 8008c3e:	2802      	cmp	r0, #2
 8008c40:	d9f6      	bls.n	8008c30 <HAL_RCC_OscConfig+0x494>
 8008c42:	e63b      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c44:	f7fd fdd4 	bl	80067f0 <HAL_GetTick>
 8008c48:	1b80      	subs	r0, r0, r6
 8008c4a:	2802      	cmp	r0, #2
 8008c4c:	d99b      	bls.n	8008b86 <HAL_RCC_OscConfig+0x3ea>
 8008c4e:	e635      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 8008c50:	f7fd fdce 	bl	80067f0 <HAL_GetTick>
 8008c54:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c56:	682b      	ldr	r3, [r5, #0]
 8008c58:	019b      	lsls	r3, r3, #6
 8008c5a:	f57f ae03 	bpl.w	8008864 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c5e:	f7fd fdc7 	bl	80067f0 <HAL_GetTick>
 8008c62:	1b00      	subs	r0, r0, r4
 8008c64:	2802      	cmp	r0, #2
 8008c66:	d9f6      	bls.n	8008c56 <HAL_RCC_OscConfig+0x4ba>
 8008c68:	e628      	b.n	80088bc <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c6a:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008c6c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008c6e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c70:	f43f ae0d 	beq.w	800888e <HAL_RCC_OscConfig+0xf2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c74:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008c7a:	4281      	cmp	r1, r0
 8008c7c:	f47f ae07 	bne.w	800888e <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c80:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008c86:	428a      	cmp	r2, r1
 8008c88:	f47f ae01 	bne.w	800888e <HAL_RCC_OscConfig+0xf2>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008c8e:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8008c92:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c94:	4291      	cmp	r1, r2
 8008c96:	f47f adfa 	bne.w	800888e <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008c9c:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8008ca0:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ca2:	4291      	cmp	r1, r2
 8008ca4:	f47f adf3 	bne.w	800888e <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ca8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008caa:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8008cae:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008cb0:	4291      	cmp	r1, r2
 8008cb2:	f47f adec 	bne.w	800888e <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008cb6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008cb8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008cbc:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	f43f add0 	beq.w	8008864 <HAL_RCC_OscConfig+0xc8>
 8008cc4:	e5e3      	b.n	800888e <HAL_RCC_OscConfig+0xf2>
 8008cc6:	bf00      	nop
 8008cc8:	58024400 	.word	0x58024400

08008ccc <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ccc:	4b48      	ldr	r3, [pc, #288]	; (8008df0 <HAL_RCC_GetSysClockFreq+0x124>)
 8008cce:	691a      	ldr	r2, [r3, #16]
 8008cd0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008cd4:	2a10      	cmp	r2, #16
{
 8008cd6:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cd8:	f000 8086 	beq.w	8008de8 <HAL_RCC_GetSysClockFreq+0x11c>
 8008cdc:	2a18      	cmp	r2, #24
 8008cde:	d00c      	beq.n	8008cfa <HAL_RCC_GetSysClockFreq+0x2e>
 8008ce0:	2a00      	cmp	r2, #0
 8008ce2:	f040 8083 	bne.w	8008dec <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	4842      	ldr	r0, [pc, #264]	; (8008df4 <HAL_RCC_GetSysClockFreq+0x128>)
 8008cea:	f012 0f20 	tst.w	r2, #32
 8008cee:	d003      	beq.n	8008cf8 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008cf6:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8008cf8:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cfa:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008cfc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008cfe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8008d00:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008d04:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (pllm != 0U)
 8008d0a:	d0f5      	beq.n	8008cf8 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008d0c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008d10:	f004 0401 	and.w	r4, r4, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d14:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d18:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008d1c:	4362      	muls	r2, r4
 8008d1e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008d26:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008d28:	ee07 2a90 	vmov	s15, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d2c:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8008d30:	d04c      	beq.n	8008dcc <HAL_RCC_GetSysClockFreq+0x100>
 8008d32:	2902      	cmp	r1, #2
 8008d34:	d03c      	beq.n	8008db0 <HAL_RCC_GetSysClockFreq+0xe4>
 8008d36:	2900      	cmp	r1, #0
 8008d38:	d148      	bne.n	8008dcc <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	0692      	lsls	r2, r2, #26
 8008d3e:	d527      	bpl.n	8008d90 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d40:	6819      	ldr	r1, [r3, #0]
 8008d42:	4a2c      	ldr	r2, [pc, #176]	; (8008df4 <HAL_RCC_GetSysClockFreq+0x128>)
 8008d44:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d4a:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d50:	ee07 2a10 	vmov	s14, r2
 8008d54:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8008d58:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8008d5c:	ee06 3a90 	vmov	s13, r3
 8008d60:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d68:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008d6c:	4b20      	ldr	r3, [pc, #128]	; (8008df0 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d74:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008d78:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008d7a:	ee07 3a10 	vmov	s14, r3
 8008d7e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008d82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008d86:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8008d8a:	ee17 0a90 	vmov	r0, s15
 8008d8e:	e7b3      	b.n	8008cf8 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d96:	ee07 3a10 	vmov	s14, r3
 8008d9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008da2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008da6:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8008df8 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008daa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008dae:	e7dd      	b.n	8008d6c <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db6:	ee07 3a10 	vmov	s14, r3
 8008dba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dc2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008dc6:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8008dfc <HAL_RCC_GetSysClockFreq+0x130>
 8008dca:	e7ee      	b.n	8008daa <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd2:	ee07 3a10 	vmov	s14, r3
 8008dd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dde:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008de2:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8008e00 <HAL_RCC_GetSysClockFreq+0x134>
 8008de6:	e7e0      	b.n	8008daa <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008de8:	4806      	ldr	r0, [pc, #24]	; (8008e04 <HAL_RCC_GetSysClockFreq+0x138>)
 8008dea:	e785      	b.n	8008cf8 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8008dec:	4806      	ldr	r0, [pc, #24]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008dee:	e783      	b.n	8008cf8 <HAL_RCC_GetSysClockFreq+0x2c>
 8008df0:	58024400 	.word	0x58024400
 8008df4:	03d09000 	.word	0x03d09000
 8008df8:	4c742400 	.word	0x4c742400
 8008dfc:	4bbebc20 	.word	0x4bbebc20
 8008e00:	4a742400 	.word	0x4a742400
 8008e04:	017d7840 	.word	0x017d7840
 8008e08:	003d0900 	.word	0x003d0900

08008e0c <HAL_RCC_ClockConfig>:
{
 8008e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e10:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8008e12:	4604      	mov	r4, r0
 8008e14:	b910      	cbnz	r0, 8008e1c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8008e16:	2001      	movs	r0, #1
}
 8008e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e1c:	4a88      	ldr	r2, [pc, #544]	; (8009040 <HAL_RCC_ClockConfig+0x234>)
 8008e1e:	6813      	ldr	r3, [r2, #0]
 8008e20:	f003 030f 	and.w	r3, r3, #15
 8008e24:	428b      	cmp	r3, r1
 8008e26:	f0c0 8093 	bcc.w	8008f50 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	075f      	lsls	r7, r3, #29
 8008e2e:	f100 809b 	bmi.w	8008f68 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e32:	071e      	lsls	r6, r3, #28
 8008e34:	d50b      	bpl.n	8008e4e <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e36:	4983      	ldr	r1, [pc, #524]	; (8009044 <HAL_RCC_ClockConfig+0x238>)
 8008e38:	6966      	ldr	r6, [r4, #20]
 8008e3a:	69c8      	ldr	r0, [r1, #28]
 8008e3c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008e40:	4286      	cmp	r6, r0
 8008e42:	d904      	bls.n	8008e4e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e44:	69ca      	ldr	r2, [r1, #28]
 8008e46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008e4a:	4332      	orrs	r2, r6
 8008e4c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e4e:	06d8      	lsls	r0, r3, #27
 8008e50:	d50b      	bpl.n	8008e6a <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e52:	497c      	ldr	r1, [pc, #496]	; (8009044 <HAL_RCC_ClockConfig+0x238>)
 8008e54:	69a6      	ldr	r6, [r4, #24]
 8008e56:	69c8      	ldr	r0, [r1, #28]
 8008e58:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8008e5c:	4286      	cmp	r6, r0
 8008e5e:	d904      	bls.n	8008e6a <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e60:	69ca      	ldr	r2, [r1, #28]
 8008e62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e66:	4332      	orrs	r2, r6
 8008e68:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e6a:	0699      	lsls	r1, r3, #26
 8008e6c:	d50b      	bpl.n	8008e86 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e6e:	4975      	ldr	r1, [pc, #468]	; (8009044 <HAL_RCC_ClockConfig+0x238>)
 8008e70:	69e6      	ldr	r6, [r4, #28]
 8008e72:	6a08      	ldr	r0, [r1, #32]
 8008e74:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008e78:	4286      	cmp	r6, r0
 8008e7a:	d904      	bls.n	8008e86 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008e7c:	6a0a      	ldr	r2, [r1, #32]
 8008e7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008e82:	4332      	orrs	r2, r6
 8008e84:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e86:	079a      	lsls	r2, r3, #30
 8008e88:	d50b      	bpl.n	8008ea2 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008e8a:	496e      	ldr	r1, [pc, #440]	; (8009044 <HAL_RCC_ClockConfig+0x238>)
 8008e8c:	68e6      	ldr	r6, [r4, #12]
 8008e8e:	6988      	ldr	r0, [r1, #24]
 8008e90:	f000 000f 	and.w	r0, r0, #15
 8008e94:	4286      	cmp	r6, r0
 8008e96:	d904      	bls.n	8008ea2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e98:	698a      	ldr	r2, [r1, #24]
 8008e9a:	f022 020f 	bic.w	r2, r2, #15
 8008e9e:	4332      	orrs	r2, r6
 8008ea0:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ea2:	07df      	lsls	r7, r3, #31
 8008ea4:	d46e      	bmi.n	8008f84 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	079e      	lsls	r6, r3, #30
 8008eaa:	f100 80a1 	bmi.w	8008ff0 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008eae:	4964      	ldr	r1, [pc, #400]	; (8009040 <HAL_RCC_ClockConfig+0x234>)
 8008eb0:	680a      	ldr	r2, [r1, #0]
 8008eb2:	f002 020f 	and.w	r2, r2, #15
 8008eb6:	42aa      	cmp	r2, r5
 8008eb8:	f200 80a8 	bhi.w	800900c <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ebc:	0758      	lsls	r0, r3, #29
 8008ebe:	f100 80b1 	bmi.w	8009024 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ec2:	0719      	lsls	r1, r3, #28
 8008ec4:	d50b      	bpl.n	8008ede <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ec6:	495f      	ldr	r1, [pc, #380]	; (8009044 <HAL_RCC_ClockConfig+0x238>)
 8008ec8:	6965      	ldr	r5, [r4, #20]
 8008eca:	69c8      	ldr	r0, [r1, #28]
 8008ecc:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008ed0:	4285      	cmp	r5, r0
 8008ed2:	d204      	bcs.n	8008ede <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ed4:	69ca      	ldr	r2, [r1, #28]
 8008ed6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008eda:	432a      	orrs	r2, r5
 8008edc:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ede:	06da      	lsls	r2, r3, #27
 8008ee0:	d50b      	bpl.n	8008efa <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ee2:	4958      	ldr	r1, [pc, #352]	; (8009044 <HAL_RCC_ClockConfig+0x238>)
 8008ee4:	69a5      	ldr	r5, [r4, #24]
 8008ee6:	69c8      	ldr	r0, [r1, #28]
 8008ee8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8008eec:	4285      	cmp	r5, r0
 8008eee:	d204      	bcs.n	8008efa <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ef0:	69ca      	ldr	r2, [r1, #28]
 8008ef2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008ef6:	432a      	orrs	r2, r5
 8008ef8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008efa:	069b      	lsls	r3, r3, #26
 8008efc:	d50b      	bpl.n	8008f16 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008efe:	4a51      	ldr	r2, [pc, #324]	; (8009044 <HAL_RCC_ClockConfig+0x238>)
 8008f00:	69e0      	ldr	r0, [r4, #28]
 8008f02:	6a11      	ldr	r1, [r2, #32]
 8008f04:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8008f08:	4288      	cmp	r0, r1
 8008f0a:	d204      	bcs.n	8008f16 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008f0c:	6a13      	ldr	r3, [r2, #32]
 8008f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f12:	4303      	orrs	r3, r0
 8008f14:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f16:	f7ff fed9 	bl	8008ccc <HAL_RCC_GetSysClockFreq>
 8008f1a:	494a      	ldr	r1, [pc, #296]	; (8009044 <HAL_RCC_ClockConfig+0x238>)
 8008f1c:	4a4a      	ldr	r2, [pc, #296]	; (8009048 <HAL_RCC_ClockConfig+0x23c>)
 8008f1e:	698b      	ldr	r3, [r1, #24]
 8008f20:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008f24:	5cd3      	ldrb	r3, [r2, r3]
 8008f26:	f003 031f 	and.w	r3, r3, #31
 8008f2a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f2c:	698b      	ldr	r3, [r1, #24]
 8008f2e:	f003 030f 	and.w	r3, r3, #15
 8008f32:	5cd3      	ldrb	r3, [r2, r3]
 8008f34:	4a45      	ldr	r2, [pc, #276]	; (800904c <HAL_RCC_ClockConfig+0x240>)
 8008f36:	f003 031f 	and.w	r3, r3, #31
 8008f3a:	fa20 f303 	lsr.w	r3, r0, r3
 8008f3e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8008f40:	4b43      	ldr	r3, [pc, #268]	; (8009050 <HAL_RCC_ClockConfig+0x244>)
 8008f42:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8008f44:	4b43      	ldr	r3, [pc, #268]	; (8009054 <HAL_RCC_ClockConfig+0x248>)
}
 8008f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8008f4a:	6818      	ldr	r0, [r3, #0]
 8008f4c:	f7fd bbf0 	b.w	8006730 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f50:	6813      	ldr	r3, [r2, #0]
 8008f52:	f023 030f 	bic.w	r3, r3, #15
 8008f56:	430b      	orrs	r3, r1
 8008f58:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f5a:	6813      	ldr	r3, [r2, #0]
 8008f5c:	f003 030f 	and.w	r3, r3, #15
 8008f60:	428b      	cmp	r3, r1
 8008f62:	f47f af58 	bne.w	8008e16 <HAL_RCC_ClockConfig+0xa>
 8008f66:	e760      	b.n	8008e2a <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f68:	4936      	ldr	r1, [pc, #216]	; (8009044 <HAL_RCC_ClockConfig+0x238>)
 8008f6a:	6926      	ldr	r6, [r4, #16]
 8008f6c:	6988      	ldr	r0, [r1, #24]
 8008f6e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008f72:	4286      	cmp	r6, r0
 8008f74:	f67f af5d 	bls.w	8008e32 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f78:	698a      	ldr	r2, [r1, #24]
 8008f7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008f7e:	4332      	orrs	r2, r6
 8008f80:	618a      	str	r2, [r1, #24]
 8008f82:	e756      	b.n	8008e32 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008f84:	4b2f      	ldr	r3, [pc, #188]	; (8009044 <HAL_RCC_ClockConfig+0x238>)
 8008f86:	68a1      	ldr	r1, [r4, #8]
 8008f88:	699a      	ldr	r2, [r3, #24]
 8008f8a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f92:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f94:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f96:	2a02      	cmp	r2, #2
 8008f98:	d11d      	bne.n	8008fd6 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f9e:	f43f af3a 	beq.w	8008e16 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008fa2:	4e28      	ldr	r6, [pc, #160]	; (8009044 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fa4:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008fa8:	6933      	ldr	r3, [r6, #16]
 8008faa:	f023 0307 	bic.w	r3, r3, #7
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8008fb2:	f7fd fc1d 	bl	80067f0 <HAL_GetTick>
 8008fb6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fb8:	6933      	ldr	r3, [r6, #16]
 8008fba:	6862      	ldr	r2, [r4, #4]
 8008fbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fc0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008fc4:	f43f af6f 	beq.w	8008ea6 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fc8:	f7fd fc12 	bl	80067f0 <HAL_GetTick>
 8008fcc:	1bc0      	subs	r0, r0, r7
 8008fce:	4540      	cmp	r0, r8
 8008fd0:	d9f2      	bls.n	8008fb8 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8008fd2:	2003      	movs	r0, #3
 8008fd4:	e720      	b.n	8008e18 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fd6:	2a03      	cmp	r2, #3
 8008fd8:	d102      	bne.n	8008fe0 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fda:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008fde:	e7de      	b.n	8008f9e <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008fe0:	2a01      	cmp	r2, #1
 8008fe2:	d102      	bne.n	8008fea <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fe4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008fe8:	e7d9      	b.n	8008f9e <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fea:	f013 0f04 	tst.w	r3, #4
 8008fee:	e7d6      	b.n	8008f9e <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ff0:	4914      	ldr	r1, [pc, #80]	; (8009044 <HAL_RCC_ClockConfig+0x238>)
 8008ff2:	68e6      	ldr	r6, [r4, #12]
 8008ff4:	6988      	ldr	r0, [r1, #24]
 8008ff6:	f000 000f 	and.w	r0, r0, #15
 8008ffa:	4286      	cmp	r6, r0
 8008ffc:	f4bf af57 	bcs.w	8008eae <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009000:	698a      	ldr	r2, [r1, #24]
 8009002:	f022 020f 	bic.w	r2, r2, #15
 8009006:	4332      	orrs	r2, r6
 8009008:	618a      	str	r2, [r1, #24]
 800900a:	e750      	b.n	8008eae <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800900c:	680a      	ldr	r2, [r1, #0]
 800900e:	f022 020f 	bic.w	r2, r2, #15
 8009012:	432a      	orrs	r2, r5
 8009014:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009016:	680a      	ldr	r2, [r1, #0]
 8009018:	f002 020f 	and.w	r2, r2, #15
 800901c:	42aa      	cmp	r2, r5
 800901e:	f47f aefa 	bne.w	8008e16 <HAL_RCC_ClockConfig+0xa>
 8009022:	e74b      	b.n	8008ebc <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009024:	4907      	ldr	r1, [pc, #28]	; (8009044 <HAL_RCC_ClockConfig+0x238>)
 8009026:	6925      	ldr	r5, [r4, #16]
 8009028:	6988      	ldr	r0, [r1, #24]
 800902a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800902e:	4285      	cmp	r5, r0
 8009030:	f4bf af47 	bcs.w	8008ec2 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009034:	698a      	ldr	r2, [r1, #24]
 8009036:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800903a:	432a      	orrs	r2, r5
 800903c:	618a      	str	r2, [r1, #24]
 800903e:	e740      	b.n	8008ec2 <HAL_RCC_ClockConfig+0xb6>
 8009040:	52002000 	.word	0x52002000
 8009044:	58024400 	.word	0x58024400
 8009048:	0800f5fd 	.word	0x0800f5fd
 800904c:	24000004 	.word	0x24000004
 8009050:	24000000 	.word	0x24000000
 8009054:	2400002c 	.word	0x2400002c

08009058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009058:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800905a:	4c0c      	ldr	r4, [pc, #48]	; (800908c <HAL_RCC_GetHCLKFreq+0x34>)
 800905c:	f7ff fe36 	bl	8008ccc <HAL_RCC_GetSysClockFreq>
 8009060:	490b      	ldr	r1, [pc, #44]	; (8009090 <HAL_RCC_GetHCLKFreq+0x38>)
 8009062:	69a3      	ldr	r3, [r4, #24]
 8009064:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009068:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800906a:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800906c:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009070:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009074:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009078:	5ccb      	ldrb	r3, [r1, r3]
 800907a:	f003 031f 	and.w	r3, r3, #31
 800907e:	fa22 f003 	lsr.w	r0, r2, r3
 8009082:	4b04      	ldr	r3, [pc, #16]	; (8009094 <HAL_RCC_GetHCLKFreq+0x3c>)
 8009084:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009086:	4b04      	ldr	r3, [pc, #16]	; (8009098 <HAL_RCC_GetHCLKFreq+0x40>)
 8009088:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800908a:	bd10      	pop	{r4, pc}
 800908c:	58024400 	.word	0x58024400
 8009090:	0800f5fd 	.word	0x0800f5fd
 8009094:	24000004 	.word	0x24000004
 8009098:	24000000 	.word	0x24000000

0800909c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800909c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800909e:	f7ff ffdb 	bl	8009058 <HAL_RCC_GetHCLKFreq>
 80090a2:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80090a4:	4a05      	ldr	r2, [pc, #20]	; (80090bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80090a6:	69db      	ldr	r3, [r3, #28]
 80090a8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80090ac:	5cd3      	ldrb	r3, [r2, r3]
 80090ae:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80090b2:	40d8      	lsrs	r0, r3
 80090b4:	bd08      	pop	{r3, pc}
 80090b6:	bf00      	nop
 80090b8:	58024400 	.word	0x58024400
 80090bc:	0800f5fd 	.word	0x0800f5fd

080090c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090c0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80090c2:	f7ff ffc9 	bl	8009058 <HAL_RCC_GetHCLKFreq>
 80090c6:	4b05      	ldr	r3, [pc, #20]	; (80090dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80090c8:	4a05      	ldr	r2, [pc, #20]	; (80090e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80090d0:	5cd3      	ldrb	r3, [r2, r3]
 80090d2:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80090d6:	40d8      	lsrs	r0, r3
 80090d8:	bd08      	pop	{r3, pc}
 80090da:	bf00      	nop
 80090dc:	58024400 	.word	0x58024400
 80090e0:	0800f5fd 	.word	0x0800f5fd

080090e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80090e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090e6:	4c3a      	ldr	r4, [pc, #232]	; (80091d0 <RCCEx_PLL2_Config+0xec>)
{
 80090e8:	4606      	mov	r6, r0
 80090ea:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80090ee:	f003 0303 	and.w	r3, r3, #3
 80090f2:	2b03      	cmp	r3, #3
 80090f4:	d069      	beq.n	80091ca <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090fc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090fe:	f7fd fb77 	bl	80067f0 <HAL_GetTick>
 8009102:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	011a      	lsls	r2, r3, #4
 8009108:	d44b      	bmi.n	80091a2 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800910a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800910c:	6832      	ldr	r2, [r6, #0]
 800910e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009112:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8009116:	62a3      	str	r3, [r4, #40]	; 0x28
 8009118:	68b3      	ldr	r3, [r6, #8]
 800911a:	68f2      	ldr	r2, [r6, #12]
 800911c:	3b01      	subs	r3, #1
 800911e:	3a01      	subs	r2, #1
 8009120:	025b      	lsls	r3, r3, #9
 8009122:	0412      	lsls	r2, r2, #16
 8009124:	b29b      	uxth	r3, r3
 8009126:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800912a:	4313      	orrs	r3, r2
 800912c:	6872      	ldr	r2, [r6, #4]
 800912e:	3a01      	subs	r2, #1
 8009130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009134:	4313      	orrs	r3, r2
 8009136:	6932      	ldr	r2, [r6, #16]
 8009138:	3a01      	subs	r2, #1
 800913a:	0612      	lsls	r2, r2, #24
 800913c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009140:	4313      	orrs	r3, r2
 8009142:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009144:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009146:	6972      	ldr	r2, [r6, #20]
 8009148:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800914c:	4313      	orrs	r3, r2
 800914e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009150:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009152:	69b2      	ldr	r2, [r6, #24]
 8009154:	f023 0320 	bic.w	r3, r3, #32
 8009158:	4313      	orrs	r3, r2
 800915a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800915c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800915e:	f023 0310 	bic.w	r3, r3, #16
 8009162:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009164:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009166:	69f2      	ldr	r2, [r6, #28]
 8009168:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800916c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009170:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009174:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009176:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009178:	f043 0310 	orr.w	r3, r3, #16
 800917c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800917e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8009180:	b9b5      	cbnz	r5, 80091b0 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009186:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009188:	4c11      	ldr	r4, [pc, #68]	; (80091d0 <RCCEx_PLL2_Config+0xec>)
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009190:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009192:	f7fd fb2d 	bl	80067f0 <HAL_GetTick>
 8009196:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	011b      	lsls	r3, r3, #4
 800919c:	d50f      	bpl.n	80091be <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800919e:	2000      	movs	r0, #0
 80091a0:	e005      	b.n	80091ae <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80091a2:	f7fd fb25 	bl	80067f0 <HAL_GetTick>
 80091a6:	1bc0      	subs	r0, r0, r7
 80091a8:	2802      	cmp	r0, #2
 80091aa:	d9ab      	bls.n	8009104 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 80091ac:	2003      	movs	r0, #3
}
 80091ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 80091b0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80091b2:	bf0c      	ite	eq
 80091b4:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80091b8:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80091bc:	e7e3      	b.n	8009186 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80091be:	f7fd fb17 	bl	80067f0 <HAL_GetTick>
 80091c2:	1b40      	subs	r0, r0, r5
 80091c4:	2802      	cmp	r0, #2
 80091c6:	d9e7      	bls.n	8009198 <RCCEx_PLL2_Config+0xb4>
 80091c8:	e7f0      	b.n	80091ac <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 80091ca:	2001      	movs	r0, #1
 80091cc:	e7ef      	b.n	80091ae <RCCEx_PLL2_Config+0xca>
 80091ce:	bf00      	nop
 80091d0:	58024400 	.word	0x58024400

080091d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80091d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091d6:	4c3a      	ldr	r4, [pc, #232]	; (80092c0 <RCCEx_PLL3_Config+0xec>)
{
 80091d8:	4606      	mov	r6, r0
 80091da:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80091de:	f003 0303 	and.w	r3, r3, #3
 80091e2:	2b03      	cmp	r3, #3
 80091e4:	d069      	beq.n	80092ba <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091ec:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091ee:	f7fd faff 	bl	80067f0 <HAL_GetTick>
 80091f2:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	009a      	lsls	r2, r3, #2
 80091f8:	d44b      	bmi.n	8009292 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80091fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80091fc:	6832      	ldr	r2, [r6, #0]
 80091fe:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8009202:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8009206:	62a3      	str	r3, [r4, #40]	; 0x28
 8009208:	68b3      	ldr	r3, [r6, #8]
 800920a:	68f2      	ldr	r2, [r6, #12]
 800920c:	3b01      	subs	r3, #1
 800920e:	3a01      	subs	r2, #1
 8009210:	025b      	lsls	r3, r3, #9
 8009212:	0412      	lsls	r2, r2, #16
 8009214:	b29b      	uxth	r3, r3
 8009216:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800921a:	4313      	orrs	r3, r2
 800921c:	6872      	ldr	r2, [r6, #4]
 800921e:	3a01      	subs	r2, #1
 8009220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009224:	4313      	orrs	r3, r2
 8009226:	6932      	ldr	r2, [r6, #16]
 8009228:	3a01      	subs	r2, #1
 800922a:	0612      	lsls	r2, r2, #24
 800922c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009230:	4313      	orrs	r3, r2
 8009232:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009234:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009236:	6972      	ldr	r2, [r6, #20]
 8009238:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800923c:	4313      	orrs	r3, r2
 800923e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009240:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009242:	69b2      	ldr	r2, [r6, #24]
 8009244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009248:	4313      	orrs	r3, r2
 800924a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800924c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800924e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009252:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009254:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009256:	69f2      	ldr	r2, [r6, #28]
 8009258:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800925c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009260:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009264:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009266:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800926c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800926e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8009270:	b9b5      	cbnz	r5, 80092a0 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009272:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009276:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009278:	4c11      	ldr	r4, [pc, #68]	; (80092c0 <RCCEx_PLL3_Config+0xec>)
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009280:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009282:	f7fd fab5 	bl	80067f0 <HAL_GetTick>
 8009286:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	d50f      	bpl.n	80092ae <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800928e:	2000      	movs	r0, #0
 8009290:	e005      	b.n	800929e <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009292:	f7fd faad 	bl	80067f0 <HAL_GetTick>
 8009296:	1bc0      	subs	r0, r0, r7
 8009298:	2802      	cmp	r0, #2
 800929a:	d9ab      	bls.n	80091f4 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800929c:	2003      	movs	r0, #3
}
 800929e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 80092a0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80092a2:	bf0c      	ite	eq
 80092a4:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80092a8:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80092ac:	e7e3      	b.n	8009276 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80092ae:	f7fd fa9f 	bl	80067f0 <HAL_GetTick>
 80092b2:	1b40      	subs	r0, r0, r5
 80092b4:	2802      	cmp	r0, #2
 80092b6:	d9e7      	bls.n	8009288 <RCCEx_PLL3_Config+0xb4>
 80092b8:	e7f0      	b.n	800929c <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 80092ba:	2001      	movs	r0, #1
 80092bc:	e7ef      	b.n	800929e <RCCEx_PLL3_Config+0xca>
 80092be:	bf00      	nop
 80092c0:	58024400 	.word	0x58024400

080092c4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80092c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092c8:	6806      	ldr	r6, [r0, #0]
{
 80092ca:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092cc:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 80092d0:	d009      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80092d2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80092d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092d8:	d02e      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80092da:	d813      	bhi.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80092dc:	b1f3      	cbz	r3, 800931c <HAL_RCCEx_PeriphCLKConfig+0x58>
 80092de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092e2:	d021      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80092e4:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80092e6:	682b      	ldr	r3, [r5, #0]
 80092e8:	05dc      	lsls	r4, r3, #23
 80092ea:	f140 80ea 	bpl.w	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->Sai1ClockSelection)
 80092ee:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80092f0:	2b04      	cmp	r3, #4
 80092f2:	f200 80e5 	bhi.w	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 80092f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80092fa:	0024      	.short	0x0024
 80092fc:	00dd002b 	.word	0x00dd002b
 8009300:	00290029 	.word	0x00290029
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009304:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009308:	d1ec      	bne.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800930a:	4aa6      	ldr	r2, [pc, #664]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800930c:	2600      	movs	r6, #0
 800930e:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8009310:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009312:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009316:	430b      	orrs	r3, r1
 8009318:	6513      	str	r3, [r2, #80]	; 0x50
 800931a:	e7e4      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800931c:	4aa1      	ldr	r2, [pc, #644]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800931e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009324:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009326:	e7f0      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009328:	2102      	movs	r1, #2
 800932a:	3004      	adds	r0, #4
 800932c:	f7ff feda 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009330:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009332:	2800      	cmp	r0, #0
 8009334:	d1d7      	bne.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8009336:	e7e8      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009338:	2102      	movs	r1, #2
 800933a:	3024      	adds	r0, #36	; 0x24
 800933c:	f7ff ff4a 	bl	80091d4 <RCCEx_PLL3_Config>
 8009340:	e7f6      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009342:	4a98      	ldr	r2, [pc, #608]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8009344:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800934a:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 800934c:	4634      	mov	r4, r6
 800934e:	e004      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009350:	2100      	movs	r1, #0
 8009352:	1d28      	adds	r0, r5, #4
 8009354:	f7ff fec6 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009358:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800935a:	2c00      	cmp	r4, #0
 800935c:	f040 80b3 	bne.w	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x202>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009360:	4a90      	ldr	r2, [pc, #576]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8009362:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8009364:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009366:	f023 0307 	bic.w	r3, r3, #7
 800936a:	430b      	orrs	r3, r1
 800936c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800936e:	682b      	ldr	r3, [r5, #0]
 8009370:	0598      	lsls	r0, r3, #22
 8009372:	d50d      	bpl.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai23ClockSelection)
 8009374:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009376:	2b80      	cmp	r3, #128	; 0x80
 8009378:	f000 80c2 	beq.w	8009500 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800937c:	f200 80a5 	bhi.w	80094ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 80b1 	beq.w	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8009386:	2b40      	cmp	r3, #64	; 0x40
 8009388:	f000 80b4 	beq.w	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800938c:	2601      	movs	r6, #1
 800938e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	0559      	lsls	r1, r3, #21
 8009394:	d510      	bpl.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009396:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 800939a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800939e:	f000 80d4 	beq.w	800954a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80093a2:	f200 80b5 	bhi.w	8009510 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f000 80c3 	beq.w	8009532 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80093ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093b0:	f000 80c5 	beq.w	800953e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80093b4:	2601      	movs	r6, #1
 80093b6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	051a      	lsls	r2, r3, #20
 80093bc:	d510      	bpl.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->Sai4BClockSelection)
 80093be:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 80093c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093c6:	f000 80e5 	beq.w	8009594 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80093ca:	f200 80c6 	bhi.w	800955a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 80d4 	beq.w	800957c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80093d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093d8:	f000 80d6 	beq.w	8009588 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80093dc:	2601      	movs	r6, #1
 80093de:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	019b      	lsls	r3, r3, #6
 80093e4:	d50d      	bpl.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->QspiClockSelection)
 80093e6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80093e8:	2b20      	cmp	r3, #32
 80093ea:	f000 80ef 	beq.w	80095cc <HAL_RCCEx_PeriphCLKConfig+0x308>
 80093ee:	f200 80db 	bhi.w	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 80db 	beq.w	80095ae <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 80093f8:	2b10      	cmp	r3, #16
 80093fa:	f000 80e1 	beq.w	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80093fe:	2601      	movs	r6, #1
 8009400:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009402:	682b      	ldr	r3, [r5, #0]
 8009404:	04df      	lsls	r7, r3, #19
 8009406:	d50f      	bpl.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009408:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800940a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800940e:	f000 8101 	beq.w	8009614 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8009412:	f200 80e3 	bhi.w	80095dc <HAL_RCCEx_PeriphCLKConfig+0x318>
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 80f0 	beq.w	80095fc <HAL_RCCEx_PeriphCLKConfig+0x338>
 800941c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009420:	f000 80f2 	beq.w	8009608 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009424:	2601      	movs	r6, #1
 8009426:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009428:	682b      	ldr	r3, [r5, #0]
 800942a:	0498      	lsls	r0, r3, #18
 800942c:	d50f      	bpl.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi45ClockSelection)
 800942e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8009430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009434:	f000 810e 	beq.w	8009654 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8009438:	f200 80f4 	bhi.w	8009624 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 80fa 	beq.w	8009636 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009446:	f000 80ff 	beq.w	8009648 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800944a:	2601      	movs	r6, #1
 800944c:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800944e:	682b      	ldr	r3, [r5, #0]
 8009450:	0459      	lsls	r1, r3, #17
 8009452:	d510      	bpl.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009454:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8009458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800945c:	f000 811b 	beq.w	8009696 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009460:	f200 8100 	bhi.w	8009664 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 8106 	beq.w	8009676 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800946a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800946e:	f000 810c 	beq.w	800968a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8009472:	2601      	movs	r6, #1
 8009474:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009476:	682b      	ldr	r3, [r5, #0]
 8009478:	041a      	lsls	r2, r3, #16
 800947a:	d50d      	bpl.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    switch(PeriphClkInit->FdcanClockSelection)
 800947c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800947e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009482:	f000 8110 	beq.w	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8009486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800948a:	f000 811a 	beq.w	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 810e 	beq.w	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8009494:	2601      	movs	r6, #1
 8009496:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	01db      	lsls	r3, r3, #7
 800949c:	f140 8127 	bpl.w	80096ee <HAL_RCCEx_PeriphCLKConfig+0x42a>
    switch(PeriphClkInit->FmcClockSelection)
 80094a0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	f200 8167 	bhi.w	8009776 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80094a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80094ac:	01130118 	.word	0x01130118
 80094b0:	0118015f 	.word	0x0118015f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094b4:	2100      	movs	r1, #0
 80094b6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80094ba:	f7ff fe8b 	bl	80091d4 <RCCEx_PLL3_Config>
 80094be:	e74b      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 80094c0:	2601      	movs	r6, #1
 80094c2:	4634      	mov	r4, r6
 80094c4:	e753      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0xaa>
 80094c6:	4626      	mov	r6, r4
 80094c8:	e751      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai23ClockSelection)
 80094ca:	2bc0      	cmp	r3, #192	; 0xc0
 80094cc:	d003      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80094ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d2:	f47f af5b 	bne.w	800938c <HAL_RCCEx_PeriphCLKConfig+0xc8>
    if(ret == HAL_OK)
 80094d6:	b9cc      	cbnz	r4, 800950c <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80094d8:	4a32      	ldr	r2, [pc, #200]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80094da:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80094dc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80094de:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80094e2:	430b      	orrs	r3, r1
 80094e4:	6513      	str	r3, [r2, #80]	; 0x50
 80094e6:	e753      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094e8:	4a2e      	ldr	r2, [pc, #184]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80094ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80094ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094f0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80094f2:	e7f0      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094f4:	2100      	movs	r1, #0
 80094f6:	1d28      	adds	r0, r5, #4
 80094f8:	f7ff fdf4 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094fc:	4604      	mov	r4, r0
      break;
 80094fe:	e7ea      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009500:	2100      	movs	r1, #0
 8009502:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009506:	f7ff fe65 	bl	80091d4 <RCCEx_PLL3_Config>
 800950a:	e7f7      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x238>
 800950c:	4626      	mov	r6, r4
 800950e:	e73f      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009510:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009514:	d003      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009516:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800951a:	f47f af4b 	bne.w	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if(ret == HAL_OK)
 800951e:	b9d4      	cbnz	r4, 8009556 <HAL_RCCEx_PeriphCLKConfig+0x292>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009520:	4a20      	ldr	r2, [pc, #128]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8009522:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8009526:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009528:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800952c:	430b      	orrs	r3, r1
 800952e:	6593      	str	r3, [r2, #88]	; 0x58
 8009530:	e742      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009532:	4a1c      	ldr	r2, [pc, #112]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8009534:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800953a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800953c:	e7ef      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800953e:	2100      	movs	r1, #0
 8009540:	1d28      	adds	r0, r5, #4
 8009542:	f7ff fdcf 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009546:	4604      	mov	r4, r0
      break;
 8009548:	e7e9      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800954a:	2100      	movs	r1, #0
 800954c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009550:	f7ff fe40 	bl	80091d4 <RCCEx_PLL3_Config>
 8009554:	e7f7      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8009556:	4626      	mov	r6, r4
 8009558:	e72e      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 800955a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800955e:	d003      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8009560:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009564:	f47f af3a 	bne.w	80093dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    if(ret == HAL_OK)
 8009568:	b9d4      	cbnz	r4, 80095a0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800956a:	4a0e      	ldr	r2, [pc, #56]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800956c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8009570:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009572:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009576:	430b      	orrs	r3, r1
 8009578:	6593      	str	r3, [r2, #88]	; 0x58
 800957a:	e731      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800957c:	4a09      	ldr	r2, [pc, #36]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800957e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009584:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009586:	e7ef      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009588:	2100      	movs	r1, #0
 800958a:	1d28      	adds	r0, r5, #4
 800958c:	f7ff fdaa 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009590:	4604      	mov	r4, r0
      break;
 8009592:	e7e9      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009594:	2100      	movs	r1, #0
 8009596:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800959a:	f7ff fe1b 	bl	80091d4 <RCCEx_PLL3_Config>
 800959e:	e7f7      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80095a0:	4626      	mov	r6, r4
 80095a2:	e71d      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80095a4:	58024400 	.word	0x58024400
    switch(PeriphClkInit->QspiClockSelection)
 80095a8:	2b30      	cmp	r3, #48	; 0x30
 80095aa:	f47f af28 	bne.w	80093fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 80095ae:	b99c      	cbnz	r4, 80095d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80095b0:	4a9d      	ldr	r2, [pc, #628]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80095b2:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80095b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80095b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80095ba:	430b      	orrs	r3, r1
 80095bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80095be:	e720      	b.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095c0:	4a99      	ldr	r2, [pc, #612]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80095c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80095c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095c8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80095ca:	e7f0      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80095cc:	2102      	movs	r1, #2
 80095ce:	1d28      	adds	r0, r5, #4
 80095d0:	f7ff fd88 	bl	80090e4 <RCCEx_PLL2_Config>
 80095d4:	4604      	mov	r4, r0
      break;
 80095d6:	e7ea      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 80095d8:	4626      	mov	r6, r4
 80095da:	e712      	b.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 80095dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095e0:	d003      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x326>
 80095e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095e6:	f47f af1d 	bne.w	8009424 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 80095ea:	b9cc      	cbnz	r4, 8009620 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80095ec:	4a8e      	ldr	r2, [pc, #568]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80095ee:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80095f0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80095f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095f6:	430b      	orrs	r3, r1
 80095f8:	6513      	str	r3, [r2, #80]	; 0x50
 80095fa:	e715      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x164>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095fc:	4a8a      	ldr	r2, [pc, #552]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80095fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009604:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009606:	e7f0      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009608:	2100      	movs	r1, #0
 800960a:	1d28      	adds	r0, r5, #4
 800960c:	f7ff fd6a 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009610:	4604      	mov	r4, r0
      break;
 8009612:	e7ea      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009614:	2100      	movs	r1, #0
 8009616:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800961a:	f7ff fddb 	bl	80091d4 <RCCEx_PLL3_Config>
 800961e:	e7f7      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009620:	4626      	mov	r6, r4
 8009622:	e701      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009624:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009628:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800962c:	d003      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800962e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009632:	f47f af0a 	bne.w	800944a <HAL_RCCEx_PeriphCLKConfig+0x186>
    if(ret == HAL_OK)
 8009636:	b99c      	cbnz	r4, 8009660 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009638:	4a7b      	ldr	r2, [pc, #492]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800963a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800963c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800963e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009642:	430b      	orrs	r3, r1
 8009644:	6513      	str	r3, [r2, #80]	; 0x50
 8009646:	e702      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009648:	2101      	movs	r1, #1
 800964a:	1d28      	adds	r0, r5, #4
 800964c:	f7ff fd4a 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009650:	4604      	mov	r4, r0
      break;
 8009652:	e7f0      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x372>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009654:	2101      	movs	r1, #1
 8009656:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800965a:	f7ff fdbb 	bl	80091d4 <RCCEx_PLL3_Config>
 800965e:	e7f7      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8009660:	4626      	mov	r6, r4
 8009662:	e6f4      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009664:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009668:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800966c:	d003      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800966e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009672:	f47f aefe 	bne.w	8009472 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    if(ret == HAL_OK)
 8009676:	b9a4      	cbnz	r4, 80096a2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009678:	4a6b      	ldr	r2, [pc, #428]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800967a:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800967e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009680:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009684:	430b      	orrs	r3, r1
 8009686:	6593      	str	r3, [r2, #88]	; 0x58
 8009688:	e6f5      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800968a:	2101      	movs	r1, #1
 800968c:	1d28      	adds	r0, r5, #4
 800968e:	f7ff fd29 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009692:	4604      	mov	r4, r0
      break;
 8009694:	e7ef      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009696:	2101      	movs	r1, #1
 8009698:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800969c:	f7ff fd9a 	bl	80091d4 <RCCEx_PLL3_Config>
 80096a0:	e7f7      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80096a2:	4626      	mov	r6, r4
 80096a4:	e6e7      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096a6:	4a60      	ldr	r2, [pc, #384]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80096a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80096aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ae:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80096b0:	b96c      	cbnz	r4, 80096ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80096b2:	4a5d      	ldr	r2, [pc, #372]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80096b4:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 80096b6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80096b8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80096bc:	430b      	orrs	r3, r1
 80096be:	6513      	str	r3, [r2, #80]	; 0x50
 80096c0:	e6ea      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096c2:	2101      	movs	r1, #1
 80096c4:	1d28      	adds	r0, r5, #4
 80096c6:	f7ff fd0d 	bl	80090e4 <RCCEx_PLL2_Config>
 80096ca:	4604      	mov	r4, r0
      break;
 80096cc:	e7f0      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80096ce:	4626      	mov	r6, r4
 80096d0:	e6e2      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d2:	4a55      	ldr	r2, [pc, #340]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80096d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80096d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096da:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80096dc:	2c00      	cmp	r4, #0
 80096de:	d14d      	bne.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80096e0:	4a51      	ldr	r2, [pc, #324]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80096e2:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80096e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80096e6:	f023 0303 	bic.w	r3, r3, #3
 80096ea:	430b      	orrs	r3, r1
 80096ec:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096ee:	682b      	ldr	r3, [r5, #0]
 80096f0:	025f      	lsls	r7, r3, #9
 80096f2:	d54d      	bpl.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096f4:	4f4d      	ldr	r7, [pc, #308]	; (800982c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096fc:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80096fe:	f7fd f877 	bl	80067f0 <HAL_GetTick>
 8009702:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	05d8      	lsls	r0, r3, #23
 8009708:	d53a      	bpl.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if(ret == HAL_OK)
 800970a:	2c00      	cmp	r4, #0
 800970c:	d16c      	bne.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800970e:	4b46      	ldr	r3, [pc, #280]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009710:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8009714:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009716:	4042      	eors	r2, r0
 8009718:	f412 7f40 	tst.w	r2, #768	; 0x300
 800971c:	d00b      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x472>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800971e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8009720:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009722:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009726:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800972a:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800972c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800972e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009732:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009734:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009736:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800973a:	d040      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800973c:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8009740:	4939      	ldr	r1, [pc, #228]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009742:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009746:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800974a:	d149      	bne.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 800974c:	6908      	ldr	r0, [r1, #16]
 800974e:	4a38      	ldr	r2, [pc, #224]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8009750:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8009754:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009758:	4302      	orrs	r2, r0
 800975a:	610a      	str	r2, [r1, #16]
 800975c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009760:	4a31      	ldr	r2, [pc, #196]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009762:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009764:	430b      	orrs	r3, r1
 8009766:	6713      	str	r3, [r2, #112]	; 0x70
 8009768:	e012      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800976a:	2102      	movs	r1, #2
 800976c:	1d28      	adds	r0, r5, #4
 800976e:	f7ff fcb9 	bl	80090e4 <RCCEx_PLL2_Config>
 8009772:	4604      	mov	r4, r0
      break;
 8009774:	e7b2      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x418>
    switch(PeriphClkInit->FmcClockSelection)
 8009776:	2601      	movs	r6, #1
 8009778:	4634      	mov	r4, r6
 800977a:	e7b8      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800977c:	4626      	mov	r6, r4
 800977e:	e7b6      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x42a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009780:	f7fd f836 	bl	80067f0 <HAL_GetTick>
 8009784:	eba0 0008 	sub.w	r0, r0, r8
 8009788:	2864      	cmp	r0, #100	; 0x64
 800978a:	d9bb      	bls.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x440>
        ret = HAL_TIMEOUT;
 800978c:	2603      	movs	r6, #3
 800978e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	07da      	lsls	r2, r3, #31
 8009794:	d508      	bpl.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009796:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8009798:	2b10      	cmp	r3, #16
 800979a:	d03c      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x552>
 800979c:	d826      	bhi.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x528>
 800979e:	b35b      	cbz	r3, 80097f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80097a0:	2b08      	cmp	r3, #8
 80097a2:	d032      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x546>
 80097a4:	2601      	movs	r6, #1
 80097a6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	079b      	lsls	r3, r3, #30
 80097ac:	d54f      	bpl.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x58a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80097ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80097b0:	2b05      	cmp	r3, #5
 80097b2:	d862      	bhi.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 80097b4:	e8df f003 	tbb	[pc, r3]
 80097b8:	435b3e43 	.word	0x435b3e43
 80097bc:	4343      	.short	0x4343
        tickstart = HAL_GetTick();
 80097be:	f7fd f817 	bl	80067f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097c2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>
        tickstart = HAL_GetTick();
 80097c6:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097c8:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097cc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80097d0:	0799      	lsls	r1, r3, #30
 80097d2:	d4b3      	bmi.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x478>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097d4:	f7fd f80c 	bl	80067f0 <HAL_GetTick>
 80097d8:	1bc0      	subs	r0, r0, r7
 80097da:	4548      	cmp	r0, r9
 80097dc:	d9f6      	bls.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80097de:	e7d5      	b.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097e0:	690a      	ldr	r2, [r1, #16]
 80097e2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80097e6:	e7b8      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x496>
 80097e8:	4626      	mov	r6, r4
 80097ea:	e7d1      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    switch(PeriphClkInit->Usart16ClockSelection)
 80097ec:	f023 0208 	bic.w	r2, r3, #8
 80097f0:	2a20      	cmp	r2, #32
 80097f2:	d001      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80097f4:	2b18      	cmp	r3, #24
 80097f6:	d1d5      	bne.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if(ret == HAL_OK)
 80097f8:	b99c      	cbnz	r4, 8009822 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80097fa:	4a0b      	ldr	r2, [pc, #44]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80097fc:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80097fe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009800:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8009804:	430b      	orrs	r3, r1
 8009806:	6553      	str	r3, [r2, #84]	; 0x54
 8009808:	e7ce      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800980a:	2101      	movs	r1, #1
 800980c:	1d28      	adds	r0, r5, #4
 800980e:	f7ff fc69 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009812:	4604      	mov	r4, r0
      break;
 8009814:	e7f0      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009816:	2101      	movs	r1, #1
 8009818:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800981c:	f7ff fcda 	bl	80091d4 <RCCEx_PLL3_Config>
 8009820:	e7f7      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8009822:	4626      	mov	r6, r4
 8009824:	e7c0      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8009826:	bf00      	nop
 8009828:	58024400 	.word	0x58024400
 800982c:	58024800 	.word	0x58024800
 8009830:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009834:	2101      	movs	r1, #1
 8009836:	1d28      	adds	r0, r5, #4
 8009838:	f7ff fc54 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800983c:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800983e:	b9fc      	cbnz	r4, 8009880 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009840:	4aaa      	ldr	r2, [pc, #680]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x828>)
 8009842:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8009844:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009846:	f023 0307 	bic.w	r3, r3, #7
 800984a:	430b      	orrs	r3, r1
 800984c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800984e:	682b      	ldr	r3, [r5, #0]
 8009850:	075f      	lsls	r7, r3, #29
 8009852:	d527      	bpl.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009854:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8009858:	2b05      	cmp	r3, #5
 800985a:	f200 812f 	bhi.w	8009abc <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 800985e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009862:	0016      	.short	0x0016
 8009864:	01270011 	.word	0x01270011
 8009868:	00160016 	.word	0x00160016
 800986c:	0016      	.short	0x0016
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800986e:	2101      	movs	r1, #1
 8009870:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009874:	f7ff fcae 	bl	80091d4 <RCCEx_PLL3_Config>
 8009878:	e7e0      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x578>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800987a:	2601      	movs	r6, #1
 800987c:	4634      	mov	r4, r6
 800987e:	e7e6      	b.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009880:	4626      	mov	r6, r4
 8009882:	e7e4      	b.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x58a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009884:	2101      	movs	r1, #1
 8009886:	1d28      	adds	r0, r5, #4
 8009888:	f7ff fc2c 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800988c:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800988e:	2c00      	cmp	r4, #0
 8009890:	f040 8117 	bne.w	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009894:	4a95      	ldr	r2, [pc, #596]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x828>)
 8009896:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 800989a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800989c:	f023 0307 	bic.w	r3, r3, #7
 80098a0:	430b      	orrs	r3, r1
 80098a2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80098a4:	682b      	ldr	r3, [r5, #0]
 80098a6:	0698      	lsls	r0, r3, #26
 80098a8:	d510      	bpl.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80098aa:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80098ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098b2:	f000 8123 	beq.w	8009afc <HAL_RCCEx_PeriphCLKConfig+0x838>
 80098b6:	f200 8106 	bhi.w	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 810c 	beq.w	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x814>
 80098c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098c4:	f000 8114 	beq.w	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80098c8:	2601      	movs	r6, #1
 80098ca:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	0659      	lsls	r1, r3, #25
 80098d0:	d510      	bpl.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80098d2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80098d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098da:	f000 8130 	beq.w	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80098de:	f200 8115 	bhi.w	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x848>
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f000 811b 	beq.w	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x85a>
 80098e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098ec:	f000 8121 	beq.w	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x86e>
 80098f0:	2601      	movs	r6, #1
 80098f2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	061a      	lsls	r2, r3, #24
 80098f8:	d510      	bpl.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x658>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80098fa:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80098fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009902:	f000 813d 	beq.w	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8009906:	f200 8122 	bhi.w	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x88a>
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 8128 	beq.w	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8009910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009914:	f000 812e 	beq.w	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8009918:	2601      	movs	r6, #1
 800991a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800991c:	682b      	ldr	r3, [r5, #0]
 800991e:	071b      	lsls	r3, r3, #28
 8009920:	d514      	bpl.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x688>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009922:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8009926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800992a:	d107      	bne.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x678>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800992c:	2102      	movs	r1, #2
 800992e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009932:	f7ff fc4f 	bl	80091d4 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8009936:	2800      	cmp	r0, #0
 8009938:	bf18      	it	ne
 800993a:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800993c:	4a6b      	ldr	r2, [pc, #428]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x828>)
 800993e:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8009942:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009944:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009948:	430b      	orrs	r3, r1
 800994a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800994c:	682b      	ldr	r3, [r5, #0]
 800994e:	06df      	lsls	r7, r3, #27
 8009950:	d514      	bpl.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009952:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8009956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800995a:	d107      	bne.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800995c:	2102      	movs	r1, #2
 800995e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009962:	f7ff fc37 	bl	80091d4 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8009966:	2800      	cmp	r0, #0
 8009968:	bf18      	it	ne
 800996a:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800996c:	4a5f      	ldr	r2, [pc, #380]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x828>)
 800996e:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8009972:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009978:	430b      	orrs	r3, r1
 800997a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	0318      	lsls	r0, r3, #12
 8009980:	d51a      	bpl.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->AdcClockSelection)
 8009982:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8009986:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800998a:	f000 8101 	beq.w	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800998e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8009992:	d006      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8009994:	2900      	cmp	r1, #0
 8009996:	f040 8101 	bne.w	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800999a:	1d28      	adds	r0, r5, #4
 800999c:	f7ff fba2 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80099a0:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80099a2:	2c00      	cmp	r4, #0
 80099a4:	f040 80fd 	bne.w	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80099a8:	4a50      	ldr	r2, [pc, #320]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x828>)
 80099aa:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 80099ae:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80099b0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80099b4:	430b      	orrs	r3, r1
 80099b6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80099b8:	682b      	ldr	r3, [r5, #0]
 80099ba:	0359      	lsls	r1, r3, #13
 80099bc:	d51c      	bpl.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x734>
    switch(PeriphClkInit->UsbClockSelection)
 80099be:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80099c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099c6:	f000 80ee 	beq.w	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80099ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80099ce:	d008      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 80099d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099d4:	f040 80ee 	bne.w	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099d8:	4a44      	ldr	r2, [pc, #272]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x828>)
 80099da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80099dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80099e2:	2c00      	cmp	r4, #0
 80099e4:	f040 80e9 	bne.w	8009bba <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099e8:	4a40      	ldr	r2, [pc, #256]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x828>)
 80099ea:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 80099ee:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80099f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80099f4:	430b      	orrs	r3, r1
 80099f6:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	03da      	lsls	r2, r3, #15
 80099fc:	d509      	bpl.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->SdmmcClockSelection)
 80099fe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 80dc 	beq.w	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 8009a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a0a:	f000 80e6 	beq.w	8009bda <HAL_RCCEx_PeriphCLKConfig+0x916>
 8009a0e:	2601      	movs	r6, #1
 8009a10:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a12:	682b      	ldr	r3, [r5, #0]
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	d507      	bpl.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x764>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009a18:	2102      	movs	r1, #2
 8009a1a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009a1e:	f7ff fbd9 	bl	80091d4 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8009a22:	2800      	cmp	r0, #0
 8009a24:	bf18      	it	ne
 8009a26:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	039f      	lsls	r7, r3, #14
 8009a2c:	d50a      	bpl.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x780>
    switch(PeriphClkInit->RngClockSelection)
 8009a2e:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8009a30:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009a34:	f000 80e7 	beq.w	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x942>
 8009a38:	f200 80d7 	bhi.w	8009bea <HAL_RCCEx_PeriphCLKConfig+0x926>
 8009a3c:	2900      	cmp	r1, #0
 8009a3e:	f000 80da 	beq.w	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8009a42:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009a44:	02dc      	lsls	r4, r3, #11
 8009a46:	d506      	bpl.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x792>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009a48:	4928      	ldr	r1, [pc, #160]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x828>)
 8009a4a:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8009a4c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009a4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009a52:	4302      	orrs	r2, r0
 8009a54:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009a56:	00d8      	lsls	r0, r3, #3
 8009a58:	d507      	bpl.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009a5a:	4924      	ldr	r1, [pc, #144]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x828>)
 8009a5c:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8009a60:	690a      	ldr	r2, [r1, #16]
 8009a62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a66:	4302      	orrs	r2, r0
 8009a68:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009a6a:	0299      	lsls	r1, r3, #10
 8009a6c:	d506      	bpl.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009a6e:	491f      	ldr	r1, [pc, #124]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x828>)
 8009a70:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8009a72:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009a74:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009a78:	4302      	orrs	r2, r0
 8009a7a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009a7c:	005a      	lsls	r2, r3, #1
 8009a7e:	d509      	bpl.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a80:	4a1a      	ldr	r2, [pc, #104]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x828>)
 8009a82:	6911      	ldr	r1, [r2, #16]
 8009a84:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8009a88:	6111      	str	r1, [r2, #16]
 8009a8a:	6911      	ldr	r1, [r2, #16]
 8009a8c:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8009a90:	4301      	orrs	r1, r0
 8009a92:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	da06      	bge.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a98:	4a14      	ldr	r2, [pc, #80]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x828>)
 8009a9a:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8009a9c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009a9e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009aa2:	430b      	orrs	r3, r1
 8009aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8009aa6:	1e30      	subs	r0, r6, #0
 8009aa8:	bf18      	it	ne
 8009aaa:	2001      	movne	r0, #1
 8009aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009ab6:	f7ff fb8d 	bl	80091d4 <RCCEx_PLL3_Config>
 8009aba:	e6e7      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009abc:	2601      	movs	r6, #1
 8009abe:	4634      	mov	r4, r6
 8009ac0:	e6f0      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8009ac2:	4626      	mov	r6, r4
 8009ac4:	e6ee      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009ac6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009aca:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009ace:	d003      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x814>
 8009ad0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ad4:	f47f aef8 	bne.w	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(ret == HAL_OK)
 8009ad8:	b9b4      	cbnz	r4, 8009b08 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ada:	4a04      	ldr	r2, [pc, #16]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x828>)
 8009adc:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8009ae0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009ae2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009ae6:	430b      	orrs	r3, r1
 8009ae8:	6553      	str	r3, [r2, #84]	; 0x54
 8009aea:	e6ef      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009aec:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009af0:	2100      	movs	r1, #0
 8009af2:	1d28      	adds	r0, r5, #4
 8009af4:	f7ff faf6 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009af8:	4604      	mov	r4, r0
      break;
 8009afa:	e7ed      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009afc:	2102      	movs	r1, #2
 8009afe:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009b02:	f7ff fb67 	bl	80091d4 <RCCEx_PLL3_Config>
 8009b06:	e7f7      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8009b08:	4626      	mov	r6, r4
 8009b0a:	e6df      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009b0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009b10:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009b14:	d003      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8009b16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b1a:	f47f aee9 	bne.w	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    if(ret == HAL_OK)
 8009b1e:	b9a4      	cbnz	r4, 8009b4a <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009b20:	4a3d      	ldr	r2, [pc, #244]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b22:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8009b26:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009b28:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009b2c:	430b      	orrs	r3, r1
 8009b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8009b30:	e6e0      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x630>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b32:	2100      	movs	r1, #0
 8009b34:	1d28      	adds	r0, r5, #4
 8009b36:	f7ff fad5 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b3a:	4604      	mov	r4, r0
      break;
 8009b3c:	e7ef      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x85a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b3e:	2102      	movs	r1, #2
 8009b40:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009b44:	f7ff fb46 	bl	80091d4 <RCCEx_PLL3_Config>
 8009b48:	e7f7      	b.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x876>
 8009b4a:	4626      	mov	r6, r4
 8009b4c:	e6d2      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009b4e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009b52:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009b56:	d003      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8009b58:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009b5c:	f47f aedc 	bne.w	8009918 <HAL_RCCEx_PeriphCLKConfig+0x654>
    if(ret == HAL_OK)
 8009b60:	b9a4      	cbnz	r4, 8009b8c <HAL_RCCEx_PeriphCLKConfig+0x8c8>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009b62:	4a2d      	ldr	r2, [pc, #180]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b64:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8009b68:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009b6a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009b6e:	430b      	orrs	r3, r1
 8009b70:	6593      	str	r3, [r2, #88]	; 0x58
 8009b72:	e6d3      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b74:	2100      	movs	r1, #0
 8009b76:	1d28      	adds	r0, r5, #4
 8009b78:	f7ff fab4 	bl	80090e4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b7c:	4604      	mov	r4, r0
      break;
 8009b7e:	e7ef      	b.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b80:	2102      	movs	r1, #2
 8009b82:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009b86:	f7ff fb25 	bl	80091d4 <RCCEx_PLL3_Config>
 8009b8a:	e7f7      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009b8c:	4626      	mov	r6, r4
 8009b8e:	e6c5      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b90:	2102      	movs	r1, #2
 8009b92:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009b96:	f7ff fb1d 	bl	80091d4 <RCCEx_PLL3_Config>
 8009b9a:	e701      	b.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
    switch(PeriphClkInit->AdcClockSelection)
 8009b9c:	2601      	movs	r6, #1
 8009b9e:	4634      	mov	r4, r6
 8009ba0:	e70a      	b.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8009ba2:	4626      	mov	r6, r4
 8009ba4:	e708      	b.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009bac:	f7ff fb12 	bl	80091d4 <RCCEx_PLL3_Config>
 8009bb0:	4604      	mov	r4, r0
      break;
 8009bb2:	e716      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x71e>
    switch(PeriphClkInit->UsbClockSelection)
 8009bb4:	2601      	movs	r6, #1
 8009bb6:	4634      	mov	r4, r6
 8009bb8:	e71e      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8009bba:	4626      	mov	r6, r4
 8009bbc:	e71c      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bbe:	4a16      	ldr	r2, [pc, #88]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bc0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009bc8:	b96c      	cbnz	r4, 8009be6 <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009bca:	4a13      	ldr	r2, [pc, #76]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bcc:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8009bce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bd4:	430b      	orrs	r3, r1
 8009bd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009bd8:	e71b      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009bda:	2102      	movs	r1, #2
 8009bdc:	1d28      	adds	r0, r5, #4
 8009bde:	f7ff fa81 	bl	80090e4 <RCCEx_PLL2_Config>
 8009be2:	4604      	mov	r4, r0
      break;
 8009be4:	e7f0      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8009be6:	4626      	mov	r6, r4
 8009be8:	e713      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->RngClockSelection)
 8009bea:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8009bee:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009bf2:	f47f af26 	bne.w	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x77e>
    if(ret == HAL_OK)
 8009bf6:	b964      	cbnz	r4, 8009c12 <HAL_RCCEx_PeriphCLKConfig+0x94e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009bf8:	4807      	ldr	r0, [pc, #28]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bfa:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8009bfc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009c00:	430a      	orrs	r2, r1
 8009c02:	6542      	str	r2, [r0, #84]	; 0x54
 8009c04:	e71e      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x780>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c06:	4804      	ldr	r0, [pc, #16]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c08:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009c0a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009c0e:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8009c10:	e7f1      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8009c12:	4626      	mov	r6, r4
 8009c14:	e716      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8009c16:	bf00      	nop
 8009c18:	58024400 	.word	0x58024400

08009c1c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8009c1c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009c1e:	f7ff fa1b 	bl	8009058 <HAL_RCC_GetHCLKFreq>
 8009c22:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8009c24:	4a05      	ldr	r2, [pc, #20]	; (8009c3c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009c2c:	5cd3      	ldrb	r3, [r2, r3]
 8009c2e:	f003 031f 	and.w	r3, r3, #31
}
 8009c32:	40d8      	lsrs	r0, r3
 8009c34:	bd08      	pop	{r3, pc}
 8009c36:	bf00      	nop
 8009c38:	58024400 	.word	0x58024400
 8009c3c:	0800f5fd 	.word	0x0800f5fd

08009c40 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c40:	4a4e      	ldr	r2, [pc, #312]	; (8009d7c <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 8009c42:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c44:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009c46:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009c48:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8009c4a:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009c4e:	f3c6 3105 	ubfx	r1, r6, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009c52:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8009c54:	f000 808d 	beq.w	8009d72 <HAL_RCCEx_GetPLL2ClockFreq+0x132>
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c58:	ee07 1a90 	vmov	s15, r1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009c5c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009c60:	f3c5 1100 	ubfx	r1, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c64:	f004 0403 	and.w	r4, r4, #3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009c6c:	434b      	muls	r3, r1
    switch (pllsource)
 8009c6e:	2c01      	cmp	r4, #1
 8009c70:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009c74:	ee07 3a90 	vmov	s15, r3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c78:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8009c7c:	d06b      	beq.n	8009d56 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 8009c7e:	2c02      	cmp	r4, #2
 8009c80:	d05b      	beq.n	8009d3a <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 8009c82:	2c00      	cmp	r4, #0
 8009c84:	d167      	bne.n	8009d56 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c86:	6813      	ldr	r3, [r2, #0]
 8009c88:	069b      	lsls	r3, r3, #26
 8009c8a:	d546      	bpl.n	8009d1a <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c8c:	6811      	ldr	r1, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c8e:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c90:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8009c94:	4a3a      	ldr	r2, [pc, #232]	; (8009d80 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c9a:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c9c:	ee07 2a10 	vmov	s14, r2
 8009ca0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8009ca4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009ca8:	ee06 3a90 	vmov	s13, r3
 8009cac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009cb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb4:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009cb8:	4a30      	ldr	r2, [pc, #192]	; (8009d7c <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009cba:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009cbe:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009cc0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009cc4:	ee07 3a10 	vmov	s14, r3
 8009cc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ccc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009cd0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009cd4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009cd8:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009cdc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009cde:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009ce2:	ee07 3a10 	vmov	s14, r3
 8009ce6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009cea:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009cee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009cf2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009cf6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009cfa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009cfc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009d00:	ee07 3a10 	vmov	s14, r3
 8009d04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d08:	ee37 6a06 	vadd.f32	s12, s14, s12
 8009d0c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8009d10:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009d14:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009d18:	bd70      	pop	{r4, r5, r6, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009d1c:	eddf 5a19 	vldr	s11, [pc, #100]	; 8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8009d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d24:	ee07 3a10 	vmov	s14, r3
 8009d28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d30:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d34:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009d38:	e7be      	b.n	8009cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x78>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d3a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009d3c:	eddf 5a12 	vldr	s11, [pc, #72]	; 8009d88 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8009d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d44:	ee07 3a10 	vmov	s14, r3
 8009d48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d50:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009d54:	e7ee      	b.n	8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d56:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009d58:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8009d8c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8009d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d60:	ee07 3a10 	vmov	s14, r3
 8009d64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d6c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009d70:	e7e0      	b.n	8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d72:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d76:	6081      	str	r1, [r0, #8]
}
 8009d78:	e7ce      	b.n	8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8009d7a:	bf00      	nop
 8009d7c:	58024400 	.word	0x58024400
 8009d80:	03d09000 	.word	0x03d09000
 8009d84:	4c742400 	.word	0x4c742400
 8009d88:	4bbebc20 	.word	0x4bbebc20
 8009d8c:	4a742400 	.word	0x4a742400

08009d90 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d90:	4a4e      	ldr	r2, [pc, #312]	; (8009ecc <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 8009d92:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d94:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009d96:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d98:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 8009d9a:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009d9e:	f3c6 5105 	ubfx	r1, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009da2:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8009da4:	f000 808d 	beq.w	8009ec2 <HAL_RCCEx_GetPLL3ClockFreq+0x132>
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009da8:	ee07 1a90 	vmov	s15, r1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009dac:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009db0:	f3c5 2100 	ubfx	r1, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009db4:	f004 0403 	and.w	r4, r4, #3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009db8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009dbc:	434b      	muls	r3, r1
    switch (pllsource)
 8009dbe:	2c01      	cmp	r4, #1
 8009dc0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009dc4:	ee07 3a90 	vmov	s15, r3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dc8:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8009dcc:	d06b      	beq.n	8009ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 8009dce:	2c02      	cmp	r4, #2
 8009dd0:	d05b      	beq.n	8009e8a <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 8009dd2:	2c00      	cmp	r4, #0
 8009dd4:	d167      	bne.n	8009ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dd6:	6813      	ldr	r3, [r2, #0]
 8009dd8:	069b      	lsls	r3, r3, #26
 8009dda:	d546      	bpl.n	8009e6a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ddc:	6811      	ldr	r1, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dde:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009de0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8009de4:	4a3a      	ldr	r2, [pc, #232]	; (8009ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009dea:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dec:	ee07 2a10 	vmov	s14, r2
 8009df0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8009df4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009df8:	ee06 3a90 	vmov	s13, r3
 8009dfc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e04:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009e08:	4a30      	ldr	r2, [pc, #192]	; (8009ecc <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009e0e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009e10:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009e14:	ee07 3a10 	vmov	s14, r3
 8009e18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009e1c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009e20:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009e24:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009e28:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009e2c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009e2e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009e32:	ee07 3a10 	vmov	s14, r3
 8009e36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009e3a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009e3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009e42:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009e46:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009e4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009e4c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009e50:	ee07 3a10 	vmov	s14, r3
 8009e54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009e58:	ee37 6a06 	vadd.f32	s12, s14, s12
 8009e5c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8009e60:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009e64:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009e68:	bd70      	pop	{r4, r5, r6, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e6a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009e6c:	eddf 5a19 	vldr	s11, [pc, #100]	; 8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8009e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e74:	ee07 3a10 	vmov	s14, r3
 8009e78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e80:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e84:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009e88:	e7be      	b.n	8009e08 <HAL_RCCEx_GetPLL3ClockFreq+0x78>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009e8c:	eddf 5a12 	vldr	s11, [pc, #72]	; 8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8009e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e94:	ee07 3a10 	vmov	s14, r3
 8009e98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ea0:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009ea4:	e7ee      	b.n	8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ea6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009ea8:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8009edc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8009eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb0:	ee07 3a10 	vmov	s14, r3
 8009eb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ebc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009ec0:	e7e0      	b.n	8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ec2:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ec6:	6081      	str	r1, [r0, #8]
}
 8009ec8:	e7ce      	b.n	8009e68 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8009eca:	bf00      	nop
 8009ecc:	58024400 	.word	0x58024400
 8009ed0:	03d09000 	.word	0x03d09000
 8009ed4:	4c742400 	.word	0x4c742400
 8009ed8:	4bbebc20 	.word	0x4bbebc20
 8009edc:	4a742400 	.word	0x4a742400

08009ee0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ee0:	4a4e      	ldr	r2, [pc, #312]	; (800a01c <HAL_RCCEx_GetPLL1ClockFreq+0x13c>)
{
 8009ee2:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ee4:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009ee6:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009ee8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 8009eea:	f416 7f7c 	tst.w	r6, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009eee:	f3c6 1105 	ubfx	r1, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009ef2:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8009ef4:	f000 808d 	beq.w	800a012 <HAL_RCCEx_GetPLL1ClockFreq+0x132>
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ef8:	ee07 1a90 	vmov	s15, r1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009efc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009f00:	f005 0101 	and.w	r1, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f04:	f004 0403 	and.w	r4, r4, #3
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009f0c:	434b      	muls	r3, r1
    switch (pllsource)
 8009f0e:	2c01      	cmp	r4, #1
 8009f10:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009f14:	ee07 3a90 	vmov	s15, r3
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f18:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8009f1c:	d06b      	beq.n	8009ff6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009f1e:	2c02      	cmp	r4, #2
 8009f20:	d05b      	beq.n	8009fda <HAL_RCCEx_GetPLL1ClockFreq+0xfa>
 8009f22:	2c00      	cmp	r4, #0
 8009f24:	d167      	bne.n	8009ff6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f26:	6813      	ldr	r3, [r2, #0]
 8009f28:	069b      	lsls	r3, r3, #26
 8009f2a:	d546      	bpl.n	8009fba <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f2c:	6811      	ldr	r1, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f2e:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f30:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8009f34:	4a3a      	ldr	r2, [pc, #232]	; (800a020 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f3a:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f3c:	ee07 2a10 	vmov	s14, r2
 8009f40:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8009f44:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009f48:	ee06 3a90 	vmov	s13, r3
 8009f4c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009f50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f54:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009f58:	4a30      	ldr	r2, [pc, #192]	; (800a01c <HAL_RCCEx_GetPLL1ClockFreq+0x13c>)
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009f5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009f60:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009f64:	ee07 3a10 	vmov	s14, r3
 8009f68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009f6c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009f70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009f74:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009f78:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009f7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009f7e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009f82:	ee07 3a10 	vmov	s14, r3
 8009f86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009f8a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009f8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009f92:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009f96:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009f9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009f9c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009fa0:	ee07 3a10 	vmov	s14, r3
 8009fa4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009fa8:	ee37 6a06 	vadd.f32	s12, s14, s12
 8009fac:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8009fb0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009fb4:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009fb8:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009fbc:	eddf 5a19 	vldr	s11, [pc, #100]	; 800a024 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8009fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc4:	ee07 3a10 	vmov	s14, r3
 8009fc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fd0:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fd4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009fd8:	e7be      	b.n	8009f58 <HAL_RCCEx_GetPLL1ClockFreq+0x78>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fda:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009fdc:	eddf 5a12 	vldr	s11, [pc, #72]	; 800a028 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8009fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe4:	ee07 3a10 	vmov	s14, r3
 8009fe8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ff0:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009ff4:	e7ee      	b.n	8009fd4 <HAL_RCCEx_GetPLL1ClockFreq+0xf4>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ff6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009ff8:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800a02c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8009ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a000:	ee07 3a10 	vmov	s14, r3
 800a004:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a00c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a010:	e7e0      	b.n	8009fd4 <HAL_RCCEx_GetPLL1ClockFreq+0xf4>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a012:	e9c0 1100 	strd	r1, r1, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a016:	6081      	str	r1, [r0, #8]
}
 800a018:	e7ce      	b.n	8009fb8 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 800a01a:	bf00      	nop
 800a01c:	58024400 	.word	0x58024400
 800a020:	03d09000 	.word	0x03d09000
 800a024:	4c742400 	.word	0x4c742400
 800a028:	4bbebc20 	.word	0x4bbebc20
 800a02c:	4a742400 	.word	0x4a742400

0800a030 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a030:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800a034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a036:	d113      	bne.n	800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a038:	4a67      	ldr	r2, [pc, #412]	; (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800a03a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a03c:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 800a040:	2b04      	cmp	r3, #4
 800a042:	d81b      	bhi.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 800a044:	e8df f003 	tbb	[pc, r3]
 800a048:	c2088203 	.word	0xc2088203
 800a04c:	22          	.byte	0x22
 800a04d:	00          	.byte	0x00
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a04e:	a801      	add	r0, sp, #4
 800a050:	f7ff ff46 	bl	8009ee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a054:	9802      	ldr	r0, [sp, #8]
          break;
 800a056:	e07d      	b.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a058:	a801      	add	r0, sp, #4
 800a05a:	f7ff fe99 	bl	8009d90 <HAL_RCCEx_GetPLL3ClockFreq>
 800a05e:	e078      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a060:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a064:	d121      	bne.n	800a0aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a066:	4a5c      	ldr	r2, [pc, #368]	; (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800a068:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a06a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800a06e:	2b80      	cmp	r3, #128	; 0x80
 800a070:	d0f2      	beq.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800a072:	d805      	bhi.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 800a074:	2b00      	cmp	r3, #0
 800a076:	d0ea      	beq.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a078:	2b40      	cmp	r3, #64	; 0x40
      switch (srcclk)
 800a07a:	d067      	beq.n	800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
      frequency = 0;
 800a07c:	2000      	movs	r0, #0
 800a07e:	e069      	b.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      switch (saiclocksource)
 800a080:	2bc0      	cmp	r3, #192	; 0xc0
 800a082:	f000 80a3 	beq.w	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 800a086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
      switch (srcclk)
 800a08a:	d1f7      	bne.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a08c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a08e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800a092:	f000 809d 	beq.w	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a09a:	f000 809b 	beq.w	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
            frequency = HSE_VALUE;
 800a09e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
          frequency = HSE_VALUE;
 800a0a2:	484e      	ldr	r0, [pc, #312]	; (800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800a0a4:	bf18      	it	ne
 800a0a6:	2000      	movne	r0, #0
 800a0a8:	e054      	b.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a0aa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a0ae:	d112      	bne.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a0b0:	4a49      	ldr	r2, [pc, #292]	; (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800a0b2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a0b4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 800a0b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0bc:	d0cc      	beq.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800a0be:	d804      	bhi.n	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d0c4      	beq.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a0c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0c8:	e7d7      	b.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800a0ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a0ce:	d07d      	beq.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 800a0d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a0d4:	e7d9      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a0d6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800a0da:	d112      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a0dc:	4a3e      	ldr	r2, [pc, #248]	; (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800a0de:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a0e0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800a0e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0e8:	d0b6      	beq.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800a0ea:	d804      	bhi.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d0ae      	beq.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a0f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a0f4:	e7c1      	b.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800a0f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0fa:	d067      	beq.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 800a0fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a100:	e7c3      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a102:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800a106:	d112      	bne.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a108:	4a33      	ldr	r2, [pc, #204]	; (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800a10a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a10c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800a110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a114:	d0a0      	beq.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800a116:	d804      	bhi.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d098      	beq.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800a11c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a120:	e7ab      	b.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800a122:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a126:	d051      	beq.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 800a128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a12c:	e7ad      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a12e:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800a132:	d117      	bne.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a134:	4a28      	ldr	r2, [pc, #160]	; (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800a136:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800a13c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a140:	d00b      	beq.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800a142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a146:	d0a1      	beq.n	800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d197      	bne.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a14c:	a801      	add	r0, sp, #4
 800a14e:	f7ff fd77 	bl	8009c40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a152:	9801      	ldr	r0, [sp, #4]
}
 800a154:	b005      	add	sp, #20
 800a156:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a15a:	a801      	add	r0, sp, #4
 800a15c:	f7ff fe18 	bl	8009d90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a160:	9803      	ldr	r0, [sp, #12]
          break;
 800a162:	e7f7      	b.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a164:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800a168:	d108      	bne.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a16a:	4b1b      	ldr	r3, [pc, #108]	; (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800a16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 800a16e:	03db      	lsls	r3, r3, #15
 800a170:	f57f af6d 	bpl.w	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a174:	a801      	add	r0, sp, #4
 800a176:	f7ff fd63 	bl	8009c40 <HAL_RCCEx_GetPLL2ClockFreq>
 800a17a:	e7f1      	b.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a17c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800a180:	f47f af7c 	bne.w	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a184:	4b14      	ldr	r3, [pc, #80]	; (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800a186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a188:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800a18c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a190:	d01e      	beq.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800a192:	d80d      	bhi.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 800a194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a198:	d010      	beq.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800a19a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a19e:	d011      	beq.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f47f af6b 	bne.w	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
}
 800a1a6:	b005      	add	sp, #20
 800a1a8:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a1ac:	f7ff bd36 	b.w	8009c1c <HAL_RCCEx_GetD3PCLK1Freq>
      switch (srcclk)
 800a1b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b4:	d00e      	beq.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = HSE_VALUE;
 800a1b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1ba:	e772      	b.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1bc:	a801      	add	r0, sp, #4
 800a1be:	f7ff fd3f 	bl	8009c40 <HAL_RCCEx_GetPLL2ClockFreq>
 800a1c2:	e747      	b.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1c4:	a801      	add	r0, sp, #4
 800a1c6:	f7ff fde3 	bl	8009d90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a1ca:	e743      	b.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = EXTERNAL_CLOCK_VALUE;
 800a1cc:	4804      	ldr	r0, [pc, #16]	; (800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 800a1ce:	e7c1      	b.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
          frequency = HSI_VALUE;
 800a1d0:	4804      	ldr	r0, [pc, #16]	; (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800a1d2:	e7bf      	b.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      switch (srcclk)
 800a1d4:	4804      	ldr	r0, [pc, #16]	; (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800a1d6:	e7bd      	b.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a1d8:	58024400 	.word	0x58024400
 800a1dc:	017d7840 	.word	0x017d7840
 800a1e0:	00bb8000 	.word	0x00bb8000
 800a1e4:	03d09000 	.word	0x03d09000
 800a1e8:	003d0900 	.word	0x003d0900

0800a1ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a1f6:	f7fc fafb 	bl	80067f0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a1fa:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800a1fc:	4681      	mov	r9, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a1fe:	6828      	ldr	r0, [r5, #0]
 800a200:	f001 fd50 	bl	800bca4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a204:	4604      	mov	r4, r0
 800a206:	bb48      	cbnz	r0, 800a25c <SD_FindSCR+0x70>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a208:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800a20a:	6828      	ldr	r0, [r5, #0]
 800a20c:	0409      	lsls	r1, r1, #16
 800a20e:	f001 fe6f 	bl	800bef0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a212:	4604      	mov	r4, r0
 800a214:	bb10      	cbnz	r0, 800a25c <SD_FindSCR+0x70>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 800a216:	f04f 30ff 	mov.w	r0, #4294967295
 800a21a:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a21c:	2630      	movs	r6, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a21e:	4669      	mov	r1, sp
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a220:	9404      	str	r4, [sp, #16]
  config.DataLength    = 8U;
 800a222:	e9cd 0300 	strd	r0, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a226:	2302      	movs	r3, #2
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a228:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a22a:	e9cd 6302 	strd	r6, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a22e:	2301      	movs	r3, #1
 800a230:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a232:	f001 fd24 	bl	800bc7e <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a236:	6828      	ldr	r0, [r5, #0]
 800a238:	f001 fea2 	bl	800bf80 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a23c:	4604      	mov	r4, r0
 800a23e:	b968      	cbnz	r0, 800a25c <SD_FindSCR+0x70>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a240:	4607      	mov	r7, r0
 800a242:	4606      	mov	r6, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a244:	f240 5a2a 	movw	sl, #1322	; 0x52a
 800a248:	6828      	ldr	r0, [r5, #0]
 800a24a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a24c:	ea12 0f0a 	tst.w	r2, sl
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a250:	6b42      	ldr	r2, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a252:	d007      	beq.n	800a264 <SD_FindSCR+0x78>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a254:	0712      	lsls	r2, r2, #28
 800a256:	d519      	bpl.n	800a28c <SD_FindSCR+0xa0>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a258:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a25a:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800a25c:	4620      	mov	r0, r4
 800a25e:	b006      	add	sp, #24
 800a260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a264:	0311      	lsls	r1, r2, #12
 800a266:	d408      	bmi.n	800a27a <SD_FindSCR+0x8e>
 800a268:	b93c      	cbnz	r4, 800a27a <SD_FindSCR+0x8e>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a26a:	f001 fcd9 	bl	800bc20 <SDMMC_ReadFIFO>
 800a26e:	4606      	mov	r6, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a270:	6828      	ldr	r0, [r5, #0]
      index++;
 800a272:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a274:	f001 fcd4 	bl	800bc20 <SDMMC_ReadFIFO>
 800a278:	4607      	mov	r7, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a27a:	f7fc fab9 	bl	80067f0 <HAL_GetTick>
 800a27e:	eba0 0009 	sub.w	r0, r0, r9
 800a282:	3001      	adds	r0, #1
 800a284:	d1e0      	bne.n	800a248 <SD_FindSCR+0x5c>
      return HAL_SD_ERROR_TIMEOUT;
 800a286:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a28a:	e7e7      	b.n	800a25c <SD_FindSCR+0x70>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a28c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a28e:	0793      	lsls	r3, r2, #30
 800a290:	d501      	bpl.n	800a296 <SD_FindSCR+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a292:	2402      	movs	r4, #2
 800a294:	e7e1      	b.n	800a25a <SD_FindSCR+0x6e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a296:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a298:	f014 0420 	ands.w	r4, r4, #32
 800a29c:	d001      	beq.n	800a2a2 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a29e:	2420      	movs	r4, #32
 800a2a0:	e7db      	b.n	800a25a <SD_FindSCR+0x6e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a2a2:	4a04      	ldr	r2, [pc, #16]	; (800a2b4 <SD_FindSCR+0xc8>)
 800a2a4:	ba3f      	rev	r7, r7
 800a2a6:	ba36      	rev	r6, r6
 800a2a8:	6382      	str	r2, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a2aa:	f8c8 7000 	str.w	r7, [r8]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a2ae:	f8c8 6004 	str.w	r6, [r8, #4]
  return HAL_SD_ERROR_NONE;
 800a2b2:	e7d3      	b.n	800a25c <SD_FindSCR+0x70>
 800a2b4:	18000f3a 	.word	0x18000f3a

0800a2b8 <HAL_SD_ReadBlocks>:
{
 800a2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2bc:	460e      	mov	r6, r1
 800a2be:	b087      	sub	sp, #28
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	4692      	mov	sl, r2
 800a2c4:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800a2c6:	f7fc fa93 	bl	80067f0 <HAL_GetTick>
 800a2ca:	4681      	mov	r9, r0
  if(NULL == pData)
 800a2cc:	b936      	cbnz	r6, 800a2dc <HAL_SD_ReadBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a2ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 800a2d4:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a2d8:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800a2da:	e011      	b.n	800a300 <HAL_SD_ReadBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 800a2dc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	fa5f f883 	uxtb.w	r8, r3
 800a2e6:	f040 80c1 	bne.w	800a46c <HAL_SD_ReadBlocks+0x1b4>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a2ea:	eb0a 0307 	add.w	r3, sl, r7
 800a2ee:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2f0:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a2f2:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2f4:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a2f6:	d907      	bls.n	800a308 <HAL_SD_ReadBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a2f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a2fe:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800a300:	4640      	mov	r0, r8
 800a302:	b007      	add	sp, #28
 800a304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 800a308:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a30a:	2502      	movs	r5, #2
    hsd->Instance->DCTRL = 0U;
 800a30c:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800a30e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a312:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 800a314:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a316:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a318:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a31a:	f04f 33ff 	mov.w	r3, #4294967295
 800a31e:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a320:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= 512U;
 800a324:	bf18      	it	ne
 800a326:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a32a:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a32c:	2390      	movs	r3, #144	; 0x90
 800a32e:	e9cd 3502 	strd	r3, r5, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a332:	2300      	movs	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a334:	e9cd 3304 	strd	r3, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a338:	f001 fca1 	bl	800bc7e <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a33c:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 800a33e:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a340:	68c3      	ldr	r3, [r0, #12]
 800a342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a346:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 800a348:	d910      	bls.n	800a36c <HAL_SD_ReadBlocks+0xb4>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a34a:	4651      	mov	r1, sl
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a34c:	6325      	str	r5, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a34e:	f001 fcdb 	bl	800bd08 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a352:	b188      	cbz	r0, 800a378 <HAL_SD_ReadBlocks+0xc0>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	4a47      	ldr	r2, [pc, #284]	; (800a474 <HAL_SD_ReadBlocks+0x1bc>)
 800a358:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a35a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a35c:	4318      	orrs	r0, r3
 800a35e:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a360:	2301      	movs	r3, #1
 800a362:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a366:	2300      	movs	r3, #0
 800a368:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800a36a:	e7c9      	b.n	800a300 <HAL_SD_ReadBlocks+0x48>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a36c:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a36e:	4651      	mov	r1, sl
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a370:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a372:	f001 fcb0 	bl	800bcd6 <SDMMC_CmdReadSingleBlock>
 800a376:	e7ec      	b.n	800a352 <HAL_SD_ReadBlocks+0x9a>
    dataremaining = config.DataLength;
 800a378:	9d01      	ldr	r5, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a37a:	6820      	ldr	r0, [r4, #0]
 800a37c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a37e:	f413 7f95 	tst.w	r3, #298	; 0x12a
 800a382:	d01b      	beq.n	800a3bc <HAL_SD_ReadBlocks+0x104>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a384:	68c3      	ldr	r3, [r0, #12]
 800a386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a38a:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a38c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a38e:	05db      	lsls	r3, r3, #23
 800a390:	d508      	bpl.n	800a3a4 <HAL_SD_ReadBlocks+0xec>
 800a392:	2f01      	cmp	r7, #1
 800a394:	d906      	bls.n	800a3a4 <HAL_SD_ReadBlocks+0xec>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a396:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d003      	beq.n	800a3a4 <HAL_SD_ReadBlocks+0xec>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a39c:	f001 fd00 	bl	800bda0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d1d7      	bne.n	800a354 <HAL_SD_ReadBlocks+0x9c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a3a8:	f010 0008 	ands.w	r0, r0, #8
 800a3ac:	d039      	beq.n	800a422 <HAL_SD_ReadBlocks+0x16a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3ae:	4a31      	ldr	r2, [pc, #196]	; (800a474 <HAL_SD_ReadBlocks+0x1bc>)
 800a3b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a3b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3b4:	f043 0308 	orr.w	r3, r3, #8
 800a3b8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a3ba:	e7d1      	b.n	800a360 <HAL_SD_ReadBlocks+0xa8>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800a3bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a3be:	041a      	lsls	r2, r3, #16
 800a3c0:	d519      	bpl.n	800a3f6 <HAL_SD_ReadBlocks+0x13e>
 800a3c2:	2d1f      	cmp	r5, #31
 800a3c4:	d917      	bls.n	800a3f6 <HAL_SD_ReadBlocks+0x13e>
 800a3c6:	f106 0a04 	add.w	sl, r6, #4
 800a3ca:	f106 0b24 	add.w	fp, r6, #36	; 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 800a3ce:	6820      	ldr	r0, [r4, #0]
        for(count = 0U; count < 8U; count++)
 800a3d0:	f10a 0a04 	add.w	sl, sl, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 800a3d4:	f001 fc24 	bl	800bc20 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a3d8:	f80a 0c08 	strb.w	r0, [sl, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a3dc:	0a02      	lsrs	r2, r0, #8
 800a3de:	f80a 2c07 	strb.w	r2, [sl, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a3e2:	0c02      	lsrs	r2, r0, #16
 800a3e4:	f80a 2c06 	strb.w	r2, [sl, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a3e8:	0e02      	lsrs	r2, r0, #24
 800a3ea:	f80a 2c05 	strb.w	r2, [sl, #-5]
        for(count = 0U; count < 8U; count++)
 800a3ee:	45da      	cmp	sl, fp
 800a3f0:	d1ed      	bne.n	800a3ce <HAL_SD_ReadBlocks+0x116>
          tempbuff++;
 800a3f2:	3620      	adds	r6, #32
        dataremaining -= 32U;
 800a3f4:	3d20      	subs	r5, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a3f6:	f7fc f9fb 	bl	80067f0 <HAL_GetTick>
 800a3fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3fc:	eba0 0009 	sub.w	r0, r0, r9
 800a400:	4298      	cmp	r0, r3
 800a402:	d3ba      	bcc.n	800a37a <HAL_SD_ReadBlocks+0xc2>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a404:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 800a406:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a40a:	4a1a      	ldr	r2, [pc, #104]	; (800a474 <HAL_SD_ReadBlocks+0x1bc>)
 800a40c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a40e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a414:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a416:	2301      	movs	r3, #1
 800a418:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a41c:	2300      	movs	r3, #0
 800a41e:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800a420:	e76e      	b.n	800a300 <HAL_SD_ReadBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a422:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a424:	f011 0102 	ands.w	r1, r1, #2
 800a428:	d00a      	beq.n	800a440 <HAL_SD_ReadBlocks+0x188>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a42a:	4a12      	ldr	r2, [pc, #72]	; (800a474 <HAL_SD_ReadBlocks+0x1bc>)
 800a42c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a42e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a430:	f043 0302 	orr.w	r3, r3, #2
 800a434:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a436:	2301      	movs	r3, #1
 800a438:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a43c:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 800a43e:	e75f      	b.n	800a300 <HAL_SD_ReadBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a442:	f012 0220 	ands.w	r2, r2, #32
 800a446:	d00a      	beq.n	800a45e <HAL_SD_ReadBlocks+0x1a6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a448:	4a0a      	ldr	r2, [pc, #40]	; (800a474 <HAL_SD_ReadBlocks+0x1bc>)
 800a44a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a44c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a44e:	f043 0320 	orr.w	r3, r3, #32
 800a452:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a454:	2301      	movs	r3, #1
 800a456:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a45a:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800a45c:	e750      	b.n	800a300 <HAL_SD_ReadBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a45e:	4906      	ldr	r1, [pc, #24]	; (800a478 <HAL_SD_ReadBlocks+0x1c0>)
    return HAL_OK;
 800a460:	4690      	mov	r8, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a462:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a464:	2301      	movs	r3, #1
 800a466:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800a46a:	e749      	b.n	800a300 <HAL_SD_ReadBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a46c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a46e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a472:	e72f      	b.n	800a2d4 <HAL_SD_ReadBlocks+0x1c>
 800a474:	1fe00fff 	.word	0x1fe00fff
 800a478:	18000f3a 	.word	0x18000f3a

0800a47c <HAL_SD_WriteBlocks>:
{
 800a47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a480:	460d      	mov	r5, r1
 800a482:	b089      	sub	sp, #36	; 0x24
 800a484:	4604      	mov	r4, r0
 800a486:	4692      	mov	sl, r2
 800a488:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800a48a:	f7fc f9b1 	bl	80067f0 <HAL_GetTick>
 800a48e:	4681      	mov	r9, r0
  if(NULL == pData)
 800a490:	b935      	cbnz	r5, 800a4a0 <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a492:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a494:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 800a498:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a49c:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800a49e:	e011      	b.n	800a4c4 <HAL_SD_WriteBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 800a4a0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	fa5f f883 	uxtb.w	r8, r3
 800a4aa:	f040 80b3 	bne.w	800a614 <HAL_SD_WriteBlocks+0x198>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a4ae:	eb0a 0307 	add.w	r3, sl, r7
 800a4b2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a4b4:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a4b6:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a4b8:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a4ba:	d907      	bls.n	800a4cc <HAL_SD_WriteBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a4bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a4c2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800a4c4:	4640      	mov	r0, r8
 800a4c6:	b009      	add	sp, #36	; 0x24
 800a4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 800a4cc:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 800a4ce:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800a4d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a4d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 800a4d6:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a4d8:	2190      	movs	r1, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a4da:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e0:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a4e2:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= 512U;
 800a4e6:	bf18      	it	ne
 800a4e8:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a4ec:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	e9cd 1304 	strd	r1, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4f4:	a902      	add	r1, sp, #8
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a4f6:	e9cd 3306 	strd	r3, r3, [sp, #24]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4fa:	f001 fbc0 	bl	800bc7e <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a4fe:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 800a500:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a502:	68c3      	ldr	r3, [r0, #12]
 800a504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a508:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 800a50a:	d911      	bls.n	800a530 <HAL_SD_WriteBlocks+0xb4>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a50c:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a50e:	4651      	mov	r1, sl
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a510:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a512:	f001 fc2b 	bl	800bd6c <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a516:	b188      	cbz	r0, 800a53c <HAL_SD_WriteBlocks+0xc0>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	4a40      	ldr	r2, [pc, #256]	; (800a61c <HAL_SD_WriteBlocks+0x1a0>)
 800a51c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a51e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a520:	4318      	orrs	r0, r3
 800a522:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a524:	2301      	movs	r3, #1
 800a526:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a52a:	2300      	movs	r3, #0
 800a52c:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800a52e:	e7c9      	b.n	800a4c4 <HAL_SD_WriteBlocks+0x48>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a530:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a532:	4651      	mov	r1, sl
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a534:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a536:	f001 fc00 	bl	800bd3a <SDMMC_CmdWriteSingleBlock>
 800a53a:	e7ec      	b.n	800a516 <HAL_SD_WriteBlocks+0x9a>
    dataremaining = config.DataLength;
 800a53c:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a53e:	6820      	ldr	r0, [r4, #0]
 800a540:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a542:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800a546:	d01b      	beq.n	800a580 <HAL_SD_WriteBlocks+0x104>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a548:	68c3      	ldr	r3, [r0, #12]
 800a54a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a54e:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a550:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a552:	05db      	lsls	r3, r3, #23
 800a554:	d508      	bpl.n	800a568 <HAL_SD_WriteBlocks+0xec>
 800a556:	2f01      	cmp	r7, #1
 800a558:	d906      	bls.n	800a568 <HAL_SD_WriteBlocks+0xec>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a55a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a55c:	2b03      	cmp	r3, #3
 800a55e:	d003      	beq.n	800a568 <HAL_SD_WriteBlocks+0xec>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a560:	f001 fc1e 	bl	800bda0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800a564:	2800      	cmp	r0, #0
 800a566:	d1d7      	bne.n	800a518 <HAL_SD_WriteBlocks+0x9c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a56c:	f010 0008 	ands.w	r0, r0, #8
 800a570:	d02b      	beq.n	800a5ca <HAL_SD_WriteBlocks+0x14e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a572:	4a2a      	ldr	r2, [pc, #168]	; (800a61c <HAL_SD_WriteBlocks+0x1a0>)
 800a574:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a576:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a578:	f043 0308 	orr.w	r3, r3, #8
 800a57c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a57e:	e7d1      	b.n	800a524 <HAL_SD_WriteBlocks+0xa8>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800a580:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a582:	045a      	lsls	r2, r3, #17
 800a584:	d50d      	bpl.n	800a5a2 <HAL_SD_WriteBlocks+0x126>
 800a586:	2e1f      	cmp	r6, #31
 800a588:	d90b      	bls.n	800a5a2 <HAL_SD_WriteBlocks+0x126>
 800a58a:	f105 0b20 	add.w	fp, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a58e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a592:	a901      	add	r1, sp, #4
 800a594:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a596:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a598:	f001 fb45 	bl	800bc26 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a59c:	45ab      	cmp	fp, r5
 800a59e:	d1f6      	bne.n	800a58e <HAL_SD_WriteBlocks+0x112>
        dataremaining -= 32U;
 800a5a0:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a5a2:	f7fc f925 	bl	80067f0 <HAL_GetTick>
 800a5a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5a8:	eba0 0009 	sub.w	r0, r0, r9
 800a5ac:	4298      	cmp	r0, r3
 800a5ae:	d3c6      	bcc.n	800a53e <HAL_SD_WriteBlocks+0xc2>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5b0:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 800a5b2:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5b6:	4a19      	ldr	r2, [pc, #100]	; (800a61c <HAL_SD_WriteBlocks+0x1a0>)
 800a5b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a5ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5bc:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800a5c8:	e77c      	b.n	800a4c4 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a5ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a5cc:	f011 0102 	ands.w	r1, r1, #2
 800a5d0:	d00a      	beq.n	800a5e8 <HAL_SD_WriteBlocks+0x16c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5d2:	4a12      	ldr	r2, [pc, #72]	; (800a61c <HAL_SD_WriteBlocks+0x1a0>)
 800a5d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a5d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5d8:	f043 0302 	orr.w	r3, r3, #2
 800a5dc:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a5e4:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 800a5e6:	e76d      	b.n	800a4c4 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a5e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5ea:	f012 0210 	ands.w	r2, r2, #16
 800a5ee:	d00a      	beq.n	800a606 <HAL_SD_WriteBlocks+0x18a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5f0:	4a0a      	ldr	r2, [pc, #40]	; (800a61c <HAL_SD_WriteBlocks+0x1a0>)
 800a5f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a5f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5f6:	f043 0310 	orr.w	r3, r3, #16
 800a5fa:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a602:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800a604:	e75e      	b.n	800a4c4 <HAL_SD_WriteBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a606:	4906      	ldr	r1, [pc, #24]	; (800a620 <HAL_SD_WriteBlocks+0x1a4>)
    return HAL_OK;
 800a608:	4690      	mov	r8, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a60a:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a60c:	2301      	movs	r3, #1
 800a60e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800a612:	e757      	b.n	800a4c4 <HAL_SD_WriteBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a614:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a616:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a61a:	e73d      	b.n	800a498 <HAL_SD_WriteBlocks+0x1c>
 800a61c:	1fe00fff 	.word	0x1fe00fff
 800a620:	18000f3a 	.word	0x18000f3a

0800a624 <HAL_SD_ErrorCallback>:
 800a624:	4770      	bx	lr

0800a626 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800a626:	4770      	bx	lr

0800a628 <HAL_SD_DeInit>:
{
 800a628:	b510      	push	{r4, lr}
  if(hsd == NULL)
 800a62a:	4604      	mov	r4, r0
 800a62c:	b198      	cbz	r0, 800a656 <HAL_SD_DeInit+0x2e>
  hsd->State = HAL_SD_STATE_BUSY;
 800a62e:	2303      	movs	r3, #3
 800a630:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a634:	6983      	ldr	r3, [r0, #24]
 800a636:	2b02      	cmp	r3, #2
 800a638:	d102      	bne.n	800a640 <HAL_SD_DeInit+0x18>
    HAL_SD_DriveTransceiver_1_8V_Callback(RESET);
 800a63a:	2000      	movs	r0, #0
 800a63c:	f7ff fff3 	bl	800a626 <HAL_SD_DriveTransceiver_1_8V_Callback>
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 800a640:	6820      	ldr	r0, [r4, #0]
 800a642:	f001 fafb 	bl	800bc3c <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 800a646:	4620      	mov	r0, r4
 800a648:	f7f9 fa9a 	bl	8003b80 <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a64c:	2000      	movs	r0, #0
 800a64e:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 800a650:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 800a654:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a656:	2001      	movs	r0, #1
 800a658:	e7fc      	b.n	800a654 <HAL_SD_DeInit+0x2c>
	...

0800a65c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a65c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800a65e:	0f9a      	lsrs	r2, r3, #30
 800a660:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a662:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800a666:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a668:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800a66c:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a66e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a672:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a674:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a678:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a67a:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a67c:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a67e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a680:	0d1a      	lsrs	r2, r3, #20
 800a682:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a684:	f3c3 4203 	ubfx	r2, r3, #16, #4
 800a688:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a68a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800a68e:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a690:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800a694:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a696:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800a69a:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a69c:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800a6a0:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a6a6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 800a6a8:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a6aa:	2a00      	cmp	r2, #0
 800a6ac:	d16c      	bne.n	800a788 <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a6ae:	f640 74fc 	movw	r4, #4092	; 0xffc
 800a6b2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800a6b4:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 800a6b8:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800a6bc:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a6be:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800a6c2:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a6c4:	f3c2 6302 	ubfx	r3, r2, #24, #3
 800a6c8:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a6ca:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800a6ce:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a6d0:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a6d4:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a6d8:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a6da:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a6dc:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a6de:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a6e0:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a6e2:	f002 0207 	and.w	r2, r2, #7
 800a6e6:	3202      	adds	r2, #2
 800a6e8:	fa03 f202 	lsl.w	r2, r3, r2
 800a6ec:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a6ee:	7a0b      	ldrb	r3, [r1, #8]
 800a6f0:	f003 040f 	and.w	r4, r3, #15
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	40a3      	lsls	r3, r4
 800a6f8:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a6fa:	0a5b      	lsrs	r3, r3, #9
 800a6fc:	4353      	muls	r3, r2
 800a6fe:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800a700:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a704:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a706:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a708:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800a70c:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a70e:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a716:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a718:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a71a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->Reserved3 = 0;
 800a71c:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a71e:	0fda      	lsrs	r2, r3, #31
 800a720:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a722:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800a726:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a728:	f3c3 6282 	ubfx	r2, r3, #26, #3
 800a72c:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a72e:	f3c3 5283 	ubfx	r2, r3, #22, #4
 800a732:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a734:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800a738:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a73c:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 800a740:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a744:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a748:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800a74c:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a750:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800a754:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a758:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800a75c:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a760:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800a764:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a768:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800a76c:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a770:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a774:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a778:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a77c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800a780:	2301      	movs	r3, #1
 800a782:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 800a786:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a788:	2a01      	cmp	r2, #1
 800a78a:	d10f      	bne.n	800a7ac <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a78c:	041b      	lsls	r3, r3, #16
 800a78e:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 800a792:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a796:	4313      	orrs	r3, r2
 800a798:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a79a:	690b      	ldr	r3, [r1, #16]
 800a79c:	3301      	adds	r3, #1
 800a79e:	029b      	lsls	r3, r3, #10
 800a7a0:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a7a2:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800a7a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7a8:	6503      	str	r3, [r0, #80]	; 0x50
 800a7aa:	e7ab      	b.n	800a704 <HAL_SD_GetCardCSD+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7ac:	6803      	ldr	r3, [r0, #0]
 800a7ae:	4a05      	ldr	r2, [pc, #20]	; (800a7c4 <HAL_SD_GetCardCSD+0x168>)
 800a7b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a7b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a7b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7b8:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	e7e0      	b.n	800a786 <HAL_SD_GetCardCSD+0x12a>
 800a7c4:	1fe00fff 	.word	0x1fe00fff

0800a7c8 <HAL_SD_InitCard>:
{
 800a7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a7cc:	2300      	movs	r3, #0
{
 800a7ce:	b098      	sub	sp, #96	; 0x60
 800a7d0:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a7d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800a7d6:	4ea2      	ldr	r6, [pc, #648]	; (800aa60 <HAL_SD_InitCard+0x298>)
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a7d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a7dc:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a7e0:	f7ff fc26 	bl	800a030 <HAL_RCCEx_GetPeriphCLKFreq>
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a7e4:	69a3      	ldr	r3, [r4, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a7e6:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800a7e8:	6827      	ldr	r7, [r4, #0]
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a7ea:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800a7ec:	fbb0 f6f6 	udiv	r6, r0, r6
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a7f0:	d103      	bne.n	800a7fa <HAL_SD_InitCard+0x32>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	f043 0310 	orr.w	r3, r3, #16
 800a7f8:	603b      	str	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 800a7fa:	ab0a      	add	r3, sp, #40	; 0x28
 800a7fc:	960b      	str	r6, [sp, #44]	; 0x2c
 800a7fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a802:	ab07      	add	r3, sp, #28
 800a804:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a808:	4638      	mov	r0, r7
 800a80a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a80c:	f001 f9ee 	bl	800bbec <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a810:	6820      	ldr	r0, [r4, #0]
 800a812:	f001 fa0d 	bl	800bc30 <SDMMC_PowerState_ON>
  if(sdmmc_clk != 0U)
 800a816:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800a81a:	ea4f 0046 	mov.w	r0, r6, lsl #1
    HAL_Delay(2U);
 800a81e:	bf31      	iteee	cc
 800a820:	2002      	movcc	r0, #2
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800a822:	fbb5 f5f0 	udivcs	r5, r5, r0
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800a826:	488f      	ldrcs	r0, [pc, #572]	; (800aa64 <HAL_SD_InitCard+0x29c>)
 800a828:	fbb0 f0f5 	udivcs	r0, r0, r5
 800a82c:	bf28      	it	cs
 800a82e:	3001      	addcs	r0, #1
    HAL_Delay(2U);
 800a830:	f7fb ffe4 	bl	80067fc <HAL_Delay>
  __IO uint32_t count = 0U;
 800a834:	2300      	movs	r3, #0
 800a836:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 800a838:	f7fb ffda 	bl	80067f0 <HAL_GetTick>
 800a83c:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a83e:	6820      	ldr	r0, [r4, #0]
 800a840:	f001 faf2 	bl	800be28 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a844:	4605      	mov	r5, r0
 800a846:	b998      	cbnz	r0, 800a870 <HAL_SD_InitCard+0xa8>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a848:	6820      	ldr	r0, [r4, #0]
 800a84a:	f001 fb15 	bl	800be78 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a84e:	b130      	cbz	r0, 800a85e <HAL_SD_InitCard+0x96>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a850:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a852:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a854:	f001 fae8 	bl	800be28 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a858:	b1a8      	cbz	r0, 800a886 <HAL_SD_InitCard+0xbe>
 800a85a:	4605      	mov	r5, r0
 800a85c:	e008      	b.n	800a870 <HAL_SD_InitCard+0xa8>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a85e:	2301      	movs	r3, #1
 800a860:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a862:	2100      	movs	r1, #0
 800a864:	6820      	ldr	r0, [r4, #0]
 800a866:	f001 fb43 	bl	800bef0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a86a:	b178      	cbz	r0, 800a88c <HAL_SD_InitCard+0xc4>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a86c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 800a870:	2001      	movs	r0, #1
 800a872:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a876:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a878:	431d      	orrs	r5, r3
 800a87a:	63a5      	str	r5, [r4, #56]	; 0x38
    return HAL_ERROR;
 800a87c:	4605      	mov	r5, r0
}
 800a87e:	4628      	mov	r0, r5
 800a880:	b018      	add	sp, #96	; 0x60
 800a882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d0ea      	beq.n	800a862 <HAL_SD_InitCard+0x9a>
{
 800a88c:	2100      	movs	r1, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a88e:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a892:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 800aa6c <HAL_SD_InitCard+0x2a4>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a896:	9b06      	ldr	r3, [sp, #24]
 800a898:	42bb      	cmp	r3, r7
 800a89a:	d800      	bhi.n	800a89e <HAL_SD_InitCard+0xd6>
 800a89c:	b129      	cbz	r1, 800a8aa <HAL_SD_InitCard+0xe2>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a89e:	9b06      	ldr	r3, [sp, #24]
 800a8a0:	42bb      	cmp	r3, r7
 800a8a2:	d918      	bls.n	800a8d6 <HAL_SD_InitCard+0x10e>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a8a4:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800a8a8:	e7e2      	b.n	800a870 <HAL_SD_InitCard+0xa8>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a8aa:	6820      	ldr	r0, [r4, #0]
 800a8ac:	f001 fb20 	bl	800bef0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8b0:	4605      	mov	r5, r0
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	d1dc      	bne.n	800a870 <HAL_SD_InitCard+0xa8>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a8b6:	4641      	mov	r1, r8
 800a8b8:	6820      	ldr	r0, [r4, #0]
 800a8ba:	f001 fb32 	bl	800bf22 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d1d4      	bne.n	800a86c <HAL_SD_InitCard+0xa4>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	6820      	ldr	r0, [r4, #0]
 800a8c6:	f001 f9d7 	bl	800bc78 <SDMMC_GetResponse>
    count++;
 800a8ca:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a8cc:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a8ce:	0fc1      	lsrs	r1, r0, #31
    count++;
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	9306      	str	r3, [sp, #24]
 800a8d4:	e7df      	b.n	800a896 <HAL_SD_InitCard+0xce>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a8d6:	006b      	lsls	r3, r5, #1
 800a8d8:	d534      	bpl.n	800a944 <HAL_SD_InitCard+0x17c>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a8da:	2301      	movs	r3, #1
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a8dc:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a8de:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a8e0:	69a3      	ldr	r3, [r4, #24]
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d12e      	bne.n	800a944 <HAL_SD_InitCard+0x17c>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800a8e6:	01ef      	lsls	r7, r5, #7
 800a8e8:	d52c      	bpl.n	800a944 <HAL_SD_InitCard+0x17c>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a8ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8ee:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800a8f0:	6803      	ldr	r3, [r0, #0]
 800a8f2:	f043 0308 	orr.w	r3, r3, #8
 800a8f6:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800a8f8:	f001 fc0e 	bl	800c118 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d1b6      	bne.n	800a870 <HAL_SD_InitCard+0xa8>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800a902:	6823      	ldr	r3, [r4, #0]
 800a904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a906:	0155      	lsls	r5, r2, #5
 800a908:	d52c      	bpl.n	800a964 <HAL_SD_InitCard+0x19c>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800a90a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a90e:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800a910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a912:	02d8      	lsls	r0, r3, #11
 800a914:	d5aa      	bpl.n	800a86c <HAL_SD_InitCard+0xa4>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800a916:	2001      	movs	r0, #1
 800a918:	f7ff fe85 	bl	800a626 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800a91c:	6822      	ldr	r2, [r4, #0]
 800a91e:	6813      	ldr	r3, [r2, #0]
 800a920:	f043 0304 	orr.w	r3, r3, #4
 800a924:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a92a:	0191      	lsls	r1, r2, #6
 800a92c:	d522      	bpl.n	800a974 <HAL_SD_InitCard+0x1ac>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800a92e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a932:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800a934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a936:	02d2      	lsls	r2, r2, #11
 800a938:	d4b4      	bmi.n	800a8a4 <HAL_SD_InitCard+0xdc>
          hsd->Instance->POWER = 0x13U;
 800a93a:	2213      	movs	r2, #19
 800a93c:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800a93e:	f04f 32ff 	mov.w	r2, #4294967295
 800a942:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1U;
 800a944:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a946:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 800a948:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a94c:	f001 f97c 	bl	800bc48 <SDMMC_GetPowerState>
 800a950:	b9b0      	cbnz	r0, 800a980 <HAL_SD_InitCard+0x1b8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a952:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800a956:	2501      	movs	r5, #1
 800a958:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a95c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a95e:	4318      	orrs	r0, r3
 800a960:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 800a962:	e78c      	b.n	800a87e <HAL_SD_InitCard+0xb6>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a964:	f7fb ff44 	bl	80067f0 <HAL_GetTick>
 800a968:	1b80      	subs	r0, r0, r6
 800a96a:	3001      	adds	r0, #1
 800a96c:	d1c9      	bne.n	800a902 <HAL_SD_InitCard+0x13a>
            return HAL_SD_ERROR_TIMEOUT;
 800a96e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800a972:	e77d      	b.n	800a870 <HAL_SD_InitCard+0xa8>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a974:	f7fb ff3c 	bl	80067f0 <HAL_GetTick>
 800a978:	1b80      	subs	r0, r0, r6
 800a97a:	3001      	adds	r0, #1
 800a97c:	d1d3      	bne.n	800a926 <HAL_SD_InitCard+0x15e>
 800a97e:	e7f6      	b.n	800a96e <HAL_SD_InitCard+0x1a6>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a980:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a982:	2b03      	cmp	r3, #3
 800a984:	d042      	beq.n	800aa0c <HAL_SD_InitCard+0x244>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a986:	6820      	ldr	r0, [r4, #0]
 800a988:	f001 fb13 	bl	800bfb2 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d1e2      	bne.n	800a956 <HAL_SD_InitCard+0x18e>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a990:	4601      	mov	r1, r0
 800a992:	6820      	ldr	r0, [r4, #0]
 800a994:	f001 f970 	bl	800bc78 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a998:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a99a:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a99c:	6820      	ldr	r0, [r4, #0]
 800a99e:	f001 f96b 	bl	800bc78 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a9a2:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a9a4:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a9a6:	6820      	ldr	r0, [r4, #0]
 800a9a8:	f001 f966 	bl	800bc78 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a9ac:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a9ae:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a9b0:	6820      	ldr	r0, [r4, #0]
 800a9b2:	f001 f961 	bl	800bc78 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a9b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a9b8:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	d026      	beq.n	800aa0c <HAL_SD_InitCard+0x244>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a9be:	f10d 0116 	add.w	r1, sp, #22
 800a9c2:	6820      	ldr	r0, [r4, #0]
 800a9c4:	f001 fb22 	bl	800c00c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d1c4      	bne.n	800a956 <HAL_SD_InitCard+0x18e>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a9cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9ce:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a9d0:	2b03      	cmp	r3, #3
 800a9d2:	d01b      	beq.n	800aa0c <HAL_SD_InitCard+0x244>
    hsd->SdCard.RelCardAdd = sd_rca;
 800a9d4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800a9d8:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9da:	0409      	lsls	r1, r1, #16
 800a9dc:	f001 faff 	bl	800bfde <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d1b8      	bne.n	800a956 <HAL_SD_InitCard+0x18e>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9e4:	4601      	mov	r1, r0
 800a9e6:	6820      	ldr	r0, [r4, #0]
 800a9e8:	f001 f946 	bl	800bc78 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a9ec:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9ee:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a9f0:	6820      	ldr	r0, [r4, #0]
 800a9f2:	f001 f941 	bl	800bc78 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a9f6:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a9f8:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a9fa:	6820      	ldr	r0, [r4, #0]
 800a9fc:	f001 f93c 	bl	800bc78 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aa00:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aa02:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aa04:	6820      	ldr	r0, [r4, #0]
 800aa06:	f001 f937 	bl	800bc78 <SDMMC_GetResponse>
 800aa0a:	66e0      	str	r0, [r4, #108]	; 0x6c
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800aa0c:	2104      	movs	r1, #4
 800aa0e:	6820      	ldr	r0, [r4, #0]
 800aa10:	f001 f932 	bl	800bc78 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aa14:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800aa16:	0d00      	lsrs	r0, r0, #20
 800aa18:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f7ff fe1e 	bl	800a65c <HAL_SD_GetCardCSD>
 800aa20:	4605      	mov	r5, r0
 800aa22:	b110      	cbz	r0, 800aa2a <HAL_SD_InitCard+0x262>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800aa28:	e795      	b.n	800a956 <HAL_SD_InitCard+0x18e>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800aa2a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	6820      	ldr	r0, [r4, #0]
 800aa30:	0412      	lsls	r2, r2, #16
 800aa32:	f001 f9df 	bl	800bdf4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d18d      	bne.n	800a956 <HAL_SD_InitCard+0x18e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa3e:	6820      	ldr	r0, [r4, #0]
 800aa40:	f001 f930 	bl	800bca4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa44:	2800      	cmp	r0, #0
 800aa46:	f43f af1a 	beq.w	800a87e <HAL_SD_InitCard+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa4a:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800aa4c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa4e:	4a06      	ldr	r2, [pc, #24]	; (800aa68 <HAL_SD_InitCard+0x2a0>)
 800aa50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aa52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aa54:	4318      	orrs	r0, r3
 800aa56:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aa58:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 800aa5c:	e70f      	b.n	800a87e <HAL_SD_InitCard+0xb6>
 800aa5e:	bf00      	nop
 800aa60:	000c3500 	.word	0x000c3500
 800aa64:	00012110 	.word	0x00012110
 800aa68:	1fe00fff 	.word	0x1fe00fff
 800aa6c:	c1100000 	.word	0xc1100000

0800aa70 <HAL_SD_GetCardStatus>:
{
 800aa70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa74:	4604      	mov	r4, r0
 800aa76:	b096      	sub	sp, #88	; 0x58
 800aa78:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800aa7a:	f7fb feb9 	bl	80067f0 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa7e:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800aa80:	4606      	mov	r6, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa82:	6820      	ldr	r0, [r4, #0]
 800aa84:	f001 f8f8 	bl	800bc78 <SDMMC_GetResponse>
 800aa88:	0183      	lsls	r3, r0, #6
 800aa8a:	d50b      	bpl.n	800aaa4 <HAL_SD_GetCardStatus+0x34>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aa8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa90:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800aa92:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa94:	4a53      	ldr	r2, [pc, #332]	; (800abe4 <HAL_SD_GetCardStatus+0x174>)
 800aa96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aa98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aa9a:	4318      	orrs	r0, r3
 800aa9c:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aa9e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    status = HAL_ERROR;
 800aaa2:	e08a      	b.n	800abba <HAL_SD_GetCardStatus+0x14a>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800aaa4:	2140      	movs	r1, #64	; 0x40
 800aaa6:	6820      	ldr	r0, [r4, #0]
 800aaa8:	f001 f8fc 	bl	800bca4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800aaac:	b110      	cbz	r0, 800aab4 <HAL_SD_GetCardStatus+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800aaae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aab0:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 800aab2:	e7ed      	b.n	800aa90 <HAL_SD_GetCardStatus+0x20>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aab4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aab6:	6820      	ldr	r0, [r4, #0]
 800aab8:	0409      	lsls	r1, r1, #16
 800aaba:	f001 fa19 	bl	800bef0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d1f5      	bne.n	800aaae <HAL_SD_GetCardStatus+0x3e>
  config.DataLength    = 64U;
 800aac2:	2340      	movs	r3, #64	; 0x40
 800aac4:	f04f 37ff 	mov.w	r7, #4294967295
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aac8:	f04f 0c60 	mov.w	ip, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aacc:	9004      	str	r0, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aace:	4669      	mov	r1, sp
 800aad0:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 800aad2:	e9cd 7300 	strd	r7, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aad6:	2302      	movs	r3, #2
 800aad8:	e9cd c302 	strd	ip, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800aadc:	2301      	movs	r3, #1
 800aade:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aae0:	f001 f8cd 	bl	800bc7e <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800aae4:	6820      	ldr	r0, [r4, #0]
 800aae6:	f001 fafe 	bl	800c0e6 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d1df      	bne.n	800aaae <HAL_SD_GetCardStatus+0x3e>
  uint32_t *pData = pSDstatus;
 800aaee:	af06      	add	r7, sp, #24
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800aaf0:	6823      	ldr	r3, [r4, #0]
 800aaf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaf4:	f412 7f95 	tst.w	r2, #298	; 0x12a
 800aaf8:	d00a      	beq.n	800ab10 <HAL_SD_GetCardStatus+0xa0>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800aafa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aafc:	0711      	lsls	r1, r2, #28
 800aafe:	d46f      	bmi.n	800abe0 <HAL_SD_GetCardStatus+0x170>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ab00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab02:	0792      	lsls	r2, r2, #30
 800ab04:	d46a      	bmi.n	800abdc <HAL_SD_GetCardStatus+0x16c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ab06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab08:	069b      	lsls	r3, r3, #26
 800ab0a:	d51e      	bpl.n	800ab4a <HAL_SD_GetCardStatus+0xda>
    return HAL_SD_ERROR_RX_OVERRUN;
 800ab0c:	2020      	movs	r0, #32
 800ab0e:	e7bf      	b.n	800aa90 <HAL_SD_GetCardStatus+0x20>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ab10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab12:	0418      	lsls	r0, r3, #16
 800ab14:	d508      	bpl.n	800ab28 <HAL_SD_GetCardStatus+0xb8>
 800ab16:	f107 0820 	add.w	r8, r7, #32
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ab1a:	6820      	ldr	r0, [r4, #0]
 800ab1c:	f001 f880 	bl	800bc20 <SDMMC_ReadFIFO>
 800ab20:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 800ab24:	45b8      	cmp	r8, r7
 800ab26:	d1f8      	bne.n	800ab1a <HAL_SD_GetCardStatus+0xaa>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ab28:	f7fb fe62 	bl	80067f0 <HAL_GetTick>
 800ab2c:	1b80      	subs	r0, r0, r6
 800ab2e:	3001      	adds	r0, #1
 800ab30:	d1de      	bne.n	800aaf0 <HAL_SD_GetCardStatus+0x80>
      return HAL_SD_ERROR_TIMEOUT;
 800ab32:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab36:	e7ab      	b.n	800aa90 <HAL_SD_GetCardStatus+0x20>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ab38:	f001 f872 	bl	800bc20 <SDMMC_ReadFIFO>
 800ab3c:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ab40:	f7fb fe56 	bl	80067f0 <HAL_GetTick>
 800ab44:	1b80      	subs	r0, r0, r6
 800ab46:	3001      	adds	r0, #1
 800ab48:	d0f3      	beq.n	800ab32 <HAL_SD_GetCardStatus+0xc2>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ab4a:	6820      	ldr	r0, [r4, #0]
 800ab4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ab4e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800ab52:	d1f1      	bne.n	800ab38 <HAL_SD_GetCardStatus+0xc8>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ab54:	9906      	ldr	r1, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ab56:	4a24      	ldr	r2, [pc, #144]	; (800abe8 <HAL_SD_GetCardStatus+0x178>)
 800ab58:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ab5a:	f3c1 1281 	ubfx	r2, r1, #6, #2
 800ab5e:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ab60:	f3c1 1240 	ubfx	r2, r1, #5, #1
 800ab64:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ab66:	0a0a      	lsrs	r2, r1, #8
 800ab68:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ab6c:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 800ab70:	b292      	uxth	r2, r2
 800ab72:	806a      	strh	r2, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ab74:	9a07      	ldr	r2, [sp, #28]
 800ab76:	ba12      	rev	r2, r2
 800ab78:	606a      	str	r2, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ab7a:	9a08      	ldr	r2, [sp, #32]
 800ab7c:	b2d1      	uxtb	r1, r2
 800ab7e:	7229      	strb	r1, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ab80:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800ab84:	7269      	strb	r1, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ab86:	f3c2 5103 	ubfx	r1, r2, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ab8a:	0c12      	lsrs	r2, r2, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ab8c:	72a9      	strb	r1, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ab8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab90:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ab94:	b2c8      	uxtb	r0, r1
 800ab96:	4302      	orrs	r2, r0
 800ab98:	81aa      	strh	r2, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ab9a:	f3c1 2285 	ubfx	r2, r1, #10, #6
 800ab9e:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800aba0:	f3c1 2201 	ubfx	r2, r1, #8, #2
 800aba4:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800aba6:	f3c1 1203 	ubfx	r2, r1, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800abaa:	f001 010f 	and.w	r1, r1, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800abae:	742a      	strb	r2, [r5, #16]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800abb0:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800abb4:	7469      	strb	r1, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800abb6:	74aa      	strb	r2, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 800abb8:	461d      	mov	r5, r3
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800abba:	f44f 7100 	mov.w	r1, #512	; 0x200
 800abbe:	6820      	ldr	r0, [r4, #0]
 800abc0:	f001 f870 	bl	800bca4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800abc4:	b130      	cbz	r0, 800abd4 <HAL_SD_GetCardStatus+0x164>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800abc6:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800abc8:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800abca:	4a06      	ldr	r2, [pc, #24]	; (800abe4 <HAL_SD_GetCardStatus+0x174>)
 800abcc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800abce:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800abd0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
}
 800abd4:	4628      	mov	r0, r5
 800abd6:	b016      	add	sp, #88	; 0x58
 800abd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800abdc:	2002      	movs	r0, #2
 800abde:	e757      	b.n	800aa90 <HAL_SD_GetCardStatus+0x20>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800abe0:	2008      	movs	r0, #8
 800abe2:	e755      	b.n	800aa90 <HAL_SD_GetCardStatus+0x20>
 800abe4:	1fe00fff 	.word	0x1fe00fff
 800abe8:	18000f3a 	.word	0x18000f3a

0800abec <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800abec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800abee:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800abf0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800abf2:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800abf4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800abf6:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800abf8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800abfa:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800abfc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800abfe:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ac00:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ac02:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ac04:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ac06:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ac08:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 800ac0a:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ac0c:	61cb      	str	r3, [r1, #28]
}
 800ac0e:	4770      	bx	lr

0800ac10 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 800ac10:	2303      	movs	r3, #3
{
 800ac12:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800ac14:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 800ac18:	b08a      	sub	sp, #40	; 0x28
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ac1a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d002      	beq.n	800ac2a <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ac24:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800ac28:	d103      	bne.n	800ac32 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac30:	e05b      	b.n	800acea <HAL_SD_ConfigWideBusOperation+0xda>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ac32:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ac36:	6800      	ldr	r0, [r0, #0]
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ac38:	d135      	bne.n	800aca6 <HAL_SD_ConfigWideBusOperation+0x96>
  uint32_t scr[2U] = {0UL, 0UL};
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ac40:	f001 f81a 	bl	800bc78 <SDMMC_GetResponse>
 800ac44:	0180      	lsls	r0, r0, #6
 800ac46:	d447      	bmi.n	800acd8 <HAL_SD_ConfigWideBusOperation+0xc8>
  errorstate = SD_FindSCR(hsd, scr);
 800ac48:	a904      	add	r1, sp, #16
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f7ff face 	bl	800a1ec <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac50:	b960      	cbnz	r0, 800ac6c <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ac52:	9b05      	ldr	r3, [sp, #20]
 800ac54:	0359      	lsls	r1, r3, #13
 800ac56:	d542      	bpl.n	800acde <HAL_SD_ConfigWideBusOperation+0xce>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ac58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ac5a:	6820      	ldr	r0, [r4, #0]
 800ac5c:	0409      	lsls	r1, r1, #16
 800ac5e:	f001 f947 	bl	800bef0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac62:	b918      	cbnz	r0, 800ac6c <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ac64:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ac66:	6820      	ldr	r0, [r4, #0]
 800ac68:	f001 f971 	bl	800bf4e <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800ac6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac6e:	4318      	orrs	r0, r3
 800ac70:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ac72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac74:	6826      	ldr	r6, [r4, #0]
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d039      	beq.n	800acee <HAL_SD_ConfigWideBusOperation+0xde>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac7a:	4b2d      	ldr	r3, [pc, #180]	; (800ad30 <HAL_SD_ConfigWideBusOperation+0x120>)
    status = HAL_ERROR;
 800ac7c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac7e:	63b3      	str	r3, [r6, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ac80:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac84:	6820      	ldr	r0, [r4, #0]
 800ac86:	f001 f80d 	bl	800bca4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac8a:	b130      	cbz	r0, 800ac9a <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac8c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800ac8e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac90:	4a27      	ldr	r2, [pc, #156]	; (800ad30 <HAL_SD_ConfigWideBusOperation+0x120>)
 800ac92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ac94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac96:	4318      	orrs	r0, r3
 800ac98:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800ac9a:	2301      	movs	r3, #1
}
 800ac9c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800ac9e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800aca2:	b00a      	add	sp, #40	; 0x28
 800aca4:	bd70      	pop	{r4, r5, r6, pc}
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800aca6:	b9e9      	cbnz	r1, 800ace4 <HAL_SD_ConfigWideBusOperation+0xd4>
  uint32_t scr[2U] = {0UL, 0UL};
 800aca8:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800acac:	f000 ffe4 	bl	800bc78 <SDMMC_GetResponse>
 800acb0:	0182      	lsls	r2, r0, #6
 800acb2:	d411      	bmi.n	800acd8 <HAL_SD_ConfigWideBusOperation+0xc8>
  errorstate = SD_FindSCR(hsd, scr);
 800acb4:	a904      	add	r1, sp, #16
 800acb6:	4620      	mov	r0, r4
 800acb8:	f7ff fa98 	bl	800a1ec <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d1d5      	bne.n	800ac6c <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800acc0:	9b05      	ldr	r3, [sp, #20]
 800acc2:	03db      	lsls	r3, r3, #15
 800acc4:	d50b      	bpl.n	800acde <HAL_SD_ConfigWideBusOperation+0xce>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800acc6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800acc8:	6820      	ldr	r0, [r4, #0]
 800acca:	0409      	lsls	r1, r1, #16
 800accc:	f001 f910 	bl	800bef0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d1cb      	bne.n	800ac6c <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800acd4:	4601      	mov	r1, r0
 800acd6:	e7c6      	b.n	800ac66 <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800acd8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800acdc:	e7c6      	b.n	800ac6c <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800acde:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800ace2:	e7c3      	b.n	800ac6c <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ace4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ace6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acea:	63a3      	str	r3, [r4, #56]	; 0x38
 800acec:	e7c1      	b.n	800ac72 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800acee:	6863      	ldr	r3, [r4, #4]
 800acf0:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800acf2:	68a3      	ldr	r3, [r4, #8]
    Init.BusWide             = WideMode;
 800acf4:	e9cd 3505 	strd	r3, r5, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800acf8:	6923      	ldr	r3, [r4, #16]
 800acfa:	9307      	str	r3, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800acfc:	6963      	ldr	r3, [r4, #20]
 800acfe:	2b03      	cmp	r3, #3
 800ad00:	d90c      	bls.n	800ad1c <HAL_SD_ConfigWideBusOperation+0x10c>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800ad02:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800ad04:	ab0a      	add	r3, sp, #40	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 800ad06:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 800ad08:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ad0c:	ab04      	add	r3, sp, #16
 800ad0e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ad12:	4630      	mov	r0, r6
 800ad14:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad16:	f000 ff69 	bl	800bbec <SDMMC_Init>
 800ad1a:	e7b1      	b.n	800ac80 <HAL_SD_ConfigWideBusOperation+0x70>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ad1c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ad1e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800ad22:	d0ee      	beq.n	800ad02 <HAL_SD_ConfigWideBusOperation+0xf2>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ad24:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800ad28:	bf0c      	ite	eq
 800ad2a:	2302      	moveq	r3, #2
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800ad2c:	2304      	movne	r3, #4
 800ad2e:	e7e8      	b.n	800ad02 <HAL_SD_ConfigWideBusOperation+0xf2>
 800ad30:	1fe00fff 	.word	0x1fe00fff

0800ad34 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad34:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 800ad36:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad38:	0409      	lsls	r1, r1, #16
{
 800ad3a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad3c:	6800      	ldr	r0, [r0, #0]
 800ad3e:	f001 f9b9 	bl	800c0b4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad42:	4601      	mov	r1, r0
 800ad44:	b928      	cbnz	r0, 800ad52 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad46:	6820      	ldr	r0, [r4, #0]
 800ad48:	f000 ff96 	bl	800bc78 <SDMMC_GetResponse>
}
 800ad4c:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800ad50:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 800ad52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ad54:	4308      	orrs	r0, r1
 800ad56:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800ad58:	2000      	movs	r0, #0
 800ad5a:	e7f7      	b.n	800ad4c <HAL_SD_GetCardState+0x18>

0800ad5c <HAL_SD_Init>:
{
 800ad5c:	b570      	push	{r4, r5, r6, lr}
  if(hsd == NULL)
 800ad5e:	4604      	mov	r4, r0
{
 800ad60:	b086      	sub	sp, #24
  if(hsd == NULL)
 800ad62:	b918      	cbnz	r0, 800ad6c <HAL_SD_Init+0x10>
    return HAL_ERROR;
 800ad64:	2501      	movs	r5, #1
}
 800ad66:	4628      	mov	r0, r5
 800ad68:	b006      	add	sp, #24
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 800ad6c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800ad70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ad74:	b93b      	cbnz	r3, 800ad86 <HAL_SD_Init+0x2a>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800ad76:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 800ad78:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800ad7a:	b90b      	cbnz	r3, 800ad80 <HAL_SD_Init+0x24>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 800ad80:	4620      	mov	r0, r4
 800ad82:	f7f8 fe9f 	bl	8003ac4 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800ad86:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ad88:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800ad8a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ad8e:	f7ff fd1b 	bl	800a7c8 <HAL_SD_InitCard>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d1e6      	bne.n	800ad64 <HAL_SD_Init+0x8>
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ad96:	a901      	add	r1, sp, #4
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f7ff fe69 	bl	800aa70 <HAL_SD_GetCardStatus>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d1e0      	bne.n	800ad64 <HAL_SD_Init+0x8>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ada2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 800ada4:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ada8:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800adaa:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800adae:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800adb0:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800adb2:	d11c      	bne.n	800adee <HAL_SD_Init+0x92>
 800adb4:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800adb6:	bf14      	ite	ne
 800adb8:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800adbc:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800adc0:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800adc2:	68e1      	ldr	r1, [r4, #12]
 800adc4:	4620      	mov	r0, r4
 800adc6:	f7ff ff23 	bl	800ac10 <HAL_SD_ConfigWideBusOperation>
 800adca:	4605      	mov	r5, r0
 800adcc:	2800      	cmp	r0, #0
 800adce:	d1c9      	bne.n	800ad64 <HAL_SD_Init+0x8>
  tickstart = HAL_GetTick();
 800add0:	f7fb fd0e 	bl	80067f0 <HAL_GetTick>
 800add4:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800add6:	4620      	mov	r0, r4
 800add8:	f7ff ffac 	bl	800ad34 <HAL_SD_GetCardState>
 800addc:	2804      	cmp	r0, #4
 800adde:	d108      	bne.n	800adf2 <HAL_SD_Init+0x96>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ade0:	2300      	movs	r3, #0
 800ade2:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800ade4:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800ade6:	2301      	movs	r3, #1
 800ade8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800adec:	e7bb      	b.n	800ad66 <HAL_SD_Init+0xa>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800adee:	65e0      	str	r0, [r4, #92]	; 0x5c
 800adf0:	e7e7      	b.n	800adc2 <HAL_SD_Init+0x66>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800adf2:	f7fb fcfd 	bl	80067f0 <HAL_GetTick>
 800adf6:	1b80      	subs	r0, r0, r6
 800adf8:	3001      	adds	r0, #1
 800adfa:	d1ec      	bne.n	800add6 <HAL_SD_Init+0x7a>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800adfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
      return HAL_TIMEOUT;
 800ae00:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ae02:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800ae04:	2301      	movs	r3, #1
 800ae06:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 800ae0a:	e7ac      	b.n	800ad66 <HAL_SD_Init+0xa>

0800ae0c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ae0c:	4770      	bx	lr

0800ae0e <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800ae10:	4770      	bx	lr

0800ae12 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800ae12:	4770      	bx	lr

0800ae14 <HAL_SD_IRQHandler>:
{
 800ae14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t context = hsd->Context;
 800ae16:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 800ae18:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ae1a:	6800      	ldr	r0, [r0, #0]
 800ae1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ae1e:	041b      	lsls	r3, r3, #16
 800ae20:	d520      	bpl.n	800ae64 <HAL_SD_IRQHandler+0x50>
 800ae22:	072f      	lsls	r7, r5, #28
 800ae24:	d51e      	bpl.n	800ae64 <HAL_SD_IRQHandler+0x50>
  if (hsd->RxXferSize >= 32U)
 800ae26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ae28:	2b1f      	cmp	r3, #31
 800ae2a:	d919      	bls.n	800ae60 <HAL_SD_IRQHandler+0x4c>
  tmp = hsd->pRxBuffPtr;
 800ae2c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae2e:	1d35      	adds	r5, r6, #4
 800ae30:	f106 0724 	add.w	r7, r6, #36	; 0x24
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ae34:	6820      	ldr	r0, [r4, #0]
    for(count = 0U; count < 8U; count++)
 800ae36:	3504      	adds	r5, #4
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ae38:	f000 fef2 	bl	800bc20 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800ae3c:	f805 0c08 	strb.w	r0, [r5, #-8]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ae40:	0a03      	lsrs	r3, r0, #8
 800ae42:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ae46:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ae48:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ae4a:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ae4e:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 800ae52:	42bd      	cmp	r5, r7
 800ae54:	d1ee      	bne.n	800ae34 <HAL_SD_IRQHandler+0x20>
    hsd->RxXferSize -= 32U;
 800ae56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      tmp++;
 800ae58:	3620      	adds	r6, #32
    hsd->RxXferSize -= 32U;
 800ae5a:	3b20      	subs	r3, #32
    hsd->pRxBuffPtr = tmp;
 800ae5c:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800ae5e:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800ae60:	b003      	add	sp, #12
 800ae62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ae64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ae66:	05de      	lsls	r6, r3, #23
 800ae68:	d553      	bpl.n	800af12 <HAL_SD_IRQHandler+0xfe>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ae6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae6e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800ae70:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800ae72:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ae76:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ae7a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ae7c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800ae7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae82:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ae84:	68c3      	ldr	r3, [r0, #12]
 800ae86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae8a:	60c3      	str	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800ae8c:	f015 0308 	ands.w	r3, r5, #8
 800ae90:	d01f      	beq.n	800aed2 <HAL_SD_IRQHandler+0xbe>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ae92:	f015 0f22 	tst.w	r5, #34	; 0x22
 800ae96:	d008      	beq.n	800aeaa <HAL_SD_IRQHandler+0x96>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ae98:	f000 ff82 	bl	800bda0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800ae9c:	b128      	cbz	r0, 800aeaa <HAL_SD_IRQHandler+0x96>
          hsd->ErrorCode |= errorstate;
 800ae9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aea0:	4318      	orrs	r0, r3
 800aea2:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800aea4:	4620      	mov	r0, r4
 800aea6:	f7ff fbbd 	bl	800a624 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aeaa:	6823      	ldr	r3, [r4, #0]
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aeac:	07a9      	lsls	r1, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aeae:	4a69      	ldr	r2, [pc, #420]	; (800b054 <HAL_SD_IRQHandler+0x240>)
 800aeb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aeb2:	f04f 0301 	mov.w	r3, #1
 800aeb6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aeba:	f04f 0300 	mov.w	r3, #0
 800aebe:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aec0:	d003      	beq.n	800aeca <HAL_SD_IRQHandler+0xb6>
        HAL_SD_RxCpltCallback(hsd);
 800aec2:	4620      	mov	r0, r4
 800aec4:	f7f8 fdf2 	bl	8003aac <HAL_SD_RxCpltCallback>
 800aec8:	e7ca      	b.n	800ae60 <HAL_SD_IRQHandler+0x4c>
        HAL_SD_TxCpltCallback(hsd);
 800aeca:	4620      	mov	r0, r4
 800aecc:	f7f8 fdf4 	bl	8003ab8 <HAL_SD_TxCpltCallback>
 800aed0:	e7c6      	b.n	800ae60 <HAL_SD_IRQHandler+0x4c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800aed2:	062a      	lsls	r2, r5, #24
 800aed4:	d5c4      	bpl.n	800ae60 <HAL_SD_IRQHandler+0x4c>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800aed6:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800aeda:	6283      	str	r3, [r0, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800aedc:	62c3      	str	r3, [r0, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800aede:	6503      	str	r3, [r0, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800aee0:	d008      	beq.n	800aef4 <HAL_SD_IRQHandler+0xe0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aee2:	f000 ff5d 	bl	800bda0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800aee6:	b128      	cbz	r0, 800aef4 <HAL_SD_IRQHandler+0xe0>
          hsd->ErrorCode |= errorstate;
 800aee8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aeea:	4318      	orrs	r0, r3
 800aeec:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800aeee:	4620      	mov	r0, r4
 800aef0:	f7ff fb98 	bl	800a624 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800aef4:	2301      	movs	r3, #1
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800aef6:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800aefa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aefe:	f04f 0300 	mov.w	r3, #0
 800af02:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800af04:	d002      	beq.n	800af0c <HAL_SD_IRQHandler+0xf8>
        HAL_SD_TxCpltCallback(hsd);
 800af06:	4620      	mov	r0, r4
 800af08:	f7f8 fdd6 	bl	8003ab8 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800af0c:	07af      	lsls	r7, r5, #30
 800af0e:	d0a7      	beq.n	800ae60 <HAL_SD_IRQHandler+0x4c>
 800af10:	e7d7      	b.n	800aec2 <HAL_SD_IRQHandler+0xae>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800af12:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800af14:	045e      	lsls	r6, r3, #17
 800af16:	d527      	bpl.n	800af68 <HAL_SD_IRQHandler+0x154>
 800af18:	0729      	lsls	r1, r5, #28
 800af1a:	d525      	bpl.n	800af68 <HAL_SD_IRQHandler+0x154>
  if (hsd->TxXferSize >= 32U)
 800af1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af1e:	2b1f      	cmp	r3, #31
 800af20:	d99e      	bls.n	800ae60 <HAL_SD_IRQHandler+0x4c>
  tmp = hsd->pTxBuffPtr;
 800af22:	6a26      	ldr	r6, [r4, #32]
 800af24:	1d35      	adds	r5, r6, #4
 800af26:	f106 0724 	add.w	r7, r6, #36	; 0x24
      data = (uint32_t)(*tmp);
 800af2a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    for(count = 0U; count < 8U; count++)
 800af2e:	3504      	adds	r5, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800af30:	a901      	add	r1, sp, #4
 800af32:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800af34:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800af36:	f815 2c07 	ldrb.w	r2, [r5, #-7]
 800af3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800af3e:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800af40:	f815 2c06 	ldrb.w	r2, [r5, #-6]
 800af44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af48:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800af4a:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 800af4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800af52:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800af54:	f000 fe67 	bl	800bc26 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800af58:	42af      	cmp	r7, r5
 800af5a:	d1e6      	bne.n	800af2a <HAL_SD_IRQHandler+0x116>
    hsd->TxXferSize -= 32U;
 800af5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      tmp++;
 800af5e:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800af60:	3b20      	subs	r3, #32
    hsd->pTxBuffPtr = tmp;
 800af62:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize -= 32U;
 800af64:	6263      	str	r3, [r4, #36]	; 0x24
}
 800af66:	e77b      	b.n	800ae60 <HAL_SD_IRQHandler+0x4c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800af68:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800af6a:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800af6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800af70:	d056      	beq.n	800b020 <HAL_SD_IRQHandler+0x20c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800af72:	079a      	lsls	r2, r3, #30
 800af74:	d503      	bpl.n	800af7e <HAL_SD_IRQHandler+0x16a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800af76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800af78:	f043 0302 	orr.w	r3, r3, #2
 800af7c:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800af7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800af80:	071b      	lsls	r3, r3, #28
 800af82:	d503      	bpl.n	800af8c <HAL_SD_IRQHandler+0x178>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800af84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800af86:	f043 0308 	orr.w	r3, r3, #8
 800af8a:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800af8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800af8e:	069f      	lsls	r7, r3, #26
 800af90:	d503      	bpl.n	800af9a <HAL_SD_IRQHandler+0x186>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800af92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800af94:	f043 0320 	orr.w	r3, r3, #32
 800af98:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800af9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800af9c:	06de      	lsls	r6, r3, #27
 800af9e:	d503      	bpl.n	800afa8 <HAL_SD_IRQHandler+0x194>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800afa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800afa2:	f043 0310 	orr.w	r3, r3, #16
 800afa6:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800afa8:	4b2a      	ldr	r3, [pc, #168]	; (800b054 <HAL_SD_IRQHandler+0x240>)
 800afaa:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800afac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800afae:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800afb2:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800afb4:	68c3      	ldr	r3, [r0, #12]
 800afb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afba:	60c3      	str	r3, [r0, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800afbc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800afbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800afc2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800afc4:	68c3      	ldr	r3, [r0, #12]
 800afc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afca:	60c3      	str	r3, [r0, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800afcc:	f000 fee8 	bl	800bda0 <SDMMC_CmdStopTransfer>
 800afd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800afd2:	f015 0108 	ands.w	r1, r5, #8
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800afd6:	ea40 0003 	orr.w	r0, r0, r3
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800afda:	6823      	ldr	r3, [r4, #0]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800afdc:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800afde:	68da      	ldr	r2, [r3, #12]
 800afe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afe4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800afe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afea:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800afec:	d008      	beq.n	800b000 <HAL_SD_IRQHandler+0x1ec>
      hsd->State = HAL_SD_STATE_READY;
 800afee:	2301      	movs	r3, #1
 800aff0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aff4:	2300      	movs	r3, #0
 800aff6:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800aff8:	4620      	mov	r0, r4
 800affa:	f7ff fb13 	bl	800a624 <HAL_SD_ErrorCallback>
 800affe:	e72f      	b.n	800ae60 <HAL_SD_IRQHandler+0x4c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b000:	0628      	lsls	r0, r5, #24
 800b002:	f57f af2d 	bpl.w	800ae60 <HAL_SD_IRQHandler+0x4c>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b006:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b008:	2a00      	cmp	r2, #0
 800b00a:	f43f af29 	beq.w	800ae60 <HAL_SD_IRQHandler+0x4c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b00e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b010:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b014:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b016:	6519      	str	r1, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800b018:	2301      	movs	r3, #1
 800b01a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800b01e:	e7eb      	b.n	800aff8 <HAL_SD_IRQHandler+0x1e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800b020:	00da      	lsls	r2, r3, #3
 800b022:	f57f af1d 	bpl.w	800ae60 <HAL_SD_IRQHandler+0x4c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800b026:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b02a:	f005 0520 	and.w	r5, r5, #32
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800b02e:	6383      	str	r3, [r0, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b030:	6d03      	ldr	r3, [r0, #80]	; 0x50
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800b032:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b034:	075b      	lsls	r3, r3, #29
 800b036:	d406      	bmi.n	800b046 <HAL_SD_IRQHandler+0x232>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b038:	b115      	cbz	r5, 800b040 <HAL_SD_IRQHandler+0x22c>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800b03a:	f7ff feea 	bl	800ae12 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800b03e:	e70f      	b.n	800ae60 <HAL_SD_IRQHandler+0x4c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800b040:	f7ff fee5 	bl	800ae0e <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800b044:	e70c      	b.n	800ae60 <HAL_SD_IRQHandler+0x4c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b046:	b115      	cbz	r5, 800b04e <HAL_SD_IRQHandler+0x23a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800b048:	f7ff fee2 	bl	800ae10 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800b04c:	e708      	b.n	800ae60 <HAL_SD_IRQHandler+0x4c>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800b04e:	f7ff fedd 	bl	800ae0c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800b052:	e705      	b.n	800ae60 <HAL_SD_IRQHandler+0x4c>
 800b054:	18000f3a 	.word	0x18000f3a

0800b058 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800b058:	4770      	bx	lr
	...

0800b05c <HAL_SDRAM_Init>:
{
 800b05c:	b538      	push	{r3, r4, r5, lr}
 800b05e:	460d      	mov	r5, r1
  if (hsdram == NULL)
 800b060:	4604      	mov	r4, r0
 800b062:	b1f0      	cbz	r0, 800b0a2 <HAL_SDRAM_Init+0x46>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b064:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800b068:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b06c:	b91b      	cbnz	r3, 800b076 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 800b06e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800b072:	f7ff fff1 	bl	800b058 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b076:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b078:	1d21      	adds	r1, r4, #4
 800b07a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b07c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b080:	f000 fc48 	bl	800b914 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b084:	6862      	ldr	r2, [r4, #4]
 800b086:	4629      	mov	r1, r5
 800b088:	6820      	ldr	r0, [r4, #0]
 800b08a:	f000 fc7e 	bl	800b98a <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 800b08e:	4a06      	ldr	r2, [pc, #24]	; (800b0a8 <HAL_SDRAM_Init+0x4c>)
  return HAL_OK;
 800b090:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800b092:	6813      	ldr	r3, [r2, #0]
 800b094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b098:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b09a:	2301      	movs	r3, #1
 800b09c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800b0a0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b0a2:	2001      	movs	r0, #1
 800b0a4:	e7fc      	b.n	800b0a0 <HAL_SDRAM_Init+0x44>
 800b0a6:	bf00      	nop
 800b0a8:	52004000 	.word	0x52004000

0800b0ac <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b0ac:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b0ae:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	460e      	mov	r6, r1
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b0b6:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b0b8:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800b0ba:	d010      	beq.n	800b0de <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b0bc:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800b0c0:	2c01      	cmp	r4, #1
 800b0c2:	d110      	bne.n	800b0e6 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b0c4:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b0c6:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b0c8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b0cc:	f000 fc93 	bl	800b9f6 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b0d0:	6833      	ldr	r3, [r6, #0]
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	d104      	bne.n	800b0e0 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b0d6:	2305      	movs	r3, #5
 800b0d8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b0dc:	2000      	movs	r0, #0
}
 800b0de:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b0e0:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800b0e4:	e7fa      	b.n	800b0dc <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800b0e6:	2001      	movs	r0, #1
 800b0e8:	e7f9      	b.n	800b0de <HAL_SDRAM_SendCommand+0x32>

0800b0ea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b0ea:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b0ec:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800b0f0:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	b2d8      	uxtb	r0, r3
 800b0f6:	d00d      	beq.n	800b114 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b0f8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	b2dd      	uxtb	r5, r3
 800b100:	d109      	bne.n	800b116 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b102:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b104:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b106:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b10a:	f000 fc84 	bl	800ba16 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b10e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b110:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800b114:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b116:	2001      	movs	r0, #1
 800b118:	e7fc      	b.n	800b114 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800b11a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b11a:	6802      	ldr	r2, [r0, #0]
 800b11c:	6813      	ldr	r3, [r2, #0]
 800b11e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b122:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b124:	6893      	ldr	r3, [r2, #8]
 800b126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b12a:	f023 0301 	bic.w	r3, r3, #1
 800b12e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b130:	2320      	movs	r3, #32
 800b132:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b136:	2300      	movs	r3, #0
 800b138:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800b13a:	4770      	bx	lr

0800b13c <HAL_UART_DeInit>:
{
 800b13c:	b538      	push	{r3, r4, r5, lr}
  if (huart == NULL)
 800b13e:	4605      	mov	r5, r0
 800b140:	b1b8      	cbz	r0, 800b172 <HAL_UART_DeInit+0x36>
  huart->gState = HAL_UART_STATE_BUSY;
 800b142:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 800b144:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 800b146:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 800b14a:	6803      	ldr	r3, [r0, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	f022 0201 	bic.w	r2, r2, #1
 800b152:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 800b154:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800b156:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800b158:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800b15a:	f7f9 f84b 	bl	80041f4 <HAL_UART_MspDeInit>
  return HAL_OK;
 800b15e:	4620      	mov	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b160:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800b164:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800b168:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_RESET;
 800b16c:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
 800b170:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b172:	2001      	movs	r0, #1
 800b174:	e7fc      	b.n	800b170 <HAL_UART_DeInit+0x34>
	...

0800b178 <HAL_UART_Receive_DMA>:
{
 800b178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800b17a:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
{
 800b17e:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800b180:	2f20      	cmp	r7, #32
 800b182:	d13d      	bne.n	800b200 <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 800b184:	b349      	cbz	r1, 800b1da <HAL_UART_Receive_DMA+0x62>
 800b186:	b342      	cbz	r2, 800b1da <HAL_UART_Receive_DMA+0x62>
    __HAL_LOCK(huart);
 800b188:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d037      	beq.n	800b200 <HAL_UART_Receive_DMA+0x88>
 800b190:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b192:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b194:	2322      	movs	r3, #34	; 0x22
    huart->pRxBuffPtr = pData;
 800b196:	6581      	str	r1, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b198:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 800b19c:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxXferSize = Size;
 800b1a0:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1a4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmarx != NULL)
 800b1a8:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800b1aa:	b1c0      	cbz	r0, 800b1de <HAL_UART_Receive_DMA+0x66>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b1ac:	4b15      	ldr	r3, [pc, #84]	; (800b204 <HAL_UART_Receive_DMA+0x8c>)
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b1ae:	f8d4 c000 	ldr.w	ip, [r4]
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b1b2:	63c3      	str	r3, [r0, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b1b4:	4b14      	ldr	r3, [pc, #80]	; (800b208 <HAL_UART_Receive_DMA+0x90>)
 800b1b6:	6403      	str	r3, [r0, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b1b8:	4b14      	ldr	r3, [pc, #80]	; (800b20c <HAL_UART_Receive_DMA+0x94>)
      huart->hdmarx->XferAbortCallback = NULL;
 800b1ba:	e9c0 3613 	strd	r3, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b1be:	4613      	mov	r3, r2
 800b1c0:	460a      	mov	r2, r1
 800b1c2:	f10c 0124 	add.w	r1, ip, #36	; 0x24
 800b1c6:	f7fc f821 	bl	800720c <HAL_DMA_Start_IT>
 800b1ca:	b140      	cbz	r0, 800b1de <HAL_UART_Receive_DMA+0x66>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b1cc:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800b1ce:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b1d2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 800b1d6:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 800b1da:	2001      	movs	r0, #1
 800b1dc:	e00f      	b.n	800b1fe <HAL_UART_Receive_DMA+0x86>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1de:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1ec:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1ee:	689a      	ldr	r2, [r3, #8]
 800b1f0:	f042 0201 	orr.w	r2, r2, #1
 800b1f4:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1f6:	689a      	ldr	r2, [r3, #8]
 800b1f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1fc:	609a      	str	r2, [r3, #8]
}
 800b1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800b200:	2002      	movs	r0, #2
 800b202:	e7fc      	b.n	800b1fe <HAL_UART_Receive_DMA+0x86>
 800b204:	0800b211 	.word	0x0800b211
 800b208:	0800b24d 	.word	0x0800b24d
 800b20c:	0800b257 	.word	0x0800b257

0800b210 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b210:	b508      	push	{r3, lr}
 800b212:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b214:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b216:	69db      	ldr	r3, [r3, #28]
 800b218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b21c:	d012      	beq.n	800b244 <UART_DMAReceiveCplt+0x34>
  {
    huart->RxXferCount = 0U;
 800b21e:	2300      	movs	r3, #0
 800b220:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b224:	6803      	ldr	r3, [r0, #0]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b22c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b22e:	689a      	ldr	r2, [r3, #8]
 800b230:	f022 0201 	bic.w	r2, r2, #1
 800b234:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b236:	689a      	ldr	r2, [r3, #8]
 800b238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b23c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b23e:	2320      	movs	r3, #32
 800b240:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b244:	f7f8 ff68 	bl	8004118 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b248:	bd08      	pop	{r3, pc}

0800b24a <HAL_UART_RxHalfCpltCallback>:
 800b24a:	4770      	bx	lr

0800b24c <UART_DMARxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b24c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800b24e:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800b250:	f7ff fffb 	bl	800b24a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b254:	bd08      	pop	{r3, pc}

0800b256 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b256:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b258:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b25a:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b25e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 800b262:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b264:	689c      	ldr	r4, [r3, #8]
 800b266:	0624      	lsls	r4, r4, #24
 800b268:	d50f      	bpl.n	800b28a <UART_DMAError+0x34>
 800b26a:	2a21      	cmp	r2, #33	; 0x21
 800b26c:	d10d      	bne.n	800b28a <UART_DMAError+0x34>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b26e:	2200      	movs	r2, #0
 800b270:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b27a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b27c:	689a      	ldr	r2, [r3, #8]
 800b27e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b282:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800b284:	2220      	movs	r2, #32
 800b286:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	065b      	lsls	r3, r3, #25
 800b28e:	d506      	bpl.n	800b29e <UART_DMAError+0x48>
 800b290:	2922      	cmp	r1, #34	; 0x22
 800b292:	d104      	bne.n	800b29e <UART_DMAError+0x48>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b294:	2300      	movs	r3, #0
 800b296:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b29a:	f7ff ff3e 	bl	800b11a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b29e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800b2a2:	f043 0310 	orr.w	r3, r3, #16
 800b2a6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2aa:	f7f8 ff34 	bl	8004116 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2ae:	bd10      	pop	{r4, pc}

0800b2b0 <UART_SetConfig>:
{
 800b2b0:	b530      	push	{r4, r5, lr}
 800b2b2:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2b4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2b6:	69c0      	ldr	r0, [r0, #28]
{
 800b2b8:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2ba:	6921      	ldr	r1, [r4, #16]
 800b2bc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2be:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2c0:	430a      	orrs	r2, r1
 800b2c2:	6961      	ldr	r1, [r4, #20]
 800b2c4:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 800b2c6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2c8:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 800b2ca:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2cc:	4997      	ldr	r1, [pc, #604]	; (800b52c <UART_SetConfig+0x27c>)
 800b2ce:	4029      	ands	r1, r5
 800b2d0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2d2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2d4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800b2dc:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2de:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2e0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b2e2:	4a93      	ldr	r2, [pc, #588]	; (800b530 <UART_SetConfig+0x280>)
 800b2e4:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800b2e6:	bf1c      	itt	ne
 800b2e8:	6a22      	ldrne	r2, [r4, #32]
 800b2ea:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2ec:	689a      	ldr	r2, [r3, #8]
 800b2ee:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 800b2f2:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800b2f6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b2f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2fa:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fe:	f022 020f 	bic.w	r2, r2, #15
 800b302:	430a      	orrs	r2, r1
 800b304:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b306:	4a8b      	ldr	r2, [pc, #556]	; (800b534 <UART_SetConfig+0x284>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d11b      	bne.n	800b344 <UART_SetConfig+0x94>
 800b30c:	4b8a      	ldr	r3, [pc, #552]	; (800b538 <UART_SetConfig+0x288>)
 800b30e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b310:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b314:	2b28      	cmp	r3, #40	; 0x28
 800b316:	d86c      	bhi.n	800b3f2 <UART_SetConfig+0x142>
 800b318:	4a88      	ldr	r2, [pc, #544]	; (800b53c <UART_SetConfig+0x28c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b31a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800b31e:	5cd3      	ldrb	r3, [r2, r3]
 800b320:	f040 8134 	bne.w	800b58c <UART_SetConfig+0x2dc>
    switch (clocksource)
 800b324:	2b08      	cmp	r3, #8
 800b326:	f200 80c0 	bhi.w	800b4aa <UART_SetConfig+0x1fa>
 800b32a:	2b08      	cmp	r3, #8
 800b32c:	d861      	bhi.n	800b3f2 <UART_SetConfig+0x142>
 800b32e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b332:	00e8      	.short	0x00e8
 800b334:	006000ed 	.word	0x006000ed
 800b338:	00f00060 	.word	0x00f00060
 800b33c:	00600060 	.word	0x00600060
 800b340:	00f50060 	.word	0x00f50060
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b344:	4a7e      	ldr	r2, [pc, #504]	; (800b540 <UART_SetConfig+0x290>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d107      	bne.n	800b35a <UART_SetConfig+0xaa>
 800b34a:	4b7b      	ldr	r3, [pc, #492]	; (800b538 <UART_SetConfig+0x288>)
 800b34c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b34e:	f003 0307 	and.w	r3, r3, #7
 800b352:	2b05      	cmp	r3, #5
 800b354:	d84d      	bhi.n	800b3f2 <UART_SetConfig+0x142>
 800b356:	4a7b      	ldr	r2, [pc, #492]	; (800b544 <UART_SetConfig+0x294>)
 800b358:	e7df      	b.n	800b31a <UART_SetConfig+0x6a>
 800b35a:	4a7b      	ldr	r2, [pc, #492]	; (800b548 <UART_SetConfig+0x298>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d107      	bne.n	800b370 <UART_SetConfig+0xc0>
 800b360:	4b75      	ldr	r3, [pc, #468]	; (800b538 <UART_SetConfig+0x288>)
 800b362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b364:	f003 0307 	and.w	r3, r3, #7
 800b368:	2b05      	cmp	r3, #5
 800b36a:	d842      	bhi.n	800b3f2 <UART_SetConfig+0x142>
 800b36c:	4a77      	ldr	r2, [pc, #476]	; (800b54c <UART_SetConfig+0x29c>)
 800b36e:	e7d4      	b.n	800b31a <UART_SetConfig+0x6a>
 800b370:	4a77      	ldr	r2, [pc, #476]	; (800b550 <UART_SetConfig+0x2a0>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d107      	bne.n	800b386 <UART_SetConfig+0xd6>
 800b376:	4b70      	ldr	r3, [pc, #448]	; (800b538 <UART_SetConfig+0x288>)
 800b378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b37a:	f003 0307 	and.w	r3, r3, #7
 800b37e:	2b05      	cmp	r3, #5
 800b380:	d837      	bhi.n	800b3f2 <UART_SetConfig+0x142>
 800b382:	4a74      	ldr	r2, [pc, #464]	; (800b554 <UART_SetConfig+0x2a4>)
 800b384:	e7c9      	b.n	800b31a <UART_SetConfig+0x6a>
 800b386:	4a74      	ldr	r2, [pc, #464]	; (800b558 <UART_SetConfig+0x2a8>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d107      	bne.n	800b39c <UART_SetConfig+0xec>
 800b38c:	4b6a      	ldr	r3, [pc, #424]	; (800b538 <UART_SetConfig+0x288>)
 800b38e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b390:	f003 0307 	and.w	r3, r3, #7
 800b394:	2b05      	cmp	r3, #5
 800b396:	d82c      	bhi.n	800b3f2 <UART_SetConfig+0x142>
 800b398:	4a70      	ldr	r2, [pc, #448]	; (800b55c <UART_SetConfig+0x2ac>)
 800b39a:	e7be      	b.n	800b31a <UART_SetConfig+0x6a>
 800b39c:	4a70      	ldr	r2, [pc, #448]	; (800b560 <UART_SetConfig+0x2b0>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d107      	bne.n	800b3b2 <UART_SetConfig+0x102>
 800b3a2:	4b65      	ldr	r3, [pc, #404]	; (800b538 <UART_SetConfig+0x288>)
 800b3a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3aa:	2b28      	cmp	r3, #40	; 0x28
 800b3ac:	d821      	bhi.n	800b3f2 <UART_SetConfig+0x142>
 800b3ae:	4a6d      	ldr	r2, [pc, #436]	; (800b564 <UART_SetConfig+0x2b4>)
 800b3b0:	e7b3      	b.n	800b31a <UART_SetConfig+0x6a>
 800b3b2:	4a6d      	ldr	r2, [pc, #436]	; (800b568 <UART_SetConfig+0x2b8>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d107      	bne.n	800b3c8 <UART_SetConfig+0x118>
 800b3b8:	4b5f      	ldr	r3, [pc, #380]	; (800b538 <UART_SetConfig+0x288>)
 800b3ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3bc:	f003 0307 	and.w	r3, r3, #7
 800b3c0:	2b05      	cmp	r3, #5
 800b3c2:	d816      	bhi.n	800b3f2 <UART_SetConfig+0x142>
 800b3c4:	4a69      	ldr	r2, [pc, #420]	; (800b56c <UART_SetConfig+0x2bc>)
 800b3c6:	e7a8      	b.n	800b31a <UART_SetConfig+0x6a>
 800b3c8:	4a69      	ldr	r2, [pc, #420]	; (800b570 <UART_SetConfig+0x2c0>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d107      	bne.n	800b3de <UART_SetConfig+0x12e>
 800b3ce:	4b5a      	ldr	r3, [pc, #360]	; (800b538 <UART_SetConfig+0x288>)
 800b3d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3d2:	f003 0307 	and.w	r3, r3, #7
 800b3d6:	2b05      	cmp	r3, #5
 800b3d8:	d80b      	bhi.n	800b3f2 <UART_SetConfig+0x142>
 800b3da:	4a66      	ldr	r2, [pc, #408]	; (800b574 <UART_SetConfig+0x2c4>)
 800b3dc:	e79d      	b.n	800b31a <UART_SetConfig+0x6a>
 800b3de:	4a54      	ldr	r2, [pc, #336]	; (800b530 <UART_SetConfig+0x280>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d106      	bne.n	800b3f2 <UART_SetConfig+0x142>
 800b3e4:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 800b3e8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b3ea:	f003 0307 	and.w	r3, r3, #7
 800b3ee:	2b05      	cmp	r3, #5
 800b3f0:	d901      	bls.n	800b3f6 <UART_SetConfig+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3f2:	2001      	movs	r0, #1
 800b3f4:	e00e      	b.n	800b414 <UART_SetConfig+0x164>
 800b3f6:	4960      	ldr	r1, [pc, #384]	; (800b578 <UART_SetConfig+0x2c8>)
 800b3f8:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 800b3fa:	2b10      	cmp	r3, #16
 800b3fc:	d023      	beq.n	800b446 <UART_SetConfig+0x196>
 800b3fe:	d811      	bhi.n	800b424 <UART_SetConfig+0x174>
 800b400:	2b04      	cmp	r3, #4
 800b402:	d016      	beq.n	800b432 <UART_SetConfig+0x182>
 800b404:	2b08      	cmp	r3, #8
 800b406:	d019      	beq.n	800b43c <UART_SetConfig+0x18c>
 800b408:	2b02      	cmp	r3, #2
 800b40a:	d1f2      	bne.n	800b3f2 <UART_SetConfig+0x142>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b40c:	f7fe fc06 	bl	8009c1c <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800b410:	bb10      	cbnz	r0, 800b458 <UART_SetConfig+0x1a8>
 800b412:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800b414:	2300      	movs	r3, #0
 800b416:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800b41a:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800b41e:	6723      	str	r3, [r4, #112]	; 0x70
}
 800b420:	b007      	add	sp, #28
 800b422:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 800b424:	2b20      	cmp	r3, #32
 800b426:	d03e      	beq.n	800b4a6 <UART_SetConfig+0x1f6>
 800b428:	2b40      	cmp	r3, #64	; 0x40
 800b42a:	d1e2      	bne.n	800b3f2 <UART_SetConfig+0x142>
 800b42c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b430:	e012      	b.n	800b458 <UART_SetConfig+0x1a8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b432:	4668      	mov	r0, sp
 800b434:	f7fe fc04 	bl	8009c40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b438:	9801      	ldr	r0, [sp, #4]
        break;
 800b43a:	e7e9      	b.n	800b410 <UART_SetConfig+0x160>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b43c:	a803      	add	r0, sp, #12
 800b43e:	f7fe fca7 	bl	8009d90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b442:	9804      	ldr	r0, [sp, #16]
        break;
 800b444:	e7e4      	b.n	800b410 <UART_SetConfig+0x160>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b446:	6813      	ldr	r3, [r2, #0]
 800b448:	484c      	ldr	r0, [pc, #304]	; (800b57c <UART_SetConfig+0x2cc>)
 800b44a:	f013 0f20 	tst.w	r3, #32
 800b44e:	d003      	beq.n	800b458 <UART_SetConfig+0x1a8>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b450:	6813      	ldr	r3, [r2, #0]
 800b452:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b456:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b458:	4b49      	ldr	r3, [pc, #292]	; (800b580 <UART_SetConfig+0x2d0>)
 800b45a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b45c:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b45e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b462:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b466:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b46a:	4299      	cmp	r1, r3
 800b46c:	d8c1      	bhi.n	800b3f2 <UART_SetConfig+0x142>
 800b46e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800b472:	d8be      	bhi.n	800b3f2 <UART_SetConfig+0x142>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b474:	2300      	movs	r3, #0
 800b476:	4619      	mov	r1, r3
 800b478:	f7f5 f956 	bl	8000728 <__aeabi_uldivmod>
 800b47c:	462a      	mov	r2, r5
 800b47e:	0209      	lsls	r1, r1, #8
 800b480:	086b      	lsrs	r3, r5, #1
 800b482:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800b486:	0200      	lsls	r0, r0, #8
 800b488:	18c0      	adds	r0, r0, r3
 800b48a:	f04f 0300 	mov.w	r3, #0
 800b48e:	f141 0100 	adc.w	r1, r1, #0
 800b492:	f7f5 f949 	bl	8000728 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b496:	4b3b      	ldr	r3, [pc, #236]	; (800b584 <UART_SetConfig+0x2d4>)
 800b498:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d8a8      	bhi.n	800b3f2 <UART_SetConfig+0x142>
          huart->Instance->BRR = usartdiv;
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	60d8      	str	r0, [r3, #12]
 800b4a4:	e7b5      	b.n	800b412 <UART_SetConfig+0x162>
        pclk = (uint32_t) CSI_VALUE;
 800b4a6:	4838      	ldr	r0, [pc, #224]	; (800b588 <UART_SetConfig+0x2d8>)
 800b4a8:	e7d6      	b.n	800b458 <UART_SetConfig+0x1a8>
    switch (clocksource)
 800b4aa:	2b20      	cmp	r3, #32
 800b4ac:	d03b      	beq.n	800b526 <UART_SetConfig+0x276>
 800b4ae:	2b40      	cmp	r3, #64	; 0x40
 800b4b0:	d00b      	beq.n	800b4ca <UART_SetConfig+0x21a>
 800b4b2:	2b10      	cmp	r3, #16
 800b4b4:	d19d      	bne.n	800b3f2 <UART_SetConfig+0x142>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4b6:	4b20      	ldr	r3, [pc, #128]	; (800b538 <UART_SetConfig+0x288>)
 800b4b8:	4830      	ldr	r0, [pc, #192]	; (800b57c <UART_SetConfig+0x2cc>)
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	f012 0f20 	tst.w	r2, #32
 800b4c0:	d003      	beq.n	800b4ca <UART_SetConfig+0x21a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b4c8:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b4cc:	4b2c      	ldr	r3, [pc, #176]	; (800b580 <UART_SetConfig+0x2d0>)
 800b4ce:	6862      	ldr	r2, [r4, #4]
 800b4d0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b4d4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b4d8:	0850      	lsrs	r0, r2, #1
 800b4da:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800b4de:	fbb0 f0f2 	udiv	r0, r0, r2
 800b4e2:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4e4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800b4e8:	f1a3 0110 	sub.w	r1, r3, #16
 800b4ec:	4291      	cmp	r1, r2
 800b4ee:	d880      	bhi.n	800b3f2 <UART_SetConfig+0x142>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4f0:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b4f4:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800b4f8:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4fa:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800b4fc:	4318      	orrs	r0, r3
 800b4fe:	60d0      	str	r0, [r2, #12]
 800b500:	e787      	b.n	800b412 <UART_SetConfig+0x162>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b502:	f7fd fdcb 	bl	800909c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b506:	2800      	cmp	r0, #0
 800b508:	d083      	beq.n	800b412 <UART_SetConfig+0x162>
 800b50a:	e7de      	b.n	800b4ca <UART_SetConfig+0x21a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b50c:	f7fd fdd8 	bl	80090c0 <HAL_RCC_GetPCLK2Freq>
        break;
 800b510:	e7f9      	b.n	800b506 <UART_SetConfig+0x256>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b512:	4668      	mov	r0, sp
 800b514:	f7fe fb94 	bl	8009c40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b518:	9801      	ldr	r0, [sp, #4]
        break;
 800b51a:	e7f4      	b.n	800b506 <UART_SetConfig+0x256>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b51c:	a803      	add	r0, sp, #12
 800b51e:	f7fe fc37 	bl	8009d90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b522:	9804      	ldr	r0, [sp, #16]
        break;
 800b524:	e7ef      	b.n	800b506 <UART_SetConfig+0x256>
        pclk = (uint32_t) CSI_VALUE;
 800b526:	4818      	ldr	r0, [pc, #96]	; (800b588 <UART_SetConfig+0x2d8>)
 800b528:	e7cf      	b.n	800b4ca <UART_SetConfig+0x21a>
 800b52a:	bf00      	nop
 800b52c:	cfff69f3 	.word	0xcfff69f3
 800b530:	58000c00 	.word	0x58000c00
 800b534:	40011000 	.word	0x40011000
 800b538:	58024400 	.word	0x58024400
 800b53c:	08014822 	.word	0x08014822
 800b540:	40004400 	.word	0x40004400
 800b544:	0801484b 	.word	0x0801484b
 800b548:	40004800 	.word	0x40004800
 800b54c:	0801484b 	.word	0x0801484b
 800b550:	40004c00 	.word	0x40004c00
 800b554:	0801484b 	.word	0x0801484b
 800b558:	40005000 	.word	0x40005000
 800b55c:	0801484b 	.word	0x0801484b
 800b560:	40011400 	.word	0x40011400
 800b564:	08014822 	.word	0x08014822
 800b568:	40007800 	.word	0x40007800
 800b56c:	0801484b 	.word	0x0801484b
 800b570:	40007c00 	.word	0x40007c00
 800b574:	0801484b 	.word	0x0801484b
 800b578:	08014851 	.word	0x08014851
 800b57c:	03d09000 	.word	0x03d09000
 800b580:	08014858 	.word	0x08014858
 800b584:	000ffcff 	.word	0x000ffcff
 800b588:	003d0900 	.word	0x003d0900
    switch (clocksource)
 800b58c:	2b08      	cmp	r3, #8
 800b58e:	d817      	bhi.n	800b5c0 <UART_SetConfig+0x310>
 800b590:	2b08      	cmp	r3, #8
 800b592:	f63f af2e 	bhi.w	800b3f2 <UART_SetConfig+0x142>
 800b596:	a201      	add	r2, pc, #4	; (adr r2, 800b59c <UART_SetConfig+0x2ec>)
 800b598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b59c:	0800b611 	.word	0x0800b611
 800b5a0:	0800b61d 	.word	0x0800b61d
 800b5a4:	0800b3f3 	.word	0x0800b3f3
 800b5a8:	0800b3f3 	.word	0x0800b3f3
 800b5ac:	0800b623 	.word	0x0800b623
 800b5b0:	0800b3f3 	.word	0x0800b3f3
 800b5b4:	0800b3f3 	.word	0x0800b3f3
 800b5b8:	0800b3f3 	.word	0x0800b3f3
 800b5bc:	0800b62d 	.word	0x0800b62d
 800b5c0:	2b20      	cmp	r3, #32
 800b5c2:	d038      	beq.n	800b636 <UART_SetConfig+0x386>
 800b5c4:	2b40      	cmp	r3, #64	; 0x40
 800b5c6:	d038      	beq.n	800b63a <UART_SetConfig+0x38a>
 800b5c8:	2b10      	cmp	r3, #16
 800b5ca:	f47f af12 	bne.w	800b3f2 <UART_SetConfig+0x142>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5ce:	4a1d      	ldr	r2, [pc, #116]	; (800b644 <UART_SetConfig+0x394>)
 800b5d0:	6813      	ldr	r3, [r2, #0]
 800b5d2:	f013 0f20 	tst.w	r3, #32
 800b5d6:	4b1c      	ldr	r3, [pc, #112]	; (800b648 <UART_SetConfig+0x398>)
 800b5d8:	d032      	beq.n	800b640 <UART_SetConfig+0x390>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5da:	6810      	ldr	r0, [r2, #0]
 800b5dc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800b5e0:	fa23 f000 	lsr.w	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b5e6:	4b19      	ldr	r3, [pc, #100]	; (800b64c <UART_SetConfig+0x39c>)
 800b5e8:	6862      	ldr	r2, [r4, #4]
 800b5ea:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b5ee:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5f2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800b5f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5fa:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5fc:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800b600:	f1a3 0110 	sub.w	r1, r3, #16
 800b604:	4291      	cmp	r1, r2
 800b606:	f63f aef4 	bhi.w	800b3f2 <UART_SetConfig+0x142>
        huart->Instance->BRR = usartdiv;
 800b60a:	6822      	ldr	r2, [r4, #0]
 800b60c:	60d3      	str	r3, [r2, #12]
 800b60e:	e700      	b.n	800b412 <UART_SetConfig+0x162>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b610:	f7fd fd44 	bl	800909c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b614:	2800      	cmp	r0, #0
 800b616:	f43f aefc 	beq.w	800b412 <UART_SetConfig+0x162>
 800b61a:	e7e3      	b.n	800b5e4 <UART_SetConfig+0x334>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b61c:	f7fd fd50 	bl	80090c0 <HAL_RCC_GetPCLK2Freq>
        break;
 800b620:	e7f8      	b.n	800b614 <UART_SetConfig+0x364>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b622:	4668      	mov	r0, sp
 800b624:	f7fe fb0c 	bl	8009c40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b628:	9801      	ldr	r0, [sp, #4]
        break;
 800b62a:	e7f3      	b.n	800b614 <UART_SetConfig+0x364>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b62c:	a803      	add	r0, sp, #12
 800b62e:	f7fe fbaf 	bl	8009d90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b632:	9804      	ldr	r0, [sp, #16]
        break;
 800b634:	e7ee      	b.n	800b614 <UART_SetConfig+0x364>
        pclk = (uint32_t) CSI_VALUE;
 800b636:	4806      	ldr	r0, [pc, #24]	; (800b650 <UART_SetConfig+0x3a0>)
 800b638:	e7d4      	b.n	800b5e4 <UART_SetConfig+0x334>
    switch (clocksource)
 800b63a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b63e:	e7d1      	b.n	800b5e4 <UART_SetConfig+0x334>
          pclk = (uint32_t) HSI_VALUE;
 800b640:	4618      	mov	r0, r3
 800b642:	e7cf      	b.n	800b5e4 <UART_SetConfig+0x334>
 800b644:	58024400 	.word	0x58024400
 800b648:	03d09000 	.word	0x03d09000
 800b64c:	08014858 	.word	0x08014858
 800b650:	003d0900 	.word	0x003d0900

0800b654 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b654:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b656:	07da      	lsls	r2, r3, #31
{
 800b658:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b65a:	d506      	bpl.n	800b66a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b65c:	6801      	ldr	r1, [r0, #0]
 800b65e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800b660:	684a      	ldr	r2, [r1, #4]
 800b662:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b666:	4322      	orrs	r2, r4
 800b668:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b66a:	079c      	lsls	r4, r3, #30
 800b66c:	d506      	bpl.n	800b67c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b66e:	6801      	ldr	r1, [r0, #0]
 800b670:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800b672:	684a      	ldr	r2, [r1, #4]
 800b674:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b678:	4322      	orrs	r2, r4
 800b67a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b67c:	0759      	lsls	r1, r3, #29
 800b67e:	d506      	bpl.n	800b68e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b680:	6801      	ldr	r1, [r0, #0]
 800b682:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800b684:	684a      	ldr	r2, [r1, #4]
 800b686:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b68a:	4322      	orrs	r2, r4
 800b68c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b68e:	071a      	lsls	r2, r3, #28
 800b690:	d506      	bpl.n	800b6a0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b692:	6801      	ldr	r1, [r0, #0]
 800b694:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800b696:	684a      	ldr	r2, [r1, #4]
 800b698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b69c:	4322      	orrs	r2, r4
 800b69e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6a0:	06dc      	lsls	r4, r3, #27
 800b6a2:	d506      	bpl.n	800b6b2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6a4:	6801      	ldr	r1, [r0, #0]
 800b6a6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800b6a8:	688a      	ldr	r2, [r1, #8]
 800b6aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b6ae:	4322      	orrs	r2, r4
 800b6b0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6b2:	0699      	lsls	r1, r3, #26
 800b6b4:	d506      	bpl.n	800b6c4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6b6:	6801      	ldr	r1, [r0, #0]
 800b6b8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800b6ba:	688a      	ldr	r2, [r1, #8]
 800b6bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b6c0:	4322      	orrs	r2, r4
 800b6c2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6c4:	065a      	lsls	r2, r3, #25
 800b6c6:	d510      	bpl.n	800b6ea <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6c8:	6801      	ldr	r1, [r0, #0]
 800b6ca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800b6cc:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b6ce:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6d2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b6d6:	ea42 0204 	orr.w	r2, r2, r4
 800b6da:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b6dc:	d105      	bne.n	800b6ea <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b6de:	684a      	ldr	r2, [r1, #4]
 800b6e0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800b6e2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800b6e6:	4322      	orrs	r2, r4
 800b6e8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b6ea:	061b      	lsls	r3, r3, #24
 800b6ec:	d506      	bpl.n	800b6fc <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b6ee:	6802      	ldr	r2, [r0, #0]
 800b6f0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800b6f2:	6853      	ldr	r3, [r2, #4]
 800b6f4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800b6f8:	430b      	orrs	r3, r1
 800b6fa:	6053      	str	r3, [r2, #4]
}
 800b6fc:	bd10      	pop	{r4, pc}

0800b6fe <UART_WaitOnFlagUntilTimeout>:
{
 800b6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b702:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b706:	4604      	mov	r4, r0
 800b708:	460e      	mov	r6, r1
 800b70a:	4615      	mov	r5, r2
 800b70c:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b70e:	6822      	ldr	r2, [r4, #0]
 800b710:	69d3      	ldr	r3, [r2, #28]
 800b712:	ea36 0303 	bics.w	r3, r6, r3
 800b716:	bf0c      	ite	eq
 800b718:	2301      	moveq	r3, #1
 800b71a:	2300      	movne	r3, #0
 800b71c:	42ab      	cmp	r3, r5
 800b71e:	d001      	beq.n	800b724 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800b720:	2000      	movs	r0, #0
 800b722:	e01c      	b.n	800b75e <UART_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800b724:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b728:	d0f2      	beq.n	800b710 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b72a:	f7fb f861 	bl	80067f0 <HAL_GetTick>
 800b72e:	1bc0      	subs	r0, r0, r7
 800b730:	4540      	cmp	r0, r8
 800b732:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b734:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b736:	d802      	bhi.n	800b73e <UART_WaitOnFlagUntilTimeout+0x40>
 800b738:	f1b8 0f00 	cmp.w	r8, #0
 800b73c:	d111      	bne.n	800b762 <UART_WaitOnFlagUntilTimeout+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b73e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b742:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b744:	6883      	ldr	r3, [r0, #8]
 800b746:	f023 0301 	bic.w	r3, r3, #1
 800b74a:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800b74c:	2320      	movs	r3, #32
 800b74e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b752:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800b756:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800b758:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800b75a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 800b75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b762:	075a      	lsls	r2, r3, #29
 800b764:	d5d3      	bpl.n	800b70e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b766:	69c3      	ldr	r3, [r0, #28]
 800b768:	051b      	lsls	r3, r3, #20
 800b76a:	d5d0      	bpl.n	800b70e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b76c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b770:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b772:	6803      	ldr	r3, [r0, #0]
 800b774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b778:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b77a:	6883      	ldr	r3, [r0, #8]
 800b77c:	f023 0301 	bic.w	r3, r3, #1
 800b780:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800b782:	2320      	movs	r3, #32
 800b784:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b788:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b78c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800b790:	e7e1      	b.n	800b756 <UART_WaitOnFlagUntilTimeout+0x58>

0800b792 <HAL_UART_Transmit>:
{
 800b792:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b796:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800b798:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 800b79c:	4604      	mov	r4, r0
 800b79e:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800b7a0:	2b20      	cmp	r3, #32
{
 800b7a2:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800b7a4:	d150      	bne.n	800b848 <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 800b7a6:	2900      	cmp	r1, #0
 800b7a8:	d04c      	beq.n	800b844 <HAL_UART_Transmit+0xb2>
 800b7aa:	2a00      	cmp	r2, #0
 800b7ac:	d04a      	beq.n	800b844 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 800b7ae:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d048      	beq.n	800b848 <HAL_UART_Transmit+0xb6>
 800b7b6:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7b8:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800b7ba:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b7be:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7c0:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b7c4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 800b7c8:	f7fb f812 	bl	80067f0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7cc:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800b7ce:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 800b7d0:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7d4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 800b7d8:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7dc:	d103      	bne.n	800b7e6 <HAL_UART_Transmit+0x54>
 800b7de:	6922      	ldr	r2, [r4, #16]
 800b7e0:	b90a      	cbnz	r2, 800b7e6 <HAL_UART_Transmit+0x54>
 800b7e2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800b7e4:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 800b7ec:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b7f0:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800b7f4:	b292      	uxth	r2, r2
 800b7f6:	b942      	cbnz	r2, 800b80a <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b7f8:	2140      	movs	r1, #64	; 0x40
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f7ff ff7f 	bl	800b6fe <UART_WaitOnFlagUntilTimeout>
 800b800:	b958      	cbnz	r0, 800b81a <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 800b802:	2320      	movs	r3, #32
 800b804:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 800b808:	e008      	b.n	800b81c <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b80a:	2200      	movs	r2, #0
 800b80c:	2180      	movs	r1, #128	; 0x80
 800b80e:	4620      	mov	r0, r4
 800b810:	9303      	str	r3, [sp, #12]
 800b812:	f7ff ff74 	bl	800b6fe <UART_WaitOnFlagUntilTimeout>
 800b816:	9b03      	ldr	r3, [sp, #12]
 800b818:	b118      	cbz	r0, 800b822 <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 800b81a:	2003      	movs	r0, #3
}
 800b81c:	b004      	add	sp, #16
 800b81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b822:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 800b824:	b95e      	cbnz	r6, 800b83e <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b826:	f835 2b02 	ldrh.w	r2, [r5], #2
 800b82a:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b82e:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 800b830:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800b834:	3a01      	subs	r2, #1
 800b836:	b292      	uxth	r2, r2
 800b838:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 800b83c:	e7d6      	b.n	800b7ec <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b83e:	f816 2b01 	ldrb.w	r2, [r6], #1
 800b842:	e7f4      	b.n	800b82e <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 800b844:	2001      	movs	r0, #1
 800b846:	e7e9      	b.n	800b81c <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 800b848:	2002      	movs	r0, #2
 800b84a:	e7e7      	b.n	800b81c <HAL_UART_Transmit+0x8a>

0800b84c <UART_CheckIdleState>:
{
 800b84c:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b84e:	2500      	movs	r5, #0
{
 800b850:	4604      	mov	r4, r0
 800b852:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b854:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800b858:	f7fa ffca 	bl	80067f0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b85c:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800b85e:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b860:	6812      	ldr	r2, [r2, #0]
 800b862:	0711      	lsls	r1, r2, #28
 800b864:	d416      	bmi.n	800b894 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b866:	6822      	ldr	r2, [r4, #0]
 800b868:	6812      	ldr	r2, [r2, #0]
 800b86a:	0752      	lsls	r2, r2, #29
 800b86c:	d509      	bpl.n	800b882 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b86e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800b872:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b876:	4620      	mov	r0, r4
 800b878:	9200      	str	r2, [sp, #0]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f7ff ff3f 	bl	800b6fe <UART_WaitOnFlagUntilTimeout>
 800b880:	b9a8      	cbnz	r0, 800b8ae <UART_CheckIdleState+0x62>
  huart->gState = HAL_UART_STATE_READY;
 800b882:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800b884:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800b886:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800b88a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b88e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 800b892:	e00d      	b.n	800b8b0 <UART_CheckIdleState+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b894:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800b898:	9003      	str	r0, [sp, #12]
 800b89a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b89e:	4620      	mov	r0, r4
 800b8a0:	9200      	str	r2, [sp, #0]
 800b8a2:	462a      	mov	r2, r5
 800b8a4:	f7ff ff2b 	bl	800b6fe <UART_WaitOnFlagUntilTimeout>
 800b8a8:	9b03      	ldr	r3, [sp, #12]
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d0db      	beq.n	800b866 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800b8ae:	2003      	movs	r0, #3
}
 800b8b0:	b005      	add	sp, #20
 800b8b2:	bd30      	pop	{r4, r5, pc}

0800b8b4 <HAL_UART_Init>:
{
 800b8b4:	b510      	push	{r4, lr}
  if (huart == NULL)
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	b350      	cbz	r0, 800b910 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800b8ba:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800b8be:	b91b      	cbnz	r3, 800b8c8 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800b8c0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 800b8c4:	f7f8 fc2a 	bl	800411c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800b8c8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b8ca:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8cc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800b8ce:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 800b8d2:	6813      	ldr	r3, [r2, #0]
 800b8d4:	f023 0301 	bic.w	r3, r3, #1
 800b8d8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8da:	f7ff fce9 	bl	800b2b0 <UART_SetConfig>
 800b8de:	2801      	cmp	r0, #1
 800b8e0:	d016      	beq.n	800b910 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b8e4:	b113      	cbz	r3, 800b8ec <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f7ff feb4 	bl	800b654 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8ec:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800b8ee:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8f0:	685a      	ldr	r2, [r3, #4]
 800b8f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b8f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8f8:	689a      	ldr	r2, [r3, #8]
 800b8fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8fe:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	f042 0201 	orr.w	r2, r2, #1
}
 800b906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800b90a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800b90c:	f7ff bf9e 	b.w	800b84c <UART_CheckIdleState>
}
 800b910:	2001      	movs	r0, #1
 800b912:	bd10      	pop	{r4, pc}

0800b914 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b918:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b91a:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800b91e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800b922:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800b926:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800b92a:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800b92e:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b930:	b9a2      	cbnz	r2, 800b95c <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b932:	ea43 0209 	orr.w	r2, r3, r9
 800b936:	6801      	ldr	r1, [r0, #0]
 800b938:	432a      	orrs	r2, r5
 800b93a:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800b93e:	ea42 0308 	orr.w	r3, r2, r8
 800b942:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800b946:	ea43 030e 	orr.w	r3, r3, lr
 800b94a:	ea43 030c 	orr.w	r3, r3, ip
 800b94e:	433b      	orrs	r3, r7
 800b950:	4333      	orrs	r3, r6
 800b952:	430b      	orrs	r3, r1
 800b954:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800b956:	2000      	movs	r0, #0
 800b958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b95c:	6802      	ldr	r2, [r0, #0]
 800b95e:	ea43 0309 	orr.w	r3, r3, r9
 800b962:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b966:	4313      	orrs	r3, r2
 800b968:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b96a:	ea45 0308 	orr.w	r3, r5, r8
 800b96e:	6842      	ldr	r2, [r0, #4]
 800b970:	ea43 030e 	orr.w	r3, r3, lr
 800b974:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800b978:	ea43 030c 	orr.w	r3, r3, ip
 800b97c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800b980:	433b      	orrs	r3, r7
 800b982:	4333      	orrs	r3, r6
 800b984:	4313      	orrs	r3, r2
 800b986:	6043      	str	r3, [r0, #4]
 800b988:	e7e5      	b.n	800b956 <FMC_SDRAM_Init+0x42>

0800b98a <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b98a:	68cb      	ldr	r3, [r1, #12]
 800b98c:	f103 3cff 	add.w	ip, r3, #4294967295
 800b990:	694b      	ldr	r3, [r1, #20]
{
 800b992:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b994:	3b01      	subs	r3, #1
 800b996:	680f      	ldr	r7, [r1, #0]
 800b998:	684c      	ldr	r4, [r1, #4]
 800b99a:	688e      	ldr	r6, [r1, #8]
 800b99c:	051b      	lsls	r3, r3, #20
 800b99e:	690d      	ldr	r5, [r1, #16]
 800b9a0:	3c01      	subs	r4, #1
 800b9a2:	6989      	ldr	r1, [r1, #24]
 800b9a4:	3e01      	subs	r6, #1
 800b9a6:	3d01      	subs	r5, #1
 800b9a8:	3f01      	subs	r7, #1
 800b9aa:	3901      	subs	r1, #1
 800b9ac:	0124      	lsls	r4, r4, #4
 800b9ae:	0236      	lsls	r6, r6, #8
 800b9b0:	042d      	lsls	r5, r5, #16
 800b9b2:	0609      	lsls	r1, r1, #24
 800b9b4:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800b9b8:	b95a      	cbnz	r2, 800b9d2 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b9ba:	433b      	orrs	r3, r7
 800b9bc:	6882      	ldr	r2, [r0, #8]
 800b9be:	4323      	orrs	r3, r4
 800b9c0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800b9c4:	4333      	orrs	r3, r6
 800b9c6:	432b      	orrs	r3, r5
 800b9c8:	430b      	orrs	r3, r1
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b9d2:	6882      	ldr	r2, [r0, #8]
 800b9d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b9d8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800b9dc:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b9de:	ea44 0306 	orr.w	r3, r4, r6
 800b9e2:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b9e4:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b9e6:	68c2      	ldr	r2, [r0, #12]
 800b9e8:	432b      	orrs	r3, r5
 800b9ea:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800b9ee:	430b      	orrs	r3, r1
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	60c3      	str	r3, [r0, #12]
 800b9f4:	e7eb      	b.n	800b9ce <FMC_SDRAM_Timing_Init+0x44>

0800b9f6 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b9f6:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 800b9f8:	e9d1 3400 	ldrd	r3, r4, [r1]
 800b9fc:	6902      	ldr	r2, [r0, #16]
 800b9fe:	4323      	orrs	r3, r4
 800ba00:	4313      	orrs	r3, r2
 800ba02:	68ca      	ldr	r2, [r1, #12]
 800ba04:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 800ba08:	688a      	ldr	r2, [r1, #8]
 800ba0a:	3a01      	subs	r2, #1
 800ba0c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800ba10:	6103      	str	r3, [r0, #16]
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800ba12:	2000      	movs	r0, #0
 800ba14:	bd10      	pop	{r4, pc}

0800ba16 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ba16:	6943      	ldr	r3, [r0, #20]
 800ba18:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800ba1c:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800ba20:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800ba24:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800ba26:	2000      	movs	r0, #0
 800ba28:	4770      	bx	lr
	...

0800ba2c <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba2c:	4b11      	ldr	r3, [pc, #68]	; (800ba74 <SDMMC_GetCmdResp2+0x48>)
 800ba2e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 800ba32:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba3a:	f241 3188 	movw	r1, #5000	; 0x1388
 800ba3e:	434b      	muls	r3, r1

  do
  {
    if (count-- == 0U)
 800ba40:	3b01      	subs	r3, #1
 800ba42:	d313      	bcc.n	800ba6c <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800ba44:	6b51      	ldr	r1, [r2, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba46:	f011 0f45 	tst.w	r1, #69	; 0x45
 800ba4a:	d0f9      	beq.n	800ba40 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba4c:	0489      	lsls	r1, r1, #18
 800ba4e:	d4f7      	bmi.n	800ba40 <SDMMC_GetCmdResp2+0x14>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba50:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800ba52:	075b      	lsls	r3, r3, #29
 800ba54:	d502      	bpl.n	800ba5c <SDMMC_GetCmdResp2+0x30>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba56:	2004      	movs	r0, #4
 800ba58:	6390      	str	r0, [r2, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba5a:	4770      	bx	lr
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba5c:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800ba5e:	f010 0001 	ands.w	r0, r0, #1
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba62:	bf14      	ite	ne
 800ba64:	2301      	movne	r3, #1
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba66:	4b04      	ldreq	r3, [pc, #16]	; (800ba78 <SDMMC_GetCmdResp2+0x4c>)
 800ba68:	6393      	str	r3, [r2, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba6a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800ba6c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	24000000 	.word	0x24000000
 800ba78:	002000c5 	.word	0x002000c5

0800ba7c <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba7c:	4b0f      	ldr	r3, [pc, #60]	; (800babc <SDMMC_GetCmdResp3+0x40>)
 800ba7e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 800ba82:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba8a:	f241 3188 	movw	r1, #5000	; 0x1388
 800ba8e:	434b      	muls	r3, r1

  do
  {
    if (count-- == 0U)
 800ba90:	3b01      	subs	r3, #1
 800ba92:	d30f      	bcc.n	800bab4 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800ba94:	6b51      	ldr	r1, [r2, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba96:	f011 0f45 	tst.w	r1, #69	; 0x45
 800ba9a:	d0f9      	beq.n	800ba90 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba9c:	0489      	lsls	r1, r1, #18
 800ba9e:	d4f7      	bmi.n	800ba90 <SDMMC_GetCmdResp3+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baa0:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800baa2:	f010 0004 	ands.w	r0, r0, #4
 800baa6:	d002      	beq.n	800baae <SDMMC_GetCmdResp3+0x32>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800baa8:	2004      	movs	r0, #4
 800baaa:	6390      	str	r0, [r2, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baac:	4770      	bx	lr
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800baae:	4b04      	ldr	r3, [pc, #16]	; (800bac0 <SDMMC_GetCmdResp3+0x44>)
 800bab0:	6393      	str	r3, [r2, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bab2:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800bab4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	24000000 	.word	0x24000000
 800bac0:	002000c5 	.word	0x002000c5

0800bac4 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bac4:	4b45      	ldr	r3, [pc, #276]	; (800bbdc <SDMMC_GetCmdResp1+0x118>)
{
 800bac6:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bac8:	681b      	ldr	r3, [r3, #0]
{
 800baca:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bacc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800bad0:	fbb3 f3f0 	udiv	r3, r3, r0
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800bad4:	4842      	ldr	r0, [pc, #264]	; (800bbe0 <SDMMC_GetCmdResp1+0x11c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bad6:	435a      	muls	r2, r3
    if (count-- == 0U)
 800bad8:	2a00      	cmp	r2, #0
 800bada:	d048      	beq.n	800bb6e <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 800badc:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bade:	4203      	tst	r3, r0
 800bae0:	d007      	beq.n	800baf2 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800bae2:	049b      	lsls	r3, r3, #18
 800bae4:	d405      	bmi.n	800baf2 <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bae6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bae8:	0758      	lsls	r0, r3, #29
 800baea:	d504      	bpl.n	800baf6 <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800baec:	2004      	movs	r0, #4
 800baee:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800baf0:	bd10      	pop	{r4, pc}
 800baf2:	3a01      	subs	r2, #1
 800baf4:	e7f0      	b.n	800bad8 <SDMMC_GetCmdResp1+0x14>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baf6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800baf8:	f010 0001 	ands.w	r0, r0, #1
 800bafc:	d002      	beq.n	800bb04 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bafe:	2301      	movs	r3, #1
 800bb00:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb02:	e7f5      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb04:	4b37      	ldr	r3, [pc, #220]	; (800bbe4 <SDMMC_GetCmdResp1+0x120>)
 800bb06:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bb08:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	4299      	cmp	r1, r3
 800bb0e:	d131      	bne.n	800bb74 <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 800bb10:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bb12:	4835      	ldr	r0, [pc, #212]	; (800bbe8 <SDMMC_GetCmdResp1+0x124>)
 800bb14:	4018      	ands	r0, r3
 800bb16:	2800      	cmp	r0, #0
 800bb18:	d0ea      	beq.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	db2c      	blt.n	800bb78 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bb1e:	005a      	lsls	r2, r3, #1
 800bb20:	d42d      	bmi.n	800bb7e <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bb22:	009c      	lsls	r4, r3, #2
 800bb24:	d42d      	bmi.n	800bb82 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bb26:	00d9      	lsls	r1, r3, #3
 800bb28:	d42d      	bmi.n	800bb86 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bb2a:	011a      	lsls	r2, r3, #4
 800bb2c:	d42e      	bmi.n	800bb8c <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bb2e:	015c      	lsls	r4, r3, #5
 800bb30:	d42f      	bmi.n	800bb92 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bb32:	01d9      	lsls	r1, r3, #7
 800bb34:	d430      	bmi.n	800bb98 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bb36:	021a      	lsls	r2, r3, #8
 800bb38:	d431      	bmi.n	800bb9e <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bb3a:	025c      	lsls	r4, r3, #9
 800bb3c:	d432      	bmi.n	800bba4 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bb3e:	0299      	lsls	r1, r3, #10
 800bb40:	d433      	bmi.n	800bbaa <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bb42:	02da      	lsls	r2, r3, #11
 800bb44:	d434      	bmi.n	800bbb0 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bb46:	035c      	lsls	r4, r3, #13
 800bb48:	d435      	bmi.n	800bbb6 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bb4a:	0399      	lsls	r1, r3, #14
 800bb4c:	d436      	bmi.n	800bbbc <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bb4e:	03da      	lsls	r2, r3, #15
 800bb50:	d437      	bmi.n	800bbc2 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb52:	041c      	lsls	r4, r3, #16
 800bb54:	d438      	bmi.n	800bbc8 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bb56:	0459      	lsls	r1, r3, #17
 800bb58:	d439      	bmi.n	800bbce <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bb5a:	049a      	lsls	r2, r3, #18
 800bb5c:	d43a      	bmi.n	800bbd4 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb5e:	f013 0f08 	tst.w	r3, #8
 800bb62:	bf14      	ite	ne
 800bb64:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800bb68:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bb6c:	e7c0      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800bb6e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bb72:	e7bd      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb74:	2001      	movs	r0, #1
 800bb76:	e7bb      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb78:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800bb7c:	e7b8      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb7e:	2040      	movs	r0, #64	; 0x40
 800bb80:	e7b6      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb82:	2080      	movs	r0, #128	; 0x80
 800bb84:	e7b4      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb86:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bb8a:	e7b1      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bb90:	e7ae      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb92:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bb96:	e7ab      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bb9c:	e7a8      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb9e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bba2:	e7a5      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bba4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bba8:	e7a2      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bbaa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bbae:	e79f      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 800bbb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bbb4:	e79c      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bbb6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bbba:	e799      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bbbc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bbc0:	e796      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bbc2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bbc6:	e793      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bbc8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bbcc:	e790      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bbce:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bbd2:	e78d      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 800bbd4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800bbd8:	e78a      	b.n	800baf0 <SDMMC_GetCmdResp1+0x2c>
 800bbda:	bf00      	nop
 800bbdc:	24000000 	.word	0x24000000
 800bbe0:	00200045 	.word	0x00200045
 800bbe4:	002000c5 	.word	0x002000c5
 800bbe8:	fdffe008 	.word	0xfdffe008

0800bbec <SDMMC_Init>:
{
 800bbec:	b084      	sub	sp, #16
 800bbee:	b510      	push	{r4, lr}
 800bbf0:	ac03      	add	r4, sp, #12
 800bbf2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800bbf6:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bbf8:	6841      	ldr	r1, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 800bbfa:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 800bbfc:	9a05      	ldr	r2, [sp, #20]
 800bbfe:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800bc00:	9a06      	ldr	r2, [sp, #24]
 800bc02:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 800bc04:	9a07      	ldr	r2, [sp, #28]
 800bc06:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bc08:	4a04      	ldr	r2, [pc, #16]	; (800bc1c <SDMMC_Init+0x30>)
 800bc0a:	400a      	ands	r2, r1
}
 800bc0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bc10:	4313      	orrs	r3, r2
}
 800bc12:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bc14:	6043      	str	r3, [r0, #4]
}
 800bc16:	2000      	movs	r0, #0
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	ffc02c00 	.word	0xffc02c00

0800bc20 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800bc20:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800bc24:	4770      	bx	lr

0800bc26 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800bc26:	680b      	ldr	r3, [r1, #0]
 800bc28:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	4770      	bx	lr

0800bc30 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800bc30:	6803      	ldr	r3, [r0, #0]
 800bc32:	f043 0303 	orr.w	r3, r3, #3
 800bc36:	6003      	str	r3, [r0, #0]
}
 800bc38:	2000      	movs	r0, #0
 800bc3a:	4770      	bx	lr

0800bc3c <SDMMC_PowerState_OFF>:
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 800bc3c:	6803      	ldr	r3, [r0, #0]
 800bc3e:	f023 0303 	bic.w	r3, r3, #3
 800bc42:	6003      	str	r3, [r0, #0]
}
 800bc44:	2000      	movs	r0, #0
 800bc46:	4770      	bx	lr

0800bc48 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bc48:	6800      	ldr	r0, [r0, #0]
}
 800bc4a:	f000 0003 	and.w	r0, r0, #3
 800bc4e:	4770      	bx	lr

0800bc50 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800bc50:	680b      	ldr	r3, [r1, #0]
{
 800bc52:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 800bc54:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bc56:	68c4      	ldr	r4, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc58:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 800bc5c:	4313      	orrs	r3, r2
                       Command->Response         |\
 800bc5e:	68ca      	ldr	r2, [r1, #12]
 800bc60:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800bc62:	690a      	ldr	r2, [r1, #16]
 800bc64:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bc66:	4a03      	ldr	r2, [pc, #12]	; (800bc74 <SDMMC_SendCommand+0x24>)
 800bc68:	4022      	ands	r2, r4
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	60c3      	str	r3, [r0, #12]
}
 800bc6e:	2000      	movs	r0, #0
 800bc70:	bd10      	pop	{r4, pc}
 800bc72:	bf00      	nop
 800bc74:	fffee0c0 	.word	0xfffee0c0

0800bc78 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bc78:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800bc7a:	5840      	ldr	r0, [r0, r1]
}
 800bc7c:	4770      	bx	lr

0800bc7e <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bc7e:	680b      	ldr	r3, [r1, #0]
{
 800bc80:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bc82:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800bc84:	684b      	ldr	r3, [r1, #4]
 800bc86:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bc88:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc8a:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bc8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc92:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 800bc94:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 800bc96:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 800bc98:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800bc9a:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800bca0:	2000      	movs	r0, #0
 800bca2:	bd10      	pop	{r4, pc}

0800bca4 <SDMMC_CmdBlockLength>:
{
 800bca4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bca6:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800bcaa:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcac:	2510      	movs	r5, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcae:	2200      	movs	r2, #0
{
 800bcb0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bcb2:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcb4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcb6:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcc2:	f7ff ffc5 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bcc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcca:	4629      	mov	r1, r5
 800bccc:	4620      	mov	r0, r4
 800bcce:	f7ff fef9 	bl	800bac4 <SDMMC_GetCmdResp1>
}
 800bcd2:	b007      	add	sp, #28
 800bcd4:	bd30      	pop	{r4, r5, pc}

0800bcd6 <SDMMC_CmdReadSingleBlock>:
{
 800bcd6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcd8:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800bcdc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcde:	2511      	movs	r5, #17
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bce0:	2200      	movs	r2, #0
{
 800bce2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bce4:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bce6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bce8:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcf4:	f7ff ffac 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bcf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f7ff fee0 	bl	800bac4 <SDMMC_GetCmdResp1>
}
 800bd04:	b007      	add	sp, #28
 800bd06:	bd30      	pop	{r4, r5, pc}

0800bd08 <SDMMC_CmdReadMultiBlock>:
{
 800bd08:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd0a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800bd0e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd10:	2512      	movs	r5, #18
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd12:	2200      	movs	r2, #0
{
 800bd14:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd16:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd18:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd1a:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd22:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd26:	f7ff ff93 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bd2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd2e:	4629      	mov	r1, r5
 800bd30:	4620      	mov	r0, r4
 800bd32:	f7ff fec7 	bl	800bac4 <SDMMC_GetCmdResp1>
}
 800bd36:	b007      	add	sp, #28
 800bd38:	bd30      	pop	{r4, r5, pc}

0800bd3a <SDMMC_CmdWriteSingleBlock>:
{
 800bd3a:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd3c:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800bd40:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd42:	2518      	movs	r5, #24
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd44:	2200      	movs	r2, #0
{
 800bd46:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bd48:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd4a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd4c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd54:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd58:	f7ff ff7a 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bd5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd60:	4629      	mov	r1, r5
 800bd62:	4620      	mov	r0, r4
 800bd64:	f7ff feae 	bl	800bac4 <SDMMC_GetCmdResp1>
}
 800bd68:	b007      	add	sp, #28
 800bd6a:	bd30      	pop	{r4, r5, pc}

0800bd6c <SDMMC_CmdWriteMultiBlock>:
{
 800bd6c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd6e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800bd72:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd74:	2519      	movs	r5, #25
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd76:	2200      	movs	r2, #0
{
 800bd78:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bd7a:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd7c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd7e:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd86:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd8a:	f7ff ff61 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bd8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd92:	4629      	mov	r1, r5
 800bd94:	4620      	mov	r0, r4
 800bd96:	f7ff fe95 	bl	800bac4 <SDMMC_GetCmdResp1>
}
 800bd9a:	b007      	add	sp, #28
 800bd9c:	bd30      	pop	{r4, r5, pc}
	...

0800bda0 <SDMMC_CmdStopTransfer>:
{
 800bda0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bda2:	2300      	movs	r3, #0
{
 800bda4:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bda6:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bda8:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800bdac:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdae:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdb0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bdb4:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdbc:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bdbe:	68c3      	ldr	r3, [r0, #12]
 800bdc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdc4:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bdc6:	68c3      	ldr	r3, [r0, #12]
 800bdc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdcc:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdce:	f7ff ff3f 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bdd2:	4a07      	ldr	r2, [pc, #28]	; (800bdf0 <SDMMC_CmdStopTransfer+0x50>)
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f7ff fe74 	bl	800bac4 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bddc:	68e3      	ldr	r3, [r4, #12]
    errorstate = SDMMC_ERROR_NONE;
 800bdde:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bde2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
}
 800bde6:	bf08      	it	eq
 800bde8:	2000      	moveq	r0, #0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bdea:	60e3      	str	r3, [r4, #12]
}
 800bdec:	b007      	add	sp, #28
 800bdee:	bd30      	pop	{r4, r5, pc}
 800bdf0:	05f5e100 	.word	0x05f5e100

0800bdf4 <SDMMC_CmdSelDesel>:
{
 800bdf4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdf6:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800bdfa:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdfc:	2507      	movs	r5, #7
{
 800bdfe:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800be00:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be02:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be04:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be06:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be12:	f7ff ff1d 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800be16:	f241 3288 	movw	r2, #5000	; 0x1388
 800be1a:	4629      	mov	r1, r5
 800be1c:	4620      	mov	r0, r4
 800be1e:	f7ff fe51 	bl	800bac4 <SDMMC_GetCmdResp1>
}
 800be22:	b007      	add	sp, #28
 800be24:	bd30      	pop	{r4, r5, pc}
	...

0800be28 <SDMMC_CmdGoIdleState>:
{
 800be28:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 800be2a:	2300      	movs	r3, #0
{
 800be2c:	b086      	sub	sp, #24
 800be2e:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be30:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800be32:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be36:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be3e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be40:	f7ff ff06 	bl	800bc50 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be44:	4b0a      	ldr	r3, [pc, #40]	; (800be70 <SDMMC_CmdGoIdleState+0x48>)
 800be46:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800be50:	f241 3288 	movw	r2, #5000	; 0x1388
 800be54:	4353      	muls	r3, r2
    if (count-- == 0U)
 800be56:	3b01      	subs	r3, #1
 800be58:	d307      	bcc.n	800be6a <SDMMC_CmdGoIdleState+0x42>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800be5a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800be5c:	0612      	lsls	r2, r2, #24
 800be5e:	d5fa      	bpl.n	800be56 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be60:	4b04      	ldr	r3, [pc, #16]	; (800be74 <SDMMC_CmdGoIdleState+0x4c>)
  return SDMMC_ERROR_NONE;
 800be62:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be64:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800be66:	b006      	add	sp, #24
 800be68:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800be6a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800be6e:	e7fa      	b.n	800be66 <SDMMC_CmdGoIdleState+0x3e>
 800be70:	24000000 	.word	0x24000000
 800be74:	002000c5 	.word	0x002000c5

0800be78 <SDMMC_CmdOperCond>:
{
 800be78:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800be7a:	f44f 7cd5 	mov.w	ip, #426	; 0x1aa
{
 800be7e:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800be80:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be82:	f44f 7e80 	mov.w	lr, #256	; 0x100
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be86:	a901      	add	r1, sp, #4
{
 800be88:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800be8a:	e9cd c301 	strd	ip, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be8e:	2300      	movs	r3, #0
 800be90:	e9cd e303 	strd	lr, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be98:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be9a:	f7ff fed9 	bl	800bc50 <SDMMC_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be9e:	4b13      	ldr	r3, [pc, #76]	; (800beec <SDMMC_CmdOperCond+0x74>)
 800bea0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	fbb3 f3f2 	udiv	r3, r3, r2
 800beaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800beae:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800beb0:	3b01      	subs	r3, #1
 800beb2:	d318      	bcc.n	800bee6 <SDMMC_CmdOperCond+0x6e>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800beb4:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800beb6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800beba:	d0f9      	beq.n	800beb0 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bebc:	0491      	lsls	r1, r2, #18
 800bebe:	d4f7      	bmi.n	800beb0 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bec2:	075a      	lsls	r2, r3, #29
 800bec4:	d503      	bpl.n	800bece <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bec6:	2004      	movs	r0, #4
 800bec8:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800beca:	b006      	add	sp, #24
 800becc:	bd10      	pop	{r4, pc}

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bece:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800bed0:	f010 0001 	ands.w	r0, r0, #1
 800bed4:	d002      	beq.n	800bedc <SDMMC_CmdOperCond+0x64>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bed6:	2301      	movs	r3, #1
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bed8:	63a3      	str	r3, [r4, #56]	; 0x38
 800beda:	e7f6      	b.n	800beca <SDMMC_CmdOperCond+0x52>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bedc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bede:	065b      	lsls	r3, r3, #25
 800bee0:	d5f3      	bpl.n	800beca <SDMMC_CmdOperCond+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bee2:	2340      	movs	r3, #64	; 0x40
 800bee4:	e7f8      	b.n	800bed8 <SDMMC_CmdOperCond+0x60>
      return SDMMC_ERROR_TIMEOUT;
 800bee6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800beea:	e7ee      	b.n	800beca <SDMMC_CmdOperCond+0x52>
 800beec:	24000000 	.word	0x24000000

0800bef0 <SDMMC_CmdAppCommand>:
{
 800bef0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bef2:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800bef6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bef8:	2537      	movs	r5, #55	; 0x37
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800befa:	2200      	movs	r2, #0
{
 800befc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800befe:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf00:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf02:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf0e:	f7ff fe9f 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bf12:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf16:	4629      	mov	r1, r5
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f7ff fdd3 	bl	800bac4 <SDMMC_GetCmdResp1>
}
 800bf1e:	b007      	add	sp, #28
 800bf20:	bd30      	pop	{r4, r5, pc}

0800bf22 <SDMMC_CmdAppOperCommand>:
{
 800bf22:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf24:	2229      	movs	r2, #41	; 0x29
{
 800bf26:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf28:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800bf2c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800bf2e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf30:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf32:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf3a:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf3e:	a901      	add	r1, sp, #4
 800bf40:	f7ff fe86 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bf44:	4620      	mov	r0, r4
 800bf46:	f7ff fd99 	bl	800ba7c <SDMMC_GetCmdResp3>
}
 800bf4a:	b006      	add	sp, #24
 800bf4c:	bd10      	pop	{r4, pc}

0800bf4e <SDMMC_CmdBusWidth>:
{
 800bf4e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf50:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800bf54:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf56:	2506      	movs	r5, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf58:	2200      	movs	r2, #0
{
 800bf5a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bf5c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf5e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf60:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf68:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf6c:	f7ff fe70 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bf70:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf74:	4629      	mov	r1, r5
 800bf76:	4620      	mov	r0, r4
 800bf78:	f7ff fda4 	bl	800bac4 <SDMMC_GetCmdResp1>
}
 800bf7c:	b007      	add	sp, #28
 800bf7e:	bd30      	pop	{r4, r5, pc}

0800bf80 <SDMMC_CmdSendSCR>:
{
 800bf80:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bf82:	2300      	movs	r3, #0
{
 800bf84:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bf86:	2533      	movs	r5, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf88:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800bf8c:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf8e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf90:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bf94:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf9c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf9e:	f7ff fe57 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bfa2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f7ff fd8b 	bl	800bac4 <SDMMC_GetCmdResp1>
}
 800bfae:	b007      	add	sp, #28
 800bfb0:	bd30      	pop	{r4, r5, pc}

0800bfb2 <SDMMC_CmdSendCID>:
{
 800bfb2:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bfb4:	2300      	movs	r3, #0
{
 800bfb6:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bfb8:	2202      	movs	r2, #2
{
 800bfba:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfbc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bfbe:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bfc2:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfc6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfce:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfd0:	f7ff fe3e 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f7ff fd29 	bl	800ba2c <SDMMC_GetCmdResp2>
}
 800bfda:	b006      	add	sp, #24
 800bfdc:	bd10      	pop	{r4, pc}

0800bfde <SDMMC_CmdSendCSD>:
{
 800bfde:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bfe0:	2209      	movs	r2, #9
{
 800bfe2:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bfe4:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800bfe8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800bfea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfec:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bfee:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bff6:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bffa:	a901      	add	r1, sp, #4
 800bffc:	f7ff fe28 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c000:	4620      	mov	r0, r4
 800c002:	f7ff fd13 	bl	800ba2c <SDMMC_GetCmdResp2>
}
 800c006:	b006      	add	sp, #24
 800c008:	bd10      	pop	{r4, pc}
	...

0800c00c <SDMMC_CmdSetRelAdd>:
{
 800c00c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c00e:	2300      	movs	r3, #0
{
 800c010:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c012:	2203      	movs	r2, #3
{
 800c014:	460d      	mov	r5, r1
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c016:	a901      	add	r1, sp, #4
{
 800c018:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c01a:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c01e:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c022:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c02a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c02c:	f7ff fe10 	bl	800bc50 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c030:	4b1e      	ldr	r3, [pc, #120]	; (800c0ac <SDMMC_CmdSetRelAdd+0xa0>)
 800c032:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	fbb3 f3f2 	udiv	r3, r3, r2
 800c03c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c040:	4353      	muls	r3, r2
    if (count-- == 0U)
 800c042:	3b01      	subs	r3, #1
 800c044:	d32a      	bcc.n	800c09c <SDMMC_CmdSetRelAdd+0x90>
    sta_reg = SDMMCx->STA;
 800c046:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c048:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c04c:	d0f9      	beq.n	800c042 <SDMMC_CmdSetRelAdd+0x36>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c04e:	0490      	lsls	r0, r2, #18
 800c050:	d4f7      	bmi.n	800c042 <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c054:	0759      	lsls	r1, r3, #29
 800c056:	d503      	bpl.n	800c060 <SDMMC_CmdSetRelAdd+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c058:	2004      	movs	r0, #4
 800c05a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800c05c:	b007      	add	sp, #28
 800c05e:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c060:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c062:	f010 0001 	ands.w	r0, r0, #1
 800c066:	d002      	beq.n	800c06e <SDMMC_CmdSetRelAdd+0x62>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c068:	2301      	movs	r3, #1
 800c06a:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c06c:	e7f6      	b.n	800c05c <SDMMC_CmdSetRelAdd+0x50>
  return (uint8_t)(SDMMCx->RESPCMD);
 800c06e:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c070:	b2db      	uxtb	r3, r3
 800c072:	2b03      	cmp	r3, #3
 800c074:	d115      	bne.n	800c0a2 <SDMMC_CmdSetRelAdd+0x96>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c076:	4b0e      	ldr	r3, [pc, #56]	; (800c0b0 <SDMMC_CmdSetRelAdd+0xa4>)
 800c078:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800c07a:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c07c:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800c080:	d102      	bne.n	800c088 <SDMMC_CmdSetRelAdd+0x7c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c082:	0c1b      	lsrs	r3, r3, #16
 800c084:	802b      	strh	r3, [r5, #0]
    return SDMMC_ERROR_NONE;
 800c086:	e7e9      	b.n	800c05c <SDMMC_CmdSetRelAdd+0x50>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c088:	045a      	lsls	r2, r3, #17
 800c08a:	d40c      	bmi.n	800c0a6 <SDMMC_CmdSetRelAdd+0x9a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c08c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800c090:	bf14      	ite	ne
 800c092:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800c096:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c09a:	e7df      	b.n	800c05c <SDMMC_CmdSetRelAdd+0x50>
      return SDMMC_ERROR_TIMEOUT;
 800c09c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c0a0:	e7dc      	b.n	800c05c <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0a2:	2001      	movs	r0, #1
 800c0a4:	e7da      	b.n	800c05c <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c0a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c0aa:	e7d7      	b.n	800c05c <SDMMC_CmdSetRelAdd+0x50>
 800c0ac:	24000000 	.word	0x24000000
 800c0b0:	002000c5 	.word	0x002000c5

0800c0b4 <SDMMC_CmdSendStatus>:
{
 800c0b4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0b6:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c0ba:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0bc:	250d      	movs	r5, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0be:	2200      	movs	r2, #0
{
 800c0c0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c0c2:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0c4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0c6:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0d2:	f7ff fdbd 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c0d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0da:	4629      	mov	r1, r5
 800c0dc:	4620      	mov	r0, r4
 800c0de:	f7ff fcf1 	bl	800bac4 <SDMMC_GetCmdResp1>
}
 800c0e2:	b007      	add	sp, #28
 800c0e4:	bd30      	pop	{r4, r5, pc}

0800c0e6 <SDMMC_CmdStatusRegister>:
{
 800c0e6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c0e8:	2300      	movs	r3, #0
{
 800c0ea:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c0ec:	250d      	movs	r5, #13
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0ee:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800c0f2:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0f4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0f6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c0fa:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c102:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c104:	f7ff fda4 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c108:	f241 3288 	movw	r2, #5000	; 0x1388
 800c10c:	4629      	mov	r1, r5
 800c10e:	4620      	mov	r0, r4
 800c110:	f7ff fcd8 	bl	800bac4 <SDMMC_GetCmdResp1>
}
 800c114:	b007      	add	sp, #28
 800c116:	bd30      	pop	{r4, r5, pc}

0800c118 <SDMMC_CmdVoltageSwitch>:
{
 800c118:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c11a:	2300      	movs	r3, #0
{
 800c11c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c11e:	250b      	movs	r5, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c120:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800c124:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c126:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c128:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c12c:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c134:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c136:	f7ff fd8b 	bl	800bc50 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800c13a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c13e:	4629      	mov	r1, r5
 800c140:	4620      	mov	r0, r4
 800c142:	f7ff fcbf 	bl	800bac4 <SDMMC_GetCmdResp1>
}
 800c146:	b007      	add	sp, #28
 800c148:	bd30      	pop	{r4, r5, pc}

0800c14a <main>:




int main(void)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	af00      	add	r7, sp, #0
  hwInit();
 800c14e:	f7f8 fa29 	bl	80045a4 <hwInit>
  apInit();
 800c152:	f7f4 fca3 	bl	8000a9c <_Z6apInitv>

  apMain();
 800c156:	f7f4 fcab 	bl	8000ab0 <_Z6apMainv>

  return 0;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <__errno>:
 800c160:	4b01      	ldr	r3, [pc, #4]	; (800c168 <__errno+0x8>)
 800c162:	6818      	ldr	r0, [r3, #0]
 800c164:	4770      	bx	lr
 800c166:	bf00      	nop
 800c168:	24000030 	.word	0x24000030

0800c16c <__libc_init_array>:
 800c16c:	b570      	push	{r4, r5, r6, lr}
 800c16e:	4d0d      	ldr	r5, [pc, #52]	; (800c1a4 <__libc_init_array+0x38>)
 800c170:	4c0d      	ldr	r4, [pc, #52]	; (800c1a8 <__libc_init_array+0x3c>)
 800c172:	1b64      	subs	r4, r4, r5
 800c174:	10a4      	asrs	r4, r4, #2
 800c176:	2600      	movs	r6, #0
 800c178:	42a6      	cmp	r6, r4
 800c17a:	d109      	bne.n	800c190 <__libc_init_array+0x24>
 800c17c:	4d0b      	ldr	r5, [pc, #44]	; (800c1ac <__libc_init_array+0x40>)
 800c17e:	4c0c      	ldr	r4, [pc, #48]	; (800c1b0 <__libc_init_array+0x44>)
 800c180:	f003 f9f0 	bl	800f564 <_init>
 800c184:	1b64      	subs	r4, r4, r5
 800c186:	10a4      	asrs	r4, r4, #2
 800c188:	2600      	movs	r6, #0
 800c18a:	42a6      	cmp	r6, r4
 800c18c:	d105      	bne.n	800c19a <__libc_init_array+0x2e>
 800c18e:	bd70      	pop	{r4, r5, r6, pc}
 800c190:	f855 3b04 	ldr.w	r3, [r5], #4
 800c194:	4798      	blx	r3
 800c196:	3601      	adds	r6, #1
 800c198:	e7ee      	b.n	800c178 <__libc_init_array+0xc>
 800c19a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c19e:	4798      	blx	r3
 800c1a0:	3601      	adds	r6, #1
 800c1a2:	e7f2      	b.n	800c18a <__libc_init_array+0x1e>
 800c1a4:	08014ca4 	.word	0x08014ca4
 800c1a8:	08014ca4 	.word	0x08014ca4
 800c1ac:	08014ca4 	.word	0x08014ca4
 800c1b0:	08014ca8 	.word	0x08014ca8

0800c1b4 <malloc>:
 800c1b4:	4b02      	ldr	r3, [pc, #8]	; (800c1c0 <malloc+0xc>)
 800c1b6:	4601      	mov	r1, r0
 800c1b8:	6818      	ldr	r0, [r3, #0]
 800c1ba:	f000 b8a7 	b.w	800c30c <_malloc_r>
 800c1be:	bf00      	nop
 800c1c0:	24000030 	.word	0x24000030

0800c1c4 <free>:
 800c1c4:	4b02      	ldr	r3, [pc, #8]	; (800c1d0 <free+0xc>)
 800c1c6:	4601      	mov	r1, r0
 800c1c8:	6818      	ldr	r0, [r3, #0]
 800c1ca:	f000 b833 	b.w	800c234 <_free_r>
 800c1ce:	bf00      	nop
 800c1d0:	24000030 	.word	0x24000030

0800c1d4 <memcpy>:
 800c1d4:	440a      	add	r2, r1
 800c1d6:	4291      	cmp	r1, r2
 800c1d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1dc:	d100      	bne.n	800c1e0 <memcpy+0xc>
 800c1de:	4770      	bx	lr
 800c1e0:	b510      	push	{r4, lr}
 800c1e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1ea:	4291      	cmp	r1, r2
 800c1ec:	d1f9      	bne.n	800c1e2 <memcpy+0xe>
 800c1ee:	bd10      	pop	{r4, pc}

0800c1f0 <memmove>:
 800c1f0:	4288      	cmp	r0, r1
 800c1f2:	b510      	push	{r4, lr}
 800c1f4:	eb01 0402 	add.w	r4, r1, r2
 800c1f8:	d902      	bls.n	800c200 <memmove+0x10>
 800c1fa:	4284      	cmp	r4, r0
 800c1fc:	4623      	mov	r3, r4
 800c1fe:	d807      	bhi.n	800c210 <memmove+0x20>
 800c200:	1e43      	subs	r3, r0, #1
 800c202:	42a1      	cmp	r1, r4
 800c204:	d008      	beq.n	800c218 <memmove+0x28>
 800c206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c20a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c20e:	e7f8      	b.n	800c202 <memmove+0x12>
 800c210:	4402      	add	r2, r0
 800c212:	4601      	mov	r1, r0
 800c214:	428a      	cmp	r2, r1
 800c216:	d100      	bne.n	800c21a <memmove+0x2a>
 800c218:	bd10      	pop	{r4, pc}
 800c21a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c21e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c222:	e7f7      	b.n	800c214 <memmove+0x24>

0800c224 <memset>:
 800c224:	4402      	add	r2, r0
 800c226:	4603      	mov	r3, r0
 800c228:	4293      	cmp	r3, r2
 800c22a:	d100      	bne.n	800c22e <memset+0xa>
 800c22c:	4770      	bx	lr
 800c22e:	f803 1b01 	strb.w	r1, [r3], #1
 800c232:	e7f9      	b.n	800c228 <memset+0x4>

0800c234 <_free_r>:
 800c234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c236:	2900      	cmp	r1, #0
 800c238:	d044      	beq.n	800c2c4 <_free_r+0x90>
 800c23a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c23e:	9001      	str	r0, [sp, #4]
 800c240:	2b00      	cmp	r3, #0
 800c242:	f1a1 0404 	sub.w	r4, r1, #4
 800c246:	bfb8      	it	lt
 800c248:	18e4      	addlt	r4, r4, r3
 800c24a:	f001 fed3 	bl	800dff4 <__malloc_lock>
 800c24e:	4a1e      	ldr	r2, [pc, #120]	; (800c2c8 <_free_r+0x94>)
 800c250:	9801      	ldr	r0, [sp, #4]
 800c252:	6813      	ldr	r3, [r2, #0]
 800c254:	b933      	cbnz	r3, 800c264 <_free_r+0x30>
 800c256:	6063      	str	r3, [r4, #4]
 800c258:	6014      	str	r4, [r2, #0]
 800c25a:	b003      	add	sp, #12
 800c25c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c260:	f001 bece 	b.w	800e000 <__malloc_unlock>
 800c264:	42a3      	cmp	r3, r4
 800c266:	d908      	bls.n	800c27a <_free_r+0x46>
 800c268:	6825      	ldr	r5, [r4, #0]
 800c26a:	1961      	adds	r1, r4, r5
 800c26c:	428b      	cmp	r3, r1
 800c26e:	bf01      	itttt	eq
 800c270:	6819      	ldreq	r1, [r3, #0]
 800c272:	685b      	ldreq	r3, [r3, #4]
 800c274:	1949      	addeq	r1, r1, r5
 800c276:	6021      	streq	r1, [r4, #0]
 800c278:	e7ed      	b.n	800c256 <_free_r+0x22>
 800c27a:	461a      	mov	r2, r3
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	b10b      	cbz	r3, 800c284 <_free_r+0x50>
 800c280:	42a3      	cmp	r3, r4
 800c282:	d9fa      	bls.n	800c27a <_free_r+0x46>
 800c284:	6811      	ldr	r1, [r2, #0]
 800c286:	1855      	adds	r5, r2, r1
 800c288:	42a5      	cmp	r5, r4
 800c28a:	d10b      	bne.n	800c2a4 <_free_r+0x70>
 800c28c:	6824      	ldr	r4, [r4, #0]
 800c28e:	4421      	add	r1, r4
 800c290:	1854      	adds	r4, r2, r1
 800c292:	42a3      	cmp	r3, r4
 800c294:	6011      	str	r1, [r2, #0]
 800c296:	d1e0      	bne.n	800c25a <_free_r+0x26>
 800c298:	681c      	ldr	r4, [r3, #0]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	6053      	str	r3, [r2, #4]
 800c29e:	4421      	add	r1, r4
 800c2a0:	6011      	str	r1, [r2, #0]
 800c2a2:	e7da      	b.n	800c25a <_free_r+0x26>
 800c2a4:	d902      	bls.n	800c2ac <_free_r+0x78>
 800c2a6:	230c      	movs	r3, #12
 800c2a8:	6003      	str	r3, [r0, #0]
 800c2aa:	e7d6      	b.n	800c25a <_free_r+0x26>
 800c2ac:	6825      	ldr	r5, [r4, #0]
 800c2ae:	1961      	adds	r1, r4, r5
 800c2b0:	428b      	cmp	r3, r1
 800c2b2:	bf04      	itt	eq
 800c2b4:	6819      	ldreq	r1, [r3, #0]
 800c2b6:	685b      	ldreq	r3, [r3, #4]
 800c2b8:	6063      	str	r3, [r4, #4]
 800c2ba:	bf04      	itt	eq
 800c2bc:	1949      	addeq	r1, r1, r5
 800c2be:	6021      	streq	r1, [r4, #0]
 800c2c0:	6054      	str	r4, [r2, #4]
 800c2c2:	e7ca      	b.n	800c25a <_free_r+0x26>
 800c2c4:	b003      	add	sp, #12
 800c2c6:	bd30      	pop	{r4, r5, pc}
 800c2c8:	24000cb4 	.word	0x24000cb4

0800c2cc <sbrk_aligned>:
 800c2cc:	b570      	push	{r4, r5, r6, lr}
 800c2ce:	4e0e      	ldr	r6, [pc, #56]	; (800c308 <sbrk_aligned+0x3c>)
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	6831      	ldr	r1, [r6, #0]
 800c2d4:	4605      	mov	r5, r0
 800c2d6:	b911      	cbnz	r1, 800c2de <sbrk_aligned+0x12>
 800c2d8:	f000 f91a 	bl	800c510 <_sbrk_r>
 800c2dc:	6030      	str	r0, [r6, #0]
 800c2de:	4621      	mov	r1, r4
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	f000 f915 	bl	800c510 <_sbrk_r>
 800c2e6:	1c43      	adds	r3, r0, #1
 800c2e8:	d00a      	beq.n	800c300 <sbrk_aligned+0x34>
 800c2ea:	1cc4      	adds	r4, r0, #3
 800c2ec:	f024 0403 	bic.w	r4, r4, #3
 800c2f0:	42a0      	cmp	r0, r4
 800c2f2:	d007      	beq.n	800c304 <sbrk_aligned+0x38>
 800c2f4:	1a21      	subs	r1, r4, r0
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	f000 f90a 	bl	800c510 <_sbrk_r>
 800c2fc:	3001      	adds	r0, #1
 800c2fe:	d101      	bne.n	800c304 <sbrk_aligned+0x38>
 800c300:	f04f 34ff 	mov.w	r4, #4294967295
 800c304:	4620      	mov	r0, r4
 800c306:	bd70      	pop	{r4, r5, r6, pc}
 800c308:	24000cb8 	.word	0x24000cb8

0800c30c <_malloc_r>:
 800c30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c310:	1ccd      	adds	r5, r1, #3
 800c312:	f025 0503 	bic.w	r5, r5, #3
 800c316:	3508      	adds	r5, #8
 800c318:	2d0c      	cmp	r5, #12
 800c31a:	bf38      	it	cc
 800c31c:	250c      	movcc	r5, #12
 800c31e:	2d00      	cmp	r5, #0
 800c320:	4607      	mov	r7, r0
 800c322:	db01      	blt.n	800c328 <_malloc_r+0x1c>
 800c324:	42a9      	cmp	r1, r5
 800c326:	d905      	bls.n	800c334 <_malloc_r+0x28>
 800c328:	230c      	movs	r3, #12
 800c32a:	603b      	str	r3, [r7, #0]
 800c32c:	2600      	movs	r6, #0
 800c32e:	4630      	mov	r0, r6
 800c330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c334:	4e2e      	ldr	r6, [pc, #184]	; (800c3f0 <_malloc_r+0xe4>)
 800c336:	f001 fe5d 	bl	800dff4 <__malloc_lock>
 800c33a:	6833      	ldr	r3, [r6, #0]
 800c33c:	461c      	mov	r4, r3
 800c33e:	bb34      	cbnz	r4, 800c38e <_malloc_r+0x82>
 800c340:	4629      	mov	r1, r5
 800c342:	4638      	mov	r0, r7
 800c344:	f7ff ffc2 	bl	800c2cc <sbrk_aligned>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	4604      	mov	r4, r0
 800c34c:	d14d      	bne.n	800c3ea <_malloc_r+0xde>
 800c34e:	6834      	ldr	r4, [r6, #0]
 800c350:	4626      	mov	r6, r4
 800c352:	2e00      	cmp	r6, #0
 800c354:	d140      	bne.n	800c3d8 <_malloc_r+0xcc>
 800c356:	6823      	ldr	r3, [r4, #0]
 800c358:	4631      	mov	r1, r6
 800c35a:	4638      	mov	r0, r7
 800c35c:	eb04 0803 	add.w	r8, r4, r3
 800c360:	f000 f8d6 	bl	800c510 <_sbrk_r>
 800c364:	4580      	cmp	r8, r0
 800c366:	d13a      	bne.n	800c3de <_malloc_r+0xd2>
 800c368:	6821      	ldr	r1, [r4, #0]
 800c36a:	3503      	adds	r5, #3
 800c36c:	1a6d      	subs	r5, r5, r1
 800c36e:	f025 0503 	bic.w	r5, r5, #3
 800c372:	3508      	adds	r5, #8
 800c374:	2d0c      	cmp	r5, #12
 800c376:	bf38      	it	cc
 800c378:	250c      	movcc	r5, #12
 800c37a:	4629      	mov	r1, r5
 800c37c:	4638      	mov	r0, r7
 800c37e:	f7ff ffa5 	bl	800c2cc <sbrk_aligned>
 800c382:	3001      	adds	r0, #1
 800c384:	d02b      	beq.n	800c3de <_malloc_r+0xd2>
 800c386:	6823      	ldr	r3, [r4, #0]
 800c388:	442b      	add	r3, r5
 800c38a:	6023      	str	r3, [r4, #0]
 800c38c:	e00e      	b.n	800c3ac <_malloc_r+0xa0>
 800c38e:	6822      	ldr	r2, [r4, #0]
 800c390:	1b52      	subs	r2, r2, r5
 800c392:	d41e      	bmi.n	800c3d2 <_malloc_r+0xc6>
 800c394:	2a0b      	cmp	r2, #11
 800c396:	d916      	bls.n	800c3c6 <_malloc_r+0xba>
 800c398:	1961      	adds	r1, r4, r5
 800c39a:	42a3      	cmp	r3, r4
 800c39c:	6025      	str	r5, [r4, #0]
 800c39e:	bf18      	it	ne
 800c3a0:	6059      	strne	r1, [r3, #4]
 800c3a2:	6863      	ldr	r3, [r4, #4]
 800c3a4:	bf08      	it	eq
 800c3a6:	6031      	streq	r1, [r6, #0]
 800c3a8:	5162      	str	r2, [r4, r5]
 800c3aa:	604b      	str	r3, [r1, #4]
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	f104 060b 	add.w	r6, r4, #11
 800c3b2:	f001 fe25 	bl	800e000 <__malloc_unlock>
 800c3b6:	f026 0607 	bic.w	r6, r6, #7
 800c3ba:	1d23      	adds	r3, r4, #4
 800c3bc:	1af2      	subs	r2, r6, r3
 800c3be:	d0b6      	beq.n	800c32e <_malloc_r+0x22>
 800c3c0:	1b9b      	subs	r3, r3, r6
 800c3c2:	50a3      	str	r3, [r4, r2]
 800c3c4:	e7b3      	b.n	800c32e <_malloc_r+0x22>
 800c3c6:	6862      	ldr	r2, [r4, #4]
 800c3c8:	42a3      	cmp	r3, r4
 800c3ca:	bf0c      	ite	eq
 800c3cc:	6032      	streq	r2, [r6, #0]
 800c3ce:	605a      	strne	r2, [r3, #4]
 800c3d0:	e7ec      	b.n	800c3ac <_malloc_r+0xa0>
 800c3d2:	4623      	mov	r3, r4
 800c3d4:	6864      	ldr	r4, [r4, #4]
 800c3d6:	e7b2      	b.n	800c33e <_malloc_r+0x32>
 800c3d8:	4634      	mov	r4, r6
 800c3da:	6876      	ldr	r6, [r6, #4]
 800c3dc:	e7b9      	b.n	800c352 <_malloc_r+0x46>
 800c3de:	230c      	movs	r3, #12
 800c3e0:	603b      	str	r3, [r7, #0]
 800c3e2:	4638      	mov	r0, r7
 800c3e4:	f001 fe0c 	bl	800e000 <__malloc_unlock>
 800c3e8:	e7a1      	b.n	800c32e <_malloc_r+0x22>
 800c3ea:	6025      	str	r5, [r4, #0]
 800c3ec:	e7de      	b.n	800c3ac <_malloc_r+0xa0>
 800c3ee:	bf00      	nop
 800c3f0:	24000cb4 	.word	0x24000cb4

0800c3f4 <iprintf>:
 800c3f4:	b40f      	push	{r0, r1, r2, r3}
 800c3f6:	4b0a      	ldr	r3, [pc, #40]	; (800c420 <iprintf+0x2c>)
 800c3f8:	b513      	push	{r0, r1, r4, lr}
 800c3fa:	681c      	ldr	r4, [r3, #0]
 800c3fc:	b124      	cbz	r4, 800c408 <iprintf+0x14>
 800c3fe:	69a3      	ldr	r3, [r4, #24]
 800c400:	b913      	cbnz	r3, 800c408 <iprintf+0x14>
 800c402:	4620      	mov	r0, r4
 800c404:	f001 f970 	bl	800d6e8 <__sinit>
 800c408:	ab05      	add	r3, sp, #20
 800c40a:	9a04      	ldr	r2, [sp, #16]
 800c40c:	68a1      	ldr	r1, [r4, #8]
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	4620      	mov	r0, r4
 800c412:	f002 fc55 	bl	800ecc0 <_vfiprintf_r>
 800c416:	b002      	add	sp, #8
 800c418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c41c:	b004      	add	sp, #16
 800c41e:	4770      	bx	lr
 800c420:	24000030 	.word	0x24000030

0800c424 <_puts_r>:
 800c424:	b570      	push	{r4, r5, r6, lr}
 800c426:	460e      	mov	r6, r1
 800c428:	4605      	mov	r5, r0
 800c42a:	b118      	cbz	r0, 800c434 <_puts_r+0x10>
 800c42c:	6983      	ldr	r3, [r0, #24]
 800c42e:	b90b      	cbnz	r3, 800c434 <_puts_r+0x10>
 800c430:	f001 f95a 	bl	800d6e8 <__sinit>
 800c434:	69ab      	ldr	r3, [r5, #24]
 800c436:	68ac      	ldr	r4, [r5, #8]
 800c438:	b913      	cbnz	r3, 800c440 <_puts_r+0x1c>
 800c43a:	4628      	mov	r0, r5
 800c43c:	f001 f954 	bl	800d6e8 <__sinit>
 800c440:	4b2c      	ldr	r3, [pc, #176]	; (800c4f4 <_puts_r+0xd0>)
 800c442:	429c      	cmp	r4, r3
 800c444:	d120      	bne.n	800c488 <_puts_r+0x64>
 800c446:	686c      	ldr	r4, [r5, #4]
 800c448:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c44a:	07db      	lsls	r3, r3, #31
 800c44c:	d405      	bmi.n	800c45a <_puts_r+0x36>
 800c44e:	89a3      	ldrh	r3, [r4, #12]
 800c450:	0598      	lsls	r0, r3, #22
 800c452:	d402      	bmi.n	800c45a <_puts_r+0x36>
 800c454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c456:	f001 fd54 	bl	800df02 <__retarget_lock_acquire_recursive>
 800c45a:	89a3      	ldrh	r3, [r4, #12]
 800c45c:	0719      	lsls	r1, r3, #28
 800c45e:	d51d      	bpl.n	800c49c <_puts_r+0x78>
 800c460:	6923      	ldr	r3, [r4, #16]
 800c462:	b1db      	cbz	r3, 800c49c <_puts_r+0x78>
 800c464:	3e01      	subs	r6, #1
 800c466:	68a3      	ldr	r3, [r4, #8]
 800c468:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c46c:	3b01      	subs	r3, #1
 800c46e:	60a3      	str	r3, [r4, #8]
 800c470:	bb39      	cbnz	r1, 800c4c2 <_puts_r+0x9e>
 800c472:	2b00      	cmp	r3, #0
 800c474:	da38      	bge.n	800c4e8 <_puts_r+0xc4>
 800c476:	4622      	mov	r2, r4
 800c478:	210a      	movs	r1, #10
 800c47a:	4628      	mov	r0, r5
 800c47c:	f000 ff5a 	bl	800d334 <__swbuf_r>
 800c480:	3001      	adds	r0, #1
 800c482:	d011      	beq.n	800c4a8 <_puts_r+0x84>
 800c484:	250a      	movs	r5, #10
 800c486:	e011      	b.n	800c4ac <_puts_r+0x88>
 800c488:	4b1b      	ldr	r3, [pc, #108]	; (800c4f8 <_puts_r+0xd4>)
 800c48a:	429c      	cmp	r4, r3
 800c48c:	d101      	bne.n	800c492 <_puts_r+0x6e>
 800c48e:	68ac      	ldr	r4, [r5, #8]
 800c490:	e7da      	b.n	800c448 <_puts_r+0x24>
 800c492:	4b1a      	ldr	r3, [pc, #104]	; (800c4fc <_puts_r+0xd8>)
 800c494:	429c      	cmp	r4, r3
 800c496:	bf08      	it	eq
 800c498:	68ec      	ldreq	r4, [r5, #12]
 800c49a:	e7d5      	b.n	800c448 <_puts_r+0x24>
 800c49c:	4621      	mov	r1, r4
 800c49e:	4628      	mov	r0, r5
 800c4a0:	f000 ff9a 	bl	800d3d8 <__swsetup_r>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d0dd      	beq.n	800c464 <_puts_r+0x40>
 800c4a8:	f04f 35ff 	mov.w	r5, #4294967295
 800c4ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4ae:	07da      	lsls	r2, r3, #31
 800c4b0:	d405      	bmi.n	800c4be <_puts_r+0x9a>
 800c4b2:	89a3      	ldrh	r3, [r4, #12]
 800c4b4:	059b      	lsls	r3, r3, #22
 800c4b6:	d402      	bmi.n	800c4be <_puts_r+0x9a>
 800c4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4ba:	f001 fd23 	bl	800df04 <__retarget_lock_release_recursive>
 800c4be:	4628      	mov	r0, r5
 800c4c0:	bd70      	pop	{r4, r5, r6, pc}
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	da04      	bge.n	800c4d0 <_puts_r+0xac>
 800c4c6:	69a2      	ldr	r2, [r4, #24]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	dc06      	bgt.n	800c4da <_puts_r+0xb6>
 800c4cc:	290a      	cmp	r1, #10
 800c4ce:	d004      	beq.n	800c4da <_puts_r+0xb6>
 800c4d0:	6823      	ldr	r3, [r4, #0]
 800c4d2:	1c5a      	adds	r2, r3, #1
 800c4d4:	6022      	str	r2, [r4, #0]
 800c4d6:	7019      	strb	r1, [r3, #0]
 800c4d8:	e7c5      	b.n	800c466 <_puts_r+0x42>
 800c4da:	4622      	mov	r2, r4
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f000 ff29 	bl	800d334 <__swbuf_r>
 800c4e2:	3001      	adds	r0, #1
 800c4e4:	d1bf      	bne.n	800c466 <_puts_r+0x42>
 800c4e6:	e7df      	b.n	800c4a8 <_puts_r+0x84>
 800c4e8:	6823      	ldr	r3, [r4, #0]
 800c4ea:	250a      	movs	r5, #10
 800c4ec:	1c5a      	adds	r2, r3, #1
 800c4ee:	6022      	str	r2, [r4, #0]
 800c4f0:	701d      	strb	r5, [r3, #0]
 800c4f2:	e7db      	b.n	800c4ac <_puts_r+0x88>
 800c4f4:	080149f4 	.word	0x080149f4
 800c4f8:	08014a14 	.word	0x08014a14
 800c4fc:	080149d4 	.word	0x080149d4

0800c500 <puts>:
 800c500:	4b02      	ldr	r3, [pc, #8]	; (800c50c <puts+0xc>)
 800c502:	4601      	mov	r1, r0
 800c504:	6818      	ldr	r0, [r3, #0]
 800c506:	f7ff bf8d 	b.w	800c424 <_puts_r>
 800c50a:	bf00      	nop
 800c50c:	24000030 	.word	0x24000030

0800c510 <_sbrk_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	4d06      	ldr	r5, [pc, #24]	; (800c52c <_sbrk_r+0x1c>)
 800c514:	2300      	movs	r3, #0
 800c516:	4604      	mov	r4, r0
 800c518:	4608      	mov	r0, r1
 800c51a:	602b      	str	r3, [r5, #0]
 800c51c:	f7f4 fde2 	bl	80010e4 <_sbrk>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d102      	bne.n	800c52a <_sbrk_r+0x1a>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	b103      	cbz	r3, 800c52a <_sbrk_r+0x1a>
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	24000cc0 	.word	0x24000cc0

0800c530 <strcpy>:
 800c530:	4603      	mov	r3, r0
 800c532:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c536:	f803 2b01 	strb.w	r2, [r3], #1
 800c53a:	2a00      	cmp	r2, #0
 800c53c:	d1f9      	bne.n	800c532 <strcpy+0x2>
 800c53e:	4770      	bx	lr

0800c540 <sulp>:
 800c540:	b570      	push	{r4, r5, r6, lr}
 800c542:	4604      	mov	r4, r0
 800c544:	460d      	mov	r5, r1
 800c546:	4616      	mov	r6, r2
 800c548:	ec45 4b10 	vmov	d0, r4, r5
 800c54c:	f002 f8d0 	bl	800e6f0 <__ulp>
 800c550:	b17e      	cbz	r6, 800c572 <sulp+0x32>
 800c552:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c556:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	dd09      	ble.n	800c572 <sulp+0x32>
 800c55e:	051b      	lsls	r3, r3, #20
 800c560:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c564:	2000      	movs	r0, #0
 800c566:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800c56a:	ec41 0b17 	vmov	d7, r0, r1
 800c56e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c572:	bd70      	pop	{r4, r5, r6, pc}
 800c574:	0000      	movs	r0, r0
	...

0800c578 <_strtod_l>:
 800c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57c:	ed2d 8b0e 	vpush	{d8-d14}
 800c580:	b097      	sub	sp, #92	; 0x5c
 800c582:	461f      	mov	r7, r3
 800c584:	2300      	movs	r3, #0
 800c586:	9312      	str	r3, [sp, #72]	; 0x48
 800c588:	4ba1      	ldr	r3, [pc, #644]	; (800c810 <_strtod_l+0x298>)
 800c58a:	920d      	str	r2, [sp, #52]	; 0x34
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	9307      	str	r3, [sp, #28]
 800c590:	4604      	mov	r4, r0
 800c592:	4618      	mov	r0, r3
 800c594:	468b      	mov	fp, r1
 800c596:	f7f3 fead 	bl	80002f4 <strlen>
 800c59a:	f04f 0800 	mov.w	r8, #0
 800c59e:	4605      	mov	r5, r0
 800c5a0:	f04f 0900 	mov.w	r9, #0
 800c5a4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800c5a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c5aa:	7813      	ldrb	r3, [r2, #0]
 800c5ac:	2b2b      	cmp	r3, #43	; 0x2b
 800c5ae:	d04d      	beq.n	800c64c <_strtod_l+0xd4>
 800c5b0:	d83a      	bhi.n	800c628 <_strtod_l+0xb0>
 800c5b2:	2b0d      	cmp	r3, #13
 800c5b4:	d833      	bhi.n	800c61e <_strtod_l+0xa6>
 800c5b6:	2b08      	cmp	r3, #8
 800c5b8:	d833      	bhi.n	800c622 <_strtod_l+0xaa>
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d03d      	beq.n	800c63a <_strtod_l+0xc2>
 800c5be:	2300      	movs	r3, #0
 800c5c0:	9308      	str	r3, [sp, #32]
 800c5c2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c5c4:	7833      	ldrb	r3, [r6, #0]
 800c5c6:	2b30      	cmp	r3, #48	; 0x30
 800c5c8:	f040 80b0 	bne.w	800c72c <_strtod_l+0x1b4>
 800c5cc:	7873      	ldrb	r3, [r6, #1]
 800c5ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c5d2:	2b58      	cmp	r3, #88	; 0x58
 800c5d4:	d167      	bne.n	800c6a6 <_strtod_l+0x12e>
 800c5d6:	9b08      	ldr	r3, [sp, #32]
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	ab12      	add	r3, sp, #72	; 0x48
 800c5dc:	9702      	str	r7, [sp, #8]
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	4a8c      	ldr	r2, [pc, #560]	; (800c814 <_strtod_l+0x29c>)
 800c5e2:	ab13      	add	r3, sp, #76	; 0x4c
 800c5e4:	a911      	add	r1, sp, #68	; 0x44
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f001 f982 	bl	800d8f0 <__gethex>
 800c5ec:	f010 0507 	ands.w	r5, r0, #7
 800c5f0:	4607      	mov	r7, r0
 800c5f2:	d005      	beq.n	800c600 <_strtod_l+0x88>
 800c5f4:	2d06      	cmp	r5, #6
 800c5f6:	d12b      	bne.n	800c650 <_strtod_l+0xd8>
 800c5f8:	3601      	adds	r6, #1
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	9611      	str	r6, [sp, #68]	; 0x44
 800c5fe:	9308      	str	r3, [sp, #32]
 800c600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c602:	2b00      	cmp	r3, #0
 800c604:	f040 854e 	bne.w	800d0a4 <_strtod_l+0xb2c>
 800c608:	9b08      	ldr	r3, [sp, #32]
 800c60a:	b1e3      	cbz	r3, 800c646 <_strtod_l+0xce>
 800c60c:	ec49 8b17 	vmov	d7, r8, r9
 800c610:	eeb1 0b47 	vneg.f64	d0, d7
 800c614:	b017      	add	sp, #92	; 0x5c
 800c616:	ecbd 8b0e 	vpop	{d8-d14}
 800c61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c61e:	2b20      	cmp	r3, #32
 800c620:	d1cd      	bne.n	800c5be <_strtod_l+0x46>
 800c622:	3201      	adds	r2, #1
 800c624:	9211      	str	r2, [sp, #68]	; 0x44
 800c626:	e7bf      	b.n	800c5a8 <_strtod_l+0x30>
 800c628:	2b2d      	cmp	r3, #45	; 0x2d
 800c62a:	d1c8      	bne.n	800c5be <_strtod_l+0x46>
 800c62c:	2301      	movs	r3, #1
 800c62e:	9308      	str	r3, [sp, #32]
 800c630:	1c53      	adds	r3, r2, #1
 800c632:	9311      	str	r3, [sp, #68]	; 0x44
 800c634:	7853      	ldrb	r3, [r2, #1]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d1c3      	bne.n	800c5c2 <_strtod_l+0x4a>
 800c63a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c63c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800c640:	2b00      	cmp	r3, #0
 800c642:	f040 852d 	bne.w	800d0a0 <_strtod_l+0xb28>
 800c646:	ec49 8b10 	vmov	d0, r8, r9
 800c64a:	e7e3      	b.n	800c614 <_strtod_l+0x9c>
 800c64c:	2300      	movs	r3, #0
 800c64e:	e7ee      	b.n	800c62e <_strtod_l+0xb6>
 800c650:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c652:	b13a      	cbz	r2, 800c664 <_strtod_l+0xec>
 800c654:	2135      	movs	r1, #53	; 0x35
 800c656:	a814      	add	r0, sp, #80	; 0x50
 800c658:	f002 f952 	bl	800e900 <__copybits>
 800c65c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c65e:	4620      	mov	r0, r4
 800c660:	f001 fd14 	bl	800e08c <_Bfree>
 800c664:	3d01      	subs	r5, #1
 800c666:	2d04      	cmp	r5, #4
 800c668:	d806      	bhi.n	800c678 <_strtod_l+0x100>
 800c66a:	e8df f005 	tbb	[pc, r5]
 800c66e:	030a      	.short	0x030a
 800c670:	1714      	.short	0x1714
 800c672:	0a          	.byte	0x0a
 800c673:	00          	.byte	0x00
 800c674:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800c678:	073f      	lsls	r7, r7, #28
 800c67a:	d5c1      	bpl.n	800c600 <_strtod_l+0x88>
 800c67c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800c680:	e7be      	b.n	800c600 <_strtod_l+0x88>
 800c682:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800c686:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c688:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c68c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c690:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c694:	e7f0      	b.n	800c678 <_strtod_l+0x100>
 800c696:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800c818 <_strtod_l+0x2a0>
 800c69a:	e7ed      	b.n	800c678 <_strtod_l+0x100>
 800c69c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c6a0:	f04f 38ff 	mov.w	r8, #4294967295
 800c6a4:	e7e8      	b.n	800c678 <_strtod_l+0x100>
 800c6a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6a8:	1c5a      	adds	r2, r3, #1
 800c6aa:	9211      	str	r2, [sp, #68]	; 0x44
 800c6ac:	785b      	ldrb	r3, [r3, #1]
 800c6ae:	2b30      	cmp	r3, #48	; 0x30
 800c6b0:	d0f9      	beq.n	800c6a6 <_strtod_l+0x12e>
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d0a4      	beq.n	800c600 <_strtod_l+0x88>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	f04f 0a00 	mov.w	sl, #0
 800c6bc:	9304      	str	r3, [sp, #16]
 800c6be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6c0:	930a      	str	r3, [sp, #40]	; 0x28
 800c6c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c6c6:	f8cd a018 	str.w	sl, [sp, #24]
 800c6ca:	220a      	movs	r2, #10
 800c6cc:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c6ce:	7807      	ldrb	r7, [r0, #0]
 800c6d0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800c6d4:	b2d9      	uxtb	r1, r3
 800c6d6:	2909      	cmp	r1, #9
 800c6d8:	d92a      	bls.n	800c730 <_strtod_l+0x1b8>
 800c6da:	9907      	ldr	r1, [sp, #28]
 800c6dc:	462a      	mov	r2, r5
 800c6de:	f002 fe04 	bl	800f2ea <strncmp>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d033      	beq.n	800c74e <_strtod_l+0x1d6>
 800c6e6:	2000      	movs	r0, #0
 800c6e8:	9b06      	ldr	r3, [sp, #24]
 800c6ea:	463a      	mov	r2, r7
 800c6ec:	4601      	mov	r1, r0
 800c6ee:	4607      	mov	r7, r0
 800c6f0:	2a65      	cmp	r2, #101	; 0x65
 800c6f2:	d001      	beq.n	800c6f8 <_strtod_l+0x180>
 800c6f4:	2a45      	cmp	r2, #69	; 0x45
 800c6f6:	d117      	bne.n	800c728 <_strtod_l+0x1b0>
 800c6f8:	b91b      	cbnz	r3, 800c702 <_strtod_l+0x18a>
 800c6fa:	9b04      	ldr	r3, [sp, #16]
 800c6fc:	4303      	orrs	r3, r0
 800c6fe:	d09c      	beq.n	800c63a <_strtod_l+0xc2>
 800c700:	2300      	movs	r3, #0
 800c702:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800c706:	f10b 0201 	add.w	r2, fp, #1
 800c70a:	9211      	str	r2, [sp, #68]	; 0x44
 800c70c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800c710:	2a2b      	cmp	r2, #43	; 0x2b
 800c712:	d071      	beq.n	800c7f8 <_strtod_l+0x280>
 800c714:	2a2d      	cmp	r2, #45	; 0x2d
 800c716:	d077      	beq.n	800c808 <_strtod_l+0x290>
 800c718:	f04f 0e00 	mov.w	lr, #0
 800c71c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800c720:	2d09      	cmp	r5, #9
 800c722:	d97f      	bls.n	800c824 <_strtod_l+0x2ac>
 800c724:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800c728:	2500      	movs	r5, #0
 800c72a:	e09b      	b.n	800c864 <_strtod_l+0x2ec>
 800c72c:	2300      	movs	r3, #0
 800c72e:	e7c3      	b.n	800c6b8 <_strtod_l+0x140>
 800c730:	9906      	ldr	r1, [sp, #24]
 800c732:	2908      	cmp	r1, #8
 800c734:	bfdd      	ittte	le
 800c736:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c738:	fb02 3301 	mlale	r3, r2, r1, r3
 800c73c:	9309      	strle	r3, [sp, #36]	; 0x24
 800c73e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c742:	9b06      	ldr	r3, [sp, #24]
 800c744:	3001      	adds	r0, #1
 800c746:	3301      	adds	r3, #1
 800c748:	9306      	str	r3, [sp, #24]
 800c74a:	9011      	str	r0, [sp, #68]	; 0x44
 800c74c:	e7be      	b.n	800c6cc <_strtod_l+0x154>
 800c74e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c750:	195a      	adds	r2, r3, r5
 800c752:	9211      	str	r2, [sp, #68]	; 0x44
 800c754:	5d5a      	ldrb	r2, [r3, r5]
 800c756:	9b06      	ldr	r3, [sp, #24]
 800c758:	b3a3      	cbz	r3, 800c7c4 <_strtod_l+0x24c>
 800c75a:	4607      	mov	r7, r0
 800c75c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c760:	2909      	cmp	r1, #9
 800c762:	d912      	bls.n	800c78a <_strtod_l+0x212>
 800c764:	2101      	movs	r1, #1
 800c766:	e7c3      	b.n	800c6f0 <_strtod_l+0x178>
 800c768:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c76a:	1c5a      	adds	r2, r3, #1
 800c76c:	9211      	str	r2, [sp, #68]	; 0x44
 800c76e:	785a      	ldrb	r2, [r3, #1]
 800c770:	3001      	adds	r0, #1
 800c772:	2a30      	cmp	r2, #48	; 0x30
 800c774:	d0f8      	beq.n	800c768 <_strtod_l+0x1f0>
 800c776:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c77a:	2b08      	cmp	r3, #8
 800c77c:	f200 8497 	bhi.w	800d0ae <_strtod_l+0xb36>
 800c780:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c782:	930a      	str	r3, [sp, #40]	; 0x28
 800c784:	4607      	mov	r7, r0
 800c786:	2000      	movs	r0, #0
 800c788:	4603      	mov	r3, r0
 800c78a:	3a30      	subs	r2, #48	; 0x30
 800c78c:	f100 0101 	add.w	r1, r0, #1
 800c790:	d012      	beq.n	800c7b8 <_strtod_l+0x240>
 800c792:	440f      	add	r7, r1
 800c794:	eb00 0c03 	add.w	ip, r0, r3
 800c798:	4619      	mov	r1, r3
 800c79a:	250a      	movs	r5, #10
 800c79c:	4561      	cmp	r1, ip
 800c79e:	d113      	bne.n	800c7c8 <_strtod_l+0x250>
 800c7a0:	1819      	adds	r1, r3, r0
 800c7a2:	2908      	cmp	r1, #8
 800c7a4:	f103 0301 	add.w	r3, r3, #1
 800c7a8:	4403      	add	r3, r0
 800c7aa:	dc1c      	bgt.n	800c7e6 <_strtod_l+0x26e>
 800c7ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7ae:	210a      	movs	r1, #10
 800c7b0:	fb01 2200 	mla	r2, r1, r0, r2
 800c7b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c7b6:	2100      	movs	r1, #0
 800c7b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c7ba:	1c50      	adds	r0, r2, #1
 800c7bc:	9011      	str	r0, [sp, #68]	; 0x44
 800c7be:	7852      	ldrb	r2, [r2, #1]
 800c7c0:	4608      	mov	r0, r1
 800c7c2:	e7cb      	b.n	800c75c <_strtod_l+0x1e4>
 800c7c4:	9806      	ldr	r0, [sp, #24]
 800c7c6:	e7d4      	b.n	800c772 <_strtod_l+0x1fa>
 800c7c8:	2908      	cmp	r1, #8
 800c7ca:	dc04      	bgt.n	800c7d6 <_strtod_l+0x25e>
 800c7cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c7ce:	436e      	muls	r6, r5
 800c7d0:	9609      	str	r6, [sp, #36]	; 0x24
 800c7d2:	3101      	adds	r1, #1
 800c7d4:	e7e2      	b.n	800c79c <_strtod_l+0x224>
 800c7d6:	f101 0e01 	add.w	lr, r1, #1
 800c7da:	f1be 0f10 	cmp.w	lr, #16
 800c7de:	bfd8      	it	le
 800c7e0:	fb05 fa0a 	mulle.w	sl, r5, sl
 800c7e4:	e7f5      	b.n	800c7d2 <_strtod_l+0x25a>
 800c7e6:	2b10      	cmp	r3, #16
 800c7e8:	bfdc      	itt	le
 800c7ea:	210a      	movle	r1, #10
 800c7ec:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800c7f0:	e7e1      	b.n	800c7b6 <_strtod_l+0x23e>
 800c7f2:	2700      	movs	r7, #0
 800c7f4:	2101      	movs	r1, #1
 800c7f6:	e780      	b.n	800c6fa <_strtod_l+0x182>
 800c7f8:	f04f 0e00 	mov.w	lr, #0
 800c7fc:	f10b 0202 	add.w	r2, fp, #2
 800c800:	9211      	str	r2, [sp, #68]	; 0x44
 800c802:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800c806:	e789      	b.n	800c71c <_strtod_l+0x1a4>
 800c808:	f04f 0e01 	mov.w	lr, #1
 800c80c:	e7f6      	b.n	800c7fc <_strtod_l+0x284>
 800c80e:	bf00      	nop
 800c810:	08014aa8 	.word	0x08014aa8
 800c814:	08014880 	.word	0x08014880
 800c818:	7ff00000 	.word	0x7ff00000
 800c81c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c81e:	1c55      	adds	r5, r2, #1
 800c820:	9511      	str	r5, [sp, #68]	; 0x44
 800c822:	7852      	ldrb	r2, [r2, #1]
 800c824:	2a30      	cmp	r2, #48	; 0x30
 800c826:	d0f9      	beq.n	800c81c <_strtod_l+0x2a4>
 800c828:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800c82c:	2d08      	cmp	r5, #8
 800c82e:	f63f af7b 	bhi.w	800c728 <_strtod_l+0x1b0>
 800c832:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c836:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c838:	9207      	str	r2, [sp, #28]
 800c83a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c83c:	1c55      	adds	r5, r2, #1
 800c83e:	9511      	str	r5, [sp, #68]	; 0x44
 800c840:	7852      	ldrb	r2, [r2, #1]
 800c842:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c846:	2e09      	cmp	r6, #9
 800c848:	d937      	bls.n	800c8ba <_strtod_l+0x342>
 800c84a:	9e07      	ldr	r6, [sp, #28]
 800c84c:	1bad      	subs	r5, r5, r6
 800c84e:	2d08      	cmp	r5, #8
 800c850:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c854:	dc02      	bgt.n	800c85c <_strtod_l+0x2e4>
 800c856:	4565      	cmp	r5, ip
 800c858:	bfa8      	it	ge
 800c85a:	4665      	movge	r5, ip
 800c85c:	f1be 0f00 	cmp.w	lr, #0
 800c860:	d000      	beq.n	800c864 <_strtod_l+0x2ec>
 800c862:	426d      	negs	r5, r5
 800c864:	2b00      	cmp	r3, #0
 800c866:	d14d      	bne.n	800c904 <_strtod_l+0x38c>
 800c868:	9b04      	ldr	r3, [sp, #16]
 800c86a:	4303      	orrs	r3, r0
 800c86c:	f47f aec8 	bne.w	800c600 <_strtod_l+0x88>
 800c870:	2900      	cmp	r1, #0
 800c872:	f47f aee2 	bne.w	800c63a <_strtod_l+0xc2>
 800c876:	2a69      	cmp	r2, #105	; 0x69
 800c878:	d027      	beq.n	800c8ca <_strtod_l+0x352>
 800c87a:	dc24      	bgt.n	800c8c6 <_strtod_l+0x34e>
 800c87c:	2a49      	cmp	r2, #73	; 0x49
 800c87e:	d024      	beq.n	800c8ca <_strtod_l+0x352>
 800c880:	2a4e      	cmp	r2, #78	; 0x4e
 800c882:	f47f aeda 	bne.w	800c63a <_strtod_l+0xc2>
 800c886:	4996      	ldr	r1, [pc, #600]	; (800cae0 <_strtod_l+0x568>)
 800c888:	a811      	add	r0, sp, #68	; 0x44
 800c88a:	f001 fa89 	bl	800dda0 <__match>
 800c88e:	2800      	cmp	r0, #0
 800c890:	f43f aed3 	beq.w	800c63a <_strtod_l+0xc2>
 800c894:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	2b28      	cmp	r3, #40	; 0x28
 800c89a:	d12d      	bne.n	800c8f8 <_strtod_l+0x380>
 800c89c:	4991      	ldr	r1, [pc, #580]	; (800cae4 <_strtod_l+0x56c>)
 800c89e:	aa14      	add	r2, sp, #80	; 0x50
 800c8a0:	a811      	add	r0, sp, #68	; 0x44
 800c8a2:	f001 fa91 	bl	800ddc8 <__hexnan>
 800c8a6:	2805      	cmp	r0, #5
 800c8a8:	d126      	bne.n	800c8f8 <_strtod_l+0x380>
 800c8aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8ac:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c8b0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c8b4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c8b8:	e6a2      	b.n	800c600 <_strtod_l+0x88>
 800c8ba:	250a      	movs	r5, #10
 800c8bc:	fb05 250c 	mla	r5, r5, ip, r2
 800c8c0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800c8c4:	e7b9      	b.n	800c83a <_strtod_l+0x2c2>
 800c8c6:	2a6e      	cmp	r2, #110	; 0x6e
 800c8c8:	e7db      	b.n	800c882 <_strtod_l+0x30a>
 800c8ca:	4987      	ldr	r1, [pc, #540]	; (800cae8 <_strtod_l+0x570>)
 800c8cc:	a811      	add	r0, sp, #68	; 0x44
 800c8ce:	f001 fa67 	bl	800dda0 <__match>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	f43f aeb1 	beq.w	800c63a <_strtod_l+0xc2>
 800c8d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8da:	4984      	ldr	r1, [pc, #528]	; (800caec <_strtod_l+0x574>)
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	a811      	add	r0, sp, #68	; 0x44
 800c8e0:	9311      	str	r3, [sp, #68]	; 0x44
 800c8e2:	f001 fa5d 	bl	800dda0 <__match>
 800c8e6:	b910      	cbnz	r0, 800c8ee <_strtod_l+0x376>
 800c8e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	9311      	str	r3, [sp, #68]	; 0x44
 800c8ee:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800cb00 <_strtod_l+0x588>
 800c8f2:	f04f 0800 	mov.w	r8, #0
 800c8f6:	e683      	b.n	800c600 <_strtod_l+0x88>
 800c8f8:	487d      	ldr	r0, [pc, #500]	; (800caf0 <_strtod_l+0x578>)
 800c8fa:	f002 fca5 	bl	800f248 <nan>
 800c8fe:	ec59 8b10 	vmov	r8, r9, d0
 800c902:	e67d      	b.n	800c600 <_strtod_l+0x88>
 800c904:	1bea      	subs	r2, r5, r7
 800c906:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800c90a:	9207      	str	r2, [sp, #28]
 800c90c:	9a06      	ldr	r2, [sp, #24]
 800c90e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c912:	2a00      	cmp	r2, #0
 800c914:	bf08      	it	eq
 800c916:	461a      	moveq	r2, r3
 800c918:	2b10      	cmp	r3, #16
 800c91a:	9206      	str	r2, [sp, #24]
 800c91c:	461a      	mov	r2, r3
 800c91e:	bfa8      	it	ge
 800c920:	2210      	movge	r2, #16
 800c922:	2b09      	cmp	r3, #9
 800c924:	ec59 8b17 	vmov	r8, r9, d7
 800c928:	dd0c      	ble.n	800c944 <_strtod_l+0x3cc>
 800c92a:	4972      	ldr	r1, [pc, #456]	; (800caf4 <_strtod_l+0x57c>)
 800c92c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c930:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800c934:	ee06 aa90 	vmov	s13, sl
 800c938:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c93c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c940:	ec59 8b16 	vmov	r8, r9, d6
 800c944:	2b0f      	cmp	r3, #15
 800c946:	dc36      	bgt.n	800c9b6 <_strtod_l+0x43e>
 800c948:	9907      	ldr	r1, [sp, #28]
 800c94a:	2900      	cmp	r1, #0
 800c94c:	f43f ae58 	beq.w	800c600 <_strtod_l+0x88>
 800c950:	dd23      	ble.n	800c99a <_strtod_l+0x422>
 800c952:	2916      	cmp	r1, #22
 800c954:	dc0b      	bgt.n	800c96e <_strtod_l+0x3f6>
 800c956:	4b67      	ldr	r3, [pc, #412]	; (800caf4 <_strtod_l+0x57c>)
 800c958:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800c95c:	ed93 7b00 	vldr	d7, [r3]
 800c960:	ec49 8b16 	vmov	d6, r8, r9
 800c964:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c968:	ec59 8b17 	vmov	r8, r9, d7
 800c96c:	e648      	b.n	800c600 <_strtod_l+0x88>
 800c96e:	9807      	ldr	r0, [sp, #28]
 800c970:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c974:	4281      	cmp	r1, r0
 800c976:	db1e      	blt.n	800c9b6 <_strtod_l+0x43e>
 800c978:	4a5e      	ldr	r2, [pc, #376]	; (800caf4 <_strtod_l+0x57c>)
 800c97a:	f1c3 030f 	rsb	r3, r3, #15
 800c97e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c982:	ed91 7b00 	vldr	d7, [r1]
 800c986:	ec49 8b16 	vmov	d6, r8, r9
 800c98a:	1ac3      	subs	r3, r0, r3
 800c98c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c990:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c994:	ed92 6b00 	vldr	d6, [r2]
 800c998:	e7e4      	b.n	800c964 <_strtod_l+0x3ec>
 800c99a:	9907      	ldr	r1, [sp, #28]
 800c99c:	3116      	adds	r1, #22
 800c99e:	db0a      	blt.n	800c9b6 <_strtod_l+0x43e>
 800c9a0:	4b54      	ldr	r3, [pc, #336]	; (800caf4 <_strtod_l+0x57c>)
 800c9a2:	1b7d      	subs	r5, r7, r5
 800c9a4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c9a8:	ed95 7b00 	vldr	d7, [r5]
 800c9ac:	ec49 8b16 	vmov	d6, r8, r9
 800c9b0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c9b4:	e7d8      	b.n	800c968 <_strtod_l+0x3f0>
 800c9b6:	9907      	ldr	r1, [sp, #28]
 800c9b8:	1a9a      	subs	r2, r3, r2
 800c9ba:	440a      	add	r2, r1
 800c9bc:	2a00      	cmp	r2, #0
 800c9be:	dd6f      	ble.n	800caa0 <_strtod_l+0x528>
 800c9c0:	f012 000f 	ands.w	r0, r2, #15
 800c9c4:	d00a      	beq.n	800c9dc <_strtod_l+0x464>
 800c9c6:	494b      	ldr	r1, [pc, #300]	; (800caf4 <_strtod_l+0x57c>)
 800c9c8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c9cc:	ed91 7b00 	vldr	d7, [r1]
 800c9d0:	ec49 8b16 	vmov	d6, r8, r9
 800c9d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c9d8:	ec59 8b17 	vmov	r8, r9, d7
 800c9dc:	f032 020f 	bics.w	r2, r2, #15
 800c9e0:	d04f      	beq.n	800ca82 <_strtod_l+0x50a>
 800c9e2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c9e6:	dd22      	ble.n	800ca2e <_strtod_l+0x4b6>
 800c9e8:	2500      	movs	r5, #0
 800c9ea:	462e      	mov	r6, r5
 800c9ec:	9506      	str	r5, [sp, #24]
 800c9ee:	462f      	mov	r7, r5
 800c9f0:	2322      	movs	r3, #34	; 0x22
 800c9f2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800cb00 <_strtod_l+0x588>
 800c9f6:	6023      	str	r3, [r4, #0]
 800c9f8:	f04f 0800 	mov.w	r8, #0
 800c9fc:	9b06      	ldr	r3, [sp, #24]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f43f adfe 	beq.w	800c600 <_strtod_l+0x88>
 800ca04:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ca06:	4620      	mov	r0, r4
 800ca08:	f001 fb40 	bl	800e08c <_Bfree>
 800ca0c:	4639      	mov	r1, r7
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f001 fb3c 	bl	800e08c <_Bfree>
 800ca14:	4631      	mov	r1, r6
 800ca16:	4620      	mov	r0, r4
 800ca18:	f001 fb38 	bl	800e08c <_Bfree>
 800ca1c:	9906      	ldr	r1, [sp, #24]
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f001 fb34 	bl	800e08c <_Bfree>
 800ca24:	4629      	mov	r1, r5
 800ca26:	4620      	mov	r0, r4
 800ca28:	f001 fb30 	bl	800e08c <_Bfree>
 800ca2c:	e5e8      	b.n	800c600 <_strtod_l+0x88>
 800ca2e:	2000      	movs	r0, #0
 800ca30:	ec49 8b17 	vmov	d7, r8, r9
 800ca34:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800caf8 <_strtod_l+0x580>
 800ca38:	1112      	asrs	r2, r2, #4
 800ca3a:	4601      	mov	r1, r0
 800ca3c:	2a01      	cmp	r2, #1
 800ca3e:	dc23      	bgt.n	800ca88 <_strtod_l+0x510>
 800ca40:	b108      	cbz	r0, 800ca46 <_strtod_l+0x4ce>
 800ca42:	ec59 8b17 	vmov	r8, r9, d7
 800ca46:	4a2c      	ldr	r2, [pc, #176]	; (800caf8 <_strtod_l+0x580>)
 800ca48:	482c      	ldr	r0, [pc, #176]	; (800cafc <_strtod_l+0x584>)
 800ca4a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ca4e:	ed92 7b00 	vldr	d7, [r2]
 800ca52:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ca56:	ec49 8b16 	vmov	d6, r8, r9
 800ca5a:	4a29      	ldr	r2, [pc, #164]	; (800cb00 <_strtod_l+0x588>)
 800ca5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca60:	ee17 1a90 	vmov	r1, s15
 800ca64:	400a      	ands	r2, r1
 800ca66:	4282      	cmp	r2, r0
 800ca68:	ec59 8b17 	vmov	r8, r9, d7
 800ca6c:	d8bc      	bhi.n	800c9e8 <_strtod_l+0x470>
 800ca6e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800ca72:	4282      	cmp	r2, r0
 800ca74:	bf86      	itte	hi
 800ca76:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800cb04 <_strtod_l+0x58c>
 800ca7a:	f04f 38ff 	movhi.w	r8, #4294967295
 800ca7e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800ca82:	2200      	movs	r2, #0
 800ca84:	9204      	str	r2, [sp, #16]
 800ca86:	e078      	b.n	800cb7a <_strtod_l+0x602>
 800ca88:	07d6      	lsls	r6, r2, #31
 800ca8a:	d504      	bpl.n	800ca96 <_strtod_l+0x51e>
 800ca8c:	ed9c 6b00 	vldr	d6, [ip]
 800ca90:	2001      	movs	r0, #1
 800ca92:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca96:	3101      	adds	r1, #1
 800ca98:	1052      	asrs	r2, r2, #1
 800ca9a:	f10c 0c08 	add.w	ip, ip, #8
 800ca9e:	e7cd      	b.n	800ca3c <_strtod_l+0x4c4>
 800caa0:	d0ef      	beq.n	800ca82 <_strtod_l+0x50a>
 800caa2:	4252      	negs	r2, r2
 800caa4:	f012 000f 	ands.w	r0, r2, #15
 800caa8:	d00a      	beq.n	800cac0 <_strtod_l+0x548>
 800caaa:	4912      	ldr	r1, [pc, #72]	; (800caf4 <_strtod_l+0x57c>)
 800caac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800cab0:	ed91 7b00 	vldr	d7, [r1]
 800cab4:	ec49 8b16 	vmov	d6, r8, r9
 800cab8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cabc:	ec59 8b17 	vmov	r8, r9, d7
 800cac0:	1112      	asrs	r2, r2, #4
 800cac2:	d0de      	beq.n	800ca82 <_strtod_l+0x50a>
 800cac4:	2a1f      	cmp	r2, #31
 800cac6:	dd1f      	ble.n	800cb08 <_strtod_l+0x590>
 800cac8:	2500      	movs	r5, #0
 800caca:	462e      	mov	r6, r5
 800cacc:	9506      	str	r5, [sp, #24]
 800cace:	462f      	mov	r7, r5
 800cad0:	2322      	movs	r3, #34	; 0x22
 800cad2:	f04f 0800 	mov.w	r8, #0
 800cad6:	f04f 0900 	mov.w	r9, #0
 800cada:	6023      	str	r3, [r4, #0]
 800cadc:	e78e      	b.n	800c9fc <_strtod_l+0x484>
 800cade:	bf00      	nop
 800cae0:	0801487d 	.word	0x0801487d
 800cae4:	08014894 	.word	0x08014894
 800cae8:	08014874 	.word	0x08014874
 800caec:	08014877 	.word	0x08014877
 800caf0:	0800fcae 	.word	0x0800fcae
 800caf4:	08014b58 	.word	0x08014b58
 800caf8:	08014b30 	.word	0x08014b30
 800cafc:	7ca00000 	.word	0x7ca00000
 800cb00:	7ff00000 	.word	0x7ff00000
 800cb04:	7fefffff 	.word	0x7fefffff
 800cb08:	f012 0110 	ands.w	r1, r2, #16
 800cb0c:	bf18      	it	ne
 800cb0e:	216a      	movne	r1, #106	; 0x6a
 800cb10:	9104      	str	r1, [sp, #16]
 800cb12:	ec49 8b17 	vmov	d7, r8, r9
 800cb16:	49be      	ldr	r1, [pc, #760]	; (800ce10 <_strtod_l+0x898>)
 800cb18:	2000      	movs	r0, #0
 800cb1a:	07d6      	lsls	r6, r2, #31
 800cb1c:	d504      	bpl.n	800cb28 <_strtod_l+0x5b0>
 800cb1e:	ed91 6b00 	vldr	d6, [r1]
 800cb22:	2001      	movs	r0, #1
 800cb24:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb28:	1052      	asrs	r2, r2, #1
 800cb2a:	f101 0108 	add.w	r1, r1, #8
 800cb2e:	d1f4      	bne.n	800cb1a <_strtod_l+0x5a2>
 800cb30:	b108      	cbz	r0, 800cb36 <_strtod_l+0x5be>
 800cb32:	ec59 8b17 	vmov	r8, r9, d7
 800cb36:	9a04      	ldr	r2, [sp, #16]
 800cb38:	b1c2      	cbz	r2, 800cb6c <_strtod_l+0x5f4>
 800cb3a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800cb3e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800cb42:	2a00      	cmp	r2, #0
 800cb44:	4648      	mov	r0, r9
 800cb46:	dd11      	ble.n	800cb6c <_strtod_l+0x5f4>
 800cb48:	2a1f      	cmp	r2, #31
 800cb4a:	f340 812e 	ble.w	800cdaa <_strtod_l+0x832>
 800cb4e:	2a34      	cmp	r2, #52	; 0x34
 800cb50:	bfde      	ittt	le
 800cb52:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800cb56:	f04f 32ff 	movle.w	r2, #4294967295
 800cb5a:	fa02 f101 	lslle.w	r1, r2, r1
 800cb5e:	f04f 0800 	mov.w	r8, #0
 800cb62:	bfcc      	ite	gt
 800cb64:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800cb68:	ea01 0900 	andle.w	r9, r1, r0
 800cb6c:	ec49 8b17 	vmov	d7, r8, r9
 800cb70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb78:	d0a6      	beq.n	800cac8 <_strtod_l+0x550>
 800cb7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb7c:	9200      	str	r2, [sp, #0]
 800cb7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cb80:	9a06      	ldr	r2, [sp, #24]
 800cb82:	4620      	mov	r0, r4
 800cb84:	f001 faea 	bl	800e15c <__s2b>
 800cb88:	9006      	str	r0, [sp, #24]
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	f43f af2c 	beq.w	800c9e8 <_strtod_l+0x470>
 800cb90:	9b07      	ldr	r3, [sp, #28]
 800cb92:	1b7d      	subs	r5, r7, r5
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	bfb4      	ite	lt
 800cb98:	462b      	movlt	r3, r5
 800cb9a:	2300      	movge	r3, #0
 800cb9c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb9e:	9b07      	ldr	r3, [sp, #28]
 800cba0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800cdf0 <_strtod_l+0x878>
 800cba4:	ed9f ab94 	vldr	d10, [pc, #592]	; 800cdf8 <_strtod_l+0x880>
 800cba8:	ed9f bb95 	vldr	d11, [pc, #596]	; 800ce00 <_strtod_l+0x888>
 800cbac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cbb0:	2500      	movs	r5, #0
 800cbb2:	930c      	str	r3, [sp, #48]	; 0x30
 800cbb4:	462e      	mov	r6, r5
 800cbb6:	9b06      	ldr	r3, [sp, #24]
 800cbb8:	4620      	mov	r0, r4
 800cbba:	6859      	ldr	r1, [r3, #4]
 800cbbc:	f001 fa26 	bl	800e00c <_Balloc>
 800cbc0:	4607      	mov	r7, r0
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	f43f af14 	beq.w	800c9f0 <_strtod_l+0x478>
 800cbc8:	9b06      	ldr	r3, [sp, #24]
 800cbca:	691a      	ldr	r2, [r3, #16]
 800cbcc:	3202      	adds	r2, #2
 800cbce:	f103 010c 	add.w	r1, r3, #12
 800cbd2:	0092      	lsls	r2, r2, #2
 800cbd4:	300c      	adds	r0, #12
 800cbd6:	f7ff fafd 	bl	800c1d4 <memcpy>
 800cbda:	ec49 8b10 	vmov	d0, r8, r9
 800cbde:	aa14      	add	r2, sp, #80	; 0x50
 800cbe0:	a913      	add	r1, sp, #76	; 0x4c
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f001 fe00 	bl	800e7e8 <__d2b>
 800cbe8:	ec49 8b18 	vmov	d8, r8, r9
 800cbec:	9012      	str	r0, [sp, #72]	; 0x48
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	f43f aefe 	beq.w	800c9f0 <_strtod_l+0x478>
 800cbf4:	2101      	movs	r1, #1
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	f001 fb4a 	bl	800e290 <__i2b>
 800cbfc:	4606      	mov	r6, r0
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	f43f aef6 	beq.w	800c9f0 <_strtod_l+0x478>
 800cc04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc06:	9914      	ldr	r1, [sp, #80]	; 0x50
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	bfab      	itete	ge
 800cc0c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800cc0e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800cc10:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800cc14:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800cc18:	bfac      	ite	ge
 800cc1a:	eb03 0b02 	addge.w	fp, r3, r2
 800cc1e:	eba2 0a03 	sublt.w	sl, r2, r3
 800cc22:	9a04      	ldr	r2, [sp, #16]
 800cc24:	1a9b      	subs	r3, r3, r2
 800cc26:	440b      	add	r3, r1
 800cc28:	4a7a      	ldr	r2, [pc, #488]	; (800ce14 <_strtod_l+0x89c>)
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800cc32:	f280 80cd 	bge.w	800cdd0 <_strtod_l+0x858>
 800cc36:	1ad2      	subs	r2, r2, r3
 800cc38:	2a1f      	cmp	r2, #31
 800cc3a:	eba1 0102 	sub.w	r1, r1, r2
 800cc3e:	f04f 0001 	mov.w	r0, #1
 800cc42:	f300 80b9 	bgt.w	800cdb8 <_strtod_l+0x840>
 800cc46:	fa00 f302 	lsl.w	r3, r0, r2
 800cc4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	930a      	str	r3, [sp, #40]	; 0x28
 800cc50:	eb0b 0301 	add.w	r3, fp, r1
 800cc54:	9a04      	ldr	r2, [sp, #16]
 800cc56:	459b      	cmp	fp, r3
 800cc58:	448a      	add	sl, r1
 800cc5a:	4492      	add	sl, r2
 800cc5c:	465a      	mov	r2, fp
 800cc5e:	bfa8      	it	ge
 800cc60:	461a      	movge	r2, r3
 800cc62:	4552      	cmp	r2, sl
 800cc64:	bfa8      	it	ge
 800cc66:	4652      	movge	r2, sl
 800cc68:	2a00      	cmp	r2, #0
 800cc6a:	bfc2      	ittt	gt
 800cc6c:	1a9b      	subgt	r3, r3, r2
 800cc6e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800cc72:	ebab 0b02 	subgt.w	fp, fp, r2
 800cc76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc78:	2a00      	cmp	r2, #0
 800cc7a:	dd18      	ble.n	800ccae <_strtod_l+0x736>
 800cc7c:	4631      	mov	r1, r6
 800cc7e:	4620      	mov	r0, r4
 800cc80:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc82:	f001 fbc5 	bl	800e410 <__pow5mult>
 800cc86:	4606      	mov	r6, r0
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	f43f aeb1 	beq.w	800c9f0 <_strtod_l+0x478>
 800cc8e:	4601      	mov	r1, r0
 800cc90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc92:	4620      	mov	r0, r4
 800cc94:	f001 fb12 	bl	800e2bc <__multiply>
 800cc98:	900e      	str	r0, [sp, #56]	; 0x38
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	f43f aea8 	beq.w	800c9f0 <_strtod_l+0x478>
 800cca0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cca2:	4620      	mov	r0, r4
 800cca4:	f001 f9f2 	bl	800e08c <_Bfree>
 800cca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccac:	9212      	str	r2, [sp, #72]	; 0x48
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f300 8093 	bgt.w	800cdda <_strtod_l+0x862>
 800ccb4:	9b07      	ldr	r3, [sp, #28]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	dd08      	ble.n	800cccc <_strtod_l+0x754>
 800ccba:	4639      	mov	r1, r7
 800ccbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f001 fba6 	bl	800e410 <__pow5mult>
 800ccc4:	4607      	mov	r7, r0
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	f43f ae92 	beq.w	800c9f0 <_strtod_l+0x478>
 800cccc:	f1ba 0f00 	cmp.w	sl, #0
 800ccd0:	dd08      	ble.n	800cce4 <_strtod_l+0x76c>
 800ccd2:	4639      	mov	r1, r7
 800ccd4:	4652      	mov	r2, sl
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f001 fbf4 	bl	800e4c4 <__lshift>
 800ccdc:	4607      	mov	r7, r0
 800ccde:	2800      	cmp	r0, #0
 800cce0:	f43f ae86 	beq.w	800c9f0 <_strtod_l+0x478>
 800cce4:	f1bb 0f00 	cmp.w	fp, #0
 800cce8:	dd08      	ble.n	800ccfc <_strtod_l+0x784>
 800ccea:	4631      	mov	r1, r6
 800ccec:	465a      	mov	r2, fp
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f001 fbe8 	bl	800e4c4 <__lshift>
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	f43f ae7a 	beq.w	800c9f0 <_strtod_l+0x478>
 800ccfc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ccfe:	463a      	mov	r2, r7
 800cd00:	4620      	mov	r0, r4
 800cd02:	f001 fc6b 	bl	800e5dc <__mdiff>
 800cd06:	4605      	mov	r5, r0
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	f43f ae71 	beq.w	800c9f0 <_strtod_l+0x478>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800cd14:	60c3      	str	r3, [r0, #12]
 800cd16:	4631      	mov	r1, r6
 800cd18:	f001 fc44 	bl	800e5a4 <__mcmp>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	da7d      	bge.n	800ce1c <_strtod_l+0x8a4>
 800cd20:	ea5a 0308 	orrs.w	r3, sl, r8
 800cd24:	f040 80a3 	bne.w	800ce6e <_strtod_l+0x8f6>
 800cd28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f040 809e 	bne.w	800ce6e <_strtod_l+0x8f6>
 800cd32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd36:	0d1b      	lsrs	r3, r3, #20
 800cd38:	051b      	lsls	r3, r3, #20
 800cd3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cd3e:	f240 8096 	bls.w	800ce6e <_strtod_l+0x8f6>
 800cd42:	696b      	ldr	r3, [r5, #20]
 800cd44:	b91b      	cbnz	r3, 800cd4e <_strtod_l+0x7d6>
 800cd46:	692b      	ldr	r3, [r5, #16]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	f340 8090 	ble.w	800ce6e <_strtod_l+0x8f6>
 800cd4e:	4629      	mov	r1, r5
 800cd50:	2201      	movs	r2, #1
 800cd52:	4620      	mov	r0, r4
 800cd54:	f001 fbb6 	bl	800e4c4 <__lshift>
 800cd58:	4631      	mov	r1, r6
 800cd5a:	4605      	mov	r5, r0
 800cd5c:	f001 fc22 	bl	800e5a4 <__mcmp>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	f340 8084 	ble.w	800ce6e <_strtod_l+0x8f6>
 800cd66:	9904      	ldr	r1, [sp, #16]
 800cd68:	4a2b      	ldr	r2, [pc, #172]	; (800ce18 <_strtod_l+0x8a0>)
 800cd6a:	464b      	mov	r3, r9
 800cd6c:	2900      	cmp	r1, #0
 800cd6e:	f000 809d 	beq.w	800ceac <_strtod_l+0x934>
 800cd72:	ea02 0109 	and.w	r1, r2, r9
 800cd76:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cd7a:	f300 8097 	bgt.w	800ceac <_strtod_l+0x934>
 800cd7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cd82:	f77f aea5 	ble.w	800cad0 <_strtod_l+0x558>
 800cd86:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ce08 <_strtod_l+0x890>
 800cd8a:	ec49 8b16 	vmov	d6, r8, r9
 800cd8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cd92:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cd96:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	bf08      	it	eq
 800cd9e:	2322      	moveq	r3, #34	; 0x22
 800cda0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cda4:	bf08      	it	eq
 800cda6:	6023      	streq	r3, [r4, #0]
 800cda8:	e62c      	b.n	800ca04 <_strtod_l+0x48c>
 800cdaa:	f04f 31ff 	mov.w	r1, #4294967295
 800cdae:	fa01 f202 	lsl.w	r2, r1, r2
 800cdb2:	ea02 0808 	and.w	r8, r2, r8
 800cdb6:	e6d9      	b.n	800cb6c <_strtod_l+0x5f4>
 800cdb8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800cdbc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800cdc0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800cdc4:	33e2      	adds	r3, #226	; 0xe2
 800cdc6:	fa00 f303 	lsl.w	r3, r0, r3
 800cdca:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800cdce:	e73f      	b.n	800cc50 <_strtod_l+0x6d8>
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cdd8:	e73a      	b.n	800cc50 <_strtod_l+0x6d8>
 800cdda:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cddc:	461a      	mov	r2, r3
 800cdde:	4620      	mov	r0, r4
 800cde0:	f001 fb70 	bl	800e4c4 <__lshift>
 800cde4:	9012      	str	r0, [sp, #72]	; 0x48
 800cde6:	2800      	cmp	r0, #0
 800cde8:	f47f af64 	bne.w	800ccb4 <_strtod_l+0x73c>
 800cdec:	e600      	b.n	800c9f0 <_strtod_l+0x478>
 800cdee:	bf00      	nop
 800cdf0:	94a03595 	.word	0x94a03595
 800cdf4:	3fcfffff 	.word	0x3fcfffff
 800cdf8:	94a03595 	.word	0x94a03595
 800cdfc:	3fdfffff 	.word	0x3fdfffff
 800ce00:	35afe535 	.word	0x35afe535
 800ce04:	3fe00000 	.word	0x3fe00000
 800ce08:	00000000 	.word	0x00000000
 800ce0c:	39500000 	.word	0x39500000
 800ce10:	080148a8 	.word	0x080148a8
 800ce14:	fffffc02 	.word	0xfffffc02
 800ce18:	7ff00000 	.word	0x7ff00000
 800ce1c:	46cb      	mov	fp, r9
 800ce1e:	d15f      	bne.n	800cee0 <_strtod_l+0x968>
 800ce20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce24:	f1ba 0f00 	cmp.w	sl, #0
 800ce28:	d02a      	beq.n	800ce80 <_strtod_l+0x908>
 800ce2a:	4aa7      	ldr	r2, [pc, #668]	; (800d0c8 <_strtod_l+0xb50>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d12b      	bne.n	800ce88 <_strtod_l+0x910>
 800ce30:	9b04      	ldr	r3, [sp, #16]
 800ce32:	4642      	mov	r2, r8
 800ce34:	b1fb      	cbz	r3, 800ce76 <_strtod_l+0x8fe>
 800ce36:	4ba5      	ldr	r3, [pc, #660]	; (800d0cc <_strtod_l+0xb54>)
 800ce38:	ea09 0303 	and.w	r3, r9, r3
 800ce3c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ce40:	f04f 31ff 	mov.w	r1, #4294967295
 800ce44:	d81a      	bhi.n	800ce7c <_strtod_l+0x904>
 800ce46:	0d1b      	lsrs	r3, r3, #20
 800ce48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ce4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d119      	bne.n	800ce88 <_strtod_l+0x910>
 800ce54:	4b9e      	ldr	r3, [pc, #632]	; (800d0d0 <_strtod_l+0xb58>)
 800ce56:	459b      	cmp	fp, r3
 800ce58:	d102      	bne.n	800ce60 <_strtod_l+0x8e8>
 800ce5a:	3201      	adds	r2, #1
 800ce5c:	f43f adc8 	beq.w	800c9f0 <_strtod_l+0x478>
 800ce60:	4b9a      	ldr	r3, [pc, #616]	; (800d0cc <_strtod_l+0xb54>)
 800ce62:	ea0b 0303 	and.w	r3, fp, r3
 800ce66:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800ce6a:	f04f 0800 	mov.w	r8, #0
 800ce6e:	9b04      	ldr	r3, [sp, #16]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d188      	bne.n	800cd86 <_strtod_l+0x80e>
 800ce74:	e5c6      	b.n	800ca04 <_strtod_l+0x48c>
 800ce76:	f04f 33ff 	mov.w	r3, #4294967295
 800ce7a:	e7e9      	b.n	800ce50 <_strtod_l+0x8d8>
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	e7e7      	b.n	800ce50 <_strtod_l+0x8d8>
 800ce80:	ea53 0308 	orrs.w	r3, r3, r8
 800ce84:	f43f af6f 	beq.w	800cd66 <_strtod_l+0x7ee>
 800ce88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce8a:	b1cb      	cbz	r3, 800cec0 <_strtod_l+0x948>
 800ce8c:	ea13 0f0b 	tst.w	r3, fp
 800ce90:	d0ed      	beq.n	800ce6e <_strtod_l+0x8f6>
 800ce92:	9a04      	ldr	r2, [sp, #16]
 800ce94:	4640      	mov	r0, r8
 800ce96:	4649      	mov	r1, r9
 800ce98:	f1ba 0f00 	cmp.w	sl, #0
 800ce9c:	d014      	beq.n	800cec8 <_strtod_l+0x950>
 800ce9e:	f7ff fb4f 	bl	800c540 <sulp>
 800cea2:	ee38 7b00 	vadd.f64	d7, d8, d0
 800cea6:	ec59 8b17 	vmov	r8, r9, d7
 800ceaa:	e7e0      	b.n	800ce6e <_strtod_l+0x8f6>
 800ceac:	4013      	ands	r3, r2
 800ceae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ceb2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ceb6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ceba:	f04f 38ff 	mov.w	r8, #4294967295
 800cebe:	e7d6      	b.n	800ce6e <_strtod_l+0x8f6>
 800cec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cec2:	ea13 0f08 	tst.w	r3, r8
 800cec6:	e7e3      	b.n	800ce90 <_strtod_l+0x918>
 800cec8:	f7ff fb3a 	bl	800c540 <sulp>
 800cecc:	ee38 0b40 	vsub.f64	d0, d8, d0
 800ced0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ced4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ced8:	ec59 8b10 	vmov	r8, r9, d0
 800cedc:	d1c7      	bne.n	800ce6e <_strtod_l+0x8f6>
 800cede:	e5f7      	b.n	800cad0 <_strtod_l+0x558>
 800cee0:	4631      	mov	r1, r6
 800cee2:	4628      	mov	r0, r5
 800cee4:	f001 fcdc 	bl	800e8a0 <__ratio>
 800cee8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ceec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cef4:	d865      	bhi.n	800cfc2 <_strtod_l+0xa4a>
 800cef6:	f1ba 0f00 	cmp.w	sl, #0
 800cefa:	d042      	beq.n	800cf82 <_strtod_l+0xa0a>
 800cefc:	4b75      	ldr	r3, [pc, #468]	; (800d0d4 <_strtod_l+0xb5c>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800cf04:	4871      	ldr	r0, [pc, #452]	; (800d0cc <_strtod_l+0xb54>)
 800cf06:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800d0e0 <_strtod_l+0xb68>
 800cf0a:	ea0b 0100 	and.w	r1, fp, r0
 800cf0e:	4561      	cmp	r1, ip
 800cf10:	f040 808e 	bne.w	800d030 <_strtod_l+0xab8>
 800cf14:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800cf18:	ec49 8b10 	vmov	d0, r8, r9
 800cf1c:	ec43 2b1c 	vmov	d12, r2, r3
 800cf20:	910a      	str	r1, [sp, #40]	; 0x28
 800cf22:	f001 fbe5 	bl	800e6f0 <__ulp>
 800cf26:	ec49 8b1e 	vmov	d14, r8, r9
 800cf2a:	4868      	ldr	r0, [pc, #416]	; (800d0cc <_strtod_l+0xb54>)
 800cf2c:	eeac eb00 	vfma.f64	d14, d12, d0
 800cf30:	ee1e 3a90 	vmov	r3, s29
 800cf34:	4a68      	ldr	r2, [pc, #416]	; (800d0d8 <_strtod_l+0xb60>)
 800cf36:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cf38:	4018      	ands	r0, r3
 800cf3a:	4290      	cmp	r0, r2
 800cf3c:	ec59 8b1e 	vmov	r8, r9, d14
 800cf40:	d94e      	bls.n	800cfe0 <_strtod_l+0xa68>
 800cf42:	ee18 3a90 	vmov	r3, s17
 800cf46:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d104      	bne.n	800cf58 <_strtod_l+0x9e0>
 800cf4e:	ee18 3a10 	vmov	r3, s16
 800cf52:	3301      	adds	r3, #1
 800cf54:	f43f ad4c 	beq.w	800c9f0 <_strtod_l+0x478>
 800cf58:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800d0d0 <_strtod_l+0xb58>
 800cf5c:	f04f 38ff 	mov.w	r8, #4294967295
 800cf60:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cf62:	4620      	mov	r0, r4
 800cf64:	f001 f892 	bl	800e08c <_Bfree>
 800cf68:	4639      	mov	r1, r7
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	f001 f88e 	bl	800e08c <_Bfree>
 800cf70:	4631      	mov	r1, r6
 800cf72:	4620      	mov	r0, r4
 800cf74:	f001 f88a 	bl	800e08c <_Bfree>
 800cf78:	4629      	mov	r1, r5
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f001 f886 	bl	800e08c <_Bfree>
 800cf80:	e619      	b.n	800cbb6 <_strtod_l+0x63e>
 800cf82:	f1b8 0f00 	cmp.w	r8, #0
 800cf86:	d112      	bne.n	800cfae <_strtod_l+0xa36>
 800cf88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cf8c:	b9b3      	cbnz	r3, 800cfbc <_strtod_l+0xa44>
 800cf8e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800cf92:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cf96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf9a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800cf9e:	bf58      	it	pl
 800cfa0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800cfa4:	eeb1 7b4d 	vneg.f64	d7, d13
 800cfa8:	ec53 2b17 	vmov	r2, r3, d7
 800cfac:	e7aa      	b.n	800cf04 <_strtod_l+0x98c>
 800cfae:	f1b8 0f01 	cmp.w	r8, #1
 800cfb2:	d103      	bne.n	800cfbc <_strtod_l+0xa44>
 800cfb4:	f1b9 0f00 	cmp.w	r9, #0
 800cfb8:	f43f ad8a 	beq.w	800cad0 <_strtod_l+0x558>
 800cfbc:	4b47      	ldr	r3, [pc, #284]	; (800d0dc <_strtod_l+0xb64>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	e79e      	b.n	800cf00 <_strtod_l+0x988>
 800cfc2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800cfc6:	ee20 db0d 	vmul.f64	d13, d0, d13
 800cfca:	f1ba 0f00 	cmp.w	sl, #0
 800cfce:	d104      	bne.n	800cfda <_strtod_l+0xa62>
 800cfd0:	eeb1 7b4d 	vneg.f64	d7, d13
 800cfd4:	ec53 2b17 	vmov	r2, r3, d7
 800cfd8:	e794      	b.n	800cf04 <_strtod_l+0x98c>
 800cfda:	eeb0 7b4d 	vmov.f64	d7, d13
 800cfde:	e7f9      	b.n	800cfd4 <_strtod_l+0xa5c>
 800cfe0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800cfe4:	9b04      	ldr	r3, [sp, #16]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1ba      	bne.n	800cf60 <_strtod_l+0x9e8>
 800cfea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cfee:	0d1b      	lsrs	r3, r3, #20
 800cff0:	051b      	lsls	r3, r3, #20
 800cff2:	4299      	cmp	r1, r3
 800cff4:	d1b4      	bne.n	800cf60 <_strtod_l+0x9e8>
 800cff6:	ec51 0b1d 	vmov	r0, r1, d13
 800cffa:	f7f3 fbad 	bl	8000758 <__aeabi_d2lz>
 800cffe:	f7f3 fb65 	bl	80006cc <__aeabi_l2d>
 800d002:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d006:	ec41 0b17 	vmov	d7, r0, r1
 800d00a:	ea43 0308 	orr.w	r3, r3, r8
 800d00e:	ea53 030a 	orrs.w	r3, r3, sl
 800d012:	ee3d db47 	vsub.f64	d13, d13, d7
 800d016:	d03c      	beq.n	800d092 <_strtod_l+0xb1a>
 800d018:	eeb4 dbca 	vcmpe.f64	d13, d10
 800d01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d020:	f53f acf0 	bmi.w	800ca04 <_strtod_l+0x48c>
 800d024:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800d028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d02c:	dd98      	ble.n	800cf60 <_strtod_l+0x9e8>
 800d02e:	e4e9      	b.n	800ca04 <_strtod_l+0x48c>
 800d030:	9804      	ldr	r0, [sp, #16]
 800d032:	b1f0      	cbz	r0, 800d072 <_strtod_l+0xafa>
 800d034:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800d038:	d81b      	bhi.n	800d072 <_strtod_l+0xafa>
 800d03a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800d0c0 <_strtod_l+0xb48>
 800d03e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800d042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d046:	d811      	bhi.n	800d06c <_strtod_l+0xaf4>
 800d048:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800d04c:	ee1d 3a10 	vmov	r3, s26
 800d050:	2b01      	cmp	r3, #1
 800d052:	bf38      	it	cc
 800d054:	2301      	movcc	r3, #1
 800d056:	ee0d 3a10 	vmov	s26, r3
 800d05a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800d05e:	f1ba 0f00 	cmp.w	sl, #0
 800d062:	d113      	bne.n	800d08c <_strtod_l+0xb14>
 800d064:	eeb1 7b4d 	vneg.f64	d7, d13
 800d068:	ec53 2b17 	vmov	r2, r3, d7
 800d06c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800d070:	1a43      	subs	r3, r0, r1
 800d072:	eeb0 0b48 	vmov.f64	d0, d8
 800d076:	ec43 2b1c 	vmov	d12, r2, r3
 800d07a:	910a      	str	r1, [sp, #40]	; 0x28
 800d07c:	f001 fb38 	bl	800e6f0 <__ulp>
 800d080:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d082:	eeac 8b00 	vfma.f64	d8, d12, d0
 800d086:	ec59 8b18 	vmov	r8, r9, d8
 800d08a:	e7ab      	b.n	800cfe4 <_strtod_l+0xa6c>
 800d08c:	eeb0 7b4d 	vmov.f64	d7, d13
 800d090:	e7ea      	b.n	800d068 <_strtod_l+0xaf0>
 800d092:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800d096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d09a:	f57f af61 	bpl.w	800cf60 <_strtod_l+0x9e8>
 800d09e:	e4b1      	b.n	800ca04 <_strtod_l+0x48c>
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	9308      	str	r3, [sp, #32]
 800d0a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d0a8:	6013      	str	r3, [r2, #0]
 800d0aa:	f7ff baad 	b.w	800c608 <_strtod_l+0x90>
 800d0ae:	2a65      	cmp	r2, #101	; 0x65
 800d0b0:	f43f ab9f 	beq.w	800c7f2 <_strtod_l+0x27a>
 800d0b4:	2a45      	cmp	r2, #69	; 0x45
 800d0b6:	f43f ab9c 	beq.w	800c7f2 <_strtod_l+0x27a>
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	f7ff bbd4 	b.w	800c868 <_strtod_l+0x2f0>
 800d0c0:	ffc00000 	.word	0xffc00000
 800d0c4:	41dfffff 	.word	0x41dfffff
 800d0c8:	000fffff 	.word	0x000fffff
 800d0cc:	7ff00000 	.word	0x7ff00000
 800d0d0:	7fefffff 	.word	0x7fefffff
 800d0d4:	3ff00000 	.word	0x3ff00000
 800d0d8:	7c9fffff 	.word	0x7c9fffff
 800d0dc:	bff00000 	.word	0xbff00000
 800d0e0:	7fe00000 	.word	0x7fe00000
 800d0e4:	00000000 	.word	0x00000000

0800d0e8 <strtof>:
 800d0e8:	b510      	push	{r4, lr}
 800d0ea:	4c1d      	ldr	r4, [pc, #116]	; (800d160 <strtof+0x78>)
 800d0ec:	4b1d      	ldr	r3, [pc, #116]	; (800d164 <strtof+0x7c>)
 800d0ee:	460a      	mov	r2, r1
 800d0f0:	4601      	mov	r1, r0
 800d0f2:	6820      	ldr	r0, [r4, #0]
 800d0f4:	f7ff fa40 	bl	800c578 <_strtod_l>
 800d0f8:	eeb4 0b40 	vcmp.f64	d0, d0
 800d0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d100:	eeb0 7b40 	vmov.f64	d7, d0
 800d104:	d70d      	bvc.n	800d122 <strtof+0x3a>
 800d106:	ee17 3a90 	vmov	r3, s15
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	4816      	ldr	r0, [pc, #88]	; (800d168 <strtof+0x80>)
 800d10e:	da04      	bge.n	800d11a <strtof+0x32>
 800d110:	f002 f8a2 	bl	800f258 <nanf>
 800d114:	eeb1 0a40 	vneg.f32	s0, s0
 800d118:	bd10      	pop	{r4, pc}
 800d11a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d11e:	f002 b89b 	b.w	800f258 <nanf>
 800d122:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d126:	eddf 6a11 	vldr	s13, [pc, #68]	; 800d16c <strtof+0x84>
 800d12a:	eeb0 6ac0 	vabs.f32	s12, s0
 800d12e:	eeb4 6a66 	vcmp.f32	s12, s13
 800d132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d136:	ddef      	ble.n	800d118 <strtof+0x30>
 800d138:	eeb0 7bc7 	vabs.f64	d7, d7
 800d13c:	ed9f 6b06 	vldr	d6, [pc, #24]	; 800d158 <strtof+0x70>
 800d140:	eeb4 7b46 	vcmp.f64	d7, d6
 800d144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d148:	bfde      	ittt	le
 800d14a:	6823      	ldrle	r3, [r4, #0]
 800d14c:	2222      	movle	r2, #34	; 0x22
 800d14e:	601a      	strle	r2, [r3, #0]
 800d150:	e7e2      	b.n	800d118 <strtof+0x30>
 800d152:	bf00      	nop
 800d154:	f3af 8000 	nop.w
 800d158:	ffffffff 	.word	0xffffffff
 800d15c:	7fefffff 	.word	0x7fefffff
 800d160:	24000030 	.word	0x24000030
 800d164:	24000098 	.word	0x24000098
 800d168:	0800fcae 	.word	0x0800fcae
 800d16c:	7f7fffff 	.word	0x7f7fffff

0800d170 <__strtok_r>:
 800d170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d172:	b908      	cbnz	r0, 800d178 <__strtok_r+0x8>
 800d174:	6810      	ldr	r0, [r2, #0]
 800d176:	b188      	cbz	r0, 800d19c <__strtok_r+0x2c>
 800d178:	4604      	mov	r4, r0
 800d17a:	4620      	mov	r0, r4
 800d17c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d180:	460f      	mov	r7, r1
 800d182:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d186:	b91e      	cbnz	r6, 800d190 <__strtok_r+0x20>
 800d188:	b965      	cbnz	r5, 800d1a4 <__strtok_r+0x34>
 800d18a:	6015      	str	r5, [r2, #0]
 800d18c:	4628      	mov	r0, r5
 800d18e:	e005      	b.n	800d19c <__strtok_r+0x2c>
 800d190:	42b5      	cmp	r5, r6
 800d192:	d1f6      	bne.n	800d182 <__strtok_r+0x12>
 800d194:	2b00      	cmp	r3, #0
 800d196:	d1f0      	bne.n	800d17a <__strtok_r+0xa>
 800d198:	6014      	str	r4, [r2, #0]
 800d19a:	7003      	strb	r3, [r0, #0]
 800d19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d19e:	461c      	mov	r4, r3
 800d1a0:	e00c      	b.n	800d1bc <__strtok_r+0x4c>
 800d1a2:	b915      	cbnz	r5, 800d1aa <__strtok_r+0x3a>
 800d1a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d1a8:	460e      	mov	r6, r1
 800d1aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d1ae:	42ab      	cmp	r3, r5
 800d1b0:	d1f7      	bne.n	800d1a2 <__strtok_r+0x32>
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d0f3      	beq.n	800d19e <__strtok_r+0x2e>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d1bc:	6014      	str	r4, [r2, #0]
 800d1be:	e7ed      	b.n	800d19c <__strtok_r+0x2c>

0800d1c0 <strtok_r>:
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	f7ff bfd5 	b.w	800d170 <__strtok_r>
	...

0800d1c8 <_strtoul_l.constprop.0>:
 800d1c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1cc:	4f36      	ldr	r7, [pc, #216]	; (800d2a8 <_strtoul_l.constprop.0+0xe0>)
 800d1ce:	4686      	mov	lr, r0
 800d1d0:	460d      	mov	r5, r1
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1d8:	5de6      	ldrb	r6, [r4, r7]
 800d1da:	f016 0608 	ands.w	r6, r6, #8
 800d1de:	d1f8      	bne.n	800d1d2 <_strtoul_l.constprop.0+0xa>
 800d1e0:	2c2d      	cmp	r4, #45	; 0x2d
 800d1e2:	d12f      	bne.n	800d244 <_strtoul_l.constprop.0+0x7c>
 800d1e4:	782c      	ldrb	r4, [r5, #0]
 800d1e6:	2601      	movs	r6, #1
 800d1e8:	1c85      	adds	r5, r0, #2
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d057      	beq.n	800d29e <_strtoul_l.constprop.0+0xd6>
 800d1ee:	2b10      	cmp	r3, #16
 800d1f0:	d109      	bne.n	800d206 <_strtoul_l.constprop.0+0x3e>
 800d1f2:	2c30      	cmp	r4, #48	; 0x30
 800d1f4:	d107      	bne.n	800d206 <_strtoul_l.constprop.0+0x3e>
 800d1f6:	7828      	ldrb	r0, [r5, #0]
 800d1f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d1fc:	2858      	cmp	r0, #88	; 0x58
 800d1fe:	d149      	bne.n	800d294 <_strtoul_l.constprop.0+0xcc>
 800d200:	786c      	ldrb	r4, [r5, #1]
 800d202:	2310      	movs	r3, #16
 800d204:	3502      	adds	r5, #2
 800d206:	f04f 38ff 	mov.w	r8, #4294967295
 800d20a:	2700      	movs	r7, #0
 800d20c:	fbb8 f8f3 	udiv	r8, r8, r3
 800d210:	fb03 f908 	mul.w	r9, r3, r8
 800d214:	ea6f 0909 	mvn.w	r9, r9
 800d218:	4638      	mov	r0, r7
 800d21a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d21e:	f1bc 0f09 	cmp.w	ip, #9
 800d222:	d814      	bhi.n	800d24e <_strtoul_l.constprop.0+0x86>
 800d224:	4664      	mov	r4, ip
 800d226:	42a3      	cmp	r3, r4
 800d228:	dd22      	ble.n	800d270 <_strtoul_l.constprop.0+0xa8>
 800d22a:	2f00      	cmp	r7, #0
 800d22c:	db1d      	blt.n	800d26a <_strtoul_l.constprop.0+0xa2>
 800d22e:	4580      	cmp	r8, r0
 800d230:	d31b      	bcc.n	800d26a <_strtoul_l.constprop.0+0xa2>
 800d232:	d101      	bne.n	800d238 <_strtoul_l.constprop.0+0x70>
 800d234:	45a1      	cmp	r9, r4
 800d236:	db18      	blt.n	800d26a <_strtoul_l.constprop.0+0xa2>
 800d238:	fb00 4003 	mla	r0, r0, r3, r4
 800d23c:	2701      	movs	r7, #1
 800d23e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d242:	e7ea      	b.n	800d21a <_strtoul_l.constprop.0+0x52>
 800d244:	2c2b      	cmp	r4, #43	; 0x2b
 800d246:	bf04      	itt	eq
 800d248:	782c      	ldrbeq	r4, [r5, #0]
 800d24a:	1c85      	addeq	r5, r0, #2
 800d24c:	e7cd      	b.n	800d1ea <_strtoul_l.constprop.0+0x22>
 800d24e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d252:	f1bc 0f19 	cmp.w	ip, #25
 800d256:	d801      	bhi.n	800d25c <_strtoul_l.constprop.0+0x94>
 800d258:	3c37      	subs	r4, #55	; 0x37
 800d25a:	e7e4      	b.n	800d226 <_strtoul_l.constprop.0+0x5e>
 800d25c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d260:	f1bc 0f19 	cmp.w	ip, #25
 800d264:	d804      	bhi.n	800d270 <_strtoul_l.constprop.0+0xa8>
 800d266:	3c57      	subs	r4, #87	; 0x57
 800d268:	e7dd      	b.n	800d226 <_strtoul_l.constprop.0+0x5e>
 800d26a:	f04f 37ff 	mov.w	r7, #4294967295
 800d26e:	e7e6      	b.n	800d23e <_strtoul_l.constprop.0+0x76>
 800d270:	2f00      	cmp	r7, #0
 800d272:	da07      	bge.n	800d284 <_strtoul_l.constprop.0+0xbc>
 800d274:	2322      	movs	r3, #34	; 0x22
 800d276:	f8ce 3000 	str.w	r3, [lr]
 800d27a:	f04f 30ff 	mov.w	r0, #4294967295
 800d27e:	b932      	cbnz	r2, 800d28e <_strtoul_l.constprop.0+0xc6>
 800d280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d284:	b106      	cbz	r6, 800d288 <_strtoul_l.constprop.0+0xc0>
 800d286:	4240      	negs	r0, r0
 800d288:	2a00      	cmp	r2, #0
 800d28a:	d0f9      	beq.n	800d280 <_strtoul_l.constprop.0+0xb8>
 800d28c:	b107      	cbz	r7, 800d290 <_strtoul_l.constprop.0+0xc8>
 800d28e:	1e69      	subs	r1, r5, #1
 800d290:	6011      	str	r1, [r2, #0]
 800d292:	e7f5      	b.n	800d280 <_strtoul_l.constprop.0+0xb8>
 800d294:	2430      	movs	r4, #48	; 0x30
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1b5      	bne.n	800d206 <_strtoul_l.constprop.0+0x3e>
 800d29a:	2308      	movs	r3, #8
 800d29c:	e7b3      	b.n	800d206 <_strtoul_l.constprop.0+0x3e>
 800d29e:	2c30      	cmp	r4, #48	; 0x30
 800d2a0:	d0a9      	beq.n	800d1f6 <_strtoul_l.constprop.0+0x2e>
 800d2a2:	230a      	movs	r3, #10
 800d2a4:	e7af      	b.n	800d206 <_strtoul_l.constprop.0+0x3e>
 800d2a6:	bf00      	nop
 800d2a8:	080148d1 	.word	0x080148d1

0800d2ac <strtoul>:
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	460a      	mov	r2, r1
 800d2b0:	4601      	mov	r1, r0
 800d2b2:	4802      	ldr	r0, [pc, #8]	; (800d2bc <strtoul+0x10>)
 800d2b4:	6800      	ldr	r0, [r0, #0]
 800d2b6:	f7ff bf87 	b.w	800d1c8 <_strtoul_l.constprop.0>
 800d2ba:	bf00      	nop
 800d2bc:	24000030 	.word	0x24000030

0800d2c0 <_vsniprintf_r>:
 800d2c0:	b530      	push	{r4, r5, lr}
 800d2c2:	4614      	mov	r4, r2
 800d2c4:	2c00      	cmp	r4, #0
 800d2c6:	b09b      	sub	sp, #108	; 0x6c
 800d2c8:	4605      	mov	r5, r0
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	da05      	bge.n	800d2da <_vsniprintf_r+0x1a>
 800d2ce:	238b      	movs	r3, #139	; 0x8b
 800d2d0:	6003      	str	r3, [r0, #0]
 800d2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d6:	b01b      	add	sp, #108	; 0x6c
 800d2d8:	bd30      	pop	{r4, r5, pc}
 800d2da:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d2de:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d2e2:	bf14      	ite	ne
 800d2e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d2e8:	4623      	moveq	r3, r4
 800d2ea:	9302      	str	r3, [sp, #8]
 800d2ec:	9305      	str	r3, [sp, #20]
 800d2ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2f2:	9100      	str	r1, [sp, #0]
 800d2f4:	9104      	str	r1, [sp, #16]
 800d2f6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d2fa:	4669      	mov	r1, sp
 800d2fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d2fe:	f001 fbb5 	bl	800ea6c <_svfiprintf_r>
 800d302:	1c43      	adds	r3, r0, #1
 800d304:	bfbc      	itt	lt
 800d306:	238b      	movlt	r3, #139	; 0x8b
 800d308:	602b      	strlt	r3, [r5, #0]
 800d30a:	2c00      	cmp	r4, #0
 800d30c:	d0e3      	beq.n	800d2d6 <_vsniprintf_r+0x16>
 800d30e:	9b00      	ldr	r3, [sp, #0]
 800d310:	2200      	movs	r2, #0
 800d312:	701a      	strb	r2, [r3, #0]
 800d314:	e7df      	b.n	800d2d6 <_vsniprintf_r+0x16>
	...

0800d318 <vsniprintf>:
 800d318:	b507      	push	{r0, r1, r2, lr}
 800d31a:	9300      	str	r3, [sp, #0]
 800d31c:	4613      	mov	r3, r2
 800d31e:	460a      	mov	r2, r1
 800d320:	4601      	mov	r1, r0
 800d322:	4803      	ldr	r0, [pc, #12]	; (800d330 <vsniprintf+0x18>)
 800d324:	6800      	ldr	r0, [r0, #0]
 800d326:	f7ff ffcb 	bl	800d2c0 <_vsniprintf_r>
 800d32a:	b003      	add	sp, #12
 800d32c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d330:	24000030 	.word	0x24000030

0800d334 <__swbuf_r>:
 800d334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d336:	460e      	mov	r6, r1
 800d338:	4614      	mov	r4, r2
 800d33a:	4605      	mov	r5, r0
 800d33c:	b118      	cbz	r0, 800d346 <__swbuf_r+0x12>
 800d33e:	6983      	ldr	r3, [r0, #24]
 800d340:	b90b      	cbnz	r3, 800d346 <__swbuf_r+0x12>
 800d342:	f000 f9d1 	bl	800d6e8 <__sinit>
 800d346:	4b21      	ldr	r3, [pc, #132]	; (800d3cc <__swbuf_r+0x98>)
 800d348:	429c      	cmp	r4, r3
 800d34a:	d12b      	bne.n	800d3a4 <__swbuf_r+0x70>
 800d34c:	686c      	ldr	r4, [r5, #4]
 800d34e:	69a3      	ldr	r3, [r4, #24]
 800d350:	60a3      	str	r3, [r4, #8]
 800d352:	89a3      	ldrh	r3, [r4, #12]
 800d354:	071a      	lsls	r2, r3, #28
 800d356:	d52f      	bpl.n	800d3b8 <__swbuf_r+0x84>
 800d358:	6923      	ldr	r3, [r4, #16]
 800d35a:	b36b      	cbz	r3, 800d3b8 <__swbuf_r+0x84>
 800d35c:	6923      	ldr	r3, [r4, #16]
 800d35e:	6820      	ldr	r0, [r4, #0]
 800d360:	1ac0      	subs	r0, r0, r3
 800d362:	6963      	ldr	r3, [r4, #20]
 800d364:	b2f6      	uxtb	r6, r6
 800d366:	4283      	cmp	r3, r0
 800d368:	4637      	mov	r7, r6
 800d36a:	dc04      	bgt.n	800d376 <__swbuf_r+0x42>
 800d36c:	4621      	mov	r1, r4
 800d36e:	4628      	mov	r0, r5
 800d370:	f000 f926 	bl	800d5c0 <_fflush_r>
 800d374:	bb30      	cbnz	r0, 800d3c4 <__swbuf_r+0x90>
 800d376:	68a3      	ldr	r3, [r4, #8]
 800d378:	3b01      	subs	r3, #1
 800d37a:	60a3      	str	r3, [r4, #8]
 800d37c:	6823      	ldr	r3, [r4, #0]
 800d37e:	1c5a      	adds	r2, r3, #1
 800d380:	6022      	str	r2, [r4, #0]
 800d382:	701e      	strb	r6, [r3, #0]
 800d384:	6963      	ldr	r3, [r4, #20]
 800d386:	3001      	adds	r0, #1
 800d388:	4283      	cmp	r3, r0
 800d38a:	d004      	beq.n	800d396 <__swbuf_r+0x62>
 800d38c:	89a3      	ldrh	r3, [r4, #12]
 800d38e:	07db      	lsls	r3, r3, #31
 800d390:	d506      	bpl.n	800d3a0 <__swbuf_r+0x6c>
 800d392:	2e0a      	cmp	r6, #10
 800d394:	d104      	bne.n	800d3a0 <__swbuf_r+0x6c>
 800d396:	4621      	mov	r1, r4
 800d398:	4628      	mov	r0, r5
 800d39a:	f000 f911 	bl	800d5c0 <_fflush_r>
 800d39e:	b988      	cbnz	r0, 800d3c4 <__swbuf_r+0x90>
 800d3a0:	4638      	mov	r0, r7
 800d3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3a4:	4b0a      	ldr	r3, [pc, #40]	; (800d3d0 <__swbuf_r+0x9c>)
 800d3a6:	429c      	cmp	r4, r3
 800d3a8:	d101      	bne.n	800d3ae <__swbuf_r+0x7a>
 800d3aa:	68ac      	ldr	r4, [r5, #8]
 800d3ac:	e7cf      	b.n	800d34e <__swbuf_r+0x1a>
 800d3ae:	4b09      	ldr	r3, [pc, #36]	; (800d3d4 <__swbuf_r+0xa0>)
 800d3b0:	429c      	cmp	r4, r3
 800d3b2:	bf08      	it	eq
 800d3b4:	68ec      	ldreq	r4, [r5, #12]
 800d3b6:	e7ca      	b.n	800d34e <__swbuf_r+0x1a>
 800d3b8:	4621      	mov	r1, r4
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	f000 f80c 	bl	800d3d8 <__swsetup_r>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d0cb      	beq.n	800d35c <__swbuf_r+0x28>
 800d3c4:	f04f 37ff 	mov.w	r7, #4294967295
 800d3c8:	e7ea      	b.n	800d3a0 <__swbuf_r+0x6c>
 800d3ca:	bf00      	nop
 800d3cc:	080149f4 	.word	0x080149f4
 800d3d0:	08014a14 	.word	0x08014a14
 800d3d4:	080149d4 	.word	0x080149d4

0800d3d8 <__swsetup_r>:
 800d3d8:	4b32      	ldr	r3, [pc, #200]	; (800d4a4 <__swsetup_r+0xcc>)
 800d3da:	b570      	push	{r4, r5, r6, lr}
 800d3dc:	681d      	ldr	r5, [r3, #0]
 800d3de:	4606      	mov	r6, r0
 800d3e0:	460c      	mov	r4, r1
 800d3e2:	b125      	cbz	r5, 800d3ee <__swsetup_r+0x16>
 800d3e4:	69ab      	ldr	r3, [r5, #24]
 800d3e6:	b913      	cbnz	r3, 800d3ee <__swsetup_r+0x16>
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	f000 f97d 	bl	800d6e8 <__sinit>
 800d3ee:	4b2e      	ldr	r3, [pc, #184]	; (800d4a8 <__swsetup_r+0xd0>)
 800d3f0:	429c      	cmp	r4, r3
 800d3f2:	d10f      	bne.n	800d414 <__swsetup_r+0x3c>
 800d3f4:	686c      	ldr	r4, [r5, #4]
 800d3f6:	89a3      	ldrh	r3, [r4, #12]
 800d3f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3fc:	0719      	lsls	r1, r3, #28
 800d3fe:	d42c      	bmi.n	800d45a <__swsetup_r+0x82>
 800d400:	06dd      	lsls	r5, r3, #27
 800d402:	d411      	bmi.n	800d428 <__swsetup_r+0x50>
 800d404:	2309      	movs	r3, #9
 800d406:	6033      	str	r3, [r6, #0]
 800d408:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d40c:	81a3      	strh	r3, [r4, #12]
 800d40e:	f04f 30ff 	mov.w	r0, #4294967295
 800d412:	e03e      	b.n	800d492 <__swsetup_r+0xba>
 800d414:	4b25      	ldr	r3, [pc, #148]	; (800d4ac <__swsetup_r+0xd4>)
 800d416:	429c      	cmp	r4, r3
 800d418:	d101      	bne.n	800d41e <__swsetup_r+0x46>
 800d41a:	68ac      	ldr	r4, [r5, #8]
 800d41c:	e7eb      	b.n	800d3f6 <__swsetup_r+0x1e>
 800d41e:	4b24      	ldr	r3, [pc, #144]	; (800d4b0 <__swsetup_r+0xd8>)
 800d420:	429c      	cmp	r4, r3
 800d422:	bf08      	it	eq
 800d424:	68ec      	ldreq	r4, [r5, #12]
 800d426:	e7e6      	b.n	800d3f6 <__swsetup_r+0x1e>
 800d428:	0758      	lsls	r0, r3, #29
 800d42a:	d512      	bpl.n	800d452 <__swsetup_r+0x7a>
 800d42c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d42e:	b141      	cbz	r1, 800d442 <__swsetup_r+0x6a>
 800d430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d434:	4299      	cmp	r1, r3
 800d436:	d002      	beq.n	800d43e <__swsetup_r+0x66>
 800d438:	4630      	mov	r0, r6
 800d43a:	f7fe fefb 	bl	800c234 <_free_r>
 800d43e:	2300      	movs	r3, #0
 800d440:	6363      	str	r3, [r4, #52]	; 0x34
 800d442:	89a3      	ldrh	r3, [r4, #12]
 800d444:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d448:	81a3      	strh	r3, [r4, #12]
 800d44a:	2300      	movs	r3, #0
 800d44c:	6063      	str	r3, [r4, #4]
 800d44e:	6923      	ldr	r3, [r4, #16]
 800d450:	6023      	str	r3, [r4, #0]
 800d452:	89a3      	ldrh	r3, [r4, #12]
 800d454:	f043 0308 	orr.w	r3, r3, #8
 800d458:	81a3      	strh	r3, [r4, #12]
 800d45a:	6923      	ldr	r3, [r4, #16]
 800d45c:	b94b      	cbnz	r3, 800d472 <__swsetup_r+0x9a>
 800d45e:	89a3      	ldrh	r3, [r4, #12]
 800d460:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d468:	d003      	beq.n	800d472 <__swsetup_r+0x9a>
 800d46a:	4621      	mov	r1, r4
 800d46c:	4630      	mov	r0, r6
 800d46e:	f000 fd6f 	bl	800df50 <__smakebuf_r>
 800d472:	89a0      	ldrh	r0, [r4, #12]
 800d474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d478:	f010 0301 	ands.w	r3, r0, #1
 800d47c:	d00a      	beq.n	800d494 <__swsetup_r+0xbc>
 800d47e:	2300      	movs	r3, #0
 800d480:	60a3      	str	r3, [r4, #8]
 800d482:	6963      	ldr	r3, [r4, #20]
 800d484:	425b      	negs	r3, r3
 800d486:	61a3      	str	r3, [r4, #24]
 800d488:	6923      	ldr	r3, [r4, #16]
 800d48a:	b943      	cbnz	r3, 800d49e <__swsetup_r+0xc6>
 800d48c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d490:	d1ba      	bne.n	800d408 <__swsetup_r+0x30>
 800d492:	bd70      	pop	{r4, r5, r6, pc}
 800d494:	0781      	lsls	r1, r0, #30
 800d496:	bf58      	it	pl
 800d498:	6963      	ldrpl	r3, [r4, #20]
 800d49a:	60a3      	str	r3, [r4, #8]
 800d49c:	e7f4      	b.n	800d488 <__swsetup_r+0xb0>
 800d49e:	2000      	movs	r0, #0
 800d4a0:	e7f7      	b.n	800d492 <__swsetup_r+0xba>
 800d4a2:	bf00      	nop
 800d4a4:	24000030 	.word	0x24000030
 800d4a8:	080149f4 	.word	0x080149f4
 800d4ac:	08014a14 	.word	0x08014a14
 800d4b0:	080149d4 	.word	0x080149d4

0800d4b4 <__sflush_r>:
 800d4b4:	898a      	ldrh	r2, [r1, #12]
 800d4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ba:	4605      	mov	r5, r0
 800d4bc:	0710      	lsls	r0, r2, #28
 800d4be:	460c      	mov	r4, r1
 800d4c0:	d458      	bmi.n	800d574 <__sflush_r+0xc0>
 800d4c2:	684b      	ldr	r3, [r1, #4]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	dc05      	bgt.n	800d4d4 <__sflush_r+0x20>
 800d4c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	dc02      	bgt.n	800d4d4 <__sflush_r+0x20>
 800d4ce:	2000      	movs	r0, #0
 800d4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4d6:	2e00      	cmp	r6, #0
 800d4d8:	d0f9      	beq.n	800d4ce <__sflush_r+0x1a>
 800d4da:	2300      	movs	r3, #0
 800d4dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d4e0:	682f      	ldr	r7, [r5, #0]
 800d4e2:	602b      	str	r3, [r5, #0]
 800d4e4:	d032      	beq.n	800d54c <__sflush_r+0x98>
 800d4e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d4e8:	89a3      	ldrh	r3, [r4, #12]
 800d4ea:	075a      	lsls	r2, r3, #29
 800d4ec:	d505      	bpl.n	800d4fa <__sflush_r+0x46>
 800d4ee:	6863      	ldr	r3, [r4, #4]
 800d4f0:	1ac0      	subs	r0, r0, r3
 800d4f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d4f4:	b10b      	cbz	r3, 800d4fa <__sflush_r+0x46>
 800d4f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d4f8:	1ac0      	subs	r0, r0, r3
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d500:	6a21      	ldr	r1, [r4, #32]
 800d502:	4628      	mov	r0, r5
 800d504:	47b0      	blx	r6
 800d506:	1c43      	adds	r3, r0, #1
 800d508:	89a3      	ldrh	r3, [r4, #12]
 800d50a:	d106      	bne.n	800d51a <__sflush_r+0x66>
 800d50c:	6829      	ldr	r1, [r5, #0]
 800d50e:	291d      	cmp	r1, #29
 800d510:	d82c      	bhi.n	800d56c <__sflush_r+0xb8>
 800d512:	4a2a      	ldr	r2, [pc, #168]	; (800d5bc <__sflush_r+0x108>)
 800d514:	40ca      	lsrs	r2, r1
 800d516:	07d6      	lsls	r6, r2, #31
 800d518:	d528      	bpl.n	800d56c <__sflush_r+0xb8>
 800d51a:	2200      	movs	r2, #0
 800d51c:	6062      	str	r2, [r4, #4]
 800d51e:	04d9      	lsls	r1, r3, #19
 800d520:	6922      	ldr	r2, [r4, #16]
 800d522:	6022      	str	r2, [r4, #0]
 800d524:	d504      	bpl.n	800d530 <__sflush_r+0x7c>
 800d526:	1c42      	adds	r2, r0, #1
 800d528:	d101      	bne.n	800d52e <__sflush_r+0x7a>
 800d52a:	682b      	ldr	r3, [r5, #0]
 800d52c:	b903      	cbnz	r3, 800d530 <__sflush_r+0x7c>
 800d52e:	6560      	str	r0, [r4, #84]	; 0x54
 800d530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d532:	602f      	str	r7, [r5, #0]
 800d534:	2900      	cmp	r1, #0
 800d536:	d0ca      	beq.n	800d4ce <__sflush_r+0x1a>
 800d538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d53c:	4299      	cmp	r1, r3
 800d53e:	d002      	beq.n	800d546 <__sflush_r+0x92>
 800d540:	4628      	mov	r0, r5
 800d542:	f7fe fe77 	bl	800c234 <_free_r>
 800d546:	2000      	movs	r0, #0
 800d548:	6360      	str	r0, [r4, #52]	; 0x34
 800d54a:	e7c1      	b.n	800d4d0 <__sflush_r+0x1c>
 800d54c:	6a21      	ldr	r1, [r4, #32]
 800d54e:	2301      	movs	r3, #1
 800d550:	4628      	mov	r0, r5
 800d552:	47b0      	blx	r6
 800d554:	1c41      	adds	r1, r0, #1
 800d556:	d1c7      	bne.n	800d4e8 <__sflush_r+0x34>
 800d558:	682b      	ldr	r3, [r5, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d0c4      	beq.n	800d4e8 <__sflush_r+0x34>
 800d55e:	2b1d      	cmp	r3, #29
 800d560:	d001      	beq.n	800d566 <__sflush_r+0xb2>
 800d562:	2b16      	cmp	r3, #22
 800d564:	d101      	bne.n	800d56a <__sflush_r+0xb6>
 800d566:	602f      	str	r7, [r5, #0]
 800d568:	e7b1      	b.n	800d4ce <__sflush_r+0x1a>
 800d56a:	89a3      	ldrh	r3, [r4, #12]
 800d56c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d570:	81a3      	strh	r3, [r4, #12]
 800d572:	e7ad      	b.n	800d4d0 <__sflush_r+0x1c>
 800d574:	690f      	ldr	r7, [r1, #16]
 800d576:	2f00      	cmp	r7, #0
 800d578:	d0a9      	beq.n	800d4ce <__sflush_r+0x1a>
 800d57a:	0793      	lsls	r3, r2, #30
 800d57c:	680e      	ldr	r6, [r1, #0]
 800d57e:	bf08      	it	eq
 800d580:	694b      	ldreq	r3, [r1, #20]
 800d582:	600f      	str	r7, [r1, #0]
 800d584:	bf18      	it	ne
 800d586:	2300      	movne	r3, #0
 800d588:	eba6 0807 	sub.w	r8, r6, r7
 800d58c:	608b      	str	r3, [r1, #8]
 800d58e:	f1b8 0f00 	cmp.w	r8, #0
 800d592:	dd9c      	ble.n	800d4ce <__sflush_r+0x1a>
 800d594:	6a21      	ldr	r1, [r4, #32]
 800d596:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d598:	4643      	mov	r3, r8
 800d59a:	463a      	mov	r2, r7
 800d59c:	4628      	mov	r0, r5
 800d59e:	47b0      	blx	r6
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	dc06      	bgt.n	800d5b2 <__sflush_r+0xfe>
 800d5a4:	89a3      	ldrh	r3, [r4, #12]
 800d5a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5aa:	81a3      	strh	r3, [r4, #12]
 800d5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b0:	e78e      	b.n	800d4d0 <__sflush_r+0x1c>
 800d5b2:	4407      	add	r7, r0
 800d5b4:	eba8 0800 	sub.w	r8, r8, r0
 800d5b8:	e7e9      	b.n	800d58e <__sflush_r+0xda>
 800d5ba:	bf00      	nop
 800d5bc:	20400001 	.word	0x20400001

0800d5c0 <_fflush_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	690b      	ldr	r3, [r1, #16]
 800d5c4:	4605      	mov	r5, r0
 800d5c6:	460c      	mov	r4, r1
 800d5c8:	b913      	cbnz	r3, 800d5d0 <_fflush_r+0x10>
 800d5ca:	2500      	movs	r5, #0
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	b118      	cbz	r0, 800d5da <_fflush_r+0x1a>
 800d5d2:	6983      	ldr	r3, [r0, #24]
 800d5d4:	b90b      	cbnz	r3, 800d5da <_fflush_r+0x1a>
 800d5d6:	f000 f887 	bl	800d6e8 <__sinit>
 800d5da:	4b14      	ldr	r3, [pc, #80]	; (800d62c <_fflush_r+0x6c>)
 800d5dc:	429c      	cmp	r4, r3
 800d5de:	d11b      	bne.n	800d618 <_fflush_r+0x58>
 800d5e0:	686c      	ldr	r4, [r5, #4]
 800d5e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d0ef      	beq.n	800d5ca <_fflush_r+0xa>
 800d5ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d5ec:	07d0      	lsls	r0, r2, #31
 800d5ee:	d404      	bmi.n	800d5fa <_fflush_r+0x3a>
 800d5f0:	0599      	lsls	r1, r3, #22
 800d5f2:	d402      	bmi.n	800d5fa <_fflush_r+0x3a>
 800d5f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5f6:	f000 fc84 	bl	800df02 <__retarget_lock_acquire_recursive>
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	4621      	mov	r1, r4
 800d5fe:	f7ff ff59 	bl	800d4b4 <__sflush_r>
 800d602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d604:	07da      	lsls	r2, r3, #31
 800d606:	4605      	mov	r5, r0
 800d608:	d4e0      	bmi.n	800d5cc <_fflush_r+0xc>
 800d60a:	89a3      	ldrh	r3, [r4, #12]
 800d60c:	059b      	lsls	r3, r3, #22
 800d60e:	d4dd      	bmi.n	800d5cc <_fflush_r+0xc>
 800d610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d612:	f000 fc77 	bl	800df04 <__retarget_lock_release_recursive>
 800d616:	e7d9      	b.n	800d5cc <_fflush_r+0xc>
 800d618:	4b05      	ldr	r3, [pc, #20]	; (800d630 <_fflush_r+0x70>)
 800d61a:	429c      	cmp	r4, r3
 800d61c:	d101      	bne.n	800d622 <_fflush_r+0x62>
 800d61e:	68ac      	ldr	r4, [r5, #8]
 800d620:	e7df      	b.n	800d5e2 <_fflush_r+0x22>
 800d622:	4b04      	ldr	r3, [pc, #16]	; (800d634 <_fflush_r+0x74>)
 800d624:	429c      	cmp	r4, r3
 800d626:	bf08      	it	eq
 800d628:	68ec      	ldreq	r4, [r5, #12]
 800d62a:	e7da      	b.n	800d5e2 <_fflush_r+0x22>
 800d62c:	080149f4 	.word	0x080149f4
 800d630:	08014a14 	.word	0x08014a14
 800d634:	080149d4 	.word	0x080149d4

0800d638 <std>:
 800d638:	2300      	movs	r3, #0
 800d63a:	b510      	push	{r4, lr}
 800d63c:	4604      	mov	r4, r0
 800d63e:	e9c0 3300 	strd	r3, r3, [r0]
 800d642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d646:	6083      	str	r3, [r0, #8]
 800d648:	8181      	strh	r1, [r0, #12]
 800d64a:	6643      	str	r3, [r0, #100]	; 0x64
 800d64c:	81c2      	strh	r2, [r0, #14]
 800d64e:	6183      	str	r3, [r0, #24]
 800d650:	4619      	mov	r1, r3
 800d652:	2208      	movs	r2, #8
 800d654:	305c      	adds	r0, #92	; 0x5c
 800d656:	f7fe fde5 	bl	800c224 <memset>
 800d65a:	4b05      	ldr	r3, [pc, #20]	; (800d670 <std+0x38>)
 800d65c:	6263      	str	r3, [r4, #36]	; 0x24
 800d65e:	4b05      	ldr	r3, [pc, #20]	; (800d674 <std+0x3c>)
 800d660:	62a3      	str	r3, [r4, #40]	; 0x28
 800d662:	4b05      	ldr	r3, [pc, #20]	; (800d678 <std+0x40>)
 800d664:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d666:	4b05      	ldr	r3, [pc, #20]	; (800d67c <std+0x44>)
 800d668:	6224      	str	r4, [r4, #32]
 800d66a:	6323      	str	r3, [r4, #48]	; 0x30
 800d66c:	bd10      	pop	{r4, pc}
 800d66e:	bf00      	nop
 800d670:	0800f265 	.word	0x0800f265
 800d674:	0800f287 	.word	0x0800f287
 800d678:	0800f2bf 	.word	0x0800f2bf
 800d67c:	0800f2e3 	.word	0x0800f2e3

0800d680 <_cleanup_r>:
 800d680:	4901      	ldr	r1, [pc, #4]	; (800d688 <_cleanup_r+0x8>)
 800d682:	f000 b8af 	b.w	800d7e4 <_fwalk_reent>
 800d686:	bf00      	nop
 800d688:	0800d5c1 	.word	0x0800d5c1

0800d68c <__sfmoreglue>:
 800d68c:	b570      	push	{r4, r5, r6, lr}
 800d68e:	2268      	movs	r2, #104	; 0x68
 800d690:	1e4d      	subs	r5, r1, #1
 800d692:	4355      	muls	r5, r2
 800d694:	460e      	mov	r6, r1
 800d696:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d69a:	f7fe fe37 	bl	800c30c <_malloc_r>
 800d69e:	4604      	mov	r4, r0
 800d6a0:	b140      	cbz	r0, 800d6b4 <__sfmoreglue+0x28>
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	e9c0 1600 	strd	r1, r6, [r0]
 800d6a8:	300c      	adds	r0, #12
 800d6aa:	60a0      	str	r0, [r4, #8]
 800d6ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d6b0:	f7fe fdb8 	bl	800c224 <memset>
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	bd70      	pop	{r4, r5, r6, pc}

0800d6b8 <__sfp_lock_acquire>:
 800d6b8:	4801      	ldr	r0, [pc, #4]	; (800d6c0 <__sfp_lock_acquire+0x8>)
 800d6ba:	f000 bc22 	b.w	800df02 <__retarget_lock_acquire_recursive>
 800d6be:	bf00      	nop
 800d6c0:	24000cbd 	.word	0x24000cbd

0800d6c4 <__sfp_lock_release>:
 800d6c4:	4801      	ldr	r0, [pc, #4]	; (800d6cc <__sfp_lock_release+0x8>)
 800d6c6:	f000 bc1d 	b.w	800df04 <__retarget_lock_release_recursive>
 800d6ca:	bf00      	nop
 800d6cc:	24000cbd 	.word	0x24000cbd

0800d6d0 <__sinit_lock_acquire>:
 800d6d0:	4801      	ldr	r0, [pc, #4]	; (800d6d8 <__sinit_lock_acquire+0x8>)
 800d6d2:	f000 bc16 	b.w	800df02 <__retarget_lock_acquire_recursive>
 800d6d6:	bf00      	nop
 800d6d8:	24000cbe 	.word	0x24000cbe

0800d6dc <__sinit_lock_release>:
 800d6dc:	4801      	ldr	r0, [pc, #4]	; (800d6e4 <__sinit_lock_release+0x8>)
 800d6de:	f000 bc11 	b.w	800df04 <__retarget_lock_release_recursive>
 800d6e2:	bf00      	nop
 800d6e4:	24000cbe 	.word	0x24000cbe

0800d6e8 <__sinit>:
 800d6e8:	b510      	push	{r4, lr}
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	f7ff fff0 	bl	800d6d0 <__sinit_lock_acquire>
 800d6f0:	69a3      	ldr	r3, [r4, #24]
 800d6f2:	b11b      	cbz	r3, 800d6fc <__sinit+0x14>
 800d6f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6f8:	f7ff bff0 	b.w	800d6dc <__sinit_lock_release>
 800d6fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d700:	6523      	str	r3, [r4, #80]	; 0x50
 800d702:	4b13      	ldr	r3, [pc, #76]	; (800d750 <__sinit+0x68>)
 800d704:	4a13      	ldr	r2, [pc, #76]	; (800d754 <__sinit+0x6c>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	62a2      	str	r2, [r4, #40]	; 0x28
 800d70a:	42a3      	cmp	r3, r4
 800d70c:	bf04      	itt	eq
 800d70e:	2301      	moveq	r3, #1
 800d710:	61a3      	streq	r3, [r4, #24]
 800d712:	4620      	mov	r0, r4
 800d714:	f000 f820 	bl	800d758 <__sfp>
 800d718:	6060      	str	r0, [r4, #4]
 800d71a:	4620      	mov	r0, r4
 800d71c:	f000 f81c 	bl	800d758 <__sfp>
 800d720:	60a0      	str	r0, [r4, #8]
 800d722:	4620      	mov	r0, r4
 800d724:	f000 f818 	bl	800d758 <__sfp>
 800d728:	2200      	movs	r2, #0
 800d72a:	60e0      	str	r0, [r4, #12]
 800d72c:	2104      	movs	r1, #4
 800d72e:	6860      	ldr	r0, [r4, #4]
 800d730:	f7ff ff82 	bl	800d638 <std>
 800d734:	68a0      	ldr	r0, [r4, #8]
 800d736:	2201      	movs	r2, #1
 800d738:	2109      	movs	r1, #9
 800d73a:	f7ff ff7d 	bl	800d638 <std>
 800d73e:	68e0      	ldr	r0, [r4, #12]
 800d740:	2202      	movs	r2, #2
 800d742:	2112      	movs	r1, #18
 800d744:	f7ff ff78 	bl	800d638 <std>
 800d748:	2301      	movs	r3, #1
 800d74a:	61a3      	str	r3, [r4, #24]
 800d74c:	e7d2      	b.n	800d6f4 <__sinit+0xc>
 800d74e:	bf00      	nop
 800d750:	08014870 	.word	0x08014870
 800d754:	0800d681 	.word	0x0800d681

0800d758 <__sfp>:
 800d758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75a:	4607      	mov	r7, r0
 800d75c:	f7ff ffac 	bl	800d6b8 <__sfp_lock_acquire>
 800d760:	4b1e      	ldr	r3, [pc, #120]	; (800d7dc <__sfp+0x84>)
 800d762:	681e      	ldr	r6, [r3, #0]
 800d764:	69b3      	ldr	r3, [r6, #24]
 800d766:	b913      	cbnz	r3, 800d76e <__sfp+0x16>
 800d768:	4630      	mov	r0, r6
 800d76a:	f7ff ffbd 	bl	800d6e8 <__sinit>
 800d76e:	3648      	adds	r6, #72	; 0x48
 800d770:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d774:	3b01      	subs	r3, #1
 800d776:	d503      	bpl.n	800d780 <__sfp+0x28>
 800d778:	6833      	ldr	r3, [r6, #0]
 800d77a:	b30b      	cbz	r3, 800d7c0 <__sfp+0x68>
 800d77c:	6836      	ldr	r6, [r6, #0]
 800d77e:	e7f7      	b.n	800d770 <__sfp+0x18>
 800d780:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d784:	b9d5      	cbnz	r5, 800d7bc <__sfp+0x64>
 800d786:	4b16      	ldr	r3, [pc, #88]	; (800d7e0 <__sfp+0x88>)
 800d788:	60e3      	str	r3, [r4, #12]
 800d78a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d78e:	6665      	str	r5, [r4, #100]	; 0x64
 800d790:	f000 fbb6 	bl	800df00 <__retarget_lock_init_recursive>
 800d794:	f7ff ff96 	bl	800d6c4 <__sfp_lock_release>
 800d798:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d79c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d7a0:	6025      	str	r5, [r4, #0]
 800d7a2:	61a5      	str	r5, [r4, #24]
 800d7a4:	2208      	movs	r2, #8
 800d7a6:	4629      	mov	r1, r5
 800d7a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d7ac:	f7fe fd3a 	bl	800c224 <memset>
 800d7b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d7b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7bc:	3468      	adds	r4, #104	; 0x68
 800d7be:	e7d9      	b.n	800d774 <__sfp+0x1c>
 800d7c0:	2104      	movs	r1, #4
 800d7c2:	4638      	mov	r0, r7
 800d7c4:	f7ff ff62 	bl	800d68c <__sfmoreglue>
 800d7c8:	4604      	mov	r4, r0
 800d7ca:	6030      	str	r0, [r6, #0]
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d1d5      	bne.n	800d77c <__sfp+0x24>
 800d7d0:	f7ff ff78 	bl	800d6c4 <__sfp_lock_release>
 800d7d4:	230c      	movs	r3, #12
 800d7d6:	603b      	str	r3, [r7, #0]
 800d7d8:	e7ee      	b.n	800d7b8 <__sfp+0x60>
 800d7da:	bf00      	nop
 800d7dc:	08014870 	.word	0x08014870
 800d7e0:	ffff0001 	.word	0xffff0001

0800d7e4 <_fwalk_reent>:
 800d7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7e8:	4606      	mov	r6, r0
 800d7ea:	4688      	mov	r8, r1
 800d7ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d7f0:	2700      	movs	r7, #0
 800d7f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d7f6:	f1b9 0901 	subs.w	r9, r9, #1
 800d7fa:	d505      	bpl.n	800d808 <_fwalk_reent+0x24>
 800d7fc:	6824      	ldr	r4, [r4, #0]
 800d7fe:	2c00      	cmp	r4, #0
 800d800:	d1f7      	bne.n	800d7f2 <_fwalk_reent+0xe>
 800d802:	4638      	mov	r0, r7
 800d804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d808:	89ab      	ldrh	r3, [r5, #12]
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d907      	bls.n	800d81e <_fwalk_reent+0x3a>
 800d80e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d812:	3301      	adds	r3, #1
 800d814:	d003      	beq.n	800d81e <_fwalk_reent+0x3a>
 800d816:	4629      	mov	r1, r5
 800d818:	4630      	mov	r0, r6
 800d81a:	47c0      	blx	r8
 800d81c:	4307      	orrs	r7, r0
 800d81e:	3568      	adds	r5, #104	; 0x68
 800d820:	e7e9      	b.n	800d7f6 <_fwalk_reent+0x12>

0800d822 <rshift>:
 800d822:	6903      	ldr	r3, [r0, #16]
 800d824:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d82c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d830:	f100 0414 	add.w	r4, r0, #20
 800d834:	dd45      	ble.n	800d8c2 <rshift+0xa0>
 800d836:	f011 011f 	ands.w	r1, r1, #31
 800d83a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d83e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d842:	d10c      	bne.n	800d85e <rshift+0x3c>
 800d844:	f100 0710 	add.w	r7, r0, #16
 800d848:	4629      	mov	r1, r5
 800d84a:	42b1      	cmp	r1, r6
 800d84c:	d334      	bcc.n	800d8b8 <rshift+0x96>
 800d84e:	1a9b      	subs	r3, r3, r2
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	1eea      	subs	r2, r5, #3
 800d854:	4296      	cmp	r6, r2
 800d856:	bf38      	it	cc
 800d858:	2300      	movcc	r3, #0
 800d85a:	4423      	add	r3, r4
 800d85c:	e015      	b.n	800d88a <rshift+0x68>
 800d85e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d862:	f1c1 0820 	rsb	r8, r1, #32
 800d866:	40cf      	lsrs	r7, r1
 800d868:	f105 0e04 	add.w	lr, r5, #4
 800d86c:	46a1      	mov	r9, r4
 800d86e:	4576      	cmp	r6, lr
 800d870:	46f4      	mov	ip, lr
 800d872:	d815      	bhi.n	800d8a0 <rshift+0x7e>
 800d874:	1a9a      	subs	r2, r3, r2
 800d876:	0092      	lsls	r2, r2, #2
 800d878:	3a04      	subs	r2, #4
 800d87a:	3501      	adds	r5, #1
 800d87c:	42ae      	cmp	r6, r5
 800d87e:	bf38      	it	cc
 800d880:	2200      	movcc	r2, #0
 800d882:	18a3      	adds	r3, r4, r2
 800d884:	50a7      	str	r7, [r4, r2]
 800d886:	b107      	cbz	r7, 800d88a <rshift+0x68>
 800d888:	3304      	adds	r3, #4
 800d88a:	1b1a      	subs	r2, r3, r4
 800d88c:	42a3      	cmp	r3, r4
 800d88e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d892:	bf08      	it	eq
 800d894:	2300      	moveq	r3, #0
 800d896:	6102      	str	r2, [r0, #16]
 800d898:	bf08      	it	eq
 800d89a:	6143      	streq	r3, [r0, #20]
 800d89c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8a0:	f8dc c000 	ldr.w	ip, [ip]
 800d8a4:	fa0c fc08 	lsl.w	ip, ip, r8
 800d8a8:	ea4c 0707 	orr.w	r7, ip, r7
 800d8ac:	f849 7b04 	str.w	r7, [r9], #4
 800d8b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d8b4:	40cf      	lsrs	r7, r1
 800d8b6:	e7da      	b.n	800d86e <rshift+0x4c>
 800d8b8:	f851 cb04 	ldr.w	ip, [r1], #4
 800d8bc:	f847 cf04 	str.w	ip, [r7, #4]!
 800d8c0:	e7c3      	b.n	800d84a <rshift+0x28>
 800d8c2:	4623      	mov	r3, r4
 800d8c4:	e7e1      	b.n	800d88a <rshift+0x68>

0800d8c6 <__hexdig_fun>:
 800d8c6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d8ca:	2b09      	cmp	r3, #9
 800d8cc:	d802      	bhi.n	800d8d4 <__hexdig_fun+0xe>
 800d8ce:	3820      	subs	r0, #32
 800d8d0:	b2c0      	uxtb	r0, r0
 800d8d2:	4770      	bx	lr
 800d8d4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d8d8:	2b05      	cmp	r3, #5
 800d8da:	d801      	bhi.n	800d8e0 <__hexdig_fun+0x1a>
 800d8dc:	3847      	subs	r0, #71	; 0x47
 800d8de:	e7f7      	b.n	800d8d0 <__hexdig_fun+0xa>
 800d8e0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d8e4:	2b05      	cmp	r3, #5
 800d8e6:	d801      	bhi.n	800d8ec <__hexdig_fun+0x26>
 800d8e8:	3827      	subs	r0, #39	; 0x27
 800d8ea:	e7f1      	b.n	800d8d0 <__hexdig_fun+0xa>
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	4770      	bx	lr

0800d8f0 <__gethex>:
 800d8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f4:	ed2d 8b02 	vpush	{d8}
 800d8f8:	b089      	sub	sp, #36	; 0x24
 800d8fa:	ee08 0a10 	vmov	s16, r0
 800d8fe:	9304      	str	r3, [sp, #16]
 800d900:	4bb4      	ldr	r3, [pc, #720]	; (800dbd4 <__gethex+0x2e4>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	9301      	str	r3, [sp, #4]
 800d906:	4618      	mov	r0, r3
 800d908:	468b      	mov	fp, r1
 800d90a:	4690      	mov	r8, r2
 800d90c:	f7f2 fcf2 	bl	80002f4 <strlen>
 800d910:	9b01      	ldr	r3, [sp, #4]
 800d912:	f8db 2000 	ldr.w	r2, [fp]
 800d916:	4403      	add	r3, r0
 800d918:	4682      	mov	sl, r0
 800d91a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d91e:	9305      	str	r3, [sp, #20]
 800d920:	1c93      	adds	r3, r2, #2
 800d922:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d926:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d92a:	32fe      	adds	r2, #254	; 0xfe
 800d92c:	18d1      	adds	r1, r2, r3
 800d92e:	461f      	mov	r7, r3
 800d930:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d934:	9100      	str	r1, [sp, #0]
 800d936:	2830      	cmp	r0, #48	; 0x30
 800d938:	d0f8      	beq.n	800d92c <__gethex+0x3c>
 800d93a:	f7ff ffc4 	bl	800d8c6 <__hexdig_fun>
 800d93e:	4604      	mov	r4, r0
 800d940:	2800      	cmp	r0, #0
 800d942:	d13a      	bne.n	800d9ba <__gethex+0xca>
 800d944:	9901      	ldr	r1, [sp, #4]
 800d946:	4652      	mov	r2, sl
 800d948:	4638      	mov	r0, r7
 800d94a:	f001 fcce 	bl	800f2ea <strncmp>
 800d94e:	4605      	mov	r5, r0
 800d950:	2800      	cmp	r0, #0
 800d952:	d168      	bne.n	800da26 <__gethex+0x136>
 800d954:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d958:	eb07 060a 	add.w	r6, r7, sl
 800d95c:	f7ff ffb3 	bl	800d8c6 <__hexdig_fun>
 800d960:	2800      	cmp	r0, #0
 800d962:	d062      	beq.n	800da2a <__gethex+0x13a>
 800d964:	4633      	mov	r3, r6
 800d966:	7818      	ldrb	r0, [r3, #0]
 800d968:	2830      	cmp	r0, #48	; 0x30
 800d96a:	461f      	mov	r7, r3
 800d96c:	f103 0301 	add.w	r3, r3, #1
 800d970:	d0f9      	beq.n	800d966 <__gethex+0x76>
 800d972:	f7ff ffa8 	bl	800d8c6 <__hexdig_fun>
 800d976:	2301      	movs	r3, #1
 800d978:	fab0 f480 	clz	r4, r0
 800d97c:	0964      	lsrs	r4, r4, #5
 800d97e:	4635      	mov	r5, r6
 800d980:	9300      	str	r3, [sp, #0]
 800d982:	463a      	mov	r2, r7
 800d984:	4616      	mov	r6, r2
 800d986:	3201      	adds	r2, #1
 800d988:	7830      	ldrb	r0, [r6, #0]
 800d98a:	f7ff ff9c 	bl	800d8c6 <__hexdig_fun>
 800d98e:	2800      	cmp	r0, #0
 800d990:	d1f8      	bne.n	800d984 <__gethex+0x94>
 800d992:	9901      	ldr	r1, [sp, #4]
 800d994:	4652      	mov	r2, sl
 800d996:	4630      	mov	r0, r6
 800d998:	f001 fca7 	bl	800f2ea <strncmp>
 800d99c:	b980      	cbnz	r0, 800d9c0 <__gethex+0xd0>
 800d99e:	b94d      	cbnz	r5, 800d9b4 <__gethex+0xc4>
 800d9a0:	eb06 050a 	add.w	r5, r6, sl
 800d9a4:	462a      	mov	r2, r5
 800d9a6:	4616      	mov	r6, r2
 800d9a8:	3201      	adds	r2, #1
 800d9aa:	7830      	ldrb	r0, [r6, #0]
 800d9ac:	f7ff ff8b 	bl	800d8c6 <__hexdig_fun>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	d1f8      	bne.n	800d9a6 <__gethex+0xb6>
 800d9b4:	1bad      	subs	r5, r5, r6
 800d9b6:	00ad      	lsls	r5, r5, #2
 800d9b8:	e004      	b.n	800d9c4 <__gethex+0xd4>
 800d9ba:	2400      	movs	r4, #0
 800d9bc:	4625      	mov	r5, r4
 800d9be:	e7e0      	b.n	800d982 <__gethex+0x92>
 800d9c0:	2d00      	cmp	r5, #0
 800d9c2:	d1f7      	bne.n	800d9b4 <__gethex+0xc4>
 800d9c4:	7833      	ldrb	r3, [r6, #0]
 800d9c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d9ca:	2b50      	cmp	r3, #80	; 0x50
 800d9cc:	d13b      	bne.n	800da46 <__gethex+0x156>
 800d9ce:	7873      	ldrb	r3, [r6, #1]
 800d9d0:	2b2b      	cmp	r3, #43	; 0x2b
 800d9d2:	d02c      	beq.n	800da2e <__gethex+0x13e>
 800d9d4:	2b2d      	cmp	r3, #45	; 0x2d
 800d9d6:	d02e      	beq.n	800da36 <__gethex+0x146>
 800d9d8:	1c71      	adds	r1, r6, #1
 800d9da:	f04f 0900 	mov.w	r9, #0
 800d9de:	7808      	ldrb	r0, [r1, #0]
 800d9e0:	f7ff ff71 	bl	800d8c6 <__hexdig_fun>
 800d9e4:	1e43      	subs	r3, r0, #1
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	2b18      	cmp	r3, #24
 800d9ea:	d82c      	bhi.n	800da46 <__gethex+0x156>
 800d9ec:	f1a0 0210 	sub.w	r2, r0, #16
 800d9f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d9f4:	f7ff ff67 	bl	800d8c6 <__hexdig_fun>
 800d9f8:	1e43      	subs	r3, r0, #1
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	2b18      	cmp	r3, #24
 800d9fe:	d91d      	bls.n	800da3c <__gethex+0x14c>
 800da00:	f1b9 0f00 	cmp.w	r9, #0
 800da04:	d000      	beq.n	800da08 <__gethex+0x118>
 800da06:	4252      	negs	r2, r2
 800da08:	4415      	add	r5, r2
 800da0a:	f8cb 1000 	str.w	r1, [fp]
 800da0e:	b1e4      	cbz	r4, 800da4a <__gethex+0x15a>
 800da10:	9b00      	ldr	r3, [sp, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	bf14      	ite	ne
 800da16:	2700      	movne	r7, #0
 800da18:	2706      	moveq	r7, #6
 800da1a:	4638      	mov	r0, r7
 800da1c:	b009      	add	sp, #36	; 0x24
 800da1e:	ecbd 8b02 	vpop	{d8}
 800da22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da26:	463e      	mov	r6, r7
 800da28:	4625      	mov	r5, r4
 800da2a:	2401      	movs	r4, #1
 800da2c:	e7ca      	b.n	800d9c4 <__gethex+0xd4>
 800da2e:	f04f 0900 	mov.w	r9, #0
 800da32:	1cb1      	adds	r1, r6, #2
 800da34:	e7d3      	b.n	800d9de <__gethex+0xee>
 800da36:	f04f 0901 	mov.w	r9, #1
 800da3a:	e7fa      	b.n	800da32 <__gethex+0x142>
 800da3c:	230a      	movs	r3, #10
 800da3e:	fb03 0202 	mla	r2, r3, r2, r0
 800da42:	3a10      	subs	r2, #16
 800da44:	e7d4      	b.n	800d9f0 <__gethex+0x100>
 800da46:	4631      	mov	r1, r6
 800da48:	e7df      	b.n	800da0a <__gethex+0x11a>
 800da4a:	1bf3      	subs	r3, r6, r7
 800da4c:	3b01      	subs	r3, #1
 800da4e:	4621      	mov	r1, r4
 800da50:	2b07      	cmp	r3, #7
 800da52:	dc0b      	bgt.n	800da6c <__gethex+0x17c>
 800da54:	ee18 0a10 	vmov	r0, s16
 800da58:	f000 fad8 	bl	800e00c <_Balloc>
 800da5c:	4604      	mov	r4, r0
 800da5e:	b940      	cbnz	r0, 800da72 <__gethex+0x182>
 800da60:	4b5d      	ldr	r3, [pc, #372]	; (800dbd8 <__gethex+0x2e8>)
 800da62:	4602      	mov	r2, r0
 800da64:	21de      	movs	r1, #222	; 0xde
 800da66:	485d      	ldr	r0, [pc, #372]	; (800dbdc <__gethex+0x2ec>)
 800da68:	f001 fc72 	bl	800f350 <__assert_func>
 800da6c:	3101      	adds	r1, #1
 800da6e:	105b      	asrs	r3, r3, #1
 800da70:	e7ee      	b.n	800da50 <__gethex+0x160>
 800da72:	f100 0914 	add.w	r9, r0, #20
 800da76:	f04f 0b00 	mov.w	fp, #0
 800da7a:	f1ca 0301 	rsb	r3, sl, #1
 800da7e:	f8cd 9008 	str.w	r9, [sp, #8]
 800da82:	f8cd b000 	str.w	fp, [sp]
 800da86:	9306      	str	r3, [sp, #24]
 800da88:	42b7      	cmp	r7, r6
 800da8a:	d340      	bcc.n	800db0e <__gethex+0x21e>
 800da8c:	9802      	ldr	r0, [sp, #8]
 800da8e:	9b00      	ldr	r3, [sp, #0]
 800da90:	f840 3b04 	str.w	r3, [r0], #4
 800da94:	eba0 0009 	sub.w	r0, r0, r9
 800da98:	1080      	asrs	r0, r0, #2
 800da9a:	0146      	lsls	r6, r0, #5
 800da9c:	6120      	str	r0, [r4, #16]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 fba6 	bl	800e1f0 <__hi0bits>
 800daa4:	1a30      	subs	r0, r6, r0
 800daa6:	f8d8 6000 	ldr.w	r6, [r8]
 800daaa:	42b0      	cmp	r0, r6
 800daac:	dd63      	ble.n	800db76 <__gethex+0x286>
 800daae:	1b87      	subs	r7, r0, r6
 800dab0:	4639      	mov	r1, r7
 800dab2:	4620      	mov	r0, r4
 800dab4:	f000 ff47 	bl	800e946 <__any_on>
 800dab8:	4682      	mov	sl, r0
 800daba:	b1a8      	cbz	r0, 800dae8 <__gethex+0x1f8>
 800dabc:	1e7b      	subs	r3, r7, #1
 800dabe:	1159      	asrs	r1, r3, #5
 800dac0:	f003 021f 	and.w	r2, r3, #31
 800dac4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dac8:	f04f 0a01 	mov.w	sl, #1
 800dacc:	fa0a f202 	lsl.w	r2, sl, r2
 800dad0:	420a      	tst	r2, r1
 800dad2:	d009      	beq.n	800dae8 <__gethex+0x1f8>
 800dad4:	4553      	cmp	r3, sl
 800dad6:	dd05      	ble.n	800dae4 <__gethex+0x1f4>
 800dad8:	1eb9      	subs	r1, r7, #2
 800dada:	4620      	mov	r0, r4
 800dadc:	f000 ff33 	bl	800e946 <__any_on>
 800dae0:	2800      	cmp	r0, #0
 800dae2:	d145      	bne.n	800db70 <__gethex+0x280>
 800dae4:	f04f 0a02 	mov.w	sl, #2
 800dae8:	4639      	mov	r1, r7
 800daea:	4620      	mov	r0, r4
 800daec:	f7ff fe99 	bl	800d822 <rshift>
 800daf0:	443d      	add	r5, r7
 800daf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800daf6:	42ab      	cmp	r3, r5
 800daf8:	da4c      	bge.n	800db94 <__gethex+0x2a4>
 800dafa:	ee18 0a10 	vmov	r0, s16
 800dafe:	4621      	mov	r1, r4
 800db00:	f000 fac4 	bl	800e08c <_Bfree>
 800db04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db06:	2300      	movs	r3, #0
 800db08:	6013      	str	r3, [r2, #0]
 800db0a:	27a3      	movs	r7, #163	; 0xa3
 800db0c:	e785      	b.n	800da1a <__gethex+0x12a>
 800db0e:	1e73      	subs	r3, r6, #1
 800db10:	9a05      	ldr	r2, [sp, #20]
 800db12:	9303      	str	r3, [sp, #12]
 800db14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db18:	4293      	cmp	r3, r2
 800db1a:	d019      	beq.n	800db50 <__gethex+0x260>
 800db1c:	f1bb 0f20 	cmp.w	fp, #32
 800db20:	d107      	bne.n	800db32 <__gethex+0x242>
 800db22:	9b02      	ldr	r3, [sp, #8]
 800db24:	9a00      	ldr	r2, [sp, #0]
 800db26:	f843 2b04 	str.w	r2, [r3], #4
 800db2a:	9302      	str	r3, [sp, #8]
 800db2c:	2300      	movs	r3, #0
 800db2e:	9300      	str	r3, [sp, #0]
 800db30:	469b      	mov	fp, r3
 800db32:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800db36:	f7ff fec6 	bl	800d8c6 <__hexdig_fun>
 800db3a:	9b00      	ldr	r3, [sp, #0]
 800db3c:	f000 000f 	and.w	r0, r0, #15
 800db40:	fa00 f00b 	lsl.w	r0, r0, fp
 800db44:	4303      	orrs	r3, r0
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	f10b 0b04 	add.w	fp, fp, #4
 800db4c:	9b03      	ldr	r3, [sp, #12]
 800db4e:	e00d      	b.n	800db6c <__gethex+0x27c>
 800db50:	9b03      	ldr	r3, [sp, #12]
 800db52:	9a06      	ldr	r2, [sp, #24]
 800db54:	4413      	add	r3, r2
 800db56:	42bb      	cmp	r3, r7
 800db58:	d3e0      	bcc.n	800db1c <__gethex+0x22c>
 800db5a:	4618      	mov	r0, r3
 800db5c:	9901      	ldr	r1, [sp, #4]
 800db5e:	9307      	str	r3, [sp, #28]
 800db60:	4652      	mov	r2, sl
 800db62:	f001 fbc2 	bl	800f2ea <strncmp>
 800db66:	9b07      	ldr	r3, [sp, #28]
 800db68:	2800      	cmp	r0, #0
 800db6a:	d1d7      	bne.n	800db1c <__gethex+0x22c>
 800db6c:	461e      	mov	r6, r3
 800db6e:	e78b      	b.n	800da88 <__gethex+0x198>
 800db70:	f04f 0a03 	mov.w	sl, #3
 800db74:	e7b8      	b.n	800dae8 <__gethex+0x1f8>
 800db76:	da0a      	bge.n	800db8e <__gethex+0x29e>
 800db78:	1a37      	subs	r7, r6, r0
 800db7a:	4621      	mov	r1, r4
 800db7c:	ee18 0a10 	vmov	r0, s16
 800db80:	463a      	mov	r2, r7
 800db82:	f000 fc9f 	bl	800e4c4 <__lshift>
 800db86:	1bed      	subs	r5, r5, r7
 800db88:	4604      	mov	r4, r0
 800db8a:	f100 0914 	add.w	r9, r0, #20
 800db8e:	f04f 0a00 	mov.w	sl, #0
 800db92:	e7ae      	b.n	800daf2 <__gethex+0x202>
 800db94:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800db98:	42a8      	cmp	r0, r5
 800db9a:	dd72      	ble.n	800dc82 <__gethex+0x392>
 800db9c:	1b45      	subs	r5, r0, r5
 800db9e:	42ae      	cmp	r6, r5
 800dba0:	dc36      	bgt.n	800dc10 <__gethex+0x320>
 800dba2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dba6:	2b02      	cmp	r3, #2
 800dba8:	d02a      	beq.n	800dc00 <__gethex+0x310>
 800dbaa:	2b03      	cmp	r3, #3
 800dbac:	d02c      	beq.n	800dc08 <__gethex+0x318>
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d11c      	bne.n	800dbec <__gethex+0x2fc>
 800dbb2:	42ae      	cmp	r6, r5
 800dbb4:	d11a      	bne.n	800dbec <__gethex+0x2fc>
 800dbb6:	2e01      	cmp	r6, #1
 800dbb8:	d112      	bne.n	800dbe0 <__gethex+0x2f0>
 800dbba:	9a04      	ldr	r2, [sp, #16]
 800dbbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dbc0:	6013      	str	r3, [r2, #0]
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	6123      	str	r3, [r4, #16]
 800dbc6:	f8c9 3000 	str.w	r3, [r9]
 800dbca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dbcc:	2762      	movs	r7, #98	; 0x62
 800dbce:	601c      	str	r4, [r3, #0]
 800dbd0:	e723      	b.n	800da1a <__gethex+0x12a>
 800dbd2:	bf00      	nop
 800dbd4:	08014aa8 	.word	0x08014aa8
 800dbd8:	08014a34 	.word	0x08014a34
 800dbdc:	08014a45 	.word	0x08014a45
 800dbe0:	1e71      	subs	r1, r6, #1
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	f000 feaf 	bl	800e946 <__any_on>
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	d1e6      	bne.n	800dbba <__gethex+0x2ca>
 800dbec:	ee18 0a10 	vmov	r0, s16
 800dbf0:	4621      	mov	r1, r4
 800dbf2:	f000 fa4b 	bl	800e08c <_Bfree>
 800dbf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	6013      	str	r3, [r2, #0]
 800dbfc:	2750      	movs	r7, #80	; 0x50
 800dbfe:	e70c      	b.n	800da1a <__gethex+0x12a>
 800dc00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1f2      	bne.n	800dbec <__gethex+0x2fc>
 800dc06:	e7d8      	b.n	800dbba <__gethex+0x2ca>
 800dc08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d1d5      	bne.n	800dbba <__gethex+0x2ca>
 800dc0e:	e7ed      	b.n	800dbec <__gethex+0x2fc>
 800dc10:	1e6f      	subs	r7, r5, #1
 800dc12:	f1ba 0f00 	cmp.w	sl, #0
 800dc16:	d131      	bne.n	800dc7c <__gethex+0x38c>
 800dc18:	b127      	cbz	r7, 800dc24 <__gethex+0x334>
 800dc1a:	4639      	mov	r1, r7
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	f000 fe92 	bl	800e946 <__any_on>
 800dc22:	4682      	mov	sl, r0
 800dc24:	117b      	asrs	r3, r7, #5
 800dc26:	2101      	movs	r1, #1
 800dc28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dc2c:	f007 071f 	and.w	r7, r7, #31
 800dc30:	fa01 f707 	lsl.w	r7, r1, r7
 800dc34:	421f      	tst	r7, r3
 800dc36:	4629      	mov	r1, r5
 800dc38:	4620      	mov	r0, r4
 800dc3a:	bf18      	it	ne
 800dc3c:	f04a 0a02 	orrne.w	sl, sl, #2
 800dc40:	1b76      	subs	r6, r6, r5
 800dc42:	f7ff fdee 	bl	800d822 <rshift>
 800dc46:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dc4a:	2702      	movs	r7, #2
 800dc4c:	f1ba 0f00 	cmp.w	sl, #0
 800dc50:	d048      	beq.n	800dce4 <__gethex+0x3f4>
 800dc52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc56:	2b02      	cmp	r3, #2
 800dc58:	d015      	beq.n	800dc86 <__gethex+0x396>
 800dc5a:	2b03      	cmp	r3, #3
 800dc5c:	d017      	beq.n	800dc8e <__gethex+0x39e>
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d109      	bne.n	800dc76 <__gethex+0x386>
 800dc62:	f01a 0f02 	tst.w	sl, #2
 800dc66:	d006      	beq.n	800dc76 <__gethex+0x386>
 800dc68:	f8d9 0000 	ldr.w	r0, [r9]
 800dc6c:	ea4a 0a00 	orr.w	sl, sl, r0
 800dc70:	f01a 0f01 	tst.w	sl, #1
 800dc74:	d10e      	bne.n	800dc94 <__gethex+0x3a4>
 800dc76:	f047 0710 	orr.w	r7, r7, #16
 800dc7a:	e033      	b.n	800dce4 <__gethex+0x3f4>
 800dc7c:	f04f 0a01 	mov.w	sl, #1
 800dc80:	e7d0      	b.n	800dc24 <__gethex+0x334>
 800dc82:	2701      	movs	r7, #1
 800dc84:	e7e2      	b.n	800dc4c <__gethex+0x35c>
 800dc86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc88:	f1c3 0301 	rsb	r3, r3, #1
 800dc8c:	9315      	str	r3, [sp, #84]	; 0x54
 800dc8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d0f0      	beq.n	800dc76 <__gethex+0x386>
 800dc94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dc98:	f104 0314 	add.w	r3, r4, #20
 800dc9c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dca0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dca4:	f04f 0c00 	mov.w	ip, #0
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcae:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dcb2:	d01c      	beq.n	800dcee <__gethex+0x3fe>
 800dcb4:	3201      	adds	r2, #1
 800dcb6:	6002      	str	r2, [r0, #0]
 800dcb8:	2f02      	cmp	r7, #2
 800dcba:	f104 0314 	add.w	r3, r4, #20
 800dcbe:	d13f      	bne.n	800dd40 <__gethex+0x450>
 800dcc0:	f8d8 2000 	ldr.w	r2, [r8]
 800dcc4:	3a01      	subs	r2, #1
 800dcc6:	42b2      	cmp	r2, r6
 800dcc8:	d10a      	bne.n	800dce0 <__gethex+0x3f0>
 800dcca:	1171      	asrs	r1, r6, #5
 800dccc:	2201      	movs	r2, #1
 800dcce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dcd2:	f006 061f 	and.w	r6, r6, #31
 800dcd6:	fa02 f606 	lsl.w	r6, r2, r6
 800dcda:	421e      	tst	r6, r3
 800dcdc:	bf18      	it	ne
 800dcde:	4617      	movne	r7, r2
 800dce0:	f047 0720 	orr.w	r7, r7, #32
 800dce4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dce6:	601c      	str	r4, [r3, #0]
 800dce8:	9b04      	ldr	r3, [sp, #16]
 800dcea:	601d      	str	r5, [r3, #0]
 800dcec:	e695      	b.n	800da1a <__gethex+0x12a>
 800dcee:	4299      	cmp	r1, r3
 800dcf0:	f843 cc04 	str.w	ip, [r3, #-4]
 800dcf4:	d8d8      	bhi.n	800dca8 <__gethex+0x3b8>
 800dcf6:	68a3      	ldr	r3, [r4, #8]
 800dcf8:	459b      	cmp	fp, r3
 800dcfa:	db19      	blt.n	800dd30 <__gethex+0x440>
 800dcfc:	6861      	ldr	r1, [r4, #4]
 800dcfe:	ee18 0a10 	vmov	r0, s16
 800dd02:	3101      	adds	r1, #1
 800dd04:	f000 f982 	bl	800e00c <_Balloc>
 800dd08:	4681      	mov	r9, r0
 800dd0a:	b918      	cbnz	r0, 800dd14 <__gethex+0x424>
 800dd0c:	4b1a      	ldr	r3, [pc, #104]	; (800dd78 <__gethex+0x488>)
 800dd0e:	4602      	mov	r2, r0
 800dd10:	2184      	movs	r1, #132	; 0x84
 800dd12:	e6a8      	b.n	800da66 <__gethex+0x176>
 800dd14:	6922      	ldr	r2, [r4, #16]
 800dd16:	3202      	adds	r2, #2
 800dd18:	f104 010c 	add.w	r1, r4, #12
 800dd1c:	0092      	lsls	r2, r2, #2
 800dd1e:	300c      	adds	r0, #12
 800dd20:	f7fe fa58 	bl	800c1d4 <memcpy>
 800dd24:	4621      	mov	r1, r4
 800dd26:	ee18 0a10 	vmov	r0, s16
 800dd2a:	f000 f9af 	bl	800e08c <_Bfree>
 800dd2e:	464c      	mov	r4, r9
 800dd30:	6923      	ldr	r3, [r4, #16]
 800dd32:	1c5a      	adds	r2, r3, #1
 800dd34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd38:	6122      	str	r2, [r4, #16]
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	615a      	str	r2, [r3, #20]
 800dd3e:	e7bb      	b.n	800dcb8 <__gethex+0x3c8>
 800dd40:	6922      	ldr	r2, [r4, #16]
 800dd42:	455a      	cmp	r2, fp
 800dd44:	dd0b      	ble.n	800dd5e <__gethex+0x46e>
 800dd46:	2101      	movs	r1, #1
 800dd48:	4620      	mov	r0, r4
 800dd4a:	f7ff fd6a 	bl	800d822 <rshift>
 800dd4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd52:	3501      	adds	r5, #1
 800dd54:	42ab      	cmp	r3, r5
 800dd56:	f6ff aed0 	blt.w	800dafa <__gethex+0x20a>
 800dd5a:	2701      	movs	r7, #1
 800dd5c:	e7c0      	b.n	800dce0 <__gethex+0x3f0>
 800dd5e:	f016 061f 	ands.w	r6, r6, #31
 800dd62:	d0fa      	beq.n	800dd5a <__gethex+0x46a>
 800dd64:	4453      	add	r3, sl
 800dd66:	f1c6 0620 	rsb	r6, r6, #32
 800dd6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dd6e:	f000 fa3f 	bl	800e1f0 <__hi0bits>
 800dd72:	42b0      	cmp	r0, r6
 800dd74:	dbe7      	blt.n	800dd46 <__gethex+0x456>
 800dd76:	e7f0      	b.n	800dd5a <__gethex+0x46a>
 800dd78:	08014a34 	.word	0x08014a34

0800dd7c <L_shift>:
 800dd7c:	f1c2 0208 	rsb	r2, r2, #8
 800dd80:	0092      	lsls	r2, r2, #2
 800dd82:	b570      	push	{r4, r5, r6, lr}
 800dd84:	f1c2 0620 	rsb	r6, r2, #32
 800dd88:	6843      	ldr	r3, [r0, #4]
 800dd8a:	6804      	ldr	r4, [r0, #0]
 800dd8c:	fa03 f506 	lsl.w	r5, r3, r6
 800dd90:	432c      	orrs	r4, r5
 800dd92:	40d3      	lsrs	r3, r2
 800dd94:	6004      	str	r4, [r0, #0]
 800dd96:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd9a:	4288      	cmp	r0, r1
 800dd9c:	d3f4      	bcc.n	800dd88 <L_shift+0xc>
 800dd9e:	bd70      	pop	{r4, r5, r6, pc}

0800dda0 <__match>:
 800dda0:	b530      	push	{r4, r5, lr}
 800dda2:	6803      	ldr	r3, [r0, #0]
 800dda4:	3301      	adds	r3, #1
 800dda6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddaa:	b914      	cbnz	r4, 800ddb2 <__match+0x12>
 800ddac:	6003      	str	r3, [r0, #0]
 800ddae:	2001      	movs	r0, #1
 800ddb0:	bd30      	pop	{r4, r5, pc}
 800ddb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ddba:	2d19      	cmp	r5, #25
 800ddbc:	bf98      	it	ls
 800ddbe:	3220      	addls	r2, #32
 800ddc0:	42a2      	cmp	r2, r4
 800ddc2:	d0f0      	beq.n	800dda6 <__match+0x6>
 800ddc4:	2000      	movs	r0, #0
 800ddc6:	e7f3      	b.n	800ddb0 <__match+0x10>

0800ddc8 <__hexnan>:
 800ddc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddcc:	680b      	ldr	r3, [r1, #0]
 800ddce:	115e      	asrs	r6, r3, #5
 800ddd0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ddd4:	f013 031f 	ands.w	r3, r3, #31
 800ddd8:	b087      	sub	sp, #28
 800ddda:	bf18      	it	ne
 800dddc:	3604      	addne	r6, #4
 800ddde:	2500      	movs	r5, #0
 800dde0:	1f37      	subs	r7, r6, #4
 800dde2:	4690      	mov	r8, r2
 800dde4:	6802      	ldr	r2, [r0, #0]
 800dde6:	9301      	str	r3, [sp, #4]
 800dde8:	4682      	mov	sl, r0
 800ddea:	f846 5c04 	str.w	r5, [r6, #-4]
 800ddee:	46b9      	mov	r9, r7
 800ddf0:	463c      	mov	r4, r7
 800ddf2:	9502      	str	r5, [sp, #8]
 800ddf4:	46ab      	mov	fp, r5
 800ddf6:	7851      	ldrb	r1, [r2, #1]
 800ddf8:	1c53      	adds	r3, r2, #1
 800ddfa:	9303      	str	r3, [sp, #12]
 800ddfc:	b341      	cbz	r1, 800de50 <__hexnan+0x88>
 800ddfe:	4608      	mov	r0, r1
 800de00:	9205      	str	r2, [sp, #20]
 800de02:	9104      	str	r1, [sp, #16]
 800de04:	f7ff fd5f 	bl	800d8c6 <__hexdig_fun>
 800de08:	2800      	cmp	r0, #0
 800de0a:	d14f      	bne.n	800deac <__hexnan+0xe4>
 800de0c:	9904      	ldr	r1, [sp, #16]
 800de0e:	9a05      	ldr	r2, [sp, #20]
 800de10:	2920      	cmp	r1, #32
 800de12:	d818      	bhi.n	800de46 <__hexnan+0x7e>
 800de14:	9b02      	ldr	r3, [sp, #8]
 800de16:	459b      	cmp	fp, r3
 800de18:	dd13      	ble.n	800de42 <__hexnan+0x7a>
 800de1a:	454c      	cmp	r4, r9
 800de1c:	d206      	bcs.n	800de2c <__hexnan+0x64>
 800de1e:	2d07      	cmp	r5, #7
 800de20:	dc04      	bgt.n	800de2c <__hexnan+0x64>
 800de22:	462a      	mov	r2, r5
 800de24:	4649      	mov	r1, r9
 800de26:	4620      	mov	r0, r4
 800de28:	f7ff ffa8 	bl	800dd7c <L_shift>
 800de2c:	4544      	cmp	r4, r8
 800de2e:	d950      	bls.n	800ded2 <__hexnan+0x10a>
 800de30:	2300      	movs	r3, #0
 800de32:	f1a4 0904 	sub.w	r9, r4, #4
 800de36:	f844 3c04 	str.w	r3, [r4, #-4]
 800de3a:	f8cd b008 	str.w	fp, [sp, #8]
 800de3e:	464c      	mov	r4, r9
 800de40:	461d      	mov	r5, r3
 800de42:	9a03      	ldr	r2, [sp, #12]
 800de44:	e7d7      	b.n	800ddf6 <__hexnan+0x2e>
 800de46:	2929      	cmp	r1, #41	; 0x29
 800de48:	d156      	bne.n	800def8 <__hexnan+0x130>
 800de4a:	3202      	adds	r2, #2
 800de4c:	f8ca 2000 	str.w	r2, [sl]
 800de50:	f1bb 0f00 	cmp.w	fp, #0
 800de54:	d050      	beq.n	800def8 <__hexnan+0x130>
 800de56:	454c      	cmp	r4, r9
 800de58:	d206      	bcs.n	800de68 <__hexnan+0xa0>
 800de5a:	2d07      	cmp	r5, #7
 800de5c:	dc04      	bgt.n	800de68 <__hexnan+0xa0>
 800de5e:	462a      	mov	r2, r5
 800de60:	4649      	mov	r1, r9
 800de62:	4620      	mov	r0, r4
 800de64:	f7ff ff8a 	bl	800dd7c <L_shift>
 800de68:	4544      	cmp	r4, r8
 800de6a:	d934      	bls.n	800ded6 <__hexnan+0x10e>
 800de6c:	f1a8 0204 	sub.w	r2, r8, #4
 800de70:	4623      	mov	r3, r4
 800de72:	f853 1b04 	ldr.w	r1, [r3], #4
 800de76:	f842 1f04 	str.w	r1, [r2, #4]!
 800de7a:	429f      	cmp	r7, r3
 800de7c:	d2f9      	bcs.n	800de72 <__hexnan+0xaa>
 800de7e:	1b3b      	subs	r3, r7, r4
 800de80:	f023 0303 	bic.w	r3, r3, #3
 800de84:	3304      	adds	r3, #4
 800de86:	3401      	adds	r4, #1
 800de88:	3e03      	subs	r6, #3
 800de8a:	42b4      	cmp	r4, r6
 800de8c:	bf88      	it	hi
 800de8e:	2304      	movhi	r3, #4
 800de90:	4443      	add	r3, r8
 800de92:	2200      	movs	r2, #0
 800de94:	f843 2b04 	str.w	r2, [r3], #4
 800de98:	429f      	cmp	r7, r3
 800de9a:	d2fb      	bcs.n	800de94 <__hexnan+0xcc>
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	b91b      	cbnz	r3, 800dea8 <__hexnan+0xe0>
 800dea0:	4547      	cmp	r7, r8
 800dea2:	d127      	bne.n	800def4 <__hexnan+0x12c>
 800dea4:	2301      	movs	r3, #1
 800dea6:	603b      	str	r3, [r7, #0]
 800dea8:	2005      	movs	r0, #5
 800deaa:	e026      	b.n	800defa <__hexnan+0x132>
 800deac:	3501      	adds	r5, #1
 800deae:	2d08      	cmp	r5, #8
 800deb0:	f10b 0b01 	add.w	fp, fp, #1
 800deb4:	dd06      	ble.n	800dec4 <__hexnan+0xfc>
 800deb6:	4544      	cmp	r4, r8
 800deb8:	d9c3      	bls.n	800de42 <__hexnan+0x7a>
 800deba:	2300      	movs	r3, #0
 800debc:	f844 3c04 	str.w	r3, [r4, #-4]
 800dec0:	2501      	movs	r5, #1
 800dec2:	3c04      	subs	r4, #4
 800dec4:	6822      	ldr	r2, [r4, #0]
 800dec6:	f000 000f 	and.w	r0, r0, #15
 800deca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dece:	6022      	str	r2, [r4, #0]
 800ded0:	e7b7      	b.n	800de42 <__hexnan+0x7a>
 800ded2:	2508      	movs	r5, #8
 800ded4:	e7b5      	b.n	800de42 <__hexnan+0x7a>
 800ded6:	9b01      	ldr	r3, [sp, #4]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d0df      	beq.n	800de9c <__hexnan+0xd4>
 800dedc:	f04f 32ff 	mov.w	r2, #4294967295
 800dee0:	f1c3 0320 	rsb	r3, r3, #32
 800dee4:	fa22 f303 	lsr.w	r3, r2, r3
 800dee8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800deec:	401a      	ands	r2, r3
 800deee:	f846 2c04 	str.w	r2, [r6, #-4]
 800def2:	e7d3      	b.n	800de9c <__hexnan+0xd4>
 800def4:	3f04      	subs	r7, #4
 800def6:	e7d1      	b.n	800de9c <__hexnan+0xd4>
 800def8:	2004      	movs	r0, #4
 800defa:	b007      	add	sp, #28
 800defc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df00 <__retarget_lock_init_recursive>:
 800df00:	4770      	bx	lr

0800df02 <__retarget_lock_acquire_recursive>:
 800df02:	4770      	bx	lr

0800df04 <__retarget_lock_release_recursive>:
 800df04:	4770      	bx	lr

0800df06 <__swhatbuf_r>:
 800df06:	b570      	push	{r4, r5, r6, lr}
 800df08:	460e      	mov	r6, r1
 800df0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df0e:	2900      	cmp	r1, #0
 800df10:	b096      	sub	sp, #88	; 0x58
 800df12:	4614      	mov	r4, r2
 800df14:	461d      	mov	r5, r3
 800df16:	da08      	bge.n	800df2a <__swhatbuf_r+0x24>
 800df18:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800df1c:	2200      	movs	r2, #0
 800df1e:	602a      	str	r2, [r5, #0]
 800df20:	061a      	lsls	r2, r3, #24
 800df22:	d410      	bmi.n	800df46 <__swhatbuf_r+0x40>
 800df24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df28:	e00e      	b.n	800df48 <__swhatbuf_r+0x42>
 800df2a:	466a      	mov	r2, sp
 800df2c:	f001 fa50 	bl	800f3d0 <_fstat_r>
 800df30:	2800      	cmp	r0, #0
 800df32:	dbf1      	blt.n	800df18 <__swhatbuf_r+0x12>
 800df34:	9a01      	ldr	r2, [sp, #4]
 800df36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df3e:	425a      	negs	r2, r3
 800df40:	415a      	adcs	r2, r3
 800df42:	602a      	str	r2, [r5, #0]
 800df44:	e7ee      	b.n	800df24 <__swhatbuf_r+0x1e>
 800df46:	2340      	movs	r3, #64	; 0x40
 800df48:	2000      	movs	r0, #0
 800df4a:	6023      	str	r3, [r4, #0]
 800df4c:	b016      	add	sp, #88	; 0x58
 800df4e:	bd70      	pop	{r4, r5, r6, pc}

0800df50 <__smakebuf_r>:
 800df50:	898b      	ldrh	r3, [r1, #12]
 800df52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df54:	079d      	lsls	r5, r3, #30
 800df56:	4606      	mov	r6, r0
 800df58:	460c      	mov	r4, r1
 800df5a:	d507      	bpl.n	800df6c <__smakebuf_r+0x1c>
 800df5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df60:	6023      	str	r3, [r4, #0]
 800df62:	6123      	str	r3, [r4, #16]
 800df64:	2301      	movs	r3, #1
 800df66:	6163      	str	r3, [r4, #20]
 800df68:	b002      	add	sp, #8
 800df6a:	bd70      	pop	{r4, r5, r6, pc}
 800df6c:	ab01      	add	r3, sp, #4
 800df6e:	466a      	mov	r2, sp
 800df70:	f7ff ffc9 	bl	800df06 <__swhatbuf_r>
 800df74:	9900      	ldr	r1, [sp, #0]
 800df76:	4605      	mov	r5, r0
 800df78:	4630      	mov	r0, r6
 800df7a:	f7fe f9c7 	bl	800c30c <_malloc_r>
 800df7e:	b948      	cbnz	r0, 800df94 <__smakebuf_r+0x44>
 800df80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df84:	059a      	lsls	r2, r3, #22
 800df86:	d4ef      	bmi.n	800df68 <__smakebuf_r+0x18>
 800df88:	f023 0303 	bic.w	r3, r3, #3
 800df8c:	f043 0302 	orr.w	r3, r3, #2
 800df90:	81a3      	strh	r3, [r4, #12]
 800df92:	e7e3      	b.n	800df5c <__smakebuf_r+0xc>
 800df94:	4b0d      	ldr	r3, [pc, #52]	; (800dfcc <__smakebuf_r+0x7c>)
 800df96:	62b3      	str	r3, [r6, #40]	; 0x28
 800df98:	89a3      	ldrh	r3, [r4, #12]
 800df9a:	6020      	str	r0, [r4, #0]
 800df9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfa0:	81a3      	strh	r3, [r4, #12]
 800dfa2:	9b00      	ldr	r3, [sp, #0]
 800dfa4:	6163      	str	r3, [r4, #20]
 800dfa6:	9b01      	ldr	r3, [sp, #4]
 800dfa8:	6120      	str	r0, [r4, #16]
 800dfaa:	b15b      	cbz	r3, 800dfc4 <__smakebuf_r+0x74>
 800dfac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	f001 fa1f 	bl	800f3f4 <_isatty_r>
 800dfb6:	b128      	cbz	r0, 800dfc4 <__smakebuf_r+0x74>
 800dfb8:	89a3      	ldrh	r3, [r4, #12]
 800dfba:	f023 0303 	bic.w	r3, r3, #3
 800dfbe:	f043 0301 	orr.w	r3, r3, #1
 800dfc2:	81a3      	strh	r3, [r4, #12]
 800dfc4:	89a0      	ldrh	r0, [r4, #12]
 800dfc6:	4305      	orrs	r5, r0
 800dfc8:	81a5      	strh	r5, [r4, #12]
 800dfca:	e7cd      	b.n	800df68 <__smakebuf_r+0x18>
 800dfcc:	0800d681 	.word	0x0800d681

0800dfd0 <__ascii_mbtowc>:
 800dfd0:	b082      	sub	sp, #8
 800dfd2:	b901      	cbnz	r1, 800dfd6 <__ascii_mbtowc+0x6>
 800dfd4:	a901      	add	r1, sp, #4
 800dfd6:	b142      	cbz	r2, 800dfea <__ascii_mbtowc+0x1a>
 800dfd8:	b14b      	cbz	r3, 800dfee <__ascii_mbtowc+0x1e>
 800dfda:	7813      	ldrb	r3, [r2, #0]
 800dfdc:	600b      	str	r3, [r1, #0]
 800dfde:	7812      	ldrb	r2, [r2, #0]
 800dfe0:	1e10      	subs	r0, r2, #0
 800dfe2:	bf18      	it	ne
 800dfe4:	2001      	movne	r0, #1
 800dfe6:	b002      	add	sp, #8
 800dfe8:	4770      	bx	lr
 800dfea:	4610      	mov	r0, r2
 800dfec:	e7fb      	b.n	800dfe6 <__ascii_mbtowc+0x16>
 800dfee:	f06f 0001 	mvn.w	r0, #1
 800dff2:	e7f8      	b.n	800dfe6 <__ascii_mbtowc+0x16>

0800dff4 <__malloc_lock>:
 800dff4:	4801      	ldr	r0, [pc, #4]	; (800dffc <__malloc_lock+0x8>)
 800dff6:	f7ff bf84 	b.w	800df02 <__retarget_lock_acquire_recursive>
 800dffa:	bf00      	nop
 800dffc:	24000cbc 	.word	0x24000cbc

0800e000 <__malloc_unlock>:
 800e000:	4801      	ldr	r0, [pc, #4]	; (800e008 <__malloc_unlock+0x8>)
 800e002:	f7ff bf7f 	b.w	800df04 <__retarget_lock_release_recursive>
 800e006:	bf00      	nop
 800e008:	24000cbc 	.word	0x24000cbc

0800e00c <_Balloc>:
 800e00c:	b570      	push	{r4, r5, r6, lr}
 800e00e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e010:	4604      	mov	r4, r0
 800e012:	460d      	mov	r5, r1
 800e014:	b976      	cbnz	r6, 800e034 <_Balloc+0x28>
 800e016:	2010      	movs	r0, #16
 800e018:	f7fe f8cc 	bl	800c1b4 <malloc>
 800e01c:	4602      	mov	r2, r0
 800e01e:	6260      	str	r0, [r4, #36]	; 0x24
 800e020:	b920      	cbnz	r0, 800e02c <_Balloc+0x20>
 800e022:	4b18      	ldr	r3, [pc, #96]	; (800e084 <_Balloc+0x78>)
 800e024:	4818      	ldr	r0, [pc, #96]	; (800e088 <_Balloc+0x7c>)
 800e026:	2166      	movs	r1, #102	; 0x66
 800e028:	f001 f992 	bl	800f350 <__assert_func>
 800e02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e030:	6006      	str	r6, [r0, #0]
 800e032:	60c6      	str	r6, [r0, #12]
 800e034:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e036:	68f3      	ldr	r3, [r6, #12]
 800e038:	b183      	cbz	r3, 800e05c <_Balloc+0x50>
 800e03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e042:	b9b8      	cbnz	r0, 800e074 <_Balloc+0x68>
 800e044:	2101      	movs	r1, #1
 800e046:	fa01 f605 	lsl.w	r6, r1, r5
 800e04a:	1d72      	adds	r2, r6, #5
 800e04c:	0092      	lsls	r2, r2, #2
 800e04e:	4620      	mov	r0, r4
 800e050:	f000 fc9a 	bl	800e988 <_calloc_r>
 800e054:	b160      	cbz	r0, 800e070 <_Balloc+0x64>
 800e056:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e05a:	e00e      	b.n	800e07a <_Balloc+0x6e>
 800e05c:	2221      	movs	r2, #33	; 0x21
 800e05e:	2104      	movs	r1, #4
 800e060:	4620      	mov	r0, r4
 800e062:	f000 fc91 	bl	800e988 <_calloc_r>
 800e066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e068:	60f0      	str	r0, [r6, #12]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d1e4      	bne.n	800e03a <_Balloc+0x2e>
 800e070:	2000      	movs	r0, #0
 800e072:	bd70      	pop	{r4, r5, r6, pc}
 800e074:	6802      	ldr	r2, [r0, #0]
 800e076:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e07a:	2300      	movs	r3, #0
 800e07c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e080:	e7f7      	b.n	800e072 <_Balloc+0x66>
 800e082:	bf00      	nop
 800e084:	08014aba 	.word	0x08014aba
 800e088:	08014ad1 	.word	0x08014ad1

0800e08c <_Bfree>:
 800e08c:	b570      	push	{r4, r5, r6, lr}
 800e08e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e090:	4605      	mov	r5, r0
 800e092:	460c      	mov	r4, r1
 800e094:	b976      	cbnz	r6, 800e0b4 <_Bfree+0x28>
 800e096:	2010      	movs	r0, #16
 800e098:	f7fe f88c 	bl	800c1b4 <malloc>
 800e09c:	4602      	mov	r2, r0
 800e09e:	6268      	str	r0, [r5, #36]	; 0x24
 800e0a0:	b920      	cbnz	r0, 800e0ac <_Bfree+0x20>
 800e0a2:	4b09      	ldr	r3, [pc, #36]	; (800e0c8 <_Bfree+0x3c>)
 800e0a4:	4809      	ldr	r0, [pc, #36]	; (800e0cc <_Bfree+0x40>)
 800e0a6:	218a      	movs	r1, #138	; 0x8a
 800e0a8:	f001 f952 	bl	800f350 <__assert_func>
 800e0ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0b0:	6006      	str	r6, [r0, #0]
 800e0b2:	60c6      	str	r6, [r0, #12]
 800e0b4:	b13c      	cbz	r4, 800e0c6 <_Bfree+0x3a>
 800e0b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e0b8:	6862      	ldr	r2, [r4, #4]
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0c0:	6021      	str	r1, [r4, #0]
 800e0c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e0c6:	bd70      	pop	{r4, r5, r6, pc}
 800e0c8:	08014aba 	.word	0x08014aba
 800e0cc:	08014ad1 	.word	0x08014ad1

0800e0d0 <__multadd>:
 800e0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d4:	690d      	ldr	r5, [r1, #16]
 800e0d6:	4607      	mov	r7, r0
 800e0d8:	460c      	mov	r4, r1
 800e0da:	461e      	mov	r6, r3
 800e0dc:	f101 0c14 	add.w	ip, r1, #20
 800e0e0:	2000      	movs	r0, #0
 800e0e2:	f8dc 3000 	ldr.w	r3, [ip]
 800e0e6:	b299      	uxth	r1, r3
 800e0e8:	fb02 6101 	mla	r1, r2, r1, r6
 800e0ec:	0c1e      	lsrs	r6, r3, #16
 800e0ee:	0c0b      	lsrs	r3, r1, #16
 800e0f0:	fb02 3306 	mla	r3, r2, r6, r3
 800e0f4:	b289      	uxth	r1, r1
 800e0f6:	3001      	adds	r0, #1
 800e0f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e0fc:	4285      	cmp	r5, r0
 800e0fe:	f84c 1b04 	str.w	r1, [ip], #4
 800e102:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e106:	dcec      	bgt.n	800e0e2 <__multadd+0x12>
 800e108:	b30e      	cbz	r6, 800e14e <__multadd+0x7e>
 800e10a:	68a3      	ldr	r3, [r4, #8]
 800e10c:	42ab      	cmp	r3, r5
 800e10e:	dc19      	bgt.n	800e144 <__multadd+0x74>
 800e110:	6861      	ldr	r1, [r4, #4]
 800e112:	4638      	mov	r0, r7
 800e114:	3101      	adds	r1, #1
 800e116:	f7ff ff79 	bl	800e00c <_Balloc>
 800e11a:	4680      	mov	r8, r0
 800e11c:	b928      	cbnz	r0, 800e12a <__multadd+0x5a>
 800e11e:	4602      	mov	r2, r0
 800e120:	4b0c      	ldr	r3, [pc, #48]	; (800e154 <__multadd+0x84>)
 800e122:	480d      	ldr	r0, [pc, #52]	; (800e158 <__multadd+0x88>)
 800e124:	21b5      	movs	r1, #181	; 0xb5
 800e126:	f001 f913 	bl	800f350 <__assert_func>
 800e12a:	6922      	ldr	r2, [r4, #16]
 800e12c:	3202      	adds	r2, #2
 800e12e:	f104 010c 	add.w	r1, r4, #12
 800e132:	0092      	lsls	r2, r2, #2
 800e134:	300c      	adds	r0, #12
 800e136:	f7fe f84d 	bl	800c1d4 <memcpy>
 800e13a:	4621      	mov	r1, r4
 800e13c:	4638      	mov	r0, r7
 800e13e:	f7ff ffa5 	bl	800e08c <_Bfree>
 800e142:	4644      	mov	r4, r8
 800e144:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e148:	3501      	adds	r5, #1
 800e14a:	615e      	str	r6, [r3, #20]
 800e14c:	6125      	str	r5, [r4, #16]
 800e14e:	4620      	mov	r0, r4
 800e150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e154:	08014a34 	.word	0x08014a34
 800e158:	08014ad1 	.word	0x08014ad1

0800e15c <__s2b>:
 800e15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e160:	460c      	mov	r4, r1
 800e162:	4615      	mov	r5, r2
 800e164:	461f      	mov	r7, r3
 800e166:	2209      	movs	r2, #9
 800e168:	3308      	adds	r3, #8
 800e16a:	4606      	mov	r6, r0
 800e16c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e170:	2100      	movs	r1, #0
 800e172:	2201      	movs	r2, #1
 800e174:	429a      	cmp	r2, r3
 800e176:	db09      	blt.n	800e18c <__s2b+0x30>
 800e178:	4630      	mov	r0, r6
 800e17a:	f7ff ff47 	bl	800e00c <_Balloc>
 800e17e:	b940      	cbnz	r0, 800e192 <__s2b+0x36>
 800e180:	4602      	mov	r2, r0
 800e182:	4b19      	ldr	r3, [pc, #100]	; (800e1e8 <__s2b+0x8c>)
 800e184:	4819      	ldr	r0, [pc, #100]	; (800e1ec <__s2b+0x90>)
 800e186:	21ce      	movs	r1, #206	; 0xce
 800e188:	f001 f8e2 	bl	800f350 <__assert_func>
 800e18c:	0052      	lsls	r2, r2, #1
 800e18e:	3101      	adds	r1, #1
 800e190:	e7f0      	b.n	800e174 <__s2b+0x18>
 800e192:	9b08      	ldr	r3, [sp, #32]
 800e194:	6143      	str	r3, [r0, #20]
 800e196:	2d09      	cmp	r5, #9
 800e198:	f04f 0301 	mov.w	r3, #1
 800e19c:	6103      	str	r3, [r0, #16]
 800e19e:	dd16      	ble.n	800e1ce <__s2b+0x72>
 800e1a0:	f104 0909 	add.w	r9, r4, #9
 800e1a4:	46c8      	mov	r8, r9
 800e1a6:	442c      	add	r4, r5
 800e1a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e1ac:	4601      	mov	r1, r0
 800e1ae:	3b30      	subs	r3, #48	; 0x30
 800e1b0:	220a      	movs	r2, #10
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	f7ff ff8c 	bl	800e0d0 <__multadd>
 800e1b8:	45a0      	cmp	r8, r4
 800e1ba:	d1f5      	bne.n	800e1a8 <__s2b+0x4c>
 800e1bc:	f1a5 0408 	sub.w	r4, r5, #8
 800e1c0:	444c      	add	r4, r9
 800e1c2:	1b2d      	subs	r5, r5, r4
 800e1c4:	1963      	adds	r3, r4, r5
 800e1c6:	42bb      	cmp	r3, r7
 800e1c8:	db04      	blt.n	800e1d4 <__s2b+0x78>
 800e1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1ce:	340a      	adds	r4, #10
 800e1d0:	2509      	movs	r5, #9
 800e1d2:	e7f6      	b.n	800e1c2 <__s2b+0x66>
 800e1d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e1d8:	4601      	mov	r1, r0
 800e1da:	3b30      	subs	r3, #48	; 0x30
 800e1dc:	220a      	movs	r2, #10
 800e1de:	4630      	mov	r0, r6
 800e1e0:	f7ff ff76 	bl	800e0d0 <__multadd>
 800e1e4:	e7ee      	b.n	800e1c4 <__s2b+0x68>
 800e1e6:	bf00      	nop
 800e1e8:	08014a34 	.word	0x08014a34
 800e1ec:	08014ad1 	.word	0x08014ad1

0800e1f0 <__hi0bits>:
 800e1f0:	0c03      	lsrs	r3, r0, #16
 800e1f2:	041b      	lsls	r3, r3, #16
 800e1f4:	b9d3      	cbnz	r3, 800e22c <__hi0bits+0x3c>
 800e1f6:	0400      	lsls	r0, r0, #16
 800e1f8:	2310      	movs	r3, #16
 800e1fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e1fe:	bf04      	itt	eq
 800e200:	0200      	lsleq	r0, r0, #8
 800e202:	3308      	addeq	r3, #8
 800e204:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e208:	bf04      	itt	eq
 800e20a:	0100      	lsleq	r0, r0, #4
 800e20c:	3304      	addeq	r3, #4
 800e20e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e212:	bf04      	itt	eq
 800e214:	0080      	lsleq	r0, r0, #2
 800e216:	3302      	addeq	r3, #2
 800e218:	2800      	cmp	r0, #0
 800e21a:	db05      	blt.n	800e228 <__hi0bits+0x38>
 800e21c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e220:	f103 0301 	add.w	r3, r3, #1
 800e224:	bf08      	it	eq
 800e226:	2320      	moveq	r3, #32
 800e228:	4618      	mov	r0, r3
 800e22a:	4770      	bx	lr
 800e22c:	2300      	movs	r3, #0
 800e22e:	e7e4      	b.n	800e1fa <__hi0bits+0xa>

0800e230 <__lo0bits>:
 800e230:	6803      	ldr	r3, [r0, #0]
 800e232:	f013 0207 	ands.w	r2, r3, #7
 800e236:	4601      	mov	r1, r0
 800e238:	d00b      	beq.n	800e252 <__lo0bits+0x22>
 800e23a:	07da      	lsls	r2, r3, #31
 800e23c:	d423      	bmi.n	800e286 <__lo0bits+0x56>
 800e23e:	0798      	lsls	r0, r3, #30
 800e240:	bf49      	itett	mi
 800e242:	085b      	lsrmi	r3, r3, #1
 800e244:	089b      	lsrpl	r3, r3, #2
 800e246:	2001      	movmi	r0, #1
 800e248:	600b      	strmi	r3, [r1, #0]
 800e24a:	bf5c      	itt	pl
 800e24c:	600b      	strpl	r3, [r1, #0]
 800e24e:	2002      	movpl	r0, #2
 800e250:	4770      	bx	lr
 800e252:	b298      	uxth	r0, r3
 800e254:	b9a8      	cbnz	r0, 800e282 <__lo0bits+0x52>
 800e256:	0c1b      	lsrs	r3, r3, #16
 800e258:	2010      	movs	r0, #16
 800e25a:	b2da      	uxtb	r2, r3
 800e25c:	b90a      	cbnz	r2, 800e262 <__lo0bits+0x32>
 800e25e:	3008      	adds	r0, #8
 800e260:	0a1b      	lsrs	r3, r3, #8
 800e262:	071a      	lsls	r2, r3, #28
 800e264:	bf04      	itt	eq
 800e266:	091b      	lsreq	r3, r3, #4
 800e268:	3004      	addeq	r0, #4
 800e26a:	079a      	lsls	r2, r3, #30
 800e26c:	bf04      	itt	eq
 800e26e:	089b      	lsreq	r3, r3, #2
 800e270:	3002      	addeq	r0, #2
 800e272:	07da      	lsls	r2, r3, #31
 800e274:	d403      	bmi.n	800e27e <__lo0bits+0x4e>
 800e276:	085b      	lsrs	r3, r3, #1
 800e278:	f100 0001 	add.w	r0, r0, #1
 800e27c:	d005      	beq.n	800e28a <__lo0bits+0x5a>
 800e27e:	600b      	str	r3, [r1, #0]
 800e280:	4770      	bx	lr
 800e282:	4610      	mov	r0, r2
 800e284:	e7e9      	b.n	800e25a <__lo0bits+0x2a>
 800e286:	2000      	movs	r0, #0
 800e288:	4770      	bx	lr
 800e28a:	2020      	movs	r0, #32
 800e28c:	4770      	bx	lr
	...

0800e290 <__i2b>:
 800e290:	b510      	push	{r4, lr}
 800e292:	460c      	mov	r4, r1
 800e294:	2101      	movs	r1, #1
 800e296:	f7ff feb9 	bl	800e00c <_Balloc>
 800e29a:	4602      	mov	r2, r0
 800e29c:	b928      	cbnz	r0, 800e2aa <__i2b+0x1a>
 800e29e:	4b05      	ldr	r3, [pc, #20]	; (800e2b4 <__i2b+0x24>)
 800e2a0:	4805      	ldr	r0, [pc, #20]	; (800e2b8 <__i2b+0x28>)
 800e2a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e2a6:	f001 f853 	bl	800f350 <__assert_func>
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	6144      	str	r4, [r0, #20]
 800e2ae:	6103      	str	r3, [r0, #16]
 800e2b0:	bd10      	pop	{r4, pc}
 800e2b2:	bf00      	nop
 800e2b4:	08014a34 	.word	0x08014a34
 800e2b8:	08014ad1 	.word	0x08014ad1

0800e2bc <__multiply>:
 800e2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c0:	4691      	mov	r9, r2
 800e2c2:	690a      	ldr	r2, [r1, #16]
 800e2c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	bfb8      	it	lt
 800e2cc:	460b      	movlt	r3, r1
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	bfbc      	itt	lt
 800e2d2:	464c      	movlt	r4, r9
 800e2d4:	4699      	movlt	r9, r3
 800e2d6:	6927      	ldr	r7, [r4, #16]
 800e2d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e2dc:	68a3      	ldr	r3, [r4, #8]
 800e2de:	6861      	ldr	r1, [r4, #4]
 800e2e0:	eb07 060a 	add.w	r6, r7, sl
 800e2e4:	42b3      	cmp	r3, r6
 800e2e6:	b085      	sub	sp, #20
 800e2e8:	bfb8      	it	lt
 800e2ea:	3101      	addlt	r1, #1
 800e2ec:	f7ff fe8e 	bl	800e00c <_Balloc>
 800e2f0:	b930      	cbnz	r0, 800e300 <__multiply+0x44>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	4b44      	ldr	r3, [pc, #272]	; (800e408 <__multiply+0x14c>)
 800e2f6:	4845      	ldr	r0, [pc, #276]	; (800e40c <__multiply+0x150>)
 800e2f8:	f240 115d 	movw	r1, #349	; 0x15d
 800e2fc:	f001 f828 	bl	800f350 <__assert_func>
 800e300:	f100 0514 	add.w	r5, r0, #20
 800e304:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e308:	462b      	mov	r3, r5
 800e30a:	2200      	movs	r2, #0
 800e30c:	4543      	cmp	r3, r8
 800e30e:	d321      	bcc.n	800e354 <__multiply+0x98>
 800e310:	f104 0314 	add.w	r3, r4, #20
 800e314:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e318:	f109 0314 	add.w	r3, r9, #20
 800e31c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e320:	9202      	str	r2, [sp, #8]
 800e322:	1b3a      	subs	r2, r7, r4
 800e324:	3a15      	subs	r2, #21
 800e326:	f022 0203 	bic.w	r2, r2, #3
 800e32a:	3204      	adds	r2, #4
 800e32c:	f104 0115 	add.w	r1, r4, #21
 800e330:	428f      	cmp	r7, r1
 800e332:	bf38      	it	cc
 800e334:	2204      	movcc	r2, #4
 800e336:	9201      	str	r2, [sp, #4]
 800e338:	9a02      	ldr	r2, [sp, #8]
 800e33a:	9303      	str	r3, [sp, #12]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d80c      	bhi.n	800e35a <__multiply+0x9e>
 800e340:	2e00      	cmp	r6, #0
 800e342:	dd03      	ble.n	800e34c <__multiply+0x90>
 800e344:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d05a      	beq.n	800e402 <__multiply+0x146>
 800e34c:	6106      	str	r6, [r0, #16]
 800e34e:	b005      	add	sp, #20
 800e350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e354:	f843 2b04 	str.w	r2, [r3], #4
 800e358:	e7d8      	b.n	800e30c <__multiply+0x50>
 800e35a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e35e:	f1ba 0f00 	cmp.w	sl, #0
 800e362:	d024      	beq.n	800e3ae <__multiply+0xf2>
 800e364:	f104 0e14 	add.w	lr, r4, #20
 800e368:	46a9      	mov	r9, r5
 800e36a:	f04f 0c00 	mov.w	ip, #0
 800e36e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e372:	f8d9 1000 	ldr.w	r1, [r9]
 800e376:	fa1f fb82 	uxth.w	fp, r2
 800e37a:	b289      	uxth	r1, r1
 800e37c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e380:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e384:	f8d9 2000 	ldr.w	r2, [r9]
 800e388:	4461      	add	r1, ip
 800e38a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e38e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e392:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e396:	b289      	uxth	r1, r1
 800e398:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e39c:	4577      	cmp	r7, lr
 800e39e:	f849 1b04 	str.w	r1, [r9], #4
 800e3a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3a6:	d8e2      	bhi.n	800e36e <__multiply+0xb2>
 800e3a8:	9a01      	ldr	r2, [sp, #4]
 800e3aa:	f845 c002 	str.w	ip, [r5, r2]
 800e3ae:	9a03      	ldr	r2, [sp, #12]
 800e3b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e3b4:	3304      	adds	r3, #4
 800e3b6:	f1b9 0f00 	cmp.w	r9, #0
 800e3ba:	d020      	beq.n	800e3fe <__multiply+0x142>
 800e3bc:	6829      	ldr	r1, [r5, #0]
 800e3be:	f104 0c14 	add.w	ip, r4, #20
 800e3c2:	46ae      	mov	lr, r5
 800e3c4:	f04f 0a00 	mov.w	sl, #0
 800e3c8:	f8bc b000 	ldrh.w	fp, [ip]
 800e3cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e3d0:	fb09 220b 	mla	r2, r9, fp, r2
 800e3d4:	4492      	add	sl, r2
 800e3d6:	b289      	uxth	r1, r1
 800e3d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e3dc:	f84e 1b04 	str.w	r1, [lr], #4
 800e3e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e3e4:	f8be 1000 	ldrh.w	r1, [lr]
 800e3e8:	0c12      	lsrs	r2, r2, #16
 800e3ea:	fb09 1102 	mla	r1, r9, r2, r1
 800e3ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e3f2:	4567      	cmp	r7, ip
 800e3f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e3f8:	d8e6      	bhi.n	800e3c8 <__multiply+0x10c>
 800e3fa:	9a01      	ldr	r2, [sp, #4]
 800e3fc:	50a9      	str	r1, [r5, r2]
 800e3fe:	3504      	adds	r5, #4
 800e400:	e79a      	b.n	800e338 <__multiply+0x7c>
 800e402:	3e01      	subs	r6, #1
 800e404:	e79c      	b.n	800e340 <__multiply+0x84>
 800e406:	bf00      	nop
 800e408:	08014a34 	.word	0x08014a34
 800e40c:	08014ad1 	.word	0x08014ad1

0800e410 <__pow5mult>:
 800e410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e414:	4615      	mov	r5, r2
 800e416:	f012 0203 	ands.w	r2, r2, #3
 800e41a:	4606      	mov	r6, r0
 800e41c:	460f      	mov	r7, r1
 800e41e:	d007      	beq.n	800e430 <__pow5mult+0x20>
 800e420:	4c25      	ldr	r4, [pc, #148]	; (800e4b8 <__pow5mult+0xa8>)
 800e422:	3a01      	subs	r2, #1
 800e424:	2300      	movs	r3, #0
 800e426:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e42a:	f7ff fe51 	bl	800e0d0 <__multadd>
 800e42e:	4607      	mov	r7, r0
 800e430:	10ad      	asrs	r5, r5, #2
 800e432:	d03d      	beq.n	800e4b0 <__pow5mult+0xa0>
 800e434:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e436:	b97c      	cbnz	r4, 800e458 <__pow5mult+0x48>
 800e438:	2010      	movs	r0, #16
 800e43a:	f7fd febb 	bl	800c1b4 <malloc>
 800e43e:	4602      	mov	r2, r0
 800e440:	6270      	str	r0, [r6, #36]	; 0x24
 800e442:	b928      	cbnz	r0, 800e450 <__pow5mult+0x40>
 800e444:	4b1d      	ldr	r3, [pc, #116]	; (800e4bc <__pow5mult+0xac>)
 800e446:	481e      	ldr	r0, [pc, #120]	; (800e4c0 <__pow5mult+0xb0>)
 800e448:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e44c:	f000 ff80 	bl	800f350 <__assert_func>
 800e450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e454:	6004      	str	r4, [r0, #0]
 800e456:	60c4      	str	r4, [r0, #12]
 800e458:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e45c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e460:	b94c      	cbnz	r4, 800e476 <__pow5mult+0x66>
 800e462:	f240 2171 	movw	r1, #625	; 0x271
 800e466:	4630      	mov	r0, r6
 800e468:	f7ff ff12 	bl	800e290 <__i2b>
 800e46c:	2300      	movs	r3, #0
 800e46e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e472:	4604      	mov	r4, r0
 800e474:	6003      	str	r3, [r0, #0]
 800e476:	f04f 0900 	mov.w	r9, #0
 800e47a:	07eb      	lsls	r3, r5, #31
 800e47c:	d50a      	bpl.n	800e494 <__pow5mult+0x84>
 800e47e:	4639      	mov	r1, r7
 800e480:	4622      	mov	r2, r4
 800e482:	4630      	mov	r0, r6
 800e484:	f7ff ff1a 	bl	800e2bc <__multiply>
 800e488:	4639      	mov	r1, r7
 800e48a:	4680      	mov	r8, r0
 800e48c:	4630      	mov	r0, r6
 800e48e:	f7ff fdfd 	bl	800e08c <_Bfree>
 800e492:	4647      	mov	r7, r8
 800e494:	106d      	asrs	r5, r5, #1
 800e496:	d00b      	beq.n	800e4b0 <__pow5mult+0xa0>
 800e498:	6820      	ldr	r0, [r4, #0]
 800e49a:	b938      	cbnz	r0, 800e4ac <__pow5mult+0x9c>
 800e49c:	4622      	mov	r2, r4
 800e49e:	4621      	mov	r1, r4
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	f7ff ff0b 	bl	800e2bc <__multiply>
 800e4a6:	6020      	str	r0, [r4, #0]
 800e4a8:	f8c0 9000 	str.w	r9, [r0]
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	e7e4      	b.n	800e47a <__pow5mult+0x6a>
 800e4b0:	4638      	mov	r0, r7
 800e4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4b6:	bf00      	nop
 800e4b8:	08014c20 	.word	0x08014c20
 800e4bc:	08014aba 	.word	0x08014aba
 800e4c0:	08014ad1 	.word	0x08014ad1

0800e4c4 <__lshift>:
 800e4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c8:	460c      	mov	r4, r1
 800e4ca:	6849      	ldr	r1, [r1, #4]
 800e4cc:	6923      	ldr	r3, [r4, #16]
 800e4ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4d2:	68a3      	ldr	r3, [r4, #8]
 800e4d4:	4607      	mov	r7, r0
 800e4d6:	4691      	mov	r9, r2
 800e4d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4dc:	f108 0601 	add.w	r6, r8, #1
 800e4e0:	42b3      	cmp	r3, r6
 800e4e2:	db0b      	blt.n	800e4fc <__lshift+0x38>
 800e4e4:	4638      	mov	r0, r7
 800e4e6:	f7ff fd91 	bl	800e00c <_Balloc>
 800e4ea:	4605      	mov	r5, r0
 800e4ec:	b948      	cbnz	r0, 800e502 <__lshift+0x3e>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	4b2a      	ldr	r3, [pc, #168]	; (800e59c <__lshift+0xd8>)
 800e4f2:	482b      	ldr	r0, [pc, #172]	; (800e5a0 <__lshift+0xdc>)
 800e4f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e4f8:	f000 ff2a 	bl	800f350 <__assert_func>
 800e4fc:	3101      	adds	r1, #1
 800e4fe:	005b      	lsls	r3, r3, #1
 800e500:	e7ee      	b.n	800e4e0 <__lshift+0x1c>
 800e502:	2300      	movs	r3, #0
 800e504:	f100 0114 	add.w	r1, r0, #20
 800e508:	f100 0210 	add.w	r2, r0, #16
 800e50c:	4618      	mov	r0, r3
 800e50e:	4553      	cmp	r3, sl
 800e510:	db37      	blt.n	800e582 <__lshift+0xbe>
 800e512:	6920      	ldr	r0, [r4, #16]
 800e514:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e518:	f104 0314 	add.w	r3, r4, #20
 800e51c:	f019 091f 	ands.w	r9, r9, #31
 800e520:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e524:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e528:	d02f      	beq.n	800e58a <__lshift+0xc6>
 800e52a:	f1c9 0e20 	rsb	lr, r9, #32
 800e52e:	468a      	mov	sl, r1
 800e530:	f04f 0c00 	mov.w	ip, #0
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	fa02 f209 	lsl.w	r2, r2, r9
 800e53a:	ea42 020c 	orr.w	r2, r2, ip
 800e53e:	f84a 2b04 	str.w	r2, [sl], #4
 800e542:	f853 2b04 	ldr.w	r2, [r3], #4
 800e546:	4298      	cmp	r0, r3
 800e548:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e54c:	d8f2      	bhi.n	800e534 <__lshift+0x70>
 800e54e:	1b03      	subs	r3, r0, r4
 800e550:	3b15      	subs	r3, #21
 800e552:	f023 0303 	bic.w	r3, r3, #3
 800e556:	3304      	adds	r3, #4
 800e558:	f104 0215 	add.w	r2, r4, #21
 800e55c:	4290      	cmp	r0, r2
 800e55e:	bf38      	it	cc
 800e560:	2304      	movcc	r3, #4
 800e562:	f841 c003 	str.w	ip, [r1, r3]
 800e566:	f1bc 0f00 	cmp.w	ip, #0
 800e56a:	d001      	beq.n	800e570 <__lshift+0xac>
 800e56c:	f108 0602 	add.w	r6, r8, #2
 800e570:	3e01      	subs	r6, #1
 800e572:	4638      	mov	r0, r7
 800e574:	612e      	str	r6, [r5, #16]
 800e576:	4621      	mov	r1, r4
 800e578:	f7ff fd88 	bl	800e08c <_Bfree>
 800e57c:	4628      	mov	r0, r5
 800e57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e582:	f842 0f04 	str.w	r0, [r2, #4]!
 800e586:	3301      	adds	r3, #1
 800e588:	e7c1      	b.n	800e50e <__lshift+0x4a>
 800e58a:	3904      	subs	r1, #4
 800e58c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e590:	f841 2f04 	str.w	r2, [r1, #4]!
 800e594:	4298      	cmp	r0, r3
 800e596:	d8f9      	bhi.n	800e58c <__lshift+0xc8>
 800e598:	e7ea      	b.n	800e570 <__lshift+0xac>
 800e59a:	bf00      	nop
 800e59c:	08014a34 	.word	0x08014a34
 800e5a0:	08014ad1 	.word	0x08014ad1

0800e5a4 <__mcmp>:
 800e5a4:	b530      	push	{r4, r5, lr}
 800e5a6:	6902      	ldr	r2, [r0, #16]
 800e5a8:	690c      	ldr	r4, [r1, #16]
 800e5aa:	1b12      	subs	r2, r2, r4
 800e5ac:	d10e      	bne.n	800e5cc <__mcmp+0x28>
 800e5ae:	f100 0314 	add.w	r3, r0, #20
 800e5b2:	3114      	adds	r1, #20
 800e5b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e5b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e5bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e5c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e5c4:	42a5      	cmp	r5, r4
 800e5c6:	d003      	beq.n	800e5d0 <__mcmp+0x2c>
 800e5c8:	d305      	bcc.n	800e5d6 <__mcmp+0x32>
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	4610      	mov	r0, r2
 800e5ce:	bd30      	pop	{r4, r5, pc}
 800e5d0:	4283      	cmp	r3, r0
 800e5d2:	d3f3      	bcc.n	800e5bc <__mcmp+0x18>
 800e5d4:	e7fa      	b.n	800e5cc <__mcmp+0x28>
 800e5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e5da:	e7f7      	b.n	800e5cc <__mcmp+0x28>

0800e5dc <__mdiff>:
 800e5dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e0:	460c      	mov	r4, r1
 800e5e2:	4606      	mov	r6, r0
 800e5e4:	4611      	mov	r1, r2
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	4690      	mov	r8, r2
 800e5ea:	f7ff ffdb 	bl	800e5a4 <__mcmp>
 800e5ee:	1e05      	subs	r5, r0, #0
 800e5f0:	d110      	bne.n	800e614 <__mdiff+0x38>
 800e5f2:	4629      	mov	r1, r5
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	f7ff fd09 	bl	800e00c <_Balloc>
 800e5fa:	b930      	cbnz	r0, 800e60a <__mdiff+0x2e>
 800e5fc:	4b3a      	ldr	r3, [pc, #232]	; (800e6e8 <__mdiff+0x10c>)
 800e5fe:	4602      	mov	r2, r0
 800e600:	f240 2132 	movw	r1, #562	; 0x232
 800e604:	4839      	ldr	r0, [pc, #228]	; (800e6ec <__mdiff+0x110>)
 800e606:	f000 fea3 	bl	800f350 <__assert_func>
 800e60a:	2301      	movs	r3, #1
 800e60c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e614:	bfa4      	itt	ge
 800e616:	4643      	movge	r3, r8
 800e618:	46a0      	movge	r8, r4
 800e61a:	4630      	mov	r0, r6
 800e61c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e620:	bfa6      	itte	ge
 800e622:	461c      	movge	r4, r3
 800e624:	2500      	movge	r5, #0
 800e626:	2501      	movlt	r5, #1
 800e628:	f7ff fcf0 	bl	800e00c <_Balloc>
 800e62c:	b920      	cbnz	r0, 800e638 <__mdiff+0x5c>
 800e62e:	4b2e      	ldr	r3, [pc, #184]	; (800e6e8 <__mdiff+0x10c>)
 800e630:	4602      	mov	r2, r0
 800e632:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e636:	e7e5      	b.n	800e604 <__mdiff+0x28>
 800e638:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e63c:	6926      	ldr	r6, [r4, #16]
 800e63e:	60c5      	str	r5, [r0, #12]
 800e640:	f104 0914 	add.w	r9, r4, #20
 800e644:	f108 0514 	add.w	r5, r8, #20
 800e648:	f100 0e14 	add.w	lr, r0, #20
 800e64c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e650:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e654:	f108 0210 	add.w	r2, r8, #16
 800e658:	46f2      	mov	sl, lr
 800e65a:	2100      	movs	r1, #0
 800e65c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e660:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e664:	fa1f f883 	uxth.w	r8, r3
 800e668:	fa11 f18b 	uxtah	r1, r1, fp
 800e66c:	0c1b      	lsrs	r3, r3, #16
 800e66e:	eba1 0808 	sub.w	r8, r1, r8
 800e672:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e676:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e67a:	fa1f f888 	uxth.w	r8, r8
 800e67e:	1419      	asrs	r1, r3, #16
 800e680:	454e      	cmp	r6, r9
 800e682:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e686:	f84a 3b04 	str.w	r3, [sl], #4
 800e68a:	d8e7      	bhi.n	800e65c <__mdiff+0x80>
 800e68c:	1b33      	subs	r3, r6, r4
 800e68e:	3b15      	subs	r3, #21
 800e690:	f023 0303 	bic.w	r3, r3, #3
 800e694:	3304      	adds	r3, #4
 800e696:	3415      	adds	r4, #21
 800e698:	42a6      	cmp	r6, r4
 800e69a:	bf38      	it	cc
 800e69c:	2304      	movcc	r3, #4
 800e69e:	441d      	add	r5, r3
 800e6a0:	4473      	add	r3, lr
 800e6a2:	469e      	mov	lr, r3
 800e6a4:	462e      	mov	r6, r5
 800e6a6:	4566      	cmp	r6, ip
 800e6a8:	d30e      	bcc.n	800e6c8 <__mdiff+0xec>
 800e6aa:	f10c 0203 	add.w	r2, ip, #3
 800e6ae:	1b52      	subs	r2, r2, r5
 800e6b0:	f022 0203 	bic.w	r2, r2, #3
 800e6b4:	3d03      	subs	r5, #3
 800e6b6:	45ac      	cmp	ip, r5
 800e6b8:	bf38      	it	cc
 800e6ba:	2200      	movcc	r2, #0
 800e6bc:	441a      	add	r2, r3
 800e6be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e6c2:	b17b      	cbz	r3, 800e6e4 <__mdiff+0x108>
 800e6c4:	6107      	str	r7, [r0, #16]
 800e6c6:	e7a3      	b.n	800e610 <__mdiff+0x34>
 800e6c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800e6cc:	fa11 f288 	uxtah	r2, r1, r8
 800e6d0:	1414      	asrs	r4, r2, #16
 800e6d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e6d6:	b292      	uxth	r2, r2
 800e6d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e6dc:	f84e 2b04 	str.w	r2, [lr], #4
 800e6e0:	1421      	asrs	r1, r4, #16
 800e6e2:	e7e0      	b.n	800e6a6 <__mdiff+0xca>
 800e6e4:	3f01      	subs	r7, #1
 800e6e6:	e7ea      	b.n	800e6be <__mdiff+0xe2>
 800e6e8:	08014a34 	.word	0x08014a34
 800e6ec:	08014ad1 	.word	0x08014ad1

0800e6f0 <__ulp>:
 800e6f0:	b082      	sub	sp, #8
 800e6f2:	ed8d 0b00 	vstr	d0, [sp]
 800e6f6:	9b01      	ldr	r3, [sp, #4]
 800e6f8:	4912      	ldr	r1, [pc, #72]	; (800e744 <__ulp+0x54>)
 800e6fa:	4019      	ands	r1, r3
 800e6fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e700:	2900      	cmp	r1, #0
 800e702:	dd05      	ble.n	800e710 <__ulp+0x20>
 800e704:	2200      	movs	r2, #0
 800e706:	460b      	mov	r3, r1
 800e708:	ec43 2b10 	vmov	d0, r2, r3
 800e70c:	b002      	add	sp, #8
 800e70e:	4770      	bx	lr
 800e710:	4249      	negs	r1, r1
 800e712:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e716:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e71a:	f04f 0200 	mov.w	r2, #0
 800e71e:	f04f 0300 	mov.w	r3, #0
 800e722:	da04      	bge.n	800e72e <__ulp+0x3e>
 800e724:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e728:	fa41 f300 	asr.w	r3, r1, r0
 800e72c:	e7ec      	b.n	800e708 <__ulp+0x18>
 800e72e:	f1a0 0114 	sub.w	r1, r0, #20
 800e732:	291e      	cmp	r1, #30
 800e734:	bfda      	itte	le
 800e736:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e73a:	fa20 f101 	lsrle.w	r1, r0, r1
 800e73e:	2101      	movgt	r1, #1
 800e740:	460a      	mov	r2, r1
 800e742:	e7e1      	b.n	800e708 <__ulp+0x18>
 800e744:	7ff00000 	.word	0x7ff00000

0800e748 <__b2d>:
 800e748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74a:	6905      	ldr	r5, [r0, #16]
 800e74c:	f100 0714 	add.w	r7, r0, #20
 800e750:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e754:	1f2e      	subs	r6, r5, #4
 800e756:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e75a:	4620      	mov	r0, r4
 800e75c:	f7ff fd48 	bl	800e1f0 <__hi0bits>
 800e760:	f1c0 0320 	rsb	r3, r0, #32
 800e764:	280a      	cmp	r0, #10
 800e766:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e7e4 <__b2d+0x9c>
 800e76a:	600b      	str	r3, [r1, #0]
 800e76c:	dc14      	bgt.n	800e798 <__b2d+0x50>
 800e76e:	f1c0 0e0b 	rsb	lr, r0, #11
 800e772:	fa24 f10e 	lsr.w	r1, r4, lr
 800e776:	42b7      	cmp	r7, r6
 800e778:	ea41 030c 	orr.w	r3, r1, ip
 800e77c:	bf34      	ite	cc
 800e77e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e782:	2100      	movcs	r1, #0
 800e784:	3015      	adds	r0, #21
 800e786:	fa04 f000 	lsl.w	r0, r4, r0
 800e78a:	fa21 f10e 	lsr.w	r1, r1, lr
 800e78e:	ea40 0201 	orr.w	r2, r0, r1
 800e792:	ec43 2b10 	vmov	d0, r2, r3
 800e796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e798:	42b7      	cmp	r7, r6
 800e79a:	bf3a      	itte	cc
 800e79c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e7a0:	f1a5 0608 	subcc.w	r6, r5, #8
 800e7a4:	2100      	movcs	r1, #0
 800e7a6:	380b      	subs	r0, #11
 800e7a8:	d017      	beq.n	800e7da <__b2d+0x92>
 800e7aa:	f1c0 0c20 	rsb	ip, r0, #32
 800e7ae:	fa04 f500 	lsl.w	r5, r4, r0
 800e7b2:	42be      	cmp	r6, r7
 800e7b4:	fa21 f40c 	lsr.w	r4, r1, ip
 800e7b8:	ea45 0504 	orr.w	r5, r5, r4
 800e7bc:	bf8c      	ite	hi
 800e7be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e7c2:	2400      	movls	r4, #0
 800e7c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e7c8:	fa01 f000 	lsl.w	r0, r1, r0
 800e7cc:	fa24 f40c 	lsr.w	r4, r4, ip
 800e7d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e7d4:	ea40 0204 	orr.w	r2, r0, r4
 800e7d8:	e7db      	b.n	800e792 <__b2d+0x4a>
 800e7da:	ea44 030c 	orr.w	r3, r4, ip
 800e7de:	460a      	mov	r2, r1
 800e7e0:	e7d7      	b.n	800e792 <__b2d+0x4a>
 800e7e2:	bf00      	nop
 800e7e4:	3ff00000 	.word	0x3ff00000

0800e7e8 <__d2b>:
 800e7e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e7ec:	4689      	mov	r9, r1
 800e7ee:	2101      	movs	r1, #1
 800e7f0:	ec57 6b10 	vmov	r6, r7, d0
 800e7f4:	4690      	mov	r8, r2
 800e7f6:	f7ff fc09 	bl	800e00c <_Balloc>
 800e7fa:	4604      	mov	r4, r0
 800e7fc:	b930      	cbnz	r0, 800e80c <__d2b+0x24>
 800e7fe:	4602      	mov	r2, r0
 800e800:	4b25      	ldr	r3, [pc, #148]	; (800e898 <__d2b+0xb0>)
 800e802:	4826      	ldr	r0, [pc, #152]	; (800e89c <__d2b+0xb4>)
 800e804:	f240 310a 	movw	r1, #778	; 0x30a
 800e808:	f000 fda2 	bl	800f350 <__assert_func>
 800e80c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e810:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e814:	bb35      	cbnz	r5, 800e864 <__d2b+0x7c>
 800e816:	2e00      	cmp	r6, #0
 800e818:	9301      	str	r3, [sp, #4]
 800e81a:	d028      	beq.n	800e86e <__d2b+0x86>
 800e81c:	4668      	mov	r0, sp
 800e81e:	9600      	str	r6, [sp, #0]
 800e820:	f7ff fd06 	bl	800e230 <__lo0bits>
 800e824:	9900      	ldr	r1, [sp, #0]
 800e826:	b300      	cbz	r0, 800e86a <__d2b+0x82>
 800e828:	9a01      	ldr	r2, [sp, #4]
 800e82a:	f1c0 0320 	rsb	r3, r0, #32
 800e82e:	fa02 f303 	lsl.w	r3, r2, r3
 800e832:	430b      	orrs	r3, r1
 800e834:	40c2      	lsrs	r2, r0
 800e836:	6163      	str	r3, [r4, #20]
 800e838:	9201      	str	r2, [sp, #4]
 800e83a:	9b01      	ldr	r3, [sp, #4]
 800e83c:	61a3      	str	r3, [r4, #24]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	bf14      	ite	ne
 800e842:	2202      	movne	r2, #2
 800e844:	2201      	moveq	r2, #1
 800e846:	6122      	str	r2, [r4, #16]
 800e848:	b1d5      	cbz	r5, 800e880 <__d2b+0x98>
 800e84a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e84e:	4405      	add	r5, r0
 800e850:	f8c9 5000 	str.w	r5, [r9]
 800e854:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e858:	f8c8 0000 	str.w	r0, [r8]
 800e85c:	4620      	mov	r0, r4
 800e85e:	b003      	add	sp, #12
 800e860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e868:	e7d5      	b.n	800e816 <__d2b+0x2e>
 800e86a:	6161      	str	r1, [r4, #20]
 800e86c:	e7e5      	b.n	800e83a <__d2b+0x52>
 800e86e:	a801      	add	r0, sp, #4
 800e870:	f7ff fcde 	bl	800e230 <__lo0bits>
 800e874:	9b01      	ldr	r3, [sp, #4]
 800e876:	6163      	str	r3, [r4, #20]
 800e878:	2201      	movs	r2, #1
 800e87a:	6122      	str	r2, [r4, #16]
 800e87c:	3020      	adds	r0, #32
 800e87e:	e7e3      	b.n	800e848 <__d2b+0x60>
 800e880:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e884:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e888:	f8c9 0000 	str.w	r0, [r9]
 800e88c:	6918      	ldr	r0, [r3, #16]
 800e88e:	f7ff fcaf 	bl	800e1f0 <__hi0bits>
 800e892:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e896:	e7df      	b.n	800e858 <__d2b+0x70>
 800e898:	08014a34 	.word	0x08014a34
 800e89c:	08014ad1 	.word	0x08014ad1

0800e8a0 <__ratio>:
 800e8a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a4:	4688      	mov	r8, r1
 800e8a6:	4669      	mov	r1, sp
 800e8a8:	4681      	mov	r9, r0
 800e8aa:	f7ff ff4d 	bl	800e748 <__b2d>
 800e8ae:	a901      	add	r1, sp, #4
 800e8b0:	4640      	mov	r0, r8
 800e8b2:	ec55 4b10 	vmov	r4, r5, d0
 800e8b6:	ee10 aa10 	vmov	sl, s0
 800e8ba:	f7ff ff45 	bl	800e748 <__b2d>
 800e8be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e8c6:	1a59      	subs	r1, r3, r1
 800e8c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8cc:	1ad3      	subs	r3, r2, r3
 800e8ce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e8d2:	ec57 6b10 	vmov	r6, r7, d0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	bfd6      	itet	le
 800e8da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e8de:	462a      	movgt	r2, r5
 800e8e0:	463a      	movle	r2, r7
 800e8e2:	46ab      	mov	fp, r5
 800e8e4:	bfd6      	itet	le
 800e8e6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e8ea:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e8ee:	ee00 3a90 	vmovle	s1, r3
 800e8f2:	ec4b ab17 	vmov	d7, sl, fp
 800e8f6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e8fa:	b003      	add	sp, #12
 800e8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e900 <__copybits>:
 800e900:	3901      	subs	r1, #1
 800e902:	b570      	push	{r4, r5, r6, lr}
 800e904:	1149      	asrs	r1, r1, #5
 800e906:	6914      	ldr	r4, [r2, #16]
 800e908:	3101      	adds	r1, #1
 800e90a:	f102 0314 	add.w	r3, r2, #20
 800e90e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e912:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e916:	1f05      	subs	r5, r0, #4
 800e918:	42a3      	cmp	r3, r4
 800e91a:	d30c      	bcc.n	800e936 <__copybits+0x36>
 800e91c:	1aa3      	subs	r3, r4, r2
 800e91e:	3b11      	subs	r3, #17
 800e920:	f023 0303 	bic.w	r3, r3, #3
 800e924:	3211      	adds	r2, #17
 800e926:	42a2      	cmp	r2, r4
 800e928:	bf88      	it	hi
 800e92a:	2300      	movhi	r3, #0
 800e92c:	4418      	add	r0, r3
 800e92e:	2300      	movs	r3, #0
 800e930:	4288      	cmp	r0, r1
 800e932:	d305      	bcc.n	800e940 <__copybits+0x40>
 800e934:	bd70      	pop	{r4, r5, r6, pc}
 800e936:	f853 6b04 	ldr.w	r6, [r3], #4
 800e93a:	f845 6f04 	str.w	r6, [r5, #4]!
 800e93e:	e7eb      	b.n	800e918 <__copybits+0x18>
 800e940:	f840 3b04 	str.w	r3, [r0], #4
 800e944:	e7f4      	b.n	800e930 <__copybits+0x30>

0800e946 <__any_on>:
 800e946:	f100 0214 	add.w	r2, r0, #20
 800e94a:	6900      	ldr	r0, [r0, #16]
 800e94c:	114b      	asrs	r3, r1, #5
 800e94e:	4298      	cmp	r0, r3
 800e950:	b510      	push	{r4, lr}
 800e952:	db11      	blt.n	800e978 <__any_on+0x32>
 800e954:	dd0a      	ble.n	800e96c <__any_on+0x26>
 800e956:	f011 011f 	ands.w	r1, r1, #31
 800e95a:	d007      	beq.n	800e96c <__any_on+0x26>
 800e95c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e960:	fa24 f001 	lsr.w	r0, r4, r1
 800e964:	fa00 f101 	lsl.w	r1, r0, r1
 800e968:	428c      	cmp	r4, r1
 800e96a:	d10b      	bne.n	800e984 <__any_on+0x3e>
 800e96c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e970:	4293      	cmp	r3, r2
 800e972:	d803      	bhi.n	800e97c <__any_on+0x36>
 800e974:	2000      	movs	r0, #0
 800e976:	bd10      	pop	{r4, pc}
 800e978:	4603      	mov	r3, r0
 800e97a:	e7f7      	b.n	800e96c <__any_on+0x26>
 800e97c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e980:	2900      	cmp	r1, #0
 800e982:	d0f5      	beq.n	800e970 <__any_on+0x2a>
 800e984:	2001      	movs	r0, #1
 800e986:	e7f6      	b.n	800e976 <__any_on+0x30>

0800e988 <_calloc_r>:
 800e988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e98a:	fba1 2402 	umull	r2, r4, r1, r2
 800e98e:	b94c      	cbnz	r4, 800e9a4 <_calloc_r+0x1c>
 800e990:	4611      	mov	r1, r2
 800e992:	9201      	str	r2, [sp, #4]
 800e994:	f7fd fcba 	bl	800c30c <_malloc_r>
 800e998:	9a01      	ldr	r2, [sp, #4]
 800e99a:	4605      	mov	r5, r0
 800e99c:	b930      	cbnz	r0, 800e9ac <_calloc_r+0x24>
 800e99e:	4628      	mov	r0, r5
 800e9a0:	b003      	add	sp, #12
 800e9a2:	bd30      	pop	{r4, r5, pc}
 800e9a4:	220c      	movs	r2, #12
 800e9a6:	6002      	str	r2, [r0, #0]
 800e9a8:	2500      	movs	r5, #0
 800e9aa:	e7f8      	b.n	800e99e <_calloc_r+0x16>
 800e9ac:	4621      	mov	r1, r4
 800e9ae:	f7fd fc39 	bl	800c224 <memset>
 800e9b2:	e7f4      	b.n	800e99e <_calloc_r+0x16>

0800e9b4 <__ssputs_r>:
 800e9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9b8:	688e      	ldr	r6, [r1, #8]
 800e9ba:	429e      	cmp	r6, r3
 800e9bc:	4682      	mov	sl, r0
 800e9be:	460c      	mov	r4, r1
 800e9c0:	4690      	mov	r8, r2
 800e9c2:	461f      	mov	r7, r3
 800e9c4:	d838      	bhi.n	800ea38 <__ssputs_r+0x84>
 800e9c6:	898a      	ldrh	r2, [r1, #12]
 800e9c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e9cc:	d032      	beq.n	800ea34 <__ssputs_r+0x80>
 800e9ce:	6825      	ldr	r5, [r4, #0]
 800e9d0:	6909      	ldr	r1, [r1, #16]
 800e9d2:	eba5 0901 	sub.w	r9, r5, r1
 800e9d6:	6965      	ldr	r5, [r4, #20]
 800e9d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	444b      	add	r3, r9
 800e9e4:	106d      	asrs	r5, r5, #1
 800e9e6:	429d      	cmp	r5, r3
 800e9e8:	bf38      	it	cc
 800e9ea:	461d      	movcc	r5, r3
 800e9ec:	0553      	lsls	r3, r2, #21
 800e9ee:	d531      	bpl.n	800ea54 <__ssputs_r+0xa0>
 800e9f0:	4629      	mov	r1, r5
 800e9f2:	f7fd fc8b 	bl	800c30c <_malloc_r>
 800e9f6:	4606      	mov	r6, r0
 800e9f8:	b950      	cbnz	r0, 800ea10 <__ssputs_r+0x5c>
 800e9fa:	230c      	movs	r3, #12
 800e9fc:	f8ca 3000 	str.w	r3, [sl]
 800ea00:	89a3      	ldrh	r3, [r4, #12]
 800ea02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea06:	81a3      	strh	r3, [r4, #12]
 800ea08:	f04f 30ff 	mov.w	r0, #4294967295
 800ea0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea10:	6921      	ldr	r1, [r4, #16]
 800ea12:	464a      	mov	r2, r9
 800ea14:	f7fd fbde 	bl	800c1d4 <memcpy>
 800ea18:	89a3      	ldrh	r3, [r4, #12]
 800ea1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea22:	81a3      	strh	r3, [r4, #12]
 800ea24:	6126      	str	r6, [r4, #16]
 800ea26:	6165      	str	r5, [r4, #20]
 800ea28:	444e      	add	r6, r9
 800ea2a:	eba5 0509 	sub.w	r5, r5, r9
 800ea2e:	6026      	str	r6, [r4, #0]
 800ea30:	60a5      	str	r5, [r4, #8]
 800ea32:	463e      	mov	r6, r7
 800ea34:	42be      	cmp	r6, r7
 800ea36:	d900      	bls.n	800ea3a <__ssputs_r+0x86>
 800ea38:	463e      	mov	r6, r7
 800ea3a:	6820      	ldr	r0, [r4, #0]
 800ea3c:	4632      	mov	r2, r6
 800ea3e:	4641      	mov	r1, r8
 800ea40:	f7fd fbd6 	bl	800c1f0 <memmove>
 800ea44:	68a3      	ldr	r3, [r4, #8]
 800ea46:	1b9b      	subs	r3, r3, r6
 800ea48:	60a3      	str	r3, [r4, #8]
 800ea4a:	6823      	ldr	r3, [r4, #0]
 800ea4c:	4433      	add	r3, r6
 800ea4e:	6023      	str	r3, [r4, #0]
 800ea50:	2000      	movs	r0, #0
 800ea52:	e7db      	b.n	800ea0c <__ssputs_r+0x58>
 800ea54:	462a      	mov	r2, r5
 800ea56:	f000 fcef 	bl	800f438 <_realloc_r>
 800ea5a:	4606      	mov	r6, r0
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d1e1      	bne.n	800ea24 <__ssputs_r+0x70>
 800ea60:	6921      	ldr	r1, [r4, #16]
 800ea62:	4650      	mov	r0, sl
 800ea64:	f7fd fbe6 	bl	800c234 <_free_r>
 800ea68:	e7c7      	b.n	800e9fa <__ssputs_r+0x46>
	...

0800ea6c <_svfiprintf_r>:
 800ea6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea70:	4698      	mov	r8, r3
 800ea72:	898b      	ldrh	r3, [r1, #12]
 800ea74:	061b      	lsls	r3, r3, #24
 800ea76:	b09d      	sub	sp, #116	; 0x74
 800ea78:	4607      	mov	r7, r0
 800ea7a:	460d      	mov	r5, r1
 800ea7c:	4614      	mov	r4, r2
 800ea7e:	d50e      	bpl.n	800ea9e <_svfiprintf_r+0x32>
 800ea80:	690b      	ldr	r3, [r1, #16]
 800ea82:	b963      	cbnz	r3, 800ea9e <_svfiprintf_r+0x32>
 800ea84:	2140      	movs	r1, #64	; 0x40
 800ea86:	f7fd fc41 	bl	800c30c <_malloc_r>
 800ea8a:	6028      	str	r0, [r5, #0]
 800ea8c:	6128      	str	r0, [r5, #16]
 800ea8e:	b920      	cbnz	r0, 800ea9a <_svfiprintf_r+0x2e>
 800ea90:	230c      	movs	r3, #12
 800ea92:	603b      	str	r3, [r7, #0]
 800ea94:	f04f 30ff 	mov.w	r0, #4294967295
 800ea98:	e0d1      	b.n	800ec3e <_svfiprintf_r+0x1d2>
 800ea9a:	2340      	movs	r3, #64	; 0x40
 800ea9c:	616b      	str	r3, [r5, #20]
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	9309      	str	r3, [sp, #36]	; 0x24
 800eaa2:	2320      	movs	r3, #32
 800eaa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eaa8:	f8cd 800c 	str.w	r8, [sp, #12]
 800eaac:	2330      	movs	r3, #48	; 0x30
 800eaae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec58 <_svfiprintf_r+0x1ec>
 800eab2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eab6:	f04f 0901 	mov.w	r9, #1
 800eaba:	4623      	mov	r3, r4
 800eabc:	469a      	mov	sl, r3
 800eabe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eac2:	b10a      	cbz	r2, 800eac8 <_svfiprintf_r+0x5c>
 800eac4:	2a25      	cmp	r2, #37	; 0x25
 800eac6:	d1f9      	bne.n	800eabc <_svfiprintf_r+0x50>
 800eac8:	ebba 0b04 	subs.w	fp, sl, r4
 800eacc:	d00b      	beq.n	800eae6 <_svfiprintf_r+0x7a>
 800eace:	465b      	mov	r3, fp
 800ead0:	4622      	mov	r2, r4
 800ead2:	4629      	mov	r1, r5
 800ead4:	4638      	mov	r0, r7
 800ead6:	f7ff ff6d 	bl	800e9b4 <__ssputs_r>
 800eada:	3001      	adds	r0, #1
 800eadc:	f000 80aa 	beq.w	800ec34 <_svfiprintf_r+0x1c8>
 800eae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eae2:	445a      	add	r2, fp
 800eae4:	9209      	str	r2, [sp, #36]	; 0x24
 800eae6:	f89a 3000 	ldrb.w	r3, [sl]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f000 80a2 	beq.w	800ec34 <_svfiprintf_r+0x1c8>
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	f04f 32ff 	mov.w	r2, #4294967295
 800eaf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eafa:	f10a 0a01 	add.w	sl, sl, #1
 800eafe:	9304      	str	r3, [sp, #16]
 800eb00:	9307      	str	r3, [sp, #28]
 800eb02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb06:	931a      	str	r3, [sp, #104]	; 0x68
 800eb08:	4654      	mov	r4, sl
 800eb0a:	2205      	movs	r2, #5
 800eb0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb10:	4851      	ldr	r0, [pc, #324]	; (800ec58 <_svfiprintf_r+0x1ec>)
 800eb12:	f7f1 fbfd 	bl	8000310 <memchr>
 800eb16:	9a04      	ldr	r2, [sp, #16]
 800eb18:	b9d8      	cbnz	r0, 800eb52 <_svfiprintf_r+0xe6>
 800eb1a:	06d0      	lsls	r0, r2, #27
 800eb1c:	bf44      	itt	mi
 800eb1e:	2320      	movmi	r3, #32
 800eb20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb24:	0711      	lsls	r1, r2, #28
 800eb26:	bf44      	itt	mi
 800eb28:	232b      	movmi	r3, #43	; 0x2b
 800eb2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb2e:	f89a 3000 	ldrb.w	r3, [sl]
 800eb32:	2b2a      	cmp	r3, #42	; 0x2a
 800eb34:	d015      	beq.n	800eb62 <_svfiprintf_r+0xf6>
 800eb36:	9a07      	ldr	r2, [sp, #28]
 800eb38:	4654      	mov	r4, sl
 800eb3a:	2000      	movs	r0, #0
 800eb3c:	f04f 0c0a 	mov.w	ip, #10
 800eb40:	4621      	mov	r1, r4
 800eb42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb46:	3b30      	subs	r3, #48	; 0x30
 800eb48:	2b09      	cmp	r3, #9
 800eb4a:	d94e      	bls.n	800ebea <_svfiprintf_r+0x17e>
 800eb4c:	b1b0      	cbz	r0, 800eb7c <_svfiprintf_r+0x110>
 800eb4e:	9207      	str	r2, [sp, #28]
 800eb50:	e014      	b.n	800eb7c <_svfiprintf_r+0x110>
 800eb52:	eba0 0308 	sub.w	r3, r0, r8
 800eb56:	fa09 f303 	lsl.w	r3, r9, r3
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	9304      	str	r3, [sp, #16]
 800eb5e:	46a2      	mov	sl, r4
 800eb60:	e7d2      	b.n	800eb08 <_svfiprintf_r+0x9c>
 800eb62:	9b03      	ldr	r3, [sp, #12]
 800eb64:	1d19      	adds	r1, r3, #4
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	9103      	str	r1, [sp, #12]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	bfbb      	ittet	lt
 800eb6e:	425b      	neglt	r3, r3
 800eb70:	f042 0202 	orrlt.w	r2, r2, #2
 800eb74:	9307      	strge	r3, [sp, #28]
 800eb76:	9307      	strlt	r3, [sp, #28]
 800eb78:	bfb8      	it	lt
 800eb7a:	9204      	strlt	r2, [sp, #16]
 800eb7c:	7823      	ldrb	r3, [r4, #0]
 800eb7e:	2b2e      	cmp	r3, #46	; 0x2e
 800eb80:	d10c      	bne.n	800eb9c <_svfiprintf_r+0x130>
 800eb82:	7863      	ldrb	r3, [r4, #1]
 800eb84:	2b2a      	cmp	r3, #42	; 0x2a
 800eb86:	d135      	bne.n	800ebf4 <_svfiprintf_r+0x188>
 800eb88:	9b03      	ldr	r3, [sp, #12]
 800eb8a:	1d1a      	adds	r2, r3, #4
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	9203      	str	r2, [sp, #12]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	bfb8      	it	lt
 800eb94:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb98:	3402      	adds	r4, #2
 800eb9a:	9305      	str	r3, [sp, #20]
 800eb9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec68 <_svfiprintf_r+0x1fc>
 800eba0:	7821      	ldrb	r1, [r4, #0]
 800eba2:	2203      	movs	r2, #3
 800eba4:	4650      	mov	r0, sl
 800eba6:	f7f1 fbb3 	bl	8000310 <memchr>
 800ebaa:	b140      	cbz	r0, 800ebbe <_svfiprintf_r+0x152>
 800ebac:	2340      	movs	r3, #64	; 0x40
 800ebae:	eba0 000a 	sub.w	r0, r0, sl
 800ebb2:	fa03 f000 	lsl.w	r0, r3, r0
 800ebb6:	9b04      	ldr	r3, [sp, #16]
 800ebb8:	4303      	orrs	r3, r0
 800ebba:	3401      	adds	r4, #1
 800ebbc:	9304      	str	r3, [sp, #16]
 800ebbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebc2:	4826      	ldr	r0, [pc, #152]	; (800ec5c <_svfiprintf_r+0x1f0>)
 800ebc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebc8:	2206      	movs	r2, #6
 800ebca:	f7f1 fba1 	bl	8000310 <memchr>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d038      	beq.n	800ec44 <_svfiprintf_r+0x1d8>
 800ebd2:	4b23      	ldr	r3, [pc, #140]	; (800ec60 <_svfiprintf_r+0x1f4>)
 800ebd4:	bb1b      	cbnz	r3, 800ec1e <_svfiprintf_r+0x1b2>
 800ebd6:	9b03      	ldr	r3, [sp, #12]
 800ebd8:	3307      	adds	r3, #7
 800ebda:	f023 0307 	bic.w	r3, r3, #7
 800ebde:	3308      	adds	r3, #8
 800ebe0:	9303      	str	r3, [sp, #12]
 800ebe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebe4:	4433      	add	r3, r6
 800ebe6:	9309      	str	r3, [sp, #36]	; 0x24
 800ebe8:	e767      	b.n	800eaba <_svfiprintf_r+0x4e>
 800ebea:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebee:	460c      	mov	r4, r1
 800ebf0:	2001      	movs	r0, #1
 800ebf2:	e7a5      	b.n	800eb40 <_svfiprintf_r+0xd4>
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	3401      	adds	r4, #1
 800ebf8:	9305      	str	r3, [sp, #20]
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	f04f 0c0a 	mov.w	ip, #10
 800ec00:	4620      	mov	r0, r4
 800ec02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec06:	3a30      	subs	r2, #48	; 0x30
 800ec08:	2a09      	cmp	r2, #9
 800ec0a:	d903      	bls.n	800ec14 <_svfiprintf_r+0x1a8>
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d0c5      	beq.n	800eb9c <_svfiprintf_r+0x130>
 800ec10:	9105      	str	r1, [sp, #20]
 800ec12:	e7c3      	b.n	800eb9c <_svfiprintf_r+0x130>
 800ec14:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec18:	4604      	mov	r4, r0
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	e7f0      	b.n	800ec00 <_svfiprintf_r+0x194>
 800ec1e:	ab03      	add	r3, sp, #12
 800ec20:	9300      	str	r3, [sp, #0]
 800ec22:	462a      	mov	r2, r5
 800ec24:	4b0f      	ldr	r3, [pc, #60]	; (800ec64 <_svfiprintf_r+0x1f8>)
 800ec26:	a904      	add	r1, sp, #16
 800ec28:	4638      	mov	r0, r7
 800ec2a:	f3af 8000 	nop.w
 800ec2e:	1c42      	adds	r2, r0, #1
 800ec30:	4606      	mov	r6, r0
 800ec32:	d1d6      	bne.n	800ebe2 <_svfiprintf_r+0x176>
 800ec34:	89ab      	ldrh	r3, [r5, #12]
 800ec36:	065b      	lsls	r3, r3, #25
 800ec38:	f53f af2c 	bmi.w	800ea94 <_svfiprintf_r+0x28>
 800ec3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec3e:	b01d      	add	sp, #116	; 0x74
 800ec40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec44:	ab03      	add	r3, sp, #12
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	462a      	mov	r2, r5
 800ec4a:	4b06      	ldr	r3, [pc, #24]	; (800ec64 <_svfiprintf_r+0x1f8>)
 800ec4c:	a904      	add	r1, sp, #16
 800ec4e:	4638      	mov	r0, r7
 800ec50:	f000 f9d4 	bl	800effc <_printf_i>
 800ec54:	e7eb      	b.n	800ec2e <_svfiprintf_r+0x1c2>
 800ec56:	bf00      	nop
 800ec58:	08014c2c 	.word	0x08014c2c
 800ec5c:	08014c36 	.word	0x08014c36
 800ec60:	00000000 	.word	0x00000000
 800ec64:	0800e9b5 	.word	0x0800e9b5
 800ec68:	08014c32 	.word	0x08014c32

0800ec6c <__sfputc_r>:
 800ec6c:	6893      	ldr	r3, [r2, #8]
 800ec6e:	3b01      	subs	r3, #1
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	b410      	push	{r4}
 800ec74:	6093      	str	r3, [r2, #8]
 800ec76:	da08      	bge.n	800ec8a <__sfputc_r+0x1e>
 800ec78:	6994      	ldr	r4, [r2, #24]
 800ec7a:	42a3      	cmp	r3, r4
 800ec7c:	db01      	blt.n	800ec82 <__sfputc_r+0x16>
 800ec7e:	290a      	cmp	r1, #10
 800ec80:	d103      	bne.n	800ec8a <__sfputc_r+0x1e>
 800ec82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec86:	f7fe bb55 	b.w	800d334 <__swbuf_r>
 800ec8a:	6813      	ldr	r3, [r2, #0]
 800ec8c:	1c58      	adds	r0, r3, #1
 800ec8e:	6010      	str	r0, [r2, #0]
 800ec90:	7019      	strb	r1, [r3, #0]
 800ec92:	4608      	mov	r0, r1
 800ec94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec98:	4770      	bx	lr

0800ec9a <__sfputs_r>:
 800ec9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec9c:	4606      	mov	r6, r0
 800ec9e:	460f      	mov	r7, r1
 800eca0:	4614      	mov	r4, r2
 800eca2:	18d5      	adds	r5, r2, r3
 800eca4:	42ac      	cmp	r4, r5
 800eca6:	d101      	bne.n	800ecac <__sfputs_r+0x12>
 800eca8:	2000      	movs	r0, #0
 800ecaa:	e007      	b.n	800ecbc <__sfputs_r+0x22>
 800ecac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecb0:	463a      	mov	r2, r7
 800ecb2:	4630      	mov	r0, r6
 800ecb4:	f7ff ffda 	bl	800ec6c <__sfputc_r>
 800ecb8:	1c43      	adds	r3, r0, #1
 800ecba:	d1f3      	bne.n	800eca4 <__sfputs_r+0xa>
 800ecbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ecc0 <_vfiprintf_r>:
 800ecc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc4:	460d      	mov	r5, r1
 800ecc6:	b09d      	sub	sp, #116	; 0x74
 800ecc8:	4614      	mov	r4, r2
 800ecca:	4698      	mov	r8, r3
 800eccc:	4606      	mov	r6, r0
 800ecce:	b118      	cbz	r0, 800ecd8 <_vfiprintf_r+0x18>
 800ecd0:	6983      	ldr	r3, [r0, #24]
 800ecd2:	b90b      	cbnz	r3, 800ecd8 <_vfiprintf_r+0x18>
 800ecd4:	f7fe fd08 	bl	800d6e8 <__sinit>
 800ecd8:	4b89      	ldr	r3, [pc, #548]	; (800ef00 <_vfiprintf_r+0x240>)
 800ecda:	429d      	cmp	r5, r3
 800ecdc:	d11b      	bne.n	800ed16 <_vfiprintf_r+0x56>
 800ecde:	6875      	ldr	r5, [r6, #4]
 800ece0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ece2:	07d9      	lsls	r1, r3, #31
 800ece4:	d405      	bmi.n	800ecf2 <_vfiprintf_r+0x32>
 800ece6:	89ab      	ldrh	r3, [r5, #12]
 800ece8:	059a      	lsls	r2, r3, #22
 800ecea:	d402      	bmi.n	800ecf2 <_vfiprintf_r+0x32>
 800ecec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecee:	f7ff f908 	bl	800df02 <__retarget_lock_acquire_recursive>
 800ecf2:	89ab      	ldrh	r3, [r5, #12]
 800ecf4:	071b      	lsls	r3, r3, #28
 800ecf6:	d501      	bpl.n	800ecfc <_vfiprintf_r+0x3c>
 800ecf8:	692b      	ldr	r3, [r5, #16]
 800ecfa:	b9eb      	cbnz	r3, 800ed38 <_vfiprintf_r+0x78>
 800ecfc:	4629      	mov	r1, r5
 800ecfe:	4630      	mov	r0, r6
 800ed00:	f7fe fb6a 	bl	800d3d8 <__swsetup_r>
 800ed04:	b1c0      	cbz	r0, 800ed38 <_vfiprintf_r+0x78>
 800ed06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed08:	07dc      	lsls	r4, r3, #31
 800ed0a:	d50e      	bpl.n	800ed2a <_vfiprintf_r+0x6a>
 800ed0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed10:	b01d      	add	sp, #116	; 0x74
 800ed12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed16:	4b7b      	ldr	r3, [pc, #492]	; (800ef04 <_vfiprintf_r+0x244>)
 800ed18:	429d      	cmp	r5, r3
 800ed1a:	d101      	bne.n	800ed20 <_vfiprintf_r+0x60>
 800ed1c:	68b5      	ldr	r5, [r6, #8]
 800ed1e:	e7df      	b.n	800ece0 <_vfiprintf_r+0x20>
 800ed20:	4b79      	ldr	r3, [pc, #484]	; (800ef08 <_vfiprintf_r+0x248>)
 800ed22:	429d      	cmp	r5, r3
 800ed24:	bf08      	it	eq
 800ed26:	68f5      	ldreq	r5, [r6, #12]
 800ed28:	e7da      	b.n	800ece0 <_vfiprintf_r+0x20>
 800ed2a:	89ab      	ldrh	r3, [r5, #12]
 800ed2c:	0598      	lsls	r0, r3, #22
 800ed2e:	d4ed      	bmi.n	800ed0c <_vfiprintf_r+0x4c>
 800ed30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed32:	f7ff f8e7 	bl	800df04 <__retarget_lock_release_recursive>
 800ed36:	e7e9      	b.n	800ed0c <_vfiprintf_r+0x4c>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed3c:	2320      	movs	r3, #32
 800ed3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed42:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed46:	2330      	movs	r3, #48	; 0x30
 800ed48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef0c <_vfiprintf_r+0x24c>
 800ed4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed50:	f04f 0901 	mov.w	r9, #1
 800ed54:	4623      	mov	r3, r4
 800ed56:	469a      	mov	sl, r3
 800ed58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed5c:	b10a      	cbz	r2, 800ed62 <_vfiprintf_r+0xa2>
 800ed5e:	2a25      	cmp	r2, #37	; 0x25
 800ed60:	d1f9      	bne.n	800ed56 <_vfiprintf_r+0x96>
 800ed62:	ebba 0b04 	subs.w	fp, sl, r4
 800ed66:	d00b      	beq.n	800ed80 <_vfiprintf_r+0xc0>
 800ed68:	465b      	mov	r3, fp
 800ed6a:	4622      	mov	r2, r4
 800ed6c:	4629      	mov	r1, r5
 800ed6e:	4630      	mov	r0, r6
 800ed70:	f7ff ff93 	bl	800ec9a <__sfputs_r>
 800ed74:	3001      	adds	r0, #1
 800ed76:	f000 80aa 	beq.w	800eece <_vfiprintf_r+0x20e>
 800ed7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed7c:	445a      	add	r2, fp
 800ed7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ed80:	f89a 3000 	ldrb.w	r3, [sl]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	f000 80a2 	beq.w	800eece <_vfiprintf_r+0x20e>
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed94:	f10a 0a01 	add.w	sl, sl, #1
 800ed98:	9304      	str	r3, [sp, #16]
 800ed9a:	9307      	str	r3, [sp, #28]
 800ed9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eda0:	931a      	str	r3, [sp, #104]	; 0x68
 800eda2:	4654      	mov	r4, sl
 800eda4:	2205      	movs	r2, #5
 800eda6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edaa:	4858      	ldr	r0, [pc, #352]	; (800ef0c <_vfiprintf_r+0x24c>)
 800edac:	f7f1 fab0 	bl	8000310 <memchr>
 800edb0:	9a04      	ldr	r2, [sp, #16]
 800edb2:	b9d8      	cbnz	r0, 800edec <_vfiprintf_r+0x12c>
 800edb4:	06d1      	lsls	r1, r2, #27
 800edb6:	bf44      	itt	mi
 800edb8:	2320      	movmi	r3, #32
 800edba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edbe:	0713      	lsls	r3, r2, #28
 800edc0:	bf44      	itt	mi
 800edc2:	232b      	movmi	r3, #43	; 0x2b
 800edc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edc8:	f89a 3000 	ldrb.w	r3, [sl]
 800edcc:	2b2a      	cmp	r3, #42	; 0x2a
 800edce:	d015      	beq.n	800edfc <_vfiprintf_r+0x13c>
 800edd0:	9a07      	ldr	r2, [sp, #28]
 800edd2:	4654      	mov	r4, sl
 800edd4:	2000      	movs	r0, #0
 800edd6:	f04f 0c0a 	mov.w	ip, #10
 800edda:	4621      	mov	r1, r4
 800eddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ede0:	3b30      	subs	r3, #48	; 0x30
 800ede2:	2b09      	cmp	r3, #9
 800ede4:	d94e      	bls.n	800ee84 <_vfiprintf_r+0x1c4>
 800ede6:	b1b0      	cbz	r0, 800ee16 <_vfiprintf_r+0x156>
 800ede8:	9207      	str	r2, [sp, #28]
 800edea:	e014      	b.n	800ee16 <_vfiprintf_r+0x156>
 800edec:	eba0 0308 	sub.w	r3, r0, r8
 800edf0:	fa09 f303 	lsl.w	r3, r9, r3
 800edf4:	4313      	orrs	r3, r2
 800edf6:	9304      	str	r3, [sp, #16]
 800edf8:	46a2      	mov	sl, r4
 800edfa:	e7d2      	b.n	800eda2 <_vfiprintf_r+0xe2>
 800edfc:	9b03      	ldr	r3, [sp, #12]
 800edfe:	1d19      	adds	r1, r3, #4
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	9103      	str	r1, [sp, #12]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	bfbb      	ittet	lt
 800ee08:	425b      	neglt	r3, r3
 800ee0a:	f042 0202 	orrlt.w	r2, r2, #2
 800ee0e:	9307      	strge	r3, [sp, #28]
 800ee10:	9307      	strlt	r3, [sp, #28]
 800ee12:	bfb8      	it	lt
 800ee14:	9204      	strlt	r2, [sp, #16]
 800ee16:	7823      	ldrb	r3, [r4, #0]
 800ee18:	2b2e      	cmp	r3, #46	; 0x2e
 800ee1a:	d10c      	bne.n	800ee36 <_vfiprintf_r+0x176>
 800ee1c:	7863      	ldrb	r3, [r4, #1]
 800ee1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ee20:	d135      	bne.n	800ee8e <_vfiprintf_r+0x1ce>
 800ee22:	9b03      	ldr	r3, [sp, #12]
 800ee24:	1d1a      	adds	r2, r3, #4
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	9203      	str	r2, [sp, #12]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	bfb8      	it	lt
 800ee2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee32:	3402      	adds	r4, #2
 800ee34:	9305      	str	r3, [sp, #20]
 800ee36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef1c <_vfiprintf_r+0x25c>
 800ee3a:	7821      	ldrb	r1, [r4, #0]
 800ee3c:	2203      	movs	r2, #3
 800ee3e:	4650      	mov	r0, sl
 800ee40:	f7f1 fa66 	bl	8000310 <memchr>
 800ee44:	b140      	cbz	r0, 800ee58 <_vfiprintf_r+0x198>
 800ee46:	2340      	movs	r3, #64	; 0x40
 800ee48:	eba0 000a 	sub.w	r0, r0, sl
 800ee4c:	fa03 f000 	lsl.w	r0, r3, r0
 800ee50:	9b04      	ldr	r3, [sp, #16]
 800ee52:	4303      	orrs	r3, r0
 800ee54:	3401      	adds	r4, #1
 800ee56:	9304      	str	r3, [sp, #16]
 800ee58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee5c:	482c      	ldr	r0, [pc, #176]	; (800ef10 <_vfiprintf_r+0x250>)
 800ee5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee62:	2206      	movs	r2, #6
 800ee64:	f7f1 fa54 	bl	8000310 <memchr>
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	d03f      	beq.n	800eeec <_vfiprintf_r+0x22c>
 800ee6c:	4b29      	ldr	r3, [pc, #164]	; (800ef14 <_vfiprintf_r+0x254>)
 800ee6e:	bb1b      	cbnz	r3, 800eeb8 <_vfiprintf_r+0x1f8>
 800ee70:	9b03      	ldr	r3, [sp, #12]
 800ee72:	3307      	adds	r3, #7
 800ee74:	f023 0307 	bic.w	r3, r3, #7
 800ee78:	3308      	adds	r3, #8
 800ee7a:	9303      	str	r3, [sp, #12]
 800ee7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee7e:	443b      	add	r3, r7
 800ee80:	9309      	str	r3, [sp, #36]	; 0x24
 800ee82:	e767      	b.n	800ed54 <_vfiprintf_r+0x94>
 800ee84:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee88:	460c      	mov	r4, r1
 800ee8a:	2001      	movs	r0, #1
 800ee8c:	e7a5      	b.n	800edda <_vfiprintf_r+0x11a>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	3401      	adds	r4, #1
 800ee92:	9305      	str	r3, [sp, #20]
 800ee94:	4619      	mov	r1, r3
 800ee96:	f04f 0c0a 	mov.w	ip, #10
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eea0:	3a30      	subs	r2, #48	; 0x30
 800eea2:	2a09      	cmp	r2, #9
 800eea4:	d903      	bls.n	800eeae <_vfiprintf_r+0x1ee>
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d0c5      	beq.n	800ee36 <_vfiprintf_r+0x176>
 800eeaa:	9105      	str	r1, [sp, #20]
 800eeac:	e7c3      	b.n	800ee36 <_vfiprintf_r+0x176>
 800eeae:	fb0c 2101 	mla	r1, ip, r1, r2
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	e7f0      	b.n	800ee9a <_vfiprintf_r+0x1da>
 800eeb8:	ab03      	add	r3, sp, #12
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	462a      	mov	r2, r5
 800eebe:	4b16      	ldr	r3, [pc, #88]	; (800ef18 <_vfiprintf_r+0x258>)
 800eec0:	a904      	add	r1, sp, #16
 800eec2:	4630      	mov	r0, r6
 800eec4:	f3af 8000 	nop.w
 800eec8:	4607      	mov	r7, r0
 800eeca:	1c78      	adds	r0, r7, #1
 800eecc:	d1d6      	bne.n	800ee7c <_vfiprintf_r+0x1bc>
 800eece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eed0:	07d9      	lsls	r1, r3, #31
 800eed2:	d405      	bmi.n	800eee0 <_vfiprintf_r+0x220>
 800eed4:	89ab      	ldrh	r3, [r5, #12]
 800eed6:	059a      	lsls	r2, r3, #22
 800eed8:	d402      	bmi.n	800eee0 <_vfiprintf_r+0x220>
 800eeda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eedc:	f7ff f812 	bl	800df04 <__retarget_lock_release_recursive>
 800eee0:	89ab      	ldrh	r3, [r5, #12]
 800eee2:	065b      	lsls	r3, r3, #25
 800eee4:	f53f af12 	bmi.w	800ed0c <_vfiprintf_r+0x4c>
 800eee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eeea:	e711      	b.n	800ed10 <_vfiprintf_r+0x50>
 800eeec:	ab03      	add	r3, sp, #12
 800eeee:	9300      	str	r3, [sp, #0]
 800eef0:	462a      	mov	r2, r5
 800eef2:	4b09      	ldr	r3, [pc, #36]	; (800ef18 <_vfiprintf_r+0x258>)
 800eef4:	a904      	add	r1, sp, #16
 800eef6:	4630      	mov	r0, r6
 800eef8:	f000 f880 	bl	800effc <_printf_i>
 800eefc:	e7e4      	b.n	800eec8 <_vfiprintf_r+0x208>
 800eefe:	bf00      	nop
 800ef00:	080149f4 	.word	0x080149f4
 800ef04:	08014a14 	.word	0x08014a14
 800ef08:	080149d4 	.word	0x080149d4
 800ef0c:	08014c2c 	.word	0x08014c2c
 800ef10:	08014c36 	.word	0x08014c36
 800ef14:	00000000 	.word	0x00000000
 800ef18:	0800ec9b 	.word	0x0800ec9b
 800ef1c:	08014c32 	.word	0x08014c32

0800ef20 <_printf_common>:
 800ef20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef24:	4616      	mov	r6, r2
 800ef26:	4699      	mov	r9, r3
 800ef28:	688a      	ldr	r2, [r1, #8]
 800ef2a:	690b      	ldr	r3, [r1, #16]
 800ef2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef30:	4293      	cmp	r3, r2
 800ef32:	bfb8      	it	lt
 800ef34:	4613      	movlt	r3, r2
 800ef36:	6033      	str	r3, [r6, #0]
 800ef38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef3c:	4607      	mov	r7, r0
 800ef3e:	460c      	mov	r4, r1
 800ef40:	b10a      	cbz	r2, 800ef46 <_printf_common+0x26>
 800ef42:	3301      	adds	r3, #1
 800ef44:	6033      	str	r3, [r6, #0]
 800ef46:	6823      	ldr	r3, [r4, #0]
 800ef48:	0699      	lsls	r1, r3, #26
 800ef4a:	bf42      	ittt	mi
 800ef4c:	6833      	ldrmi	r3, [r6, #0]
 800ef4e:	3302      	addmi	r3, #2
 800ef50:	6033      	strmi	r3, [r6, #0]
 800ef52:	6825      	ldr	r5, [r4, #0]
 800ef54:	f015 0506 	ands.w	r5, r5, #6
 800ef58:	d106      	bne.n	800ef68 <_printf_common+0x48>
 800ef5a:	f104 0a19 	add.w	sl, r4, #25
 800ef5e:	68e3      	ldr	r3, [r4, #12]
 800ef60:	6832      	ldr	r2, [r6, #0]
 800ef62:	1a9b      	subs	r3, r3, r2
 800ef64:	42ab      	cmp	r3, r5
 800ef66:	dc26      	bgt.n	800efb6 <_printf_common+0x96>
 800ef68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef6c:	1e13      	subs	r3, r2, #0
 800ef6e:	6822      	ldr	r2, [r4, #0]
 800ef70:	bf18      	it	ne
 800ef72:	2301      	movne	r3, #1
 800ef74:	0692      	lsls	r2, r2, #26
 800ef76:	d42b      	bmi.n	800efd0 <_printf_common+0xb0>
 800ef78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef7c:	4649      	mov	r1, r9
 800ef7e:	4638      	mov	r0, r7
 800ef80:	47c0      	blx	r8
 800ef82:	3001      	adds	r0, #1
 800ef84:	d01e      	beq.n	800efc4 <_printf_common+0xa4>
 800ef86:	6823      	ldr	r3, [r4, #0]
 800ef88:	68e5      	ldr	r5, [r4, #12]
 800ef8a:	6832      	ldr	r2, [r6, #0]
 800ef8c:	f003 0306 	and.w	r3, r3, #6
 800ef90:	2b04      	cmp	r3, #4
 800ef92:	bf08      	it	eq
 800ef94:	1aad      	subeq	r5, r5, r2
 800ef96:	68a3      	ldr	r3, [r4, #8]
 800ef98:	6922      	ldr	r2, [r4, #16]
 800ef9a:	bf0c      	ite	eq
 800ef9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efa0:	2500      	movne	r5, #0
 800efa2:	4293      	cmp	r3, r2
 800efa4:	bfc4      	itt	gt
 800efa6:	1a9b      	subgt	r3, r3, r2
 800efa8:	18ed      	addgt	r5, r5, r3
 800efaa:	2600      	movs	r6, #0
 800efac:	341a      	adds	r4, #26
 800efae:	42b5      	cmp	r5, r6
 800efb0:	d11a      	bne.n	800efe8 <_printf_common+0xc8>
 800efb2:	2000      	movs	r0, #0
 800efb4:	e008      	b.n	800efc8 <_printf_common+0xa8>
 800efb6:	2301      	movs	r3, #1
 800efb8:	4652      	mov	r2, sl
 800efba:	4649      	mov	r1, r9
 800efbc:	4638      	mov	r0, r7
 800efbe:	47c0      	blx	r8
 800efc0:	3001      	adds	r0, #1
 800efc2:	d103      	bne.n	800efcc <_printf_common+0xac>
 800efc4:	f04f 30ff 	mov.w	r0, #4294967295
 800efc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efcc:	3501      	adds	r5, #1
 800efce:	e7c6      	b.n	800ef5e <_printf_common+0x3e>
 800efd0:	18e1      	adds	r1, r4, r3
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	2030      	movs	r0, #48	; 0x30
 800efd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800efda:	4422      	add	r2, r4
 800efdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800efe4:	3302      	adds	r3, #2
 800efe6:	e7c7      	b.n	800ef78 <_printf_common+0x58>
 800efe8:	2301      	movs	r3, #1
 800efea:	4622      	mov	r2, r4
 800efec:	4649      	mov	r1, r9
 800efee:	4638      	mov	r0, r7
 800eff0:	47c0      	blx	r8
 800eff2:	3001      	adds	r0, #1
 800eff4:	d0e6      	beq.n	800efc4 <_printf_common+0xa4>
 800eff6:	3601      	adds	r6, #1
 800eff8:	e7d9      	b.n	800efae <_printf_common+0x8e>
	...

0800effc <_printf_i>:
 800effc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f000:	7e0f      	ldrb	r7, [r1, #24]
 800f002:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f004:	2f78      	cmp	r7, #120	; 0x78
 800f006:	4691      	mov	r9, r2
 800f008:	4680      	mov	r8, r0
 800f00a:	460c      	mov	r4, r1
 800f00c:	469a      	mov	sl, r3
 800f00e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f012:	d807      	bhi.n	800f024 <_printf_i+0x28>
 800f014:	2f62      	cmp	r7, #98	; 0x62
 800f016:	d80a      	bhi.n	800f02e <_printf_i+0x32>
 800f018:	2f00      	cmp	r7, #0
 800f01a:	f000 80d8 	beq.w	800f1ce <_printf_i+0x1d2>
 800f01e:	2f58      	cmp	r7, #88	; 0x58
 800f020:	f000 80a3 	beq.w	800f16a <_printf_i+0x16e>
 800f024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f028:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f02c:	e03a      	b.n	800f0a4 <_printf_i+0xa8>
 800f02e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f032:	2b15      	cmp	r3, #21
 800f034:	d8f6      	bhi.n	800f024 <_printf_i+0x28>
 800f036:	a101      	add	r1, pc, #4	; (adr r1, 800f03c <_printf_i+0x40>)
 800f038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f03c:	0800f095 	.word	0x0800f095
 800f040:	0800f0a9 	.word	0x0800f0a9
 800f044:	0800f025 	.word	0x0800f025
 800f048:	0800f025 	.word	0x0800f025
 800f04c:	0800f025 	.word	0x0800f025
 800f050:	0800f025 	.word	0x0800f025
 800f054:	0800f0a9 	.word	0x0800f0a9
 800f058:	0800f025 	.word	0x0800f025
 800f05c:	0800f025 	.word	0x0800f025
 800f060:	0800f025 	.word	0x0800f025
 800f064:	0800f025 	.word	0x0800f025
 800f068:	0800f1b5 	.word	0x0800f1b5
 800f06c:	0800f0d9 	.word	0x0800f0d9
 800f070:	0800f197 	.word	0x0800f197
 800f074:	0800f025 	.word	0x0800f025
 800f078:	0800f025 	.word	0x0800f025
 800f07c:	0800f1d7 	.word	0x0800f1d7
 800f080:	0800f025 	.word	0x0800f025
 800f084:	0800f0d9 	.word	0x0800f0d9
 800f088:	0800f025 	.word	0x0800f025
 800f08c:	0800f025 	.word	0x0800f025
 800f090:	0800f19f 	.word	0x0800f19f
 800f094:	682b      	ldr	r3, [r5, #0]
 800f096:	1d1a      	adds	r2, r3, #4
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	602a      	str	r2, [r5, #0]
 800f09c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	e0a3      	b.n	800f1f0 <_printf_i+0x1f4>
 800f0a8:	6820      	ldr	r0, [r4, #0]
 800f0aa:	6829      	ldr	r1, [r5, #0]
 800f0ac:	0606      	lsls	r6, r0, #24
 800f0ae:	f101 0304 	add.w	r3, r1, #4
 800f0b2:	d50a      	bpl.n	800f0ca <_printf_i+0xce>
 800f0b4:	680e      	ldr	r6, [r1, #0]
 800f0b6:	602b      	str	r3, [r5, #0]
 800f0b8:	2e00      	cmp	r6, #0
 800f0ba:	da03      	bge.n	800f0c4 <_printf_i+0xc8>
 800f0bc:	232d      	movs	r3, #45	; 0x2d
 800f0be:	4276      	negs	r6, r6
 800f0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0c4:	485e      	ldr	r0, [pc, #376]	; (800f240 <_printf_i+0x244>)
 800f0c6:	230a      	movs	r3, #10
 800f0c8:	e019      	b.n	800f0fe <_printf_i+0x102>
 800f0ca:	680e      	ldr	r6, [r1, #0]
 800f0cc:	602b      	str	r3, [r5, #0]
 800f0ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f0d2:	bf18      	it	ne
 800f0d4:	b236      	sxthne	r6, r6
 800f0d6:	e7ef      	b.n	800f0b8 <_printf_i+0xbc>
 800f0d8:	682b      	ldr	r3, [r5, #0]
 800f0da:	6820      	ldr	r0, [r4, #0]
 800f0dc:	1d19      	adds	r1, r3, #4
 800f0de:	6029      	str	r1, [r5, #0]
 800f0e0:	0601      	lsls	r1, r0, #24
 800f0e2:	d501      	bpl.n	800f0e8 <_printf_i+0xec>
 800f0e4:	681e      	ldr	r6, [r3, #0]
 800f0e6:	e002      	b.n	800f0ee <_printf_i+0xf2>
 800f0e8:	0646      	lsls	r6, r0, #25
 800f0ea:	d5fb      	bpl.n	800f0e4 <_printf_i+0xe8>
 800f0ec:	881e      	ldrh	r6, [r3, #0]
 800f0ee:	4854      	ldr	r0, [pc, #336]	; (800f240 <_printf_i+0x244>)
 800f0f0:	2f6f      	cmp	r7, #111	; 0x6f
 800f0f2:	bf0c      	ite	eq
 800f0f4:	2308      	moveq	r3, #8
 800f0f6:	230a      	movne	r3, #10
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0fe:	6865      	ldr	r5, [r4, #4]
 800f100:	60a5      	str	r5, [r4, #8]
 800f102:	2d00      	cmp	r5, #0
 800f104:	bfa2      	ittt	ge
 800f106:	6821      	ldrge	r1, [r4, #0]
 800f108:	f021 0104 	bicge.w	r1, r1, #4
 800f10c:	6021      	strge	r1, [r4, #0]
 800f10e:	b90e      	cbnz	r6, 800f114 <_printf_i+0x118>
 800f110:	2d00      	cmp	r5, #0
 800f112:	d04d      	beq.n	800f1b0 <_printf_i+0x1b4>
 800f114:	4615      	mov	r5, r2
 800f116:	fbb6 f1f3 	udiv	r1, r6, r3
 800f11a:	fb03 6711 	mls	r7, r3, r1, r6
 800f11e:	5dc7      	ldrb	r7, [r0, r7]
 800f120:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f124:	4637      	mov	r7, r6
 800f126:	42bb      	cmp	r3, r7
 800f128:	460e      	mov	r6, r1
 800f12a:	d9f4      	bls.n	800f116 <_printf_i+0x11a>
 800f12c:	2b08      	cmp	r3, #8
 800f12e:	d10b      	bne.n	800f148 <_printf_i+0x14c>
 800f130:	6823      	ldr	r3, [r4, #0]
 800f132:	07de      	lsls	r6, r3, #31
 800f134:	d508      	bpl.n	800f148 <_printf_i+0x14c>
 800f136:	6923      	ldr	r3, [r4, #16]
 800f138:	6861      	ldr	r1, [r4, #4]
 800f13a:	4299      	cmp	r1, r3
 800f13c:	bfde      	ittt	le
 800f13e:	2330      	movle	r3, #48	; 0x30
 800f140:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f144:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f148:	1b52      	subs	r2, r2, r5
 800f14a:	6122      	str	r2, [r4, #16]
 800f14c:	f8cd a000 	str.w	sl, [sp]
 800f150:	464b      	mov	r3, r9
 800f152:	aa03      	add	r2, sp, #12
 800f154:	4621      	mov	r1, r4
 800f156:	4640      	mov	r0, r8
 800f158:	f7ff fee2 	bl	800ef20 <_printf_common>
 800f15c:	3001      	adds	r0, #1
 800f15e:	d14c      	bne.n	800f1fa <_printf_i+0x1fe>
 800f160:	f04f 30ff 	mov.w	r0, #4294967295
 800f164:	b004      	add	sp, #16
 800f166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f16a:	4835      	ldr	r0, [pc, #212]	; (800f240 <_printf_i+0x244>)
 800f16c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f170:	6829      	ldr	r1, [r5, #0]
 800f172:	6823      	ldr	r3, [r4, #0]
 800f174:	f851 6b04 	ldr.w	r6, [r1], #4
 800f178:	6029      	str	r1, [r5, #0]
 800f17a:	061d      	lsls	r5, r3, #24
 800f17c:	d514      	bpl.n	800f1a8 <_printf_i+0x1ac>
 800f17e:	07df      	lsls	r7, r3, #31
 800f180:	bf44      	itt	mi
 800f182:	f043 0320 	orrmi.w	r3, r3, #32
 800f186:	6023      	strmi	r3, [r4, #0]
 800f188:	b91e      	cbnz	r6, 800f192 <_printf_i+0x196>
 800f18a:	6823      	ldr	r3, [r4, #0]
 800f18c:	f023 0320 	bic.w	r3, r3, #32
 800f190:	6023      	str	r3, [r4, #0]
 800f192:	2310      	movs	r3, #16
 800f194:	e7b0      	b.n	800f0f8 <_printf_i+0xfc>
 800f196:	6823      	ldr	r3, [r4, #0]
 800f198:	f043 0320 	orr.w	r3, r3, #32
 800f19c:	6023      	str	r3, [r4, #0]
 800f19e:	2378      	movs	r3, #120	; 0x78
 800f1a0:	4828      	ldr	r0, [pc, #160]	; (800f244 <_printf_i+0x248>)
 800f1a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f1a6:	e7e3      	b.n	800f170 <_printf_i+0x174>
 800f1a8:	0659      	lsls	r1, r3, #25
 800f1aa:	bf48      	it	mi
 800f1ac:	b2b6      	uxthmi	r6, r6
 800f1ae:	e7e6      	b.n	800f17e <_printf_i+0x182>
 800f1b0:	4615      	mov	r5, r2
 800f1b2:	e7bb      	b.n	800f12c <_printf_i+0x130>
 800f1b4:	682b      	ldr	r3, [r5, #0]
 800f1b6:	6826      	ldr	r6, [r4, #0]
 800f1b8:	6961      	ldr	r1, [r4, #20]
 800f1ba:	1d18      	adds	r0, r3, #4
 800f1bc:	6028      	str	r0, [r5, #0]
 800f1be:	0635      	lsls	r5, r6, #24
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	d501      	bpl.n	800f1c8 <_printf_i+0x1cc>
 800f1c4:	6019      	str	r1, [r3, #0]
 800f1c6:	e002      	b.n	800f1ce <_printf_i+0x1d2>
 800f1c8:	0670      	lsls	r0, r6, #25
 800f1ca:	d5fb      	bpl.n	800f1c4 <_printf_i+0x1c8>
 800f1cc:	8019      	strh	r1, [r3, #0]
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	6123      	str	r3, [r4, #16]
 800f1d2:	4615      	mov	r5, r2
 800f1d4:	e7ba      	b.n	800f14c <_printf_i+0x150>
 800f1d6:	682b      	ldr	r3, [r5, #0]
 800f1d8:	1d1a      	adds	r2, r3, #4
 800f1da:	602a      	str	r2, [r5, #0]
 800f1dc:	681d      	ldr	r5, [r3, #0]
 800f1de:	6862      	ldr	r2, [r4, #4]
 800f1e0:	2100      	movs	r1, #0
 800f1e2:	4628      	mov	r0, r5
 800f1e4:	f7f1 f894 	bl	8000310 <memchr>
 800f1e8:	b108      	cbz	r0, 800f1ee <_printf_i+0x1f2>
 800f1ea:	1b40      	subs	r0, r0, r5
 800f1ec:	6060      	str	r0, [r4, #4]
 800f1ee:	6863      	ldr	r3, [r4, #4]
 800f1f0:	6123      	str	r3, [r4, #16]
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1f8:	e7a8      	b.n	800f14c <_printf_i+0x150>
 800f1fa:	6923      	ldr	r3, [r4, #16]
 800f1fc:	462a      	mov	r2, r5
 800f1fe:	4649      	mov	r1, r9
 800f200:	4640      	mov	r0, r8
 800f202:	47d0      	blx	sl
 800f204:	3001      	adds	r0, #1
 800f206:	d0ab      	beq.n	800f160 <_printf_i+0x164>
 800f208:	6823      	ldr	r3, [r4, #0]
 800f20a:	079b      	lsls	r3, r3, #30
 800f20c:	d413      	bmi.n	800f236 <_printf_i+0x23a>
 800f20e:	68e0      	ldr	r0, [r4, #12]
 800f210:	9b03      	ldr	r3, [sp, #12]
 800f212:	4298      	cmp	r0, r3
 800f214:	bfb8      	it	lt
 800f216:	4618      	movlt	r0, r3
 800f218:	e7a4      	b.n	800f164 <_printf_i+0x168>
 800f21a:	2301      	movs	r3, #1
 800f21c:	4632      	mov	r2, r6
 800f21e:	4649      	mov	r1, r9
 800f220:	4640      	mov	r0, r8
 800f222:	47d0      	blx	sl
 800f224:	3001      	adds	r0, #1
 800f226:	d09b      	beq.n	800f160 <_printf_i+0x164>
 800f228:	3501      	adds	r5, #1
 800f22a:	68e3      	ldr	r3, [r4, #12]
 800f22c:	9903      	ldr	r1, [sp, #12]
 800f22e:	1a5b      	subs	r3, r3, r1
 800f230:	42ab      	cmp	r3, r5
 800f232:	dcf2      	bgt.n	800f21a <_printf_i+0x21e>
 800f234:	e7eb      	b.n	800f20e <_printf_i+0x212>
 800f236:	2500      	movs	r5, #0
 800f238:	f104 0619 	add.w	r6, r4, #25
 800f23c:	e7f5      	b.n	800f22a <_printf_i+0x22e>
 800f23e:	bf00      	nop
 800f240:	08014c3d 	.word	0x08014c3d
 800f244:	08014c4e 	.word	0x08014c4e

0800f248 <nan>:
 800f248:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f250 <nan+0x8>
 800f24c:	4770      	bx	lr
 800f24e:	bf00      	nop
 800f250:	00000000 	.word	0x00000000
 800f254:	7ff80000 	.word	0x7ff80000

0800f258 <nanf>:
 800f258:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f260 <nanf+0x8>
 800f25c:	4770      	bx	lr
 800f25e:	bf00      	nop
 800f260:	7fc00000 	.word	0x7fc00000

0800f264 <__sread>:
 800f264:	b510      	push	{r4, lr}
 800f266:	460c      	mov	r4, r1
 800f268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f26c:	f000 f914 	bl	800f498 <_read_r>
 800f270:	2800      	cmp	r0, #0
 800f272:	bfab      	itete	ge
 800f274:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f276:	89a3      	ldrhlt	r3, [r4, #12]
 800f278:	181b      	addge	r3, r3, r0
 800f27a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f27e:	bfac      	ite	ge
 800f280:	6563      	strge	r3, [r4, #84]	; 0x54
 800f282:	81a3      	strhlt	r3, [r4, #12]
 800f284:	bd10      	pop	{r4, pc}

0800f286 <__swrite>:
 800f286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f28a:	461f      	mov	r7, r3
 800f28c:	898b      	ldrh	r3, [r1, #12]
 800f28e:	05db      	lsls	r3, r3, #23
 800f290:	4605      	mov	r5, r0
 800f292:	460c      	mov	r4, r1
 800f294:	4616      	mov	r6, r2
 800f296:	d505      	bpl.n	800f2a4 <__swrite+0x1e>
 800f298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f29c:	2302      	movs	r3, #2
 800f29e:	2200      	movs	r2, #0
 800f2a0:	f000 f8b8 	bl	800f414 <_lseek_r>
 800f2a4:	89a3      	ldrh	r3, [r4, #12]
 800f2a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2ae:	81a3      	strh	r3, [r4, #12]
 800f2b0:	4632      	mov	r2, r6
 800f2b2:	463b      	mov	r3, r7
 800f2b4:	4628      	mov	r0, r5
 800f2b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ba:	f000 b837 	b.w	800f32c <_write_r>

0800f2be <__sseek>:
 800f2be:	b510      	push	{r4, lr}
 800f2c0:	460c      	mov	r4, r1
 800f2c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2c6:	f000 f8a5 	bl	800f414 <_lseek_r>
 800f2ca:	1c43      	adds	r3, r0, #1
 800f2cc:	89a3      	ldrh	r3, [r4, #12]
 800f2ce:	bf15      	itete	ne
 800f2d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2da:	81a3      	strheq	r3, [r4, #12]
 800f2dc:	bf18      	it	ne
 800f2de:	81a3      	strhne	r3, [r4, #12]
 800f2e0:	bd10      	pop	{r4, pc}

0800f2e2 <__sclose>:
 800f2e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2e6:	f000 b851 	b.w	800f38c <_close_r>

0800f2ea <strncmp>:
 800f2ea:	b510      	push	{r4, lr}
 800f2ec:	b17a      	cbz	r2, 800f30e <strncmp+0x24>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	3901      	subs	r1, #1
 800f2f2:	1884      	adds	r4, r0, r2
 800f2f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f2f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f2fc:	4290      	cmp	r0, r2
 800f2fe:	d101      	bne.n	800f304 <strncmp+0x1a>
 800f300:	42a3      	cmp	r3, r4
 800f302:	d101      	bne.n	800f308 <strncmp+0x1e>
 800f304:	1a80      	subs	r0, r0, r2
 800f306:	bd10      	pop	{r4, pc}
 800f308:	2800      	cmp	r0, #0
 800f30a:	d1f3      	bne.n	800f2f4 <strncmp+0xa>
 800f30c:	e7fa      	b.n	800f304 <strncmp+0x1a>
 800f30e:	4610      	mov	r0, r2
 800f310:	e7f9      	b.n	800f306 <strncmp+0x1c>

0800f312 <__ascii_wctomb>:
 800f312:	b149      	cbz	r1, 800f328 <__ascii_wctomb+0x16>
 800f314:	2aff      	cmp	r2, #255	; 0xff
 800f316:	bf85      	ittet	hi
 800f318:	238a      	movhi	r3, #138	; 0x8a
 800f31a:	6003      	strhi	r3, [r0, #0]
 800f31c:	700a      	strbls	r2, [r1, #0]
 800f31e:	f04f 30ff 	movhi.w	r0, #4294967295
 800f322:	bf98      	it	ls
 800f324:	2001      	movls	r0, #1
 800f326:	4770      	bx	lr
 800f328:	4608      	mov	r0, r1
 800f32a:	4770      	bx	lr

0800f32c <_write_r>:
 800f32c:	b538      	push	{r3, r4, r5, lr}
 800f32e:	4d07      	ldr	r5, [pc, #28]	; (800f34c <_write_r+0x20>)
 800f330:	4604      	mov	r4, r0
 800f332:	4608      	mov	r0, r1
 800f334:	4611      	mov	r1, r2
 800f336:	2200      	movs	r2, #0
 800f338:	602a      	str	r2, [r5, #0]
 800f33a:	461a      	mov	r2, r3
 800f33c:	f7f1 feb8 	bl	80010b0 <_write>
 800f340:	1c43      	adds	r3, r0, #1
 800f342:	d102      	bne.n	800f34a <_write_r+0x1e>
 800f344:	682b      	ldr	r3, [r5, #0]
 800f346:	b103      	cbz	r3, 800f34a <_write_r+0x1e>
 800f348:	6023      	str	r3, [r4, #0]
 800f34a:	bd38      	pop	{r3, r4, r5, pc}
 800f34c:	24000cc0 	.word	0x24000cc0

0800f350 <__assert_func>:
 800f350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f352:	4614      	mov	r4, r2
 800f354:	461a      	mov	r2, r3
 800f356:	4b09      	ldr	r3, [pc, #36]	; (800f37c <__assert_func+0x2c>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	4605      	mov	r5, r0
 800f35c:	68d8      	ldr	r0, [r3, #12]
 800f35e:	b14c      	cbz	r4, 800f374 <__assert_func+0x24>
 800f360:	4b07      	ldr	r3, [pc, #28]	; (800f380 <__assert_func+0x30>)
 800f362:	9100      	str	r1, [sp, #0]
 800f364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f368:	4906      	ldr	r1, [pc, #24]	; (800f384 <__assert_func+0x34>)
 800f36a:	462b      	mov	r3, r5
 800f36c:	f000 f81e 	bl	800f3ac <fiprintf>
 800f370:	f000 f8a4 	bl	800f4bc <abort>
 800f374:	4b04      	ldr	r3, [pc, #16]	; (800f388 <__assert_func+0x38>)
 800f376:	461c      	mov	r4, r3
 800f378:	e7f3      	b.n	800f362 <__assert_func+0x12>
 800f37a:	bf00      	nop
 800f37c:	24000030 	.word	0x24000030
 800f380:	08014c5f 	.word	0x08014c5f
 800f384:	08014c6c 	.word	0x08014c6c
 800f388:	0800fcae 	.word	0x0800fcae

0800f38c <_close_r>:
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	4d06      	ldr	r5, [pc, #24]	; (800f3a8 <_close_r+0x1c>)
 800f390:	2300      	movs	r3, #0
 800f392:	4604      	mov	r4, r0
 800f394:	4608      	mov	r0, r1
 800f396:	602b      	str	r3, [r5, #0]
 800f398:	f7f1 fe98 	bl	80010cc <_close>
 800f39c:	1c43      	adds	r3, r0, #1
 800f39e:	d102      	bne.n	800f3a6 <_close_r+0x1a>
 800f3a0:	682b      	ldr	r3, [r5, #0]
 800f3a2:	b103      	cbz	r3, 800f3a6 <_close_r+0x1a>
 800f3a4:	6023      	str	r3, [r4, #0]
 800f3a6:	bd38      	pop	{r3, r4, r5, pc}
 800f3a8:	24000cc0 	.word	0x24000cc0

0800f3ac <fiprintf>:
 800f3ac:	b40e      	push	{r1, r2, r3}
 800f3ae:	b503      	push	{r0, r1, lr}
 800f3b0:	4601      	mov	r1, r0
 800f3b2:	ab03      	add	r3, sp, #12
 800f3b4:	4805      	ldr	r0, [pc, #20]	; (800f3cc <fiprintf+0x20>)
 800f3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3ba:	6800      	ldr	r0, [r0, #0]
 800f3bc:	9301      	str	r3, [sp, #4]
 800f3be:	f7ff fc7f 	bl	800ecc0 <_vfiprintf_r>
 800f3c2:	b002      	add	sp, #8
 800f3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3c8:	b003      	add	sp, #12
 800f3ca:	4770      	bx	lr
 800f3cc:	24000030 	.word	0x24000030

0800f3d0 <_fstat_r>:
 800f3d0:	b538      	push	{r3, r4, r5, lr}
 800f3d2:	4d07      	ldr	r5, [pc, #28]	; (800f3f0 <_fstat_r+0x20>)
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	4608      	mov	r0, r1
 800f3da:	4611      	mov	r1, r2
 800f3dc:	602b      	str	r3, [r5, #0]
 800f3de:	f7f1 fe78 	bl	80010d2 <_fstat>
 800f3e2:	1c43      	adds	r3, r0, #1
 800f3e4:	d102      	bne.n	800f3ec <_fstat_r+0x1c>
 800f3e6:	682b      	ldr	r3, [r5, #0]
 800f3e8:	b103      	cbz	r3, 800f3ec <_fstat_r+0x1c>
 800f3ea:	6023      	str	r3, [r4, #0]
 800f3ec:	bd38      	pop	{r3, r4, r5, pc}
 800f3ee:	bf00      	nop
 800f3f0:	24000cc0 	.word	0x24000cc0

0800f3f4 <_isatty_r>:
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	4d06      	ldr	r5, [pc, #24]	; (800f410 <_isatty_r+0x1c>)
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	4608      	mov	r0, r1
 800f3fe:	602b      	str	r3, [r5, #0]
 800f400:	f7f1 fe6c 	bl	80010dc <_isatty>
 800f404:	1c43      	adds	r3, r0, #1
 800f406:	d102      	bne.n	800f40e <_isatty_r+0x1a>
 800f408:	682b      	ldr	r3, [r5, #0]
 800f40a:	b103      	cbz	r3, 800f40e <_isatty_r+0x1a>
 800f40c:	6023      	str	r3, [r4, #0]
 800f40e:	bd38      	pop	{r3, r4, r5, pc}
 800f410:	24000cc0 	.word	0x24000cc0

0800f414 <_lseek_r>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	4d07      	ldr	r5, [pc, #28]	; (800f434 <_lseek_r+0x20>)
 800f418:	4604      	mov	r4, r0
 800f41a:	4608      	mov	r0, r1
 800f41c:	4611      	mov	r1, r2
 800f41e:	2200      	movs	r2, #0
 800f420:	602a      	str	r2, [r5, #0]
 800f422:	461a      	mov	r2, r3
 800f424:	f7f1 fe5c 	bl	80010e0 <_lseek>
 800f428:	1c43      	adds	r3, r0, #1
 800f42a:	d102      	bne.n	800f432 <_lseek_r+0x1e>
 800f42c:	682b      	ldr	r3, [r5, #0]
 800f42e:	b103      	cbz	r3, 800f432 <_lseek_r+0x1e>
 800f430:	6023      	str	r3, [r4, #0]
 800f432:	bd38      	pop	{r3, r4, r5, pc}
 800f434:	24000cc0 	.word	0x24000cc0

0800f438 <_realloc_r>:
 800f438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f43c:	4680      	mov	r8, r0
 800f43e:	4614      	mov	r4, r2
 800f440:	460e      	mov	r6, r1
 800f442:	b921      	cbnz	r1, 800f44e <_realloc_r+0x16>
 800f444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f448:	4611      	mov	r1, r2
 800f44a:	f7fc bf5f 	b.w	800c30c <_malloc_r>
 800f44e:	b92a      	cbnz	r2, 800f45c <_realloc_r+0x24>
 800f450:	f7fc fef0 	bl	800c234 <_free_r>
 800f454:	4625      	mov	r5, r4
 800f456:	4628      	mov	r0, r5
 800f458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f45c:	f000 f835 	bl	800f4ca <_malloc_usable_size_r>
 800f460:	4284      	cmp	r4, r0
 800f462:	4607      	mov	r7, r0
 800f464:	d802      	bhi.n	800f46c <_realloc_r+0x34>
 800f466:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f46a:	d812      	bhi.n	800f492 <_realloc_r+0x5a>
 800f46c:	4621      	mov	r1, r4
 800f46e:	4640      	mov	r0, r8
 800f470:	f7fc ff4c 	bl	800c30c <_malloc_r>
 800f474:	4605      	mov	r5, r0
 800f476:	2800      	cmp	r0, #0
 800f478:	d0ed      	beq.n	800f456 <_realloc_r+0x1e>
 800f47a:	42bc      	cmp	r4, r7
 800f47c:	4622      	mov	r2, r4
 800f47e:	4631      	mov	r1, r6
 800f480:	bf28      	it	cs
 800f482:	463a      	movcs	r2, r7
 800f484:	f7fc fea6 	bl	800c1d4 <memcpy>
 800f488:	4631      	mov	r1, r6
 800f48a:	4640      	mov	r0, r8
 800f48c:	f7fc fed2 	bl	800c234 <_free_r>
 800f490:	e7e1      	b.n	800f456 <_realloc_r+0x1e>
 800f492:	4635      	mov	r5, r6
 800f494:	e7df      	b.n	800f456 <_realloc_r+0x1e>
	...

0800f498 <_read_r>:
 800f498:	b538      	push	{r3, r4, r5, lr}
 800f49a:	4d07      	ldr	r5, [pc, #28]	; (800f4b8 <_read_r+0x20>)
 800f49c:	4604      	mov	r4, r0
 800f49e:	4608      	mov	r0, r1
 800f4a0:	4611      	mov	r1, r2
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	602a      	str	r2, [r5, #0]
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	f7f1 fdf4 	bl	8001094 <_read>
 800f4ac:	1c43      	adds	r3, r0, #1
 800f4ae:	d102      	bne.n	800f4b6 <_read_r+0x1e>
 800f4b0:	682b      	ldr	r3, [r5, #0]
 800f4b2:	b103      	cbz	r3, 800f4b6 <_read_r+0x1e>
 800f4b4:	6023      	str	r3, [r4, #0]
 800f4b6:	bd38      	pop	{r3, r4, r5, pc}
 800f4b8:	24000cc0 	.word	0x24000cc0

0800f4bc <abort>:
 800f4bc:	b508      	push	{r3, lr}
 800f4be:	2006      	movs	r0, #6
 800f4c0:	f000 f834 	bl	800f52c <raise>
 800f4c4:	2001      	movs	r0, #1
 800f4c6:	f7f1 fddf 	bl	8001088 <_exit>

0800f4ca <_malloc_usable_size_r>:
 800f4ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4ce:	1f18      	subs	r0, r3, #4
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	bfbc      	itt	lt
 800f4d4:	580b      	ldrlt	r3, [r1, r0]
 800f4d6:	18c0      	addlt	r0, r0, r3
 800f4d8:	4770      	bx	lr

0800f4da <_raise_r>:
 800f4da:	291f      	cmp	r1, #31
 800f4dc:	b538      	push	{r3, r4, r5, lr}
 800f4de:	4604      	mov	r4, r0
 800f4e0:	460d      	mov	r5, r1
 800f4e2:	d904      	bls.n	800f4ee <_raise_r+0x14>
 800f4e4:	2316      	movs	r3, #22
 800f4e6:	6003      	str	r3, [r0, #0]
 800f4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ec:	bd38      	pop	{r3, r4, r5, pc}
 800f4ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f4f0:	b112      	cbz	r2, 800f4f8 <_raise_r+0x1e>
 800f4f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4f6:	b94b      	cbnz	r3, 800f50c <_raise_r+0x32>
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	f000 f831 	bl	800f560 <_getpid_r>
 800f4fe:	462a      	mov	r2, r5
 800f500:	4601      	mov	r1, r0
 800f502:	4620      	mov	r0, r4
 800f504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f508:	f000 b818 	b.w	800f53c <_kill_r>
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d00a      	beq.n	800f526 <_raise_r+0x4c>
 800f510:	1c59      	adds	r1, r3, #1
 800f512:	d103      	bne.n	800f51c <_raise_r+0x42>
 800f514:	2316      	movs	r3, #22
 800f516:	6003      	str	r3, [r0, #0]
 800f518:	2001      	movs	r0, #1
 800f51a:	e7e7      	b.n	800f4ec <_raise_r+0x12>
 800f51c:	2400      	movs	r4, #0
 800f51e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f522:	4628      	mov	r0, r5
 800f524:	4798      	blx	r3
 800f526:	2000      	movs	r0, #0
 800f528:	e7e0      	b.n	800f4ec <_raise_r+0x12>
	...

0800f52c <raise>:
 800f52c:	4b02      	ldr	r3, [pc, #8]	; (800f538 <raise+0xc>)
 800f52e:	4601      	mov	r1, r0
 800f530:	6818      	ldr	r0, [r3, #0]
 800f532:	f7ff bfd2 	b.w	800f4da <_raise_r>
 800f536:	bf00      	nop
 800f538:	24000030 	.word	0x24000030

0800f53c <_kill_r>:
 800f53c:	b538      	push	{r3, r4, r5, lr}
 800f53e:	4d07      	ldr	r5, [pc, #28]	; (800f55c <_kill_r+0x20>)
 800f540:	2300      	movs	r3, #0
 800f542:	4604      	mov	r4, r0
 800f544:	4608      	mov	r0, r1
 800f546:	4611      	mov	r1, r2
 800f548:	602b      	str	r3, [r5, #0]
 800f54a:	f7f1 fd95 	bl	8001078 <_kill>
 800f54e:	1c43      	adds	r3, r0, #1
 800f550:	d102      	bne.n	800f558 <_kill_r+0x1c>
 800f552:	682b      	ldr	r3, [r5, #0]
 800f554:	b103      	cbz	r3, 800f558 <_kill_r+0x1c>
 800f556:	6023      	str	r3, [r4, #0]
 800f558:	bd38      	pop	{r3, r4, r5, pc}
 800f55a:	bf00      	nop
 800f55c:	24000cc0 	.word	0x24000cc0

0800f560 <_getpid_r>:
 800f560:	f7f1 bd88 	b.w	8001074 <_getpid>

0800f564 <_init>:
 800f564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f566:	bf00      	nop
 800f568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f56a:	bc08      	pop	{r3}
 800f56c:	469e      	mov	lr, r3
 800f56e:	4770      	bx	lr

0800f570 <_fini>:
 800f570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f572:	bf00      	nop
 800f574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f576:	bc08      	pop	{r3}
 800f578:	469e      	mov	lr, r3
 800f57a:	4770      	bx	lr
